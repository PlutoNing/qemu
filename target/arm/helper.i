# 0 "../../../target/arm/helper.c"
# 1 "/home/paulning/study/qemu/bin/debug/native//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "../../../target/arm/helper.c"
# 9 "../../../target/arm/helper.c"
# 1 "/home/paulning/study/qemu/include/qemu/osdep.h" 1
# 34 "/home/paulning/study/qemu/include/qemu/osdep.h"
# 1 "./config-host.h" 1

# 35 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "./arm-linux-user-config-target.h" 1

# 37 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 45 "/home/paulning/study/qemu/include/qemu/osdep.h"

# 1 "/home/paulning/study/qemu/include/qemu/compiler.h" 1
# 54 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 108 "/home/paulning/study/qemu/include/qemu/osdep.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 103 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 109 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 145 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 214 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 329 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 3 4
typedef int wchar_t;
# 425 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld
      __attribute__((__aligned__(__alignof__(long double))));
# 436 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 3 4
} max_align_t;
# 110 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdbool.h" 1 3 4
# 111 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 394 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 395 "/usr/include/features.h" 2 3 4
# 502 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 576 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 577 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 578 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 503 "/usr/include/features.h" 2 3 4
# 526 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 527 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;

typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;

typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;

typedef long int __quad_t;
typedef unsigned long int __u_quad_t;

typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4

typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct {
  int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;

typedef int __clockid_t;

typedef void *__timer_t;

typedef long int __blksize_t;

typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;

typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;

typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __fsword_t;

typedef long int __ssize_t;

typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;

typedef __off64_t __loff_t;
typedef char *__caddr_t;

typedef long int __intptr_t;

typedef unsigned int __socklen_t;

typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stdint-least.h" 3 4
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;

typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
# 42 "/usr/include/stdint.h" 2 3 4

typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 60 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 76 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;

typedef unsigned long int uintptr_t;
# 90 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stdint.h" 2 3 4
# 112 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4

typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;

typedef __loff_t loff_t;

typedef __ino64_t ino_t;

typedef __ino64_t ino64_t;

typedef __dev_t dev_t;

typedef __gid_t gid_t;

typedef __mode_t mode_t;

typedef __nlink_t nlink_t;

typedef __uid_t uid_t;

typedef __off64_t off_t;

typedef __off64_t off64_t;

typedef __pid_t pid_t;

typedef __id_t id_t;

typedef __ssize_t ssize_t;

typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;

typedef __key_t key_t;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4

typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4

typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4

typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

typedef __useconds_t useconds_t;

typedef __suseconds_t suseconds_t;

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;

typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;

typedef int register_t __attribute__((__mode__(__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t __bswap_16(__uint16_t __bsx) {

  return __builtin_bswap16(__bsx);
}

static __inline __uint32_t __bswap_32(__uint32_t __bsx) {

  return __builtin_bswap32(__bsx);
}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t __bswap_64(__uint64_t __bsx) {

  return __builtin_bswap64(__bsx);
}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t __uint16_identity(__uint16_t __x) { return __x; }

static __inline __uint32_t __uint32_identity(__uint32_t __x) { return __x; }

static __inline __uint64_t __uint64_identity(__uint64_t __x) { return __x; }
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4

typedef struct {
  unsigned long int __val[(1024 / (8 * sizeof(unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4

typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4

struct timeval {

  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec {

  __time_t tv_sec;

  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct {

  __fd_mask fds_bits[1024 / (8 * (int)sizeof(__fd_mask))];

} fd_set;

typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select(int __nfds, fd_set *__restrict __readfds,
                  fd_set *__restrict __writefds, fd_set *__restrict __exceptfds,
                  struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect(int __nfds, fd_set *__restrict __readfds,
                   fd_set *__restrict __writefds,
                   fd_set *__restrict __exceptfds,
                   const struct timespec *__restrict __timeout,
                   const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

typedef __blksize_t blksize_t;
# 205 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt_t;

typedef __fsblkcnt64_t fsblkcnt_t;

typedef __fsfilcnt64_t fsfilcnt_t;

typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;

# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union {
  __extension__ unsigned long long int __value64;
  struct {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

typedef struct __pthread_internal_list {
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist {
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s {
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;

  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t {
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;

  unsigned char __pad1[7];

  unsigned long int __pad2;

  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

struct __pthread_cond_s {
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2];
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct {
  int __data;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4

typedef unsigned long int pthread_t;

typedef union {
  char __size[4];
  int __align;
} pthread_mutexattr_t;

typedef union {
  char __size[4];
  int __align;
} pthread_condattr_t;

typedef unsigned int pthread_key_t;

typedef int pthread_once_t;

union pthread_attr_t {
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;

typedef union {
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union {
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union {
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union {
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;

typedef volatile int pthread_spinlock_t;

typedef union {
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union {
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 113 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 56 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 57 "/usr/include/stdlib.h" 2 3 4

typedef struct {
  int quot;
  int rem;
} div_t;

typedef struct {
  long int quot;
  long int rem;
} ldiv_t;

__extension__ typedef struct {
  long long int quot;
  long long int rem;
} lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max(void)
    __attribute__((__nothrow__, __leaf__));

extern double atof(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));

extern int atoi(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));

extern long int atol(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));

__extension__ extern long long int atoll(const char *__nptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern double strtod(const char *__restrict __nptr, char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern float strtof(const char *__restrict __nptr, char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long double strtold(const char *__restrict __nptr,
                           char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32(const char *__restrict __nptr,
                         char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern _Float64 strtof64(const char *__restrict __nptr,
                         char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern _Float128 strtof128(const char *__restrict __nptr,
                           char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern _Float32x strtof32x(const char *__restrict __nptr,
                           char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern _Float64x strtof64x(const char *__restrict __nptr,
                           char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol(const char *__restrict __nptr,
                       char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern unsigned long int strtoul(const char *__restrict __nptr,
                                 char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoq(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern unsigned long long int
strtouq(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoll(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern unsigned long long int
strtoull(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int strtol(const char *__restrict __nptr,
                       char **__restrict __endptr,
                       int __base) __asm__(""
                                           "__isoc23_strtol")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));
extern unsigned long int strtoul(const char *__restrict __nptr,
                                 char **__restrict __endptr,
                                 int __base) __asm__(""
                                                     "__isoc23_strtoul")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoq(const char *__restrict __nptr, char **__restrict __endptr,
       int __base) __asm__(""
                           "__isoc23_strtoll")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));
__extension__ extern unsigned long long int
strtouq(const char *__restrict __nptr, char **__restrict __endptr,
        int __base) __asm__(""
                            "__isoc23_strtoull")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoll(const char *__restrict __nptr, char **__restrict __endptr,
        int __base) __asm__(""
                            "__isoc23_strtoll")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));
__extension__ extern unsigned long long int
strtoull(const char *__restrict __nptr, char **__restrict __endptr,
         int __base) __asm__(""
                             "__isoc23_strtoull")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd(char *__dest, size_t __size, const char *__format,
                    double __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfromf(char *__dest, size_t __size, const char *__format,
                    float __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfroml(char *__dest, size_t __size, const char *__format,
                    long double __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32(char *__dest, size_t __size, const char *__format,
                      _Float32 __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfromf64(char *__dest, size_t __size, const char *__format,
                      _Float64 __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfromf128(char *__dest, size_t __size, const char *__format,
                       _Float128 __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfromf32x(char *__dest, size_t __size, const char *__format,
                       _Float32x __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));

extern int strfromf64x(char *__dest, size_t __size, const char *__format,
                       _Float64x __f) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3)));
# 338 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct {

  struct __locale_data *__locales[13];

  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;

  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 339 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l(const char *__restrict __nptr,
                         char **__restrict __endptr, int __base, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 4)));

extern unsigned long int strtoul_l(const char *__restrict __nptr,
                                   char **__restrict __endptr, int __base,
                                   locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 4)));

__extension__ extern long long int strtoll_l(const char *__restrict __nptr,
                                             char **__restrict __endptr,
                                             int __base, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 4)));

__extension__ extern unsigned long long int
strtoull_l(const char *__restrict __nptr, char **__restrict __endptr,
           int __base, locale_t __loc) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 4)));

extern long int strtol_l(const char *__restrict __nptr,
                         char **__restrict __endptr, int __base,
                         locale_t __loc) __asm__(""
                                                 "__isoc23_strtol_l")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 4)));
extern unsigned long int strtoul_l(const char *__restrict __nptr,
                                   char **__restrict __endptr, int __base,
                                   locale_t __loc) __asm__(""
                                                           "__isoc23_strtoul_l")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 4)));
__extension__ extern long long int
strtoll_l(const char *__restrict __nptr, char **__restrict __endptr, int __base,
          locale_t __loc) __asm__(""
                                  "__isoc23_strtoll_l")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 4)));
__extension__ extern unsigned long long int
strtoull_l(const char *__restrict __nptr, char **__restrict __endptr,
           int __base, locale_t __loc) __asm__(""
                                               "__isoc23_strtoull_l")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l(const char *__restrict __nptr,
                       char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern float strtof_l(const char *__restrict __nptr, char **__restrict __endptr,
                      locale_t __loc) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 3)));

extern long double strtold_l(const char *__restrict __nptr,
                             char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l(const char *__restrict __nptr,
                           char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern _Float64 strtof64_l(const char *__restrict __nptr,
                           char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern _Float128 strtof128_l(const char *__restrict __nptr,
                             char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern _Float32x strtof32x_l(const char *__restrict __nptr,
                             char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern _Float64x strtof64x_l(const char *__restrict __nptr,
                             char **__restrict __endptr, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a(long int __n) __attribute__((__nothrow__, __leaf__));

extern long int a64l(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));
# 521 "/usr/include/stdlib.h" 3 4
extern long int random(void) __attribute__((__nothrow__, __leaf__));

extern void srandom(unsigned int __seed) __attribute__((__nothrow__, __leaf__));

extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern char *setstate(char *__statebuf) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

struct random_data {
  int32_t *fptr;
  int32_t *rptr;
  int32_t *state;
  int rand_type;
  int rand_deg;
  int rand_sep;
  int32_t *end_ptr;
};

extern int random_r(struct random_data *__restrict __buf,
                    int32_t *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int srandom_r(unsigned int __seed, struct random_data *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int initstate_r(unsigned int __seed, char *__restrict __statebuf,
                       size_t __statelen, struct random_data *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 4)));

extern int setstate_r(char *__restrict __statebuf,
                      struct random_data *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int rand(void) __attribute__((__nothrow__, __leaf__));

extern void srand(unsigned int __seed) __attribute__((__nothrow__, __leaf__));

extern int rand_r(unsigned int *__seed) __attribute__((__nothrow__, __leaf__));

extern double drand48(void) __attribute__((__nothrow__, __leaf__));
extern double erand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int lrand48(void) __attribute__((__nothrow__, __leaf__));
extern long int nrand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int mrand48(void) __attribute__((__nothrow__, __leaf__));
extern long int jrand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void srand48(long int __seedval) __attribute__((__nothrow__, __leaf__));
extern unsigned short int *seed48(unsigned short int __seed16v[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern void lcong48(unsigned short int __param[7])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

struct drand48_data {
  unsigned short int __x[3];
  unsigned short int __old_x[3];
  unsigned short int __c;
  unsigned short int __init;
  __extension__ unsigned long long int __a;
};

extern int drand48_r(struct drand48_data *__restrict __buffer,
                     double *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int erand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     double *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int lrand48_r(struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int nrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int mrand48_r(struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int jrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int srand48_r(long int __seedval, struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int seed48_r(unsigned short int __seed16v[3],
                    struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int lcong48_r(unsigned short int __param[7],
                     struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern __uint32_t arc4random(void) __attribute__((__nothrow__, __leaf__));

extern void arc4random_buf(void *__buf, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern __uint32_t arc4random_uniform(__uint32_t __upper_bound)
    __attribute__((__nothrow__, __leaf__));

extern void *malloc(size_t __size) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__alloc_size__(1)));

extern void *calloc(size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__alloc_size__(1, 2)));

extern void *realloc(void *__ptr, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));

extern void free(void *__ptr) __attribute__((__nothrow__, __leaf__));

extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__))
    __attribute__((__alloc_size__(2, 3)))
    __attribute__((__malloc__(__builtin_free, 1)));

extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__malloc__(reallocarray, 1)));

# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern void *alloca(size_t __size) __attribute__((__nothrow__, __leaf__));

# 707 "/usr/include/stdlib.h" 2 3 4

extern void *valloc(size_t __size) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__alloc_size__(1)));

extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void *aligned_alloc(size_t __alignment, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__alloc_align__(1))) __attribute__((__alloc_size__(2)));

extern void abort(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern int atexit(void (*__func)(void)) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int at_quick_exit(void (*__func)(void))
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int on_exit(void (*__func)(int __status, void *__arg), void *__arg)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern void quick_exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern void _Exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern char *getenv(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern char *secure_getenv(const char *__name)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int putenv(char *__string) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int setenv(const char *__name, const char *__value, int __replace)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int unsetenv(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int clearenv(void) __attribute__((__nothrow__, __leaf__));
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp(char *__template) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
# 830 "/usr/include/stdlib.h" 3 4
extern int mkstemp(char *__template) __asm__(""
                                             "mkstemp64")
    __attribute__((__nonnull__(1)));

extern int mkstemp64(char *__template) __attribute__((__nonnull__(1)));
# 852 "/usr/include/stdlib.h" 3 4
extern int mkstemps(char *__template, int __suffixlen) __asm__(""
                                                               "mkstemps64")
    __attribute__((__nonnull__(1)));

extern int mkstemps64(char *__template, int __suffixlen)
    __attribute__((__nonnull__(1)));
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp(char *__template) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
# 884 "/usr/include/stdlib.h" 3 4
extern int mkostemp(char *__template, int __flags) __asm__(""
                                                           "mkostemp64")
    __attribute__((__nonnull__(1)));

extern int mkostemp64(char *__template, int __flags)
    __attribute__((__nonnull__(1)));
# 905 "/usr/include/stdlib.h" 3 4
extern int mkostemps(char *__template, int __suffixlen,
                     int __flags) __asm__(""
                                          "mkostemps64")

    __attribute__((__nonnull__(1)));

extern int mkostemps64(char *__template, int __suffixlen, int __flags)
    __attribute__((__nonnull__(1)));
# 923 "/usr/include/stdlib.h" 3 4
extern int system(const char *__command);

extern char *canonicalize_file_name(const char *__name)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__malloc__)) __attribute__((__malloc__(__builtin_free, 1)));
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath(const char *__restrict __name,
                      char *__restrict __resolved)
    __attribute__((__nothrow__, __leaf__));

typedef int (*__compar_fn_t)(const void *, const void *);

typedef __compar_fn_t comparison_fn_t;

typedef int (*__compar_d_fn_t)(const void *, const void *, void *);

extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
                     size_t __size, __compar_fn_t __compar)
    __attribute__((__nonnull__(1, 2, 5)));

extern void qsort(void *__base, size_t __nmemb, size_t __size,
                  __compar_fn_t __compar) __attribute__((__nonnull__(1, 4)));

extern void qsort_r(void *__base, size_t __nmemb, size_t __size,
                    __compar_d_fn_t __compar, void *__arg)
    __attribute__((__nonnull__(1, 4)));

extern int abs(int __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern long int labs(long int __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

__extension__ extern long long int llabs(long long int __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern div_t div(int __numer, int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern ldiv_t ldiv(long int __numer, long int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

__extension__ extern lldiv_t lldiv(long long int __numer, long long int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3, 4)));

extern char *fcvt(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3, 4)));

extern char *gcvt(double __value, int __ndigit, char *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)));

extern char *qecvt(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3, 4)));
extern char *qfcvt(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3, 4)));
extern char *qgcvt(long double __value, int __ndigit, char *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)));

extern int ecvt_r(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));
extern int fcvt_r(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));

extern int qecvt_r(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));

extern int mblen(const char *__s, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern int mbtowc(wchar_t *__restrict __pwc, const char *__restrict __s,
                  size_t __n) __attribute__((__nothrow__, __leaf__));

extern int wctomb(char *__s, wchar_t __wchar)
    __attribute__((__nothrow__, __leaf__));

extern size_t mbstowcs(wchar_t *__restrict __pwcs, const char *__restrict __s,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__read_only__, 2)));

extern size_t wcstombs(char *__restrict __s, const wchar_t *__restrict __pwcs,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__write_only__, 1, 3)))
__attribute__((__access__(__read_only__, 2)));

extern int rpmatch(const char *__response)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt(char **__restrict __optionp,
                     char *const *__restrict __tokens,
                     char **__restrict __valuep)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(1, 2, 3)));

extern int posix_openpt(int __oflag);

extern int grantpt(int __fd) __attribute__((__nothrow__, __leaf__));

extern int unlockpt(int __fd) __attribute__((__nothrow__, __leaf__));

extern char *ptsname(int __fd) __attribute__((__nothrow__, __leaf__));

extern int ptsname_r(int __fd, char *__buf, size_t __buflen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));

extern int getpt(void);

extern int getloadavg(double __loadavg[], int __nelem)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1156 "/usr/include/stdlib.h" 2 3 4
# 1167 "/usr/include/stdlib.h" 3 4

# 114 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 29 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct {
  int __count;
  union {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4

typedef struct _G_fpos_t {
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t {
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4

struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4

struct _IO_FILE;

typedef struct _IO_FILE FILE;
# 44 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;

typedef void _IO_lock_t;

struct _IO_FILE {
  int _flags;

  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;

  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;

  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof(int) - 4 * sizeof(void *) - sizeof(size_t)];
};
# 45 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t(void *__cookie, char *__buf,
                                         size_t __nbytes);

typedef __ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
                                          size_t __nbytes);

typedef int cookie_seek_function_t(void *__cookie, __off64_t *__pos, int __w);

typedef int cookie_close_function_t(void *__cookie);

typedef struct _IO_cookie_io_functions_t {
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 48 "/usr/include/stdio.h" 2 3 4
# 87 "/usr/include/stdio.h" 3 4
typedef __fpos64_t fpos_t;

typedef __fpos64_t fpos64_t;
# 129 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 130 "/usr/include/stdio.h" 2 3 4
# 149 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;

extern int remove(const char *__filename)
    __attribute__((__nothrow__, __leaf__));

extern int rename(const char *__old, const char *__new)
    __attribute__((__nothrow__, __leaf__));

extern int renameat(int __oldfd, const char *__old, int __newfd,
                    const char *__new) __attribute__((__nothrow__, __leaf__));
# 176 "/usr/include/stdio.h" 3 4
extern int renameat2(int __oldfd, const char *__old, int __newfd,
                     const char *__new, unsigned int __flags)
    __attribute__((__nothrow__, __leaf__));

extern int fclose(FILE *__stream) __attribute__((__nonnull__(1)));
# 198 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile(void) __asm__(""
                                   "tmpfile64") __attribute__((__malloc__))
__attribute__((__malloc__(fclose, 1)));

extern FILE *tmpfile64(void) __attribute__((__malloc__))
__attribute__((__malloc__(fclose, 1)));

extern char *tmpnam(char[20]) __attribute__((__nothrow__, __leaf__));

extern char *tmpnam_r(char __s[20]) __attribute__((__nothrow__, __leaf__));
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam(const char *__dir, const char *__pfx)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(__builtin_free, 1)));

extern int fflush(FILE *__stream);
# 245 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked(FILE *__stream);
# 255 "/usr/include/stdio.h" 3 4
extern int fcloseall(void);
# 276 "/usr/include/stdio.h" 3 4
extern FILE *fopen(const char *__restrict __filename,
                   const char *__restrict __modes) __asm__(""
                                                           "fopen64")

    __attribute__((__malloc__)) __attribute__((__malloc__(fclose, 1)));
extern FILE *freopen(const char *__restrict __filename,
                     const char *__restrict __modes,
                     FILE *__restrict __stream) __asm__(""
                                                        "freopen64")

    __attribute__((__nonnull__(3)));

extern FILE *fopen64(const char *__restrict __filename,
                     const char *__restrict __modes) __attribute__((__malloc__))
__attribute__((__malloc__(fclose, 1)));
extern FILE *freopen64(const char *__restrict __filename,
                       const char *__restrict __modes,
                       FILE *__restrict __stream)
    __attribute__((__nonnull__(3)));

extern FILE *fdopen(int __fd, const char *__modes)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)));

extern FILE *fopencookie(void *__restrict __magic_cookie,
                         const char *__restrict __modes,
                         cookie_io_functions_t __io_funcs)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)));

extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)));

extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)));
# 334 "/usr/include/stdio.h" 3 4
extern void setbuf(FILE *__restrict __stream, char *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int setvbuf(FILE *__restrict __stream, char *__restrict __buf,
                   int __modes, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void setbuffer(FILE *__restrict __stream, char *__restrict __buf,
                      size_t __size) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern void setlinebuf(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int fprintf(FILE *__restrict __stream, const char *__restrict __format,
                   ...) __attribute__((__nonnull__(1)));

extern int printf(const char *__restrict __format, ...);

extern int sprintf(char *__restrict __s, const char *__restrict __format, ...)
    __attribute__((__nothrow__));

extern int vfprintf(FILE *__restrict __s, const char *__restrict __format,
                    __gnuc_va_list __arg) __attribute__((__nonnull__(1)));

extern int vprintf(const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf(char *__restrict __s, const char *__restrict __format,
                    __gnuc_va_list __arg) __attribute__((__nothrow__));

extern int snprintf(char *__restrict __s, size_t __maxlen,
                    const char *__restrict __format, ...)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 4)));

extern int vsnprintf(char *__restrict __s, size_t __maxlen,
                     const char *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 0)));

extern int vasprintf(char **__restrict __ptr, const char *__restrict __f,
                     __gnuc_va_list __arg) __attribute__((__nothrow__))
__attribute__((__format__(__printf__, 2, 0)));
extern int __asprintf(char **__restrict __ptr, const char *__restrict __fmt,
                      ...) __attribute__((__nothrow__))
__attribute__((__format__(__printf__, 2, 3)));
extern int asprintf(char **__restrict __ptr, const char *__restrict __fmt, ...)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 2, 3)));

extern int vdprintf(int __fd, const char *__restrict __fmt,
                    __gnuc_va_list __arg)
    __attribute__((__format__(__printf__, 2, 0)));
extern int dprintf(int __fd, const char *__restrict __fmt, ...)
    __attribute__((__format__(__printf__, 2, 3)));

extern int fscanf(FILE *__restrict __stream, const char *__restrict __format,
                  ...) __attribute__((__nonnull__(1)));

extern int scanf(const char *__restrict __format, ...);

extern int sscanf(const char *__restrict __s, const char *__restrict __format,
                  ...) __attribute__((__nothrow__, __leaf__));
# 442 "/usr/include/stdio.h" 3 4
extern int fscanf(FILE *__restrict __stream, const char *__restrict __format,
                  ...) __asm__(""
                               "__isoc23_fscanf")

    __attribute__((__nonnull__(1)));
extern int scanf(const char *__restrict __format,
                 ...) __asm__(""
                              "__isoc23_scanf");
extern int sscanf(const char *__restrict __s, const char *__restrict __format,
                  ...) __asm__(""
                               "__isoc23_sscanf")
    __attribute__((__nothrow__, __leaf__))

    ;
# 490 "/usr/include/stdio.h" 3 4
extern int vfscanf(FILE *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg)
    __attribute__((__format__(__scanf__, 2, 0)))
    __attribute__((__nonnull__(1)));

extern int vscanf(const char *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__format__(__scanf__, 1, 0)));

extern int vsscanf(const char *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __attribute__((__nothrow__, __leaf__))
__attribute__((__format__(__scanf__, 2, 0)));

extern int vfscanf(FILE *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __asm__(""
                                                 "__isoc23_vfscanf")

    __attribute__((__format__(__scanf__, 2, 0)))
    __attribute__((__nonnull__(1)));
extern int vscanf(const char *__restrict __format,
                  __gnuc_va_list __arg) __asm__(""
                                                "__isoc23_vscanf")

    __attribute__((__format__(__scanf__, 1, 0)));
extern int vsscanf(const char *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __asm__(""
                                                 "__isoc23_vsscanf")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__format__(__scanf__, 2, 0)));
# 575 "/usr/include/stdio.h" 3 4
extern int fgetc(FILE *__stream) __attribute__((__nonnull__(1)));
extern int getc(FILE *__stream) __attribute__((__nonnull__(1)));

extern int getchar(void);

extern int getc_unlocked(FILE *__stream) __attribute__((__nonnull__(1)));
extern int getchar_unlocked(void);
# 600 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked(FILE *__stream) __attribute__((__nonnull__(1)));
# 611 "/usr/include/stdio.h" 3 4
extern int fputc(int __c, FILE *__stream) __attribute__((__nonnull__(2)));
extern int putc(int __c, FILE *__stream) __attribute__((__nonnull__(2)));

extern int putchar(int __c);
# 627 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked(int __c, FILE *__stream)
    __attribute__((__nonnull__(2)));

extern int putc_unlocked(int __c, FILE *__stream)
    __attribute__((__nonnull__(2)));
extern int putchar_unlocked(int __c);

extern int getw(FILE *__stream) __attribute__((__nonnull__(1)));

extern int putw(int __w, FILE *__stream) __attribute__((__nonnull__(2)));

extern char *fgets(char *__restrict __s, int __n, FILE *__restrict __stream)
    __attribute__((__access__(__write_only__, 1, 2)))
    __attribute__((__nonnull__(3)));
# 677 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked(char *__restrict __s, int __n,
                            FILE *__restrict __stream)
    __attribute__((__access__(__write_only__, 1, 2)))
    __attribute__((__nonnull__(3)));
# 694 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim(char **__restrict __lineptr, size_t *__restrict __n,
                            int __delimiter, FILE *__restrict __stream)
    __attribute__((__nonnull__(4)));
extern __ssize_t getdelim(char **__restrict __lineptr, size_t *__restrict __n,
                          int __delimiter, FILE *__restrict __stream)
    __attribute__((__nonnull__(4)));

extern __ssize_t getline(char **__restrict __lineptr, size_t *__restrict __n,
                         FILE *__restrict __stream)
    __attribute__((__nonnull__(3)));

extern int fputs(const char *__restrict __s, FILE *__restrict __stream)
    __attribute__((__nonnull__(2)));

extern int puts(const char *__s);

extern int ungetc(int __c, FILE *__stream) __attribute__((__nonnull__(2)));

extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n,
                    FILE *__restrict __stream) __attribute__((__nonnull__(4)));

extern size_t fwrite(const void *__restrict __ptr, size_t __size, size_t __n,
                     FILE *__restrict __s) __attribute__((__nonnull__(4)));
# 755 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked(const char *__restrict __s, FILE *__restrict __stream)
    __attribute__((__nonnull__(2)));
# 766 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
                             FILE *__restrict __stream)
    __attribute__((__nonnull__(4)));
extern size_t fwrite_unlocked(const void *__restrict __ptr, size_t __size,
                              size_t __n, FILE *__restrict __stream)
    __attribute__((__nonnull__(4)));

extern int fseek(FILE *__stream, long int __off, int __whence)
    __attribute__((__nonnull__(1)));

extern long int ftell(FILE *__stream) __attribute__((__nonnull__(1)));

extern void rewind(FILE *__stream) __attribute__((__nonnull__(1)));
# 812 "/usr/include/stdio.h" 3 4
extern int fseeko(FILE *__stream, __off64_t __off,
                  int __whence) __asm__(""
                                        "fseeko64")

    __attribute__((__nonnull__(1)));
extern __off64_t ftello(FILE *__stream) __asm__(""
                                                "ftello64")
    __attribute__((__nonnull__(1)));
# 838 "/usr/include/stdio.h" 3 4
extern int fgetpos(FILE *__restrict __stream,
                   fpos_t *__restrict __pos) __asm__(""
                                                     "fgetpos64")

    __attribute__((__nonnull__(1)));
extern int fsetpos(FILE *__stream, const fpos_t *__pos) __asm__(""
                                                                "fsetpos64")

    __attribute__((__nonnull__(1)));

extern int fseeko64(FILE *__stream, __off64_t __off, int __whence)
    __attribute__((__nonnull__(1)));
extern __off64_t ftello64(FILE *__stream) __attribute__((__nonnull__(1)));
extern int fgetpos64(FILE *__restrict __stream, fpos64_t *__restrict __pos)
    __attribute__((__nonnull__(1)));
extern int fsetpos64(FILE *__stream, const fpos64_t *__pos)
    __attribute__((__nonnull__(1)));

extern void clearerr(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int feof(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int ferror(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern void clearerr_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern int feof_unlocked(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
extern int ferror_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void perror(const char *__s) __attribute__((__cold__));

extern int fileno(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int fileno_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 897 "/usr/include/stdio.h" 3 4
extern int pclose(FILE *__stream) __attribute__((__nonnull__(1)));

extern FILE *popen(const char *__command, const char *__modes)
    __attribute__((__malloc__)) __attribute__((__malloc__(pclose, 1)));

extern char *ctermid(char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__write_only__, 1)));

extern char *cuserid(char *__s) __attribute__((__access__(__write_only__, 1)));

struct obstack;

extern int obstack_printf(struct obstack *__restrict __obstack,
                          const char *__restrict __format, ...)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 2, 3)));
extern int obstack_vprintf(struct obstack *__restrict __obstack,
                           const char *__restrict __format,
                           __gnuc_va_list __args) __attribute__((__nothrow__))
__attribute__((__format__(__printf__, 2, 0)));

extern void flockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int ftrylockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern void funlockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
# 959 "/usr/include/stdio.h" 3 4
extern int __uflow(FILE *);
extern int __overflow(FILE *, int);
# 983 "/usr/include/stdio.h" 3 4

# 115 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy(void *__restrict __dest, const void *__restrict __src,
                    size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern void *memmove(void *__dest, const void *__src, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void *memccpy(void *__restrict __dest, const void *__restrict __src,
                     int __c, size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__write_only__, 1, 4)));

extern void *memset(void *__s, int __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int memcmp(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr(const void *__s, int __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
# 120 "/usr/include/string.h" 3 4
extern void *rawmemchr(const void *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
# 133 "/usr/include/string.h" 3 4
extern void *memrchr(const void *__s, int __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)))
    __attribute__((__access__(__read_only__, 1, 3)));

extern char *strcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strncpy(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern char *strcat(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strncat(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern int strcmp(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strncmp(const char *__s1, const char *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strcoll(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern size_t strxfrm(char *__restrict __dest, const char *__restrict __src,
                      size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(2)))
__attribute__((__access__(__write_only__, 1, 3)));

extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2, 3)));

extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n,
                        locale_t __l) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(2, 4)))
__attribute__((__access__(__write_only__, 1, 3)));

extern char *strdup(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__nonnull__(1)));

extern char *strndup(const char *__string, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__nonnull__(1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
# 286 "/usr/include/string.h" 3 4
extern char *strchrnul(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern size_t strcspn(const char *__s, const char *__reject)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern size_t strspn(const char *__s, const char *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk(const char *__s, const char *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr(const char *__haystack, const char *__needle)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern char *strtok(char *__restrict __s, const char *__restrict __delim)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern char *__strtok_r(char *__restrict __s, const char *__restrict __delim,
                        char **__restrict __save_ptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

extern char *strtok_r(char *__restrict __s, const char *__restrict __delim,
                      char **__restrict __save_ptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));
# 380 "/usr/include/string.h" 3 4
extern char *strcasestr(const char *__haystack, const char *__needle)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern void *memmem(const void *__haystack, size_t __haystacklen,
                    const void *__needle, size_t __needlelen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 3)))
    __attribute__((__access__(__read_only__, 1, 2)))
    __attribute__((__access__(__read_only__, 3, 4)));

extern void *__mempcpy(void *__restrict __dest, const void *__restrict __src,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));
extern void *mempcpy(void *__restrict __dest, const void *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern size_t strlen(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));

extern size_t strnlen(const char *__string, size_t __maxlen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern char *strerror(int __errnum) __attribute__((__nothrow__, __leaf__));
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r(int __errnum, char *__buf, size_t __buflen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));

extern const char *strerrordesc_np(int __err)
    __attribute__((__nothrow__, __leaf__));

extern const char *strerrorname_np(int __err)
    __attribute__((__nothrow__, __leaf__));

extern char *strerror_l(int __errnum, locale_t __l)
    __attribute__((__nothrow__, __leaf__));

# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4

extern int bcmp(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern void bcopy(const void *__src, void *__dest, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void bzero(void *__s, size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern int ffs(int __i) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int ffsl(long int __l) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
__extension__ extern int ffsll(long long int __ll)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int strcasecmp(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2, 3)));

extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n,
                         locale_t __loc) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1, 2, 4)));

# 463 "/usr/include/string.h" 2 3 4

extern void explicit_bzero(void *__s, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));

extern char *strsep(char **__restrict __stringp, const char *__restrict __delim)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strsignal(int __sig) __attribute__((__nothrow__, __leaf__));

extern const char *sigabbrev_np(int __sig)
    __attribute__((__nothrow__, __leaf__));

extern const char *sigdescr_np(int __sig)
    __attribute__((__nothrow__, __leaf__));

extern char *__stpcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern char *stpcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *__stpncpy(char *__restrict __dest, const char *__restrict __src,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));
extern char *stpncpy(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern size_t strlcpy(char *__restrict __dest, const char *__restrict __src,
                      size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__write_only__, 1, 3)));

extern size_t strlcat(char *__restrict __dest, const char *__restrict __src,
                      size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__read_write__, 1, 3)));

extern int strverscmp(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern char *strfry(char *__string) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern void *memfrob(void *__s, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__read_write__, 1, 2)));
# 540 "/usr/include/string.h" 3 4
extern char *basename(const char *__filename)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 552 "/usr/include/string.h" 3 4

# 117 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/usr/include/inttypes.h" 1 3 4
# 34 "/usr/include/inttypes.h" 3 4
typedef int __gwchar_t;
# 327 "/usr/include/inttypes.h" 3 4

typedef struct {
  long int quot;
  long int rem;
} imaxdiv_t;
# 351 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs(intmax_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern intmax_t strtoimax(const char *__restrict __nptr,
                          char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern uintmax_t strtoumax(const char *__restrict __nptr,
                           char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern intmax_t wcstoimax(const __gwchar_t *__restrict __nptr,
                          __gwchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern uintmax_t wcstoumax(const __gwchar_t *__restrict __nptr,
                           __gwchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern intmax_t strtoimax(const char *__restrict __nptr,
                          char **__restrict __endptr,
                          int __base) __asm__(""
                                              "__isoc23_strtoimax")
    __attribute__((__nothrow__, __leaf__))

    ;
extern uintmax_t strtoumax(const char *__restrict __nptr,
                           char **__restrict __endptr,
                           int __base) __asm__(""
                                               "__isoc23_strtoumax")
    __attribute__((__nothrow__, __leaf__))

    ;
extern intmax_t wcstoimax(const __gwchar_t *__restrict __nptr,
                          __gwchar_t **__restrict __endptr,
                          int __base) __asm__(""
                                              "__isoc23_wcstoimax")
    __attribute__((__nothrow__, __leaf__))

    ;
extern uintmax_t wcstoumax(const __gwchar_t *__restrict __nptr,
                           __gwchar_t **__restrict __endptr,
                           int __base) __asm__(""
                                               "__isoc23_wcstoumax")
    __attribute__((__nothrow__, __leaf__))

    ;
# 415 "/usr/include/inttypes.h" 3 4

# 119 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/syslimits.h" 1 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 1 3 4
# 205 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 81 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4

extern long int __sysconf(int __name) __attribute__((__nothrow__, __leaf__));

# 82 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 204 "/usr/include/limits.h" 2 3 4
# 206 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/13/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 2 3 4
# 120 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access(const char *__name, int __type)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int euidaccess(const char *__name, int __type)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int eaccess(const char *__name, int __type)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int execveat(int __fd, const char *__path, char *const __argv[],
                    char *const __envp[], int __flags)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

extern int faccessat(int __fd, const char *__file, int __type, int __flag)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 342 "/usr/include/unistd.h" 3 4
extern __off64_t lseek(int __fd, __off64_t __offset,
                       int __whence) __asm__(""
                                             "lseek64")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence)
    __attribute__((__nothrow__, __leaf__));

extern int close(int __fd);

extern void closefrom(int __lowfd) __attribute__((__nothrow__, __leaf__));

extern ssize_t read(int __fd, void *__buf, size_t __nbytes)
    __attribute__((__access__(__write_only__, 2, 3)));

extern ssize_t write(int __fd, const void *__buf, size_t __n)
    __attribute__((__access__(__read_only__, 2, 3)));
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread(int __fd, void *__buf, size_t __nbytes,
                     __off64_t __offset) __asm__(""
                                                 "pread64")

    __attribute__((__access__(__write_only__, 2, 3)));
extern ssize_t pwrite(int __fd, const void *__buf, size_t __nbytes,
                      __off64_t __offset) __asm__(""
                                                  "pwrite64")

    __attribute__((__access__(__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64(int __fd, void *__buf, size_t __nbytes,
                       __off64_t __offset)
    __attribute__((__access__(__write_only__, 2, 3)));

extern ssize_t pwrite64(int __fd, const void *__buf, size_t __n,
                        __off64_t __offset)
    __attribute__((__access__(__read_only__, 2, 3)));

extern int pipe(int __pipedes[2]) __attribute__((__nothrow__, __leaf__));

extern int pipe2(int __pipedes[2], int __flags)
    __attribute__((__nothrow__, __leaf__));
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm(unsigned int __seconds)
    __attribute__((__nothrow__, __leaf__));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep(unsigned int __seconds);

extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval)
    __attribute__((__nothrow__, __leaf__));

extern int usleep(__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause(void);

extern int chown(const char *__file, __uid_t __owner, __gid_t __group)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int fchown(int __fd, __uid_t __owner, __gid_t __group)
    __attribute__((__nothrow__, __leaf__));

extern int lchown(const char *__file, __uid_t __owner, __gid_t __group)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int fchownat(int __fd, const char *__file, __uid_t __owner,
                    __gid_t __group, int __flag)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int chdir(const char *__path) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int fchdir(int __fd) __attribute__((__nothrow__, __leaf__));
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd(char *__buf, size_t __size)
    __attribute__((__nothrow__, __leaf__));

extern char *get_current_dir_name(void) __attribute__((__nothrow__, __leaf__));

extern char *getwd(char *__buf) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1))) __attribute__((__deprecated__))
__attribute__((__access__(__write_only__, 1)));

extern int dup(int __fd) __attribute__((__nothrow__, __leaf__));

extern int dup2(int __fd, int __fd2) __attribute__((__nothrow__, __leaf__));

extern int dup3(int __fd, int __fd2, int __flags)
    __attribute__((__nothrow__, __leaf__));

extern char **__environ;

extern char **environ;

extern int execve(const char *__path, char *const __argv[],
                  char *const __envp[]) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern int fexecve(int __fd, char *const __argv[], char *const __envp[])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int execv(const char *__path, char *const __argv[])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int execle(const char *__path, const char *__arg, ...)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int execl(const char *__path, const char *__arg, ...)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int execvp(const char *__file, char *const __argv[])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int execlp(const char *__file, const char *__arg, ...)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int execvpe(const char *__file, char *const __argv[],
                   char *const __envp[]) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern int nice(int __inc) __attribute__((__nothrow__, __leaf__));

extern void _exit(int __status) __attribute__((__noreturn__));

# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum {
  _PC_LINK_MAX,

  _PC_MAX_CANON,

  _PC_MAX_INPUT,

  _PC_NAME_MAX,

  _PC_PATH_MAX,

  _PC_PIPE_BUF,

  _PC_CHOWN_RESTRICTED,

  _PC_NO_TRUNC,

  _PC_VDISABLE,

  _PC_SYNC_IO,

  _PC_ASYNC_IO,

  _PC_PRIO_IO,

  _PC_SOCK_MAXBUF,

  _PC_FILESIZEBITS,

  _PC_REC_INCR_XFER_SIZE,

  _PC_REC_MAX_XFER_SIZE,

  _PC_REC_MIN_XFER_SIZE,

  _PC_REC_XFER_ALIGN,

  _PC_ALLOC_SIZE_MIN,

  _PC_SYMLINK_MAX,

  _PC_2_SYMLINKS

};

enum {
  _SC_ARG_MAX,

  _SC_CHILD_MAX,

  _SC_CLK_TCK,

  _SC_NGROUPS_MAX,

  _SC_OPEN_MAX,

  _SC_STREAM_MAX,

  _SC_TZNAME_MAX,

  _SC_JOB_CONTROL,

  _SC_SAVED_IDS,

  _SC_REALTIME_SIGNALS,

  _SC_PRIORITY_SCHEDULING,

  _SC_TIMERS,

  _SC_ASYNCHRONOUS_IO,

  _SC_PRIORITIZED_IO,

  _SC_SYNCHRONIZED_IO,

  _SC_FSYNC,

  _SC_MAPPED_FILES,

  _SC_MEMLOCK,

  _SC_MEMLOCK_RANGE,

  _SC_MEMORY_PROTECTION,

  _SC_MESSAGE_PASSING,

  _SC_SEMAPHORES,

  _SC_SHARED_MEMORY_OBJECTS,

  _SC_AIO_LISTIO_MAX,

  _SC_AIO_MAX,

  _SC_AIO_PRIO_DELTA_MAX,

  _SC_DELAYTIMER_MAX,

  _SC_MQ_OPEN_MAX,

  _SC_MQ_PRIO_MAX,

  _SC_VERSION,

  _SC_PAGESIZE,

  _SC_RTSIG_MAX,

  _SC_SEM_NSEMS_MAX,

  _SC_SEM_VALUE_MAX,

  _SC_SIGQUEUE_MAX,

  _SC_TIMER_MAX,

  _SC_BC_BASE_MAX,

  _SC_BC_DIM_MAX,

  _SC_BC_SCALE_MAX,

  _SC_BC_STRING_MAX,

  _SC_COLL_WEIGHTS_MAX,

  _SC_EQUIV_CLASS_MAX,

  _SC_EXPR_NEST_MAX,

  _SC_LINE_MAX,

  _SC_RE_DUP_MAX,

  _SC_CHARCLASS_NAME_MAX,

  _SC_2_VERSION,

  _SC_2_C_BIND,

  _SC_2_C_DEV,

  _SC_2_FORT_DEV,

  _SC_2_FORT_RUN,

  _SC_2_SW_DEV,

  _SC_2_LOCALEDEF,

  _SC_PII,

  _SC_PII_XTI,

  _SC_PII_SOCKET,

  _SC_PII_INTERNET,

  _SC_PII_OSI,

  _SC_POLL,

  _SC_SELECT,

  _SC_UIO_MAXIOV,

  _SC_IOV_MAX = _SC_UIO_MAXIOV,

  _SC_PII_INTERNET_STREAM,

  _SC_PII_INTERNET_DGRAM,

  _SC_PII_OSI_COTS,

  _SC_PII_OSI_CLTS,

  _SC_PII_OSI_M,

  _SC_T_IOV_MAX,

  _SC_THREADS,

  _SC_THREAD_SAFE_FUNCTIONS,

  _SC_GETGR_R_SIZE_MAX,

  _SC_GETPW_R_SIZE_MAX,

  _SC_LOGIN_NAME_MAX,

  _SC_TTY_NAME_MAX,

  _SC_THREAD_DESTRUCTOR_ITERATIONS,

  _SC_THREAD_KEYS_MAX,

  _SC_THREAD_STACK_MIN,

  _SC_THREAD_THREADS_MAX,

  _SC_THREAD_ATTR_STACKADDR,

  _SC_THREAD_ATTR_STACKSIZE,

  _SC_THREAD_PRIORITY_SCHEDULING,

  _SC_THREAD_PRIO_INHERIT,

  _SC_THREAD_PRIO_PROTECT,

  _SC_THREAD_PROCESS_SHARED,

  _SC_NPROCESSORS_CONF,

  _SC_NPROCESSORS_ONLN,

  _SC_PHYS_PAGES,

  _SC_AVPHYS_PAGES,

  _SC_ATEXIT_MAX,

  _SC_PASS_MAX,

  _SC_XOPEN_VERSION,

  _SC_XOPEN_XCU_VERSION,

  _SC_XOPEN_UNIX,

  _SC_XOPEN_CRYPT,

  _SC_XOPEN_ENH_I18N,

  _SC_XOPEN_SHM,

  _SC_2_CHAR_TERM,

  _SC_2_C_VERSION,

  _SC_2_UPE,

  _SC_XOPEN_XPG2,

  _SC_XOPEN_XPG3,

  _SC_XOPEN_XPG4,

  _SC_CHAR_BIT,

  _SC_CHAR_MAX,

  _SC_CHAR_MIN,

  _SC_INT_MAX,

  _SC_INT_MIN,

  _SC_LONG_BIT,

  _SC_WORD_BIT,

  _SC_MB_LEN_MAX,

  _SC_NZERO,

  _SC_SSIZE_MAX,

  _SC_SCHAR_MAX,

  _SC_SCHAR_MIN,

  _SC_SHRT_MAX,

  _SC_SHRT_MIN,

  _SC_UCHAR_MAX,

  _SC_UINT_MAX,

  _SC_ULONG_MAX,

  _SC_USHRT_MAX,

  _SC_NL_ARGMAX,

  _SC_NL_LANGMAX,

  _SC_NL_MSGMAX,

  _SC_NL_NMAX,

  _SC_NL_SETMAX,

  _SC_NL_TEXTMAX,

  _SC_XBS5_ILP32_OFF32,

  _SC_XBS5_ILP32_OFFBIG,

  _SC_XBS5_LP64_OFF64,

  _SC_XBS5_LPBIG_OFFBIG,

  _SC_XOPEN_LEGACY,

  _SC_XOPEN_REALTIME,

  _SC_XOPEN_REALTIME_THREADS,

  _SC_ADVISORY_INFO,

  _SC_BARRIERS,

  _SC_BASE,

  _SC_C_LANG_SUPPORT,

  _SC_C_LANG_SUPPORT_R,

  _SC_CLOCK_SELECTION,

  _SC_CPUTIME,

  _SC_THREAD_CPUTIME,

  _SC_DEVICE_IO,

  _SC_DEVICE_SPECIFIC,

  _SC_DEVICE_SPECIFIC_R,

  _SC_FD_MGMT,

  _SC_FIFO,

  _SC_PIPE,

  _SC_FILE_ATTRIBUTES,

  _SC_FILE_LOCKING,

  _SC_FILE_SYSTEM,

  _SC_MONOTONIC_CLOCK,

  _SC_MULTI_PROCESS,

  _SC_SINGLE_PROCESS,

  _SC_NETWORKING,

  _SC_READER_WRITER_LOCKS,

  _SC_SPIN_LOCKS,

  _SC_REGEXP,

  _SC_REGEX_VERSION,

  _SC_SHELL,

  _SC_SIGNALS,

  _SC_SPAWN,

  _SC_SPORADIC_SERVER,

  _SC_THREAD_SPORADIC_SERVER,

  _SC_SYSTEM_DATABASE,

  _SC_SYSTEM_DATABASE_R,

  _SC_TIMEOUTS,

  _SC_TYPED_MEMORY_OBJECTS,

  _SC_USER_GROUPS,

  _SC_USER_GROUPS_R,

  _SC_2_PBS,

  _SC_2_PBS_ACCOUNTING,

  _SC_2_PBS_LOCATE,

  _SC_2_PBS_MESSAGE,

  _SC_2_PBS_TRACK,

  _SC_SYMLOOP_MAX,

  _SC_STREAMS,

  _SC_2_PBS_CHECKPOINT,

  _SC_V6_ILP32_OFF32,

  _SC_V6_ILP32_OFFBIG,

  _SC_V6_LP64_OFF64,

  _SC_V6_LPBIG_OFFBIG,

  _SC_HOST_NAME_MAX,

  _SC_TRACE,

  _SC_TRACE_EVENT_FILTER,

  _SC_TRACE_INHERIT,

  _SC_TRACE_LOG,

  _SC_LEVEL1_ICACHE_SIZE,

  _SC_LEVEL1_ICACHE_ASSOC,

  _SC_LEVEL1_ICACHE_LINESIZE,

  _SC_LEVEL1_DCACHE_SIZE,

  _SC_LEVEL1_DCACHE_ASSOC,

  _SC_LEVEL1_DCACHE_LINESIZE,

  _SC_LEVEL2_CACHE_SIZE,

  _SC_LEVEL2_CACHE_ASSOC,

  _SC_LEVEL2_CACHE_LINESIZE,

  _SC_LEVEL3_CACHE_SIZE,

  _SC_LEVEL3_CACHE_ASSOC,

  _SC_LEVEL3_CACHE_LINESIZE,

  _SC_LEVEL4_CACHE_SIZE,

  _SC_LEVEL4_CACHE_ASSOC,

  _SC_LEVEL4_CACHE_LINESIZE,

  _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

  _SC_RAW_SOCKETS,

  _SC_V7_ILP32_OFF32,

  _SC_V7_ILP32_OFFBIG,

  _SC_V7_LP64_OFF64,

  _SC_V7_LPBIG_OFFBIG,

  _SC_SS_REPL_MAX,

  _SC_TRACE_EVENT_NAME_MAX,

  _SC_TRACE_NAME_MAX,

  _SC_TRACE_SYS_MAX,

  _SC_TRACE_USER_EVENT_MAX,

  _SC_XOPEN_STREAMS,

  _SC_THREAD_ROBUST_PRIO_INHERIT,

  _SC_THREAD_ROBUST_PRIO_PROTECT,

  _SC_MINSIGSTKSZ,

  _SC_SIGSTKSZ

};

enum {
  _CS_PATH,

  _CS_V6_WIDTH_RESTRICTED_ENVS,

  _CS_GNU_LIBC_VERSION,

  _CS_GNU_LIBPTHREAD_VERSION,

  _CS_V5_WIDTH_RESTRICTED_ENVS,

  _CS_V7_WIDTH_RESTRICTED_ENVS,

  _CS_LFS_CFLAGS = 1000,

  _CS_LFS_LDFLAGS,

  _CS_LFS_LIBS,

  _CS_LFS_LINTFLAGS,

  _CS_LFS64_CFLAGS,

  _CS_LFS64_LDFLAGS,

  _CS_LFS64_LIBS,

  _CS_LFS64_LINTFLAGS,

  _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

  _CS_XBS5_ILP32_OFF32_LDFLAGS,

  _CS_XBS5_ILP32_OFF32_LIBS,

  _CS_XBS5_ILP32_OFF32_LINTFLAGS,

  _CS_XBS5_ILP32_OFFBIG_CFLAGS,

  _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

  _CS_XBS5_ILP32_OFFBIG_LIBS,

  _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

  _CS_XBS5_LP64_OFF64_CFLAGS,

  _CS_XBS5_LP64_OFF64_LDFLAGS,

  _CS_XBS5_LP64_OFF64_LIBS,

  _CS_XBS5_LP64_OFF64_LINTFLAGS,

  _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

  _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

  _CS_XBS5_LPBIG_OFFBIG_LIBS,

  _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,

  _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

  _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

  _CS_POSIX_V6_ILP32_OFF32_LIBS,

  _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

  _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

  _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

  _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

  _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

  _CS_POSIX_V6_LP64_OFF64_CFLAGS,

  _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

  _CS_POSIX_V6_LP64_OFF64_LIBS,

  _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

  _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

  _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

  _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

  _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,

  _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

  _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

  _CS_POSIX_V7_ILP32_OFF32_LIBS,

  _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

  _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

  _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

  _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

  _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

  _CS_POSIX_V7_LP64_OFF64_CFLAGS,

  _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

  _CS_POSIX_V7_LP64_OFF64_LIBS,

  _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

  _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

  _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

  _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

  _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,

  _CS_V6_ENV,

  _CS_V7_ENV

};
# 631 "/usr/include/unistd.h" 2 3 4

extern long int pathconf(const char *__path, int __name)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int fpathconf(int __fd, int __name)
    __attribute__((__nothrow__, __leaf__));

extern long int sysconf(int __name) __attribute__((__nothrow__, __leaf__));

extern size_t confstr(int __name, char *__buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 2, 3)));

extern __pid_t getpid(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t getppid(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t getpgrp(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t __getpgid(__pid_t __pid) __attribute__((__nothrow__, __leaf__));

extern __pid_t getpgid(__pid_t __pid) __attribute__((__nothrow__, __leaf__));

extern int setpgid(__pid_t __pid, __pid_t __pgid)
    __attribute__((__nothrow__, __leaf__));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t setsid(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t getsid(__pid_t __pid) __attribute__((__nothrow__, __leaf__));

extern __uid_t getuid(void) __attribute__((__nothrow__, __leaf__));

extern __uid_t geteuid(void) __attribute__((__nothrow__, __leaf__));

extern __gid_t getgid(void) __attribute__((__nothrow__, __leaf__));

extern __gid_t getegid(void) __attribute__((__nothrow__, __leaf__));

extern int getgroups(int __size, __gid_t __list[])
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 2, 1)));

extern int group_member(__gid_t __gid) __attribute__((__nothrow__, __leaf__));

extern int setuid(__uid_t __uid) __attribute__((__nothrow__, __leaf__));

extern int setreuid(__uid_t __ruid, __uid_t __euid)
    __attribute__((__nothrow__, __leaf__));

extern int seteuid(__uid_t __uid) __attribute__((__nothrow__, __leaf__));

extern int setgid(__gid_t __gid) __attribute__((__nothrow__, __leaf__));

extern int setregid(__gid_t __rgid, __gid_t __egid)
    __attribute__((__nothrow__, __leaf__));

extern int setegid(__gid_t __gid) __attribute__((__nothrow__, __leaf__));

extern int getresuid(__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
    __attribute__((__nothrow__, __leaf__));

extern int getresgid(__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
    __attribute__((__nothrow__, __leaf__));

extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid)
    __attribute__((__nothrow__, __leaf__));

extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
    __attribute__((__nothrow__, __leaf__));

extern __pid_t fork(void) __attribute__((__nothrow__));

extern __pid_t vfork(void) __attribute__((__nothrow__, __leaf__));

extern __pid_t _Fork(void) __attribute__((__nothrow__, __leaf__));

extern char *ttyname(int __fd) __attribute__((__nothrow__, __leaf__));

extern int ttyname_r(int __fd, char *__buf, size_t __buflen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));

extern int isatty(int __fd) __attribute__((__nothrow__, __leaf__));

extern int ttyslot(void) __attribute__((__nothrow__, __leaf__));

extern int link(const char *__from, const char *__to)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int linkat(int __fromfd, const char *__from, int __tofd,
                  const char *__to, int __flags)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 4)));

extern int symlink(const char *__from, const char *__to)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern ssize_t readlink(const char *__restrict __path, char *__restrict __buf,
                        size_t __len) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__write_only__, 2, 3)));

extern int symlinkat(const char *__from, int __tofd, const char *__to)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern ssize_t readlinkat(int __fd, const char *__restrict __path,
                          char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)))
    __attribute__((__access__(__write_only__, 3, 4)));

extern int unlink(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int unlinkat(int __fd, const char *__name, int __flag)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int rmdir(const char *__path) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern __pid_t tcgetpgrp(int __fd) __attribute__((__nothrow__, __leaf__));

extern int tcsetpgrp(int __fd, __pid_t __pgrp_id)
    __attribute__((__nothrow__, __leaf__));

extern char *getlogin(void);

extern int getlogin_r(char *__name, size_t __name_len)
    __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));

extern int setlogin(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4

extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;

extern int opterr;

extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt(int ___argc, char *const *___argv, const char *__shortopts)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 904 "/usr/include/unistd.h" 2 3 4

extern int gethostname(char *__name, size_t __len)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));

extern int sethostname(const char *__name, size_t __len)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__read_only__, 1, 2)));

extern int sethostid(long int __id) __attribute__((__nothrow__, __leaf__));

extern int getdomainname(char *__name, size_t __len)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));
extern int setdomainname(const char *__name, size_t __len)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__read_only__, 1, 2)));

extern int vhangup(void) __attribute__((__nothrow__, __leaf__));

extern int revoke(const char *__file) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int profil(unsigned short int *__sample_buffer, size_t __size,
                  size_t __offset, unsigned int __scale)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int acct(const char *__name) __attribute__((__nothrow__, __leaf__));

extern char *getusershell(void) __attribute__((__nothrow__, __leaf__));
extern void endusershell(void) __attribute__((__nothrow__, __leaf__));
extern void setusershell(void) __attribute__((__nothrow__, __leaf__));

extern int daemon(int __nochdir, int __noclose)
    __attribute__((__nothrow__, __leaf__));

extern int chroot(const char *__path) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern char *getpass(const char *__prompt) __attribute__((__nonnull__(1)));

extern int fsync(int __fd);

extern int syncfs(int __fd) __attribute__((__nothrow__, __leaf__));

extern long int gethostid(void);

extern void sync(void) __attribute__((__nothrow__, __leaf__));

extern int getpagesize(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int getdtablesize(void) __attribute__((__nothrow__, __leaf__));
# 1030 "/usr/include/unistd.h" 3 4
extern int truncate(const char *__file,
                    __off64_t __length) __asm__(""
                                                "truncate64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1)));

extern int truncate64(const char *__file, __off64_t __length)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 1052 "/usr/include/unistd.h" 3 4
extern int ftruncate(int __fd, __off64_t __length) __asm__(""
                                                           "ftruncate64")
    __attribute__((__nothrow__, __leaf__));

extern int ftruncate64(int __fd, __off64_t __length)
    __attribute__((__nothrow__, __leaf__));
# 1070 "/usr/include/unistd.h" 3 4
extern int brk(void *__addr) __attribute__((__nothrow__, __leaf__));

extern void *sbrk(intptr_t __delta) __attribute__((__nothrow__, __leaf__));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall(long int __sysno, ...)
    __attribute__((__nothrow__, __leaf__));
# 1117 "/usr/include/unistd.h" 3 4
extern int lockf(int __fd, int __cmd, __off64_t __len) __asm__(""
                                                               "lockf64");

extern int lockf64(int __fd, int __cmd, __off64_t __len);
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range(int __infd, __off64_t *__pinoff, int __outfd,
                        __off64_t *__poutoff, size_t __length,
                        unsigned int __flags);

extern int fdatasync(int __fildes);
# 1162 "/usr/include/unistd.h" 3 4
extern char *crypt(const char *__key, const char *__salt)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void swab(const void *__restrict __from, void *__restrict __to,
                 ssize_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__read_only__, 1, 3)))
__attribute__((__access__(__write_only__, 2, 3)));
# 1201 "/usr/include/unistd.h" 3 4
int getentropy(void *__buffer, size_t __length)
    __attribute__((__access__(__write_only__, 1, 2)));
# 1211 "/usr/include/unistd.h" 3 4
extern int close_range(unsigned int __fd, unsigned int __max_fd, int __flags)
    __attribute__((__nothrow__, __leaf__));
# 1221 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid(void) __attribute__((__nothrow__, __leaf__));

# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 2 3 4
# 1222 "/usr/include/unistd.h" 2 3 4

# 123 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex {
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;

  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern int clock_adjtime(__clockid_t __clock_id, struct timex *__utx)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4

# 34 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4

struct tm {
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;

  long int tm_gmtoff;
  const char *tm_zone;
};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4

extern clock_t clock(void) __attribute__((__nothrow__, __leaf__));

extern time_t time(time_t *__timer) __attribute__((__nothrow__, __leaf__));

extern double difftime(time_t __time1, time_t __time0)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern time_t mktime(struct tm *__tp) __attribute__((__nothrow__, __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime(char *__restrict __s, size_t __maxsize,
                       const char *__restrict __format,
                       const struct tm *__restrict __tp)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(1, 3, 4)));

extern char *strptime(const char *__restrict __s, const char *__restrict __fmt,
                      struct tm *__tp) __attribute__((__nothrow__, __leaf__));

extern size_t strftime_l(char *__restrict __s, size_t __maxsize,
                         const char *__restrict __format,
                         const struct tm *__restrict __tp, locale_t __loc)
    __attribute__((__nothrow__, __leaf__));

extern char *strptime_l(const char *__restrict __s,
                        const char *__restrict __fmt, struct tm *__tp,
                        locale_t __loc) __attribute__((__nothrow__, __leaf__));

extern struct tm *gmtime(const time_t *__timer)
    __attribute__((__nothrow__, __leaf__));

extern struct tm *localtime(const time_t *__timer)
    __attribute__((__nothrow__, __leaf__));
# 155 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r(const time_t *__restrict __timer,
                           struct tm *__restrict __tp)
    __attribute__((__nothrow__, __leaf__));

extern struct tm *localtime_r(const time_t *__restrict __timer,
                              struct tm *__restrict __tp)
    __attribute__((__nothrow__, __leaf__));
# 180 "/usr/include/time.h" 3 4
extern char *asctime(const struct tm *__tp)
    __attribute__((__nothrow__, __leaf__));

extern char *ctime(const time_t *__timer)
    __attribute__((__nothrow__, __leaf__));
# 198 "/usr/include/time.h" 3 4
extern char *asctime_r(const struct tm *__restrict __tp, char *__restrict __buf)
    __attribute__((__nothrow__, __leaf__));

extern char *ctime_r(const time_t *__restrict __timer, char *__restrict __buf)
    __attribute__((__nothrow__, __leaf__));
# 218 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;

extern char *tzname[2];

extern void tzset(void) __attribute__((__nothrow__, __leaf__));

extern int daylight;
extern long int timezone;
# 247 "/usr/include/time.h" 3 4
extern time_t timegm(struct tm *__tp) __attribute__((__nothrow__, __leaf__));
# 264 "/usr/include/time.h" 3 4
extern time_t timelocal(struct tm *__tp) __attribute__((__nothrow__, __leaf__));

extern int dysize(int __year) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
# 282 "/usr/include/time.h" 3 4
extern int nanosleep(const struct timespec *__requested_time,
                     struct timespec *__remaining);

extern int clock_getres(clockid_t __clock_id, struct timespec *__res)
    __attribute__((__nothrow__, __leaf__));

extern int clock_gettime(clockid_t __clock_id, struct timespec *__tp)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int clock_settime(clockid_t __clock_id, const struct timespec *__tp)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 324 "/usr/include/time.h" 3 4
extern int clock_nanosleep(clockid_t __clock_id, int __flags,
                           const struct timespec *__req,
                           struct timespec *__rem);
# 339 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid(pid_t __pid, clockid_t *__clock_id)
    __attribute__((__nothrow__, __leaf__));

extern int timer_create(clockid_t __clock_id, struct sigevent *__restrict __evp,
                        timer_t *__restrict __timerid)
    __attribute__((__nothrow__, __leaf__));

extern int timer_delete(timer_t __timerid)
    __attribute__((__nothrow__, __leaf__));

extern int timer_settime(timer_t __timerid, int __flags,
                         const struct itimerspec *__restrict __value,
                         struct itimerspec *__restrict __ovalue)
    __attribute__((__nothrow__, __leaf__));

extern int timer_gettime(timer_t __timerid, struct itimerspec *__value)
    __attribute__((__nothrow__, __leaf__));
# 377 "/usr/include/time.h" 3 4
extern int timer_getoverrun(timer_t __timerid)
    __attribute__((__nothrow__, __leaf__));

extern int timespec_get(struct timespec *__ts, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 400 "/usr/include/time.h" 3 4
extern int timespec_getres(struct timespec *__ts, int __base)
    __attribute__((__nothrow__, __leaf__));
# 426 "/usr/include/time.h" 3 4
extern int getdate_err;
# 435 "/usr/include/time.h" 3 4
extern struct tm *getdate(const char *__string);
# 449 "/usr/include/time.h" 3 4
extern int getdate_r(const char *__restrict __string,
                     struct tm *__restrict __resbufp);

# 124 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 46 "/usr/include/ctype.h" 3 4
enum {
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern const __int32_t **__ctype_tolower_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern const __int32_t **__ctype_toupper_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum(int) __attribute__((__nothrow__, __leaf__));
extern int isalpha(int) __attribute__((__nothrow__, __leaf__));
extern int iscntrl(int) __attribute__((__nothrow__, __leaf__));
extern int isdigit(int) __attribute__((__nothrow__, __leaf__));
extern int islower(int) __attribute__((__nothrow__, __leaf__));
extern int isgraph(int) __attribute__((__nothrow__, __leaf__));
extern int isprint(int) __attribute__((__nothrow__, __leaf__));
extern int ispunct(int) __attribute__((__nothrow__, __leaf__));
extern int isspace(int) __attribute__((__nothrow__, __leaf__));
extern int isupper(int) __attribute__((__nothrow__, __leaf__));
extern int isxdigit(int) __attribute__((__nothrow__, __leaf__));

extern int tolower(int __c) __attribute__((__nothrow__, __leaf__));

extern int toupper(int __c) __attribute__((__nothrow__, __leaf__));

extern int isblank(int) __attribute__((__nothrow__, __leaf__));

extern int isctype(int __c, int __mask) __attribute__((__nothrow__, __leaf__));

extern int isascii(int __c) __attribute__((__nothrow__, __leaf__));

extern int toascii(int __c) __attribute__((__nothrow__, __leaf__));

extern int _toupper(int) __attribute__((__nothrow__, __leaf__));
extern int _tolower(int) __attribute__((__nothrow__, __leaf__));
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isalpha_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int iscntrl_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isdigit_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int islower_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isgraph_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isprint_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int ispunct_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isspace_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isupper_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isxdigit_l(int, locale_t) __attribute__((__nothrow__, __leaf__));

extern int isblank_l(int, locale_t) __attribute__((__nothrow__, __leaf__));

extern int __tolower_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));
extern int tolower_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));

extern int __toupper_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));
extern int toupper_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 125 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4

# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4

extern int *__errno_location(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4

# 126 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock {
  short int l_type;
  short int l_whence;

  __off64_t l_start;
  __off64_t l_len;

  __pid_t l_pid;
};

struct flock64 {
  short int l_type;
  short int l_whence;
  __off64_t l_start;
  __off64_t l_len;
  __pid_t l_pid;
};

# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4

struct iovec {
  void *iov_base;
  size_t iov_len;
};
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type {
  F_OWNER_TID = 0,
  F_OWNER_PID,
  F_OWNER_PGRP,
  F_OWNER_GID = F_OWNER_PGRP
};

struct f_owner_ex {
  enum __pid_type type;
  __pid_t pid;
};
# 355 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 356 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4

struct file_handle {
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 382 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4

extern __ssize_t readahead(int __fd, __off64_t __offset, size_t __count)
    __attribute__((__nothrow__, __leaf__));

extern int sync_file_range(int __fd, __off64_t __offset, __off64_t __count,
                           unsigned int __flags);

extern __ssize_t vmsplice(int __fdout, const struct iovec *__iov,
                          size_t __count, unsigned int __flags);

extern __ssize_t splice(int __fdin, __off64_t *__offin, int __fdout,
                        __off64_t *__offout, size_t __len,
                        unsigned int __flags);

extern __ssize_t tee(int __fdin, int __fdout, size_t __len,
                     unsigned int __flags);
# 429 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate(int __fd, int __mode, __off64_t __offset,
                     __off64_t __len) __asm__(""
                                              "fallocate64")

    ;

extern int fallocate64(int __fd, int __mode, __off64_t __offset,
                       __off64_t __len);

extern int name_to_handle_at(int __dfd, const char *__name,
                             struct file_handle *__handle, int *__mnt_id,
                             int __flags)
    __attribute__((__nothrow__, __leaf__));

extern int open_by_handle_at(int __mountdirfd, struct file_handle *__handle,
                             int __flags);

# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
struct stat {

  __dev_t st_dev;

  __ino_t st_ino;

  __nlink_t st_nlink;
  __mode_t st_mode;

  __uid_t st_uid;
  __gid_t st_gid;

  int __pad0;

  __dev_t st_rdev;

  __off_t st_size;

  __blksize_t st_blksize;

  __blkcnt_t st_blocks;
# 74 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
  struct timespec st_atim;
  struct timespec st_mtim;
  struct timespec st_ctim;
# 89 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
  __syscall_slong_t __glibc_reserved[3];
# 99 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
};

struct stat64 {

  __dev_t st_dev;

  __ino64_t st_ino;
  __nlink_t st_nlink;
  __mode_t st_mode;

  __uid_t st_uid;
  __gid_t st_gid;

  int __pad0;
  __dev_t st_rdev;
  __off_t st_size;

  __blksize_t st_blksize;
  __blkcnt64_t st_blocks;

  struct timespec st_atim;
  struct timespec st_mtim;
  struct timespec st_ctim;
# 151 "/usr/include/x86_64-linux-gnu/bits/struct_stat.h" 3 4
  __syscall_slong_t __glibc_reserved[3];
};
# 26 "/usr/include/x86_64-linux-gnu/bits/stat.h" 2 3 4
# 79 "/usr/include/fcntl.h" 2 3 4
# 180 "/usr/include/fcntl.h" 3 4
extern int fcntl(int __fd, int __cmd, ...) __asm__(""
                                                   "fcntl64");

extern int fcntl64(int __fd, int __cmd, ...);
# 212 "/usr/include/fcntl.h" 3 4
extern int open(const char *__file, int __oflag, ...) __asm__(""
                                                              "open64")
    __attribute__((__nonnull__(1)));

extern int open64(const char *__file, int __oflag, ...)
    __attribute__((__nonnull__(1)));
# 237 "/usr/include/fcntl.h" 3 4
extern int openat(int __fd, const char *__file, int __oflag,
                  ...) __asm__(""
                               "openat64") __attribute__((__nonnull__(2)));

extern int openat64(int __fd, const char *__file, int __oflag, ...)
    __attribute__((__nonnull__(2)));
# 258 "/usr/include/fcntl.h" 3 4
extern int creat(const char *__file, mode_t __mode) __asm__(""
                                                            "creat64")
    __attribute__((__nonnull__(1)));

extern int creat64(const char *__file, mode_t __mode)
    __attribute__((__nonnull__(1)));
# 305 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise(int __fd, __off64_t __offset, __off64_t __len,
                         int __advise) __asm__(""
                                               "posix_fadvise64")
    __attribute__((__nothrow__, __leaf__))

    ;

extern int posix_fadvise64(int __fd, off64_t __offset, off64_t __len,
                           int __advise) __attribute__((__nothrow__, __leaf__));
# 326 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate(int __fd, __off64_t __offset,
                           __off64_t __len) __asm__(""
                                                    "posix_fallocate64")

    ;

extern int posix_fallocate64(int __fd, off64_t __offset, off64_t __len);
# 345 "/usr/include/fcntl.h" 3 4

# 127 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/getopt.h" 1 3 4
# 36 "/usr/include/getopt.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h" 3 4

# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h" 3 4
struct option {
  const char *name;

  int has_arg;
  int *flag;
  int val;
};

extern int getopt_long(int ___argc, char *const *___argv,
                       const char *__shortopts, const struct option *__longopts,
                       int *__longind) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(2, 3)));
extern int getopt_long_only(int ___argc, char *const *___argv,
                            const char *__shortopts,
                            const struct option *__longopts, int *__longind)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

# 37 "/usr/include/getopt.h" 2 3 4
# 128 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 227 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat(const char *__restrict __file,
                struct stat *__restrict __buf) __asm__(""
                                                       "stat64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 2)));
extern int fstat(int __fd, struct stat *__buf) __asm__(""
                                                       "fstat64")
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 240 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64(const char *__restrict __file,
                  struct stat64 *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int fstat64(int __fd, struct stat64 *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 279 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat(int __fd, const char *__restrict __file,
                   struct stat *__restrict __buf,
                   int __flag) __asm__(""
                                       "fstatat64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(2, 3)));
# 291 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64(int __fd, const char *__restrict __file,
                     struct stat64 *__restrict __buf, int __flag)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));
# 327 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat(const char *__restrict __file,
                 struct stat *__restrict __buf) __asm__(""
                                                        "lstat64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(1, 2)));

extern int lstat64(const char *__restrict __file,
                   struct stat64 *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
# 352 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod(const char *__file, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int lchmod(const char *__file, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int fchmod(int __fd, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__));

extern int fchmodat(int __fd, const char *__file, __mode_t __mode, int __flag)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern __mode_t umask(__mode_t __mask) __attribute__((__nothrow__, __leaf__));

extern __mode_t getumask(void) __attribute__((__nothrow__, __leaf__));

extern int mkdir(const char *__path, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int mkdirat(int __fd, const char *__path, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int mknod(const char *__path, __mode_t __mode, __dev_t __dev)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int mknodat(int __fd, const char *__path, __mode_t __mode, __dev_t __dev)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int mkfifo(const char *__path, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int mkfifoat(int __fd, const char *__path, __mode_t __mode)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int utimensat(int __fd, const char *__path,
                     const struct timespec __times[2], int __flags)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 452 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int futimens(int __fd, const struct timespec __times[2])
    __attribute__((__nothrow__, __leaf__));
# 465 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4

# 1 "/usr/include/linux/types.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4

# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "linux-headers/asm/bitsperlong.h" 1 3 4
# 11 "linux-headers/asm/bitsperlong.h" 3 4
# 1 "/home/paulning/study/qemu/linux-headers/asm-generic/bitsperlong.h" 1 3 4
# 12 "linux-headers/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4

typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;

__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4

# 1 "/usr/include/linux/posix_types.h" 1 3 4

# 1 "/home/paulning/study/qemu/linux-headers/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
  unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;

typedef void (*__kernel_sighandler_t)(int);

typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;

typedef unsigned long __kernel_old_dev_t;

# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;

typedef __kernel_ulong_t __kernel_ino_t;

typedef unsigned int __kernel_mode_t;

typedef int __kernel_pid_t;

typedef int __kernel_ipc_pid_t;

typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;

typedef __kernel_long_t __kernel_suseconds_t;

typedef int __kernel_daddr_t;

typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;

typedef struct {
  int val[2];
} __kernel_fsid_t;

typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char *__kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4

typedef __signed__ __int128 __s128 __attribute__((aligned(16)));
typedef unsigned __int128 __u128 __attribute__((aligned(16)));
# 31 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 54 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
  __s64 tv_sec;
  __u32 tv_nsec;
  __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

  __u32 stx_mask;
  __u32 stx_blksize;
  __u64 stx_attributes;

  __u32 stx_nlink;
  __u32 stx_uid;
  __u32 stx_gid;
  __u16 stx_mode;
  __u16 __spare0[1];

  __u64 stx_ino;
  __u64 stx_size;
  __u64 stx_blocks;
  __u64 stx_attributes_mask;

  struct statx_timestamp stx_atime;
  struct statx_timestamp stx_btime;
  struct statx_timestamp stx_ctime;
  struct statx_timestamp stx_mtime;

  __u32 stx_rdev_major;
  __u32 stx_rdev_minor;
  __u32 stx_dev_major;
  __u32 stx_dev_minor;

  __u64 stx_mnt_id;
  __u32 stx_dio_mem_align;
  __u32 stx_dio_offset_align;

  __u64 __spare3[12];
};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 58 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4

int statx(int __dirfd, const char *__restrict __path, int __flags,
          unsigned int __mask, struct statx *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 5)));

# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 466 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4

# 129 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};
# 67 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday(struct timeval *__restrict __tv, void *__restrict __tz)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 86 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
    __attribute__((__nothrow__, __leaf__));

extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
    __attribute__((__nothrow__, __leaf__));
# 114 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
enum __itimer_which {

  ITIMER_REAL = 0,

  ITIMER_VIRTUAL = 1,

  ITIMER_PROF = 2

};

struct itimerval {

  struct timeval it_interval;

  struct timeval it_value;
};

typedef enum __itimer_which __itimer_which_t;

extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
    __attribute__((__nothrow__, __leaf__));

extern int setitimer(__itimer_which_t __which,
                     const struct itimerval *__restrict __new,
                     struct itimerval *__restrict __old)
    __attribute__((__nothrow__, __leaf__));

extern int utimes(const char *__file, const struct timeval __tvp[2])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int lutimes(const char *__file, const struct timeval __tvp[2])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int futimes(int __fd, const struct timeval __tvp[2])
    __attribute__((__nothrow__, __leaf__));
# 214 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int futimesat(int __fd, const char *__file,
                     const struct timeval __tvp[2])
    __attribute__((__nothrow__, __leaf__));
# 258 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 130 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

extern void __assert_fail(const char *__assertion, const char *__file,
                          unsigned int __line, const char *__function)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

extern void __assert_perror_fail(int __errnum, const char *__file,
                                 unsigned int __line, const char *__function)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

extern void __assert(const char *__assertion, const char *__file, int __line)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

# 131 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/usr/include/setjmp.h" 1 3 4
# 27 "/usr/include/setjmp.h" 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4

typedef long int __jmp_buf[8];
# 30 "/usr/include/setjmp.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag {

  __jmp_buf __jmpbuf;
  int __mask_was_saved;
  __sigset_t __saved_mask;
};
# 31 "/usr/include/setjmp.h" 2 3 4

typedef struct __jmp_buf_tag jmp_buf[1];

extern int setjmp(jmp_buf __env) __attribute__((__nothrow__));

extern int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask)
    __attribute__((__nothrow__));

extern int _setjmp(struct __jmp_buf_tag __env[1]) __attribute__((__nothrow__));
# 54 "/usr/include/setjmp.h" 3 4
extern void longjmp(struct __jmp_buf_tag __env[1], int __val)
    __attribute__((__nothrow__)) __attribute__((__noreturn__));

extern void _longjmp(struct __jmp_buf_tag __env[1], int __val)
    __attribute__((__nothrow__)) __attribute__((__noreturn__));

typedef struct __jmp_buf_tag sigjmp_buf[1];
# 80 "/usr/include/setjmp.h" 3 4
extern void siglongjmp(sigjmp_buf __env, int __val) __attribute__((__nothrow__))
__attribute__((__noreturn__));
# 90 "/usr/include/setjmp.h" 3 4

# 134 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4

typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval {
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct {
  int si_signo;

  int si_errno;

  int si_code;

  int __pad0;

  union {
    int _pad[((128 / sizeof(int)) - 4)];

    struct {
      __pid_t si_pid;
      __uid_t si_uid;
    } _kill;

    struct {
      int si_tid;
      int si_overrun;
      __sigval_t si_sigval;
    } _timer;

    struct {
      __pid_t si_pid;
      __uid_t si_uid;
      __sigval_t si_sigval;
    } _rt;

    struct {
      __pid_t si_pid;
      __uid_t si_uid;
      int si_status;
      __clock_t si_utime;
      __clock_t si_stime;
    } _sigchld;

    struct {
      void *si_addr;

      short int si_addr_lsb;
      union {

        struct {
          void *_lower;
          void *_upper;
        } _addr_bnd;

        __uint32_t _pkey;
      } _bounds;
    } _sigfault;

    struct {
      long int si_band;
      int si_fd;
    } _sigpoll;

    struct {
      void *_call_addr;
      int _syscall;
      unsigned int _arch;
    } _sigsys;

  } _sifields;
} siginfo_t;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum {
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,

  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};

enum {
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};

enum {
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};

enum {
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR,

  SEGV_MTEAERR,

  SEGV_MTESERR,

  SEGV_CPERR

};

enum {
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};

enum {
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};

enum {
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};

enum {
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};

# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 216 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent {
  __sigval_t sigev_value;
  int sigev_signo;
  int sigev_notify;

  union {
    int _pad[((64 / sizeof(int)) - 4)];

    __pid_t _tid;

    struct {
      void (*_function)(__sigval_t);
      pthread_attr_t *_attribute;
    } _sigev_thread;
  } _sigev_un;
} sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum {
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,

  SIGEV_THREAD_ID = 4

};
# 68 "/usr/include/signal.h" 2 3 4

typedef void (*__sighandler_t)(int);

extern __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler)
    __attribute__((__nothrow__, __leaf__));

extern __sighandler_t sysv_signal(int __sig, __sighandler_t __handler)
    __attribute__((__nothrow__, __leaf__));

extern __sighandler_t signal(int __sig, __sighandler_t __handler)
    __attribute__((__nothrow__, __leaf__));
# 112 "/usr/include/signal.h" 3 4
extern int kill(__pid_t __pid, int __sig)
    __attribute__((__nothrow__, __leaf__));

extern int killpg(__pid_t __pgrp, int __sig)
    __attribute__((__nothrow__, __leaf__));

extern int raise(int __sig) __attribute__((__nothrow__, __leaf__));

extern __sighandler_t ssignal(int __sig, __sighandler_t __handler)
    __attribute__((__nothrow__, __leaf__));
extern int gsignal(int __sig) __attribute__((__nothrow__, __leaf__));

extern void psignal(int __sig, const char *__s);

extern void psiginfo(const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause(int __sig) __asm__("__xpg_sigpause")
    __attribute__((__deprecated__("Use the sigsuspend function instead")));
# 173 "/usr/include/signal.h" 3 4
extern int sigblock(int __mask) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__));

extern int sigsetmask(int __mask) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__));

extern int siggetmask(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__));
# 188 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;

typedef __sighandler_t sig_t;

extern int sigemptyset(sigset_t *__set) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int sigfillset(sigset_t *__set) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int sigaddset(sigset_t *__set, int __signo)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sigdelset(sigset_t *__set, int __signo)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sigismember(const sigset_t *__set, int __signo)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sigisemptyset(const sigset_t *__set)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sigandset(sigset_t *__set, const sigset_t *__left,
                     const sigset_t *__right)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(1, 2, 3)));

extern int sigorset(sigset_t *__set, const sigset_t *__left,
                    const sigset_t *__right)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(1, 2, 3)));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction {

  union {

    __sighandler_t sa_handler;

    void (*sa_sigaction)(int, siginfo_t *, void *);
  } __sigaction_handler;

  __sigset_t sa_mask;

  int sa_flags;

  void (*sa_restorer)(void);
};
# 230 "/usr/include/signal.h" 2 3 4

extern int sigprocmask(int __how, const sigset_t *__restrict __set,
                       sigset_t *__restrict __oset)
    __attribute__((__nothrow__, __leaf__));

extern int sigsuspend(const sigset_t *__set) __attribute__((__nonnull__(1)));

extern int sigaction(int __sig, const struct sigaction *__restrict __act,
                     struct sigaction *__restrict __oact)
    __attribute__((__nothrow__, __leaf__));

extern int sigpending(sigset_t *__set) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int sigwait(const sigset_t *__restrict __set, int *__restrict __sig)
    __attribute__((__nonnull__(1, 2)));

extern int sigwaitinfo(const sigset_t *__restrict __set,
                       siginfo_t *__restrict __info)
    __attribute__((__nonnull__(1)));

extern int sigtimedwait(const sigset_t *__restrict __set,
                        siginfo_t *__restrict __info,
                        const struct timespec *__restrict __timeout)
    __attribute__((__nonnull__(1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue(__pid_t __pid, int __sig, const union sigval __val)
    __attribute__((__nothrow__, __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes {
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg {
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg {
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg {
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate {

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext {
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union {
    struct _fpstate *fpstate;
    __uint64_t __fpstate_word;
  };
  __uint64_t __reserved1[8];
};

struct _xsave_hdr {
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state {
  __uint32_t ymmh_space[64];
};

struct _xstate {
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 302 "/usr/include/signal.h" 2 3 4

extern int sigreturn(struct sigcontext *__scp)
    __attribute__((__nothrow__, __leaf__));

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4

typedef struct {
  void *ss_sp;
  int ss_flags;
  size_t ss_size;
} stack_t;
# 314 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];

enum {
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};

struct _libc_fpxreg {
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg {
  __uint32_t element[4];
};

struct _libc_fpstate {

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

typedef struct _libc_fpstate *fpregset_t;

typedef struct {
  gregset_t gregs;

  fpregset_t fpregs;
  __extension__ unsigned long long __reserved1[8];
} mcontext_t;

typedef struct ucontext_t {
  unsigned long int uc_flags;
  struct ucontext_t *uc_link;
  stack_t uc_stack;
  mcontext_t uc_mcontext;
  sigset_t uc_sigmask;
  struct _libc_fpstate __fpregs_mem;
  __extension__ unsigned long long int __ssp[4];
} ucontext_t;
# 317 "/usr/include/signal.h" 2 3 4

extern int siginterrupt(int __sig, int __interrupt)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__deprecated__("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigstksz.h" 1 3 4
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum {
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 330 "/usr/include/signal.h" 2 3 4

extern int sigaltstack(const stack_t *__restrict __ss,
                       stack_t *__restrict __oss)
    __attribute__((__nothrow__, __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack {
  void *ss_sp;
  int ss_onstack;
};
# 340 "/usr/include/signal.h" 2 3 4

extern int sigstack(struct sigstack *__ss, struct sigstack *__oss)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));

extern int sighold(int __sig) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__("Use the sigprocmask function instead")));

extern int sigrelse(int __sig) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__("Use the sigprocmask function instead")));

extern int sigignore(int __sig) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__("Use the signal function instead")));

extern __sighandler_t sigset(int __sig, __sighandler_t __disp)
    __attribute__((__nothrow__, __leaf__)) __attribute__((
        __deprecated__("Use the signal and sigprocmask functions instead")));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask(int __how, const __sigset_t *__restrict __newmask,
                           __sigset_t *__restrict __oldmask)
    __attribute__((__nothrow__, __leaf__));

extern int pthread_kill(pthread_t __threadid, int __signo)
    __attribute__((__nothrow__, __leaf__));

extern int pthread_sigqueue(pthread_t __threadid, int __signo,
                            const union sigval __value)
    __attribute__((__nothrow__, __leaf__));
# 377 "/usr/include/signal.h" 2 3 4

extern int __libc_current_sigrtmin(void) __attribute__((__nothrow__, __leaf__));

extern int __libc_current_sigrtmax(void) __attribute__((__nothrow__, __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill(__pid_t __tgid, __pid_t __tid, int __signal);
# 392 "/usr/include/signal.h" 2 3 4

# 135 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/uio.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4

# 41 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count)
    __attribute__((__access__(__read_only__, 2, 3)));
# 52 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count)
    __attribute__((__access__(__read_only__, 2, 3)));
# 86 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv(int __fd, const struct iovec *__iovec, int __count,
                      __off64_t __offset) __asm__(""
                                                  "preadv64")

    __attribute__((__access__(__read_only__, 2, 3)));
extern ssize_t pwritev(int __fd, const struct iovec *__iovec, int __count,
                       __off64_t __offset) __asm__(""
                                                   "pwritev64")

    __attribute__((__access__(__read_only__, 2, 3)));
# 110 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64(int __fd, const struct iovec *__iovec, int __count,
                        __off64_t __offset)
    __attribute__((__access__(__read_only__, 2, 3)));
# 123 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev64(int __fd, const struct iovec *__iovec, int __count,
                         __off64_t __offset)
    __attribute__((__access__(__read_only__, 2, 3)));
# 143 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t pwritev2(int __fd, const struct iovec *__iovec, int __count,
                        __off64_t __offset, int __flags) __asm__(""
                                                                 "pwritev64v2")

    __attribute__((__access__(__read_only__, 2, 3)));
extern ssize_t preadv2(int __fd, const struct iovec *__iovec, int __count,
                       __off64_t __offset, int __flags) __asm__(""
                                                                "preadv64v2")

    __attribute__((__access__(__read_only__, 2, 3)));
# 161 "/usr/include/x86_64-linux-gnu/sys/uio.h" 3 4
extern ssize_t preadv64v2(int __fp, const struct iovec *__iovec, int __count,
                          __off64_t __offset, int ___flags)
    __attribute__((__access__(__read_only__, 2, 3)));

extern ssize_t pwritev64v2(int __fd, const struct iovec *__iodev, int __count,
                           __off64_t __offset, int __flags)
    __attribute__((__access__(__read_only__, 2, 3)));

# 1 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4

extern ssize_t
process_vm_readv(pid_t __pid, const struct iovec *__lvec,
                 unsigned long int __liovcnt, const struct iovec *__rvec,
                 unsigned long int __riovcnt, unsigned long int __flags)
    __attribute__((__nothrow__, __leaf__));

extern ssize_t
process_vm_writev(pid_t __pid, const struct iovec *__lvec,
                  unsigned long int __liovcnt, const struct iovec *__rvec,
                  unsigned long int __riovcnt, unsigned long int __flags)
    __attribute__((__nothrow__, __leaf__));
# 51 "/usr/include/x86_64-linux-gnu/bits/uio-ext.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/uio.h" 2 3 4
# 138 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 146 "/home/paulning/study/qemu/include/qemu/osdep.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4

# 74 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/idtype_t.h" 1 3 4

typedef enum {
  P_ALL,
  P_PID,
  P_PGID,
  P_PIDFD,

} idtype_t;
# 75 "/usr/include/x86_64-linux-gnu/sys/wait.h" 2 3 4
# 83 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait(int *__stat_loc);
# 106 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid(__pid_t __pid, int *__stat_loc, int __options);
# 127 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid(idtype_t __idtype, __id_t __id, siginfo_t *__infop,
                  int __options);

struct rusage;

extern __pid_t wait3(int *__stat_loc, int __options, struct rusage *__usage)
    __attribute__((__nothrow__));
# 159 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait4(__pid_t __pid, int *__stat_loc, int __options,
                     struct rusage *__usage) __attribute__((__nothrow__));
# 173 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4

# 147 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 161 "/home/paulning/study/qemu/include/qemu/osdep.h"
# 1 "/home/paulning/study/qemu/include/glib-compat.h" 1
# 29 "/home/paulning/study/qemu/include/glib-compat.h"

# 29 "/home/paulning/study/qemu/include/glib-compat.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

# 1 "/usr/include/glib-2.0/glib.h" 1
# 32 "/usr/include/glib-2.0/glib.h"
# 1 "/usr/include/glib-2.0/glib/galloca.h" 1
# 34 "/usr/include/glib-2.0/glib/galloca.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 34 "/usr/include/glib-2.0/glib/gtypes.h"
# 1 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 1
# 9 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 40 "/usr/include/glib-2.0/glib/gmacros.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 41 "/usr/include/glib-2.0/glib/gmacros.h" 2
# 10 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h" 1 3 4
# 12 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/float.h" 1 3 4
# 13 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h" 2
# 29 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"

# 45 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed char gint8;
typedef unsigned char guint8;

typedef signed short gint16;
typedef unsigned short guint16;

typedef signed int gint32;
typedef unsigned int guint32;
# 66 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gint64;
typedef unsigned long guint64;
# 82 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gssize;
typedef unsigned long gsize;
# 93 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef gint64 goffset;
# 109 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef signed long gintptr;
typedef unsigned long guintptr;
# 201 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"
typedef int GPid;
# 219 "/usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h"

# 35 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 1 "/usr/include/glib-2.0/glib/gversionmacros.h" 1
# 37 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 1 "/usr/include/glib-2.0/glib/glib-visibility.h" 1

# 40 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 52 "/usr/include/glib-2.0/glib/gtypes.h"
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;

typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;

typedef float gfloat;
typedef double gdouble;
# 109 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void *gpointer;
typedef const void *gconstpointer;

typedef gint (*GCompareFunc)(gconstpointer a, gconstpointer b);
typedef gint (*GCompareDataFunc)(gconstpointer a, gconstpointer b,
                                 gpointer user_data);
typedef gboolean (*GEqualFunc)(gconstpointer a, gconstpointer b);
# 136 "/usr/include/glib-2.0/glib/gtypes.h"
typedef gboolean (*GEqualFuncFull)(gconstpointer a, gconstpointer b,
                                   gpointer user_data);

typedef void (*GDestroyNotify)(gpointer data);
typedef void (*GFunc)(gpointer data, gpointer user_data);
typedef guint (*GHashFunc)(gconstpointer key);
typedef void (*GHFunc)(gpointer key, gpointer value, gpointer user_data);
# 160 "/usr/include/glib-2.0/glib/gtypes.h"
typedef gpointer (*GCopyFunc)(gconstpointer src, gpointer data);
# 170 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void (*GFreeFunc)(gpointer data);
# 184 "/usr/include/glib-2.0/glib/gtypes.h"
typedef const gchar *(*GTranslateFunc)(const gchar *str, gpointer data);
# 528 "/usr/include/glib-2.0/glib/gtypes.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;

union _GFloatIEEE754 {
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754 {
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 578 "/usr/include/glib-2.0/glib/gtypes.h"
typedef struct _GTimeVal GTimeVal __attribute__((__deprecated__("Use '"
                                                                "GDateTime"
                                                                "' instead")));

struct _GTimeVal {
  glong tv_sec;
  glong tv_usec;
} __attribute__((__deprecated__("Use '"
                                "GDateTime"
                                "' instead")));

typedef gint grefcount;
typedef gint gatomicrefcount;

# 35 "/usr/include/glib-2.0/glib/galloca.h" 2
# 33 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/garray.h" 1
# 36 "/usr/include/glib-2.0/glib/garray.h"

typedef struct _GBytes GBytes;
typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;

struct _GArray {
  gchar *data;
  guint len;
};

struct _GByteArray {
  guint8 *data;
  guint len;
};

struct _GPtrArray {
  gpointer *pdata;
  guint len;
};
# 71 "/usr/include/glib-2.0/glib/garray.h"
extern GArray *g_array_new(gboolean zero_terminated, gboolean clear_,
                           guint element_size);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GArray *
g_array_new_take(gpointer data, gsize len, gboolean clear, gsize element_size);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GArray *
g_array_new_take_zero_terminated(gpointer data, gboolean clear,
                                 gsize element_size);
extern gpointer g_array_steal(GArray *array, gsize *len);
extern GArray *g_array_sized_new(gboolean zero_terminated, gboolean clear_,
                                 guint element_size, guint reserved_size);
extern GArray *g_array_copy(GArray *array);
extern gchar *g_array_free(GArray *array, gboolean free_segment);
extern GArray *g_array_ref(GArray *array);
extern void g_array_unref(GArray *array);
extern guint g_array_get_element_size(GArray *array);
extern GArray *g_array_append_vals(GArray *array, gconstpointer data,
                                   guint len);
extern GArray *g_array_prepend_vals(GArray *array, gconstpointer data,
                                    guint len);
extern GArray *g_array_insert_vals(GArray *array, guint index_,
                                   gconstpointer data, guint len);
extern GArray *g_array_set_size(GArray *array, guint length);
extern GArray *g_array_remove_index(GArray *array, guint index_);
extern GArray *g_array_remove_index_fast(GArray *array, guint index_);
extern GArray *g_array_remove_range(GArray *array, guint index_, guint length);
extern void g_array_sort(GArray *array, GCompareFunc compare_func);
extern void g_array_sort_with_data(GArray *array, GCompareDataFunc compare_func,
                                   gpointer user_data);
extern gboolean g_array_binary_search(GArray *array, gconstpointer target,
                                      GCompareFunc compare_func,
                                      guint *out_match_index);
extern void g_array_set_clear_func(GArray *array, GDestroyNotify clear_func);

extern GPtrArray *g_ptr_array_new(void);
extern GPtrArray *
g_ptr_array_new_with_free_func(GDestroyNotify element_free_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_ptr_array_new_take(gpointer *data, gsize len,
                     GDestroyNotify element_free_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_ptr_array_new_from_array(gpointer *data, gsize len, GCopyFunc copy_func,
                           gpointer copy_func_user_data,
                           GDestroyNotify element_free_func);
extern gpointer *g_ptr_array_steal(GPtrArray *array, gsize *len);
extern GPtrArray *g_ptr_array_copy(GPtrArray *array, GCopyFunc func,
                                   gpointer user_data);
extern GPtrArray *g_ptr_array_sized_new(guint reserved_size);
extern GPtrArray *g_ptr_array_new_full(guint reserved_size,
                                       GDestroyNotify element_free_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern GPtrArray *
g_ptr_array_new_null_terminated(guint reserved_size,
                                GDestroyNotify element_free_func,
                                gboolean null_terminated);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_ptr_array_new_take_null_terminated(gpointer *data,
                                     GDestroyNotify element_free_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_ptr_array_new_from_null_terminated_array(gpointer *data, GCopyFunc copy_func,
                                           gpointer copy_func_user_data,
                                           GDestroyNotify element_free_func);
extern gpointer *g_ptr_array_free(GPtrArray *array, gboolean free_seg);
extern GPtrArray *g_ptr_array_ref(GPtrArray *array);
extern void g_ptr_array_unref(GPtrArray *array);
extern void g_ptr_array_set_free_func(GPtrArray *array,
                                      GDestroyNotify element_free_func);
extern void g_ptr_array_set_size(GPtrArray *array, gint length);
extern gpointer g_ptr_array_remove_index(GPtrArray *array, guint index_);
extern gpointer g_ptr_array_remove_index_fast(GPtrArray *array, guint index_);
extern gpointer g_ptr_array_steal_index(GPtrArray *array, guint index_);
extern gpointer g_ptr_array_steal_index_fast(GPtrArray *array, guint index_);
extern gboolean g_ptr_array_remove(GPtrArray *array, gpointer data);
extern gboolean g_ptr_array_remove_fast(GPtrArray *array, gpointer data);
extern GPtrArray *g_ptr_array_remove_range(GPtrArray *array, guint index_,
                                           guint length);
extern void g_ptr_array_add(GPtrArray *array, gpointer data);
extern void g_ptr_array_extend(GPtrArray *array_to_extend, GPtrArray *array,
                               GCopyFunc func, gpointer user_data);
extern void g_ptr_array_extend_and_steal(GPtrArray *array_to_extend,
                                         GPtrArray *array);
extern void g_ptr_array_insert(GPtrArray *array, gint index_, gpointer data);
extern void g_ptr_array_sort(GPtrArray *array, GCompareFunc compare_func);
extern void g_ptr_array_sort_with_data(GPtrArray *array,
                                       GCompareDataFunc compare_func,
                                       gpointer user_data);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_ptr_array_sort_values(GPtrArray *array, GCompareFunc compare_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_ptr_array_sort_values_with_data(GPtrArray *array,
                                  GCompareDataFunc compare_func,
                                  gpointer user_data);
extern void g_ptr_array_foreach(GPtrArray *array, GFunc func,
                                gpointer user_data);
extern gboolean g_ptr_array_find(GPtrArray *haystack, gconstpointer needle,
                                 guint *index_);
extern gboolean g_ptr_array_find_with_equal_func(GPtrArray *haystack,
                                                 gconstpointer needle,
                                                 GEqualFunc equal_func,
                                                 guint *index_);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern gboolean
g_ptr_array_is_null_terminated(GPtrArray *array);

extern GByteArray *g_byte_array_new(void);
extern GByteArray *g_byte_array_new_take(guint8 *data, gsize len);
extern guint8 *g_byte_array_steal(GByteArray *array, gsize *len);
extern GByteArray *g_byte_array_sized_new(guint reserved_size);
extern guint8 *g_byte_array_free(GByteArray *array, gboolean free_segment);
extern GBytes *g_byte_array_free_to_bytes(GByteArray *array);
extern GByteArray *g_byte_array_ref(GByteArray *array);
extern void g_byte_array_unref(GByteArray *array);
extern GByteArray *g_byte_array_append(GByteArray *array, const guint8 *data,
                                       guint len);
extern GByteArray *g_byte_array_prepend(GByteArray *array, const guint8 *data,
                                        guint len);
extern GByteArray *g_byte_array_set_size(GByteArray *array, guint length);
extern GByteArray *g_byte_array_remove_index(GByteArray *array, guint index_);
extern GByteArray *g_byte_array_remove_index_fast(GByteArray *array,
                                                  guint index_);
extern GByteArray *g_byte_array_remove_range(GByteArray *array, guint index_,
                                             guint length);
extern void g_byte_array_sort(GByteArray *array, GCompareFunc compare_func);
extern void g_byte_array_sort_with_data(GByteArray *array,
                                        GCompareDataFunc compare_func,
                                        gpointer user_data);

# 34 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gasyncqueue.h" 1
# 34 "/usr/include/glib-2.0/glib/gasyncqueue.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 34 "/usr/include/glib-2.0/glib/gthread.h"
# 1 "/usr/include/glib-2.0/glib/gatomic.h" 1
# 30 "/usr/include/glib-2.0/glib/gatomic.h"
# 1 "/usr/include/glib-2.0/glib/glib-typeof.h" 1
# 31 "/usr/include/glib-2.0/glib/gatomic.h" 2

extern gint g_atomic_int_get(const volatile gint *atomic);
extern void g_atomic_int_set(volatile gint *atomic, gint newval);
extern void g_atomic_int_inc(volatile gint *atomic);
extern gboolean g_atomic_int_dec_and_test(volatile gint *atomic);
extern gboolean g_atomic_int_compare_and_exchange(volatile gint *atomic,
                                                  gint oldval, gint newval);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern gboolean
g_atomic_int_compare_and_exchange_full(gint *atomic, gint oldval, gint newval,
                                       gint *preval);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern gint
g_atomic_int_exchange(gint *atomic, gint newval);
extern gint g_atomic_int_add(volatile gint *atomic, gint val);
extern guint g_atomic_int_and(volatile guint *atomic, guint val);
extern guint g_atomic_int_or(volatile guint *atomic, guint val);
extern guint g_atomic_int_xor(volatile guint *atomic, guint val);

extern gpointer g_atomic_pointer_get(const volatile void *atomic);
extern void g_atomic_pointer_set(volatile void *atomic, gpointer newval);
extern gboolean g_atomic_pointer_compare_and_exchange(volatile void *atomic,
                                                      gpointer oldval,
                                                      gpointer newval);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern gboolean
g_atomic_pointer_compare_and_exchange_full(void *atomic, gpointer oldval,
                                           gpointer newval, void *preval);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern gpointer
g_atomic_pointer_exchange(void *atomic, gpointer newval);
extern gintptr g_atomic_pointer_add(volatile void *atomic, gssize val);
extern guintptr g_atomic_pointer_and(volatile void *atomic, gsize val);
extern guintptr g_atomic_pointer_or(volatile void *atomic, gsize val);
extern guintptr g_atomic_pointer_xor(volatile void *atomic, gsize val);

__attribute__((__deprecated__("Use '"
                              "g_atomic_int_add"
                              "' instead"))) extern gint
g_atomic_int_exchange_and_add(volatile gint *atomic, gint val);

# 35 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 30 "/usr/include/glib-2.0/glib/gerror.h"
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 36 "/usr/include/glib-2.0/glib/gquark.h"

typedef guint32 GQuark;

extern GQuark g_quark_try_string(const gchar *string);
extern GQuark g_quark_from_static_string(const gchar *string);
extern GQuark g_quark_from_string(const gchar *string);
extern const gchar *g_quark_to_string(GQuark quark) __attribute__((__const__));
# 63 "/usr/include/glib-2.0/glib/gquark.h"
extern const gchar *g_intern_string(const gchar *string);
extern const gchar *g_intern_static_string(const gchar *string);

# 31 "/usr/include/glib-2.0/glib/gerror.h" 2

# 43 "/usr/include/glib-2.0/glib/gerror.h"
typedef struct _GError GError;

struct _GError {
  GQuark domain;
  gint code;
  gchar *message;
};
# 142 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorInitFunc)(GError *error);
# 160 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorCopyFunc)(const GError *src_error, GError *dest_error);
# 175 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorClearFunc)(GError *error);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GQuark
g_error_domain_register_static(const char *error_type_name,
                               gsize error_type_private_size,
                               GErrorInitFunc error_type_init,
                               GErrorCopyFunc error_type_copy,
                               GErrorClearFunc error_type_clear);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GQuark
g_error_domain_register(const char *error_type_name,
                        gsize error_type_private_size,
                        GErrorInitFunc error_type_init,
                        GErrorCopyFunc error_type_copy,
                        GErrorClearFunc error_type_clear);

extern GError *g_error_new(GQuark domain, gint code, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 3, 4)));

extern GError *g_error_new_literal(GQuark domain, gint code,
                                   const gchar *message);
extern GError *g_error_new_valist(GQuark domain, gint code, const gchar *format,
                                  va_list args)
    __attribute__((__format__(gnu_printf, 3, 0)));

extern void g_error_free(GError *error);
extern GError *g_error_copy(const GError *error);

extern gboolean g_error_matches(const GError *error, GQuark domain, gint code);

extern void g_set_error(GError **err, GQuark domain, gint code,
                        const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 4, 5)));

extern void g_set_error_literal(GError **err, GQuark domain, gint code,
                                const gchar *message);

extern void g_propagate_error(GError **dest, GError *src);

extern void g_clear_error(GError **err);

extern void g_prefix_error(GError **err, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_prefix_error_literal(GError **err, const gchar *prefix);

extern void g_propagate_prefixed_error(GError **dest, GError *src,
                                       const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 3, 4)));

# 36 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 37 "/usr/include/glib-2.0/glib/gutils.h"

extern const gchar *g_get_user_name(void);
extern const gchar *g_get_real_name(void);
extern const gchar *g_get_home_dir(void);
extern const gchar *g_get_tmp_dir(void);
extern const gchar *g_get_host_name(void);
extern const gchar *g_get_prgname(void);
extern void g_set_prgname(const gchar *prgname);
extern const gchar *g_get_application_name(void);
extern void g_set_application_name(const gchar *application_name);
extern gchar *g_get_os_info(const gchar *key_name);
# 181 "/usr/include/glib-2.0/glib/gutils.h"
extern void g_reload_user_special_dirs_cache(void);
extern const gchar *g_get_user_data_dir(void);
extern const gchar *g_get_user_config_dir(void);
extern const gchar *g_get_user_cache_dir(void);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern const gchar *
g_get_user_state_dir(void);
extern const gchar *const *g_get_system_data_dirs(void);
# 213 "/usr/include/glib-2.0/glib/gutils.h"
extern const gchar *const *g_get_system_config_dirs(void);

extern const gchar *g_get_user_runtime_dir(void);
# 241 "/usr/include/glib-2.0/glib/gutils.h"
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,

  G_USER_N_DIRECTORIES
} GUserDirectory;

extern const gchar *g_get_user_special_dir(GUserDirectory directory);
# 265 "/usr/include/glib-2.0/glib/gutils.h"
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey {
  const gchar *key;
  guint value;
};

extern guint g_parse_debug_string(const gchar *string, const GDebugKey *keys,
                                  guint nkeys);

extern gint g_snprintf(gchar *string, gulong n, gchar const *format, ...)
    __attribute__((__format__(gnu_printf, 3, 4)));
extern gint g_vsnprintf(gchar *string, gulong n, gchar const *format,
                        va_list args)
    __attribute__((__format__(gnu_printf, 3, 0)));

extern void g_nullify_pointer(gpointer *nullify_location);

typedef enum {
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS = 1 << 1,
  G_FORMAT_SIZE_BITS = 1 << 2,
  G_FORMAT_SIZE_ONLY_VALUE __attribute__((deprecated("Not available before "
                                                     "2"
                                                     "."
                                                     "74"))) = 1 << 3,
  G_FORMAT_SIZE_ONLY_UNIT __attribute__((deprecated("Not available before "
                                                    "2"
                                                    "."
                                                    "74"))) = 1 << 4
} GFormatSizeFlags;

extern gchar *g_format_size_full(guint64 size, GFormatSizeFlags flags);
extern gchar *g_format_size(guint64 size);

__attribute__((__deprecated__("Use '"
                              "g_format_size"
                              "' instead"))) extern gchar *
g_format_size_for_display(goffset size);
# 324 "/usr/include/glib-2.0/glib/gutils.h"
typedef void (*GVoidFunc)(void) __attribute__((__deprecated__));

# 327 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic push
# 327 "/usr/include/glib-2.0/glib/gutils.h"

# 327 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern void g_atexit(GVoidFunc func);

# 330 "/usr/include/glib-2.0/glib/gutils.h"
#pragma GCC diagnostic pop
# 347 "/usr/include/glib-2.0/glib/gutils.h"
extern gchar *g_find_program_in_path(const gchar *program);
# 365 "/usr/include/glib-2.0/glib/gutils.h"
extern gint(g_bit_nth_lsf)(gulong mask, gint nth_bit);
extern gint(g_bit_nth_msf)(gulong mask, gint nth_bit);
extern guint(g_bit_storage)(gulong number);

static inline gint g_bit_nth_lsf_impl(gulong mask, gint nth_bit) {
  if ((nth_bit < -1))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1)) {
    nth_bit++;
    if (mask & (1UL << nth_bit))
      return nth_bit;
  }
  return -1;
}

static inline gint g_bit_nth_msf_impl(gulong mask, gint nth_bit) {
  if (nth_bit < 0 || (nth_bit > 8 * 8))
    nth_bit = 8 * 8;
  while (nth_bit > 0) {
    nth_bit--;
    if (mask & (1UL << nth_bit))
      return nth_bit;
  }
  return -1;
}

static inline guint g_bit_storage_impl(gulong number) {

  guint n_bits = 0;

  do {
    n_bits++;
    number >>= 1;
  } while (number);
  return n_bits;
}
# 477 "/usr/include/glib-2.0/glib/gutils.h"

# 37 "/usr/include/glib-2.0/glib/gthread.h" 2

extern GQuark g_thread_error_quark(void);

typedef enum { G_THREAD_ERROR_AGAIN } GThreadError;

typedef gpointer (*GThreadFunc)(gpointer data);

typedef struct _GThread GThread;

typedef union _GMutex GMutex;
typedef struct _GRecMutex GRecMutex;
typedef struct _GRWLock GRWLock;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GOnce GOnce;

union _GMutex {

  gpointer p;
  guint i[2];
};

struct _GRWLock {

  gpointer p;
  guint i[2];
};

struct _GCond {

  gpointer p;
  guint i[2];
};

struct _GRecMutex {

  gpointer p;
  guint i[2];
};

struct _GPrivate {

  gpointer p;
  GDestroyNotify notify;
  gpointer future[2];
};

typedef enum {
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;

struct _GOnce {
  volatile GOnceStatus status;
  volatile gpointer retval;
};
# 146 "/usr/include/glib-2.0/glib/gthread.h"
extern GThread *g_thread_ref(GThread *thread);
extern void g_thread_unref(GThread *thread);
extern GThread *g_thread_new(const gchar *name, GThreadFunc func,
                             gpointer data);
extern GThread *g_thread_try_new(const gchar *name, GThreadFunc func,
                                 gpointer data, GError **error);
extern GThread *g_thread_self(void);
__attribute__((__noreturn__)) extern void g_thread_exit(gpointer retval);
extern gpointer g_thread_join(GThread *thread);
extern void g_thread_yield(void);

extern void g_mutex_init(GMutex *mutex);
extern void g_mutex_clear(GMutex *mutex);
extern void g_mutex_lock(GMutex *mutex);
extern gboolean g_mutex_trylock(GMutex *mutex);
extern void g_mutex_unlock(GMutex *mutex);

extern void g_rw_lock_init(GRWLock *rw_lock);
extern void g_rw_lock_clear(GRWLock *rw_lock);
extern void g_rw_lock_writer_lock(GRWLock *rw_lock);
extern gboolean g_rw_lock_writer_trylock(GRWLock *rw_lock);
extern void g_rw_lock_writer_unlock(GRWLock *rw_lock);
extern void g_rw_lock_reader_lock(GRWLock *rw_lock);
extern gboolean g_rw_lock_reader_trylock(GRWLock *rw_lock);
extern void g_rw_lock_reader_unlock(GRWLock *rw_lock);

extern void g_rec_mutex_init(GRecMutex *rec_mutex);
extern void g_rec_mutex_clear(GRecMutex *rec_mutex);
extern void g_rec_mutex_lock(GRecMutex *rec_mutex);
extern gboolean g_rec_mutex_trylock(GRecMutex *rec_mutex);
extern void g_rec_mutex_unlock(GRecMutex *rec_mutex);

extern void g_cond_init(GCond *cond);
extern void g_cond_clear(GCond *cond);
extern void g_cond_wait(GCond *cond, GMutex *mutex);
extern void g_cond_signal(GCond *cond);
extern void g_cond_broadcast(GCond *cond);
extern gboolean g_cond_wait_until(GCond *cond, GMutex *mutex, gint64 end_time);

extern gpointer g_private_get(GPrivate *key);
extern void g_private_set(GPrivate *key, gpointer value);
extern void g_private_replace(GPrivate *key, gpointer value);

extern gpointer g_once_impl(GOnce *once, GThreadFunc func, gpointer arg);
extern gboolean g_once_init_enter(volatile void *location);
extern void g_once_init_leave(volatile void *location, gsize result);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern gboolean
g_once_init_enter_pointer(void *location);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_once_init_leave_pointer(void *location, gpointer result);
# 307 "/usr/include/glib-2.0/glib/gthread.h"
extern guint g_get_num_processors(void);

typedef void GMutexLocker;
# 364 "/usr/include/glib-2.0/glib/gthread.h"

static inline GMutexLocker *g_mutex_locker_new(GMutex *mutex) {
  g_mutex_lock(mutex);
  return (GMutexLocker *)mutex;
}
# 382 "/usr/include/glib-2.0/glib/gthread.h"

static inline void g_mutex_locker_free(GMutexLocker *locker) {
  g_mutex_unlock((GMutex *)locker);
}
# 438 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRecMutexLocker;
# 486 "/usr/include/glib-2.0/glib/gthread.h"

# 486 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 486 "/usr/include/glib-2.0/glib/gthread.h"

# 486 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline GRecMutexLocker *g_rec_mutex_locker_new(GRecMutex *rec_mutex) {
  g_rec_mutex_lock(rec_mutex);
  return (GRecMutexLocker *)rec_mutex;
}

# 494 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 506 "/usr/include/glib-2.0/glib/gthread.h"

# 506 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 506 "/usr/include/glib-2.0/glib/gthread.h"

# 506 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline void g_rec_mutex_locker_free(GRecMutexLocker *locker) {
  g_rec_mutex_unlock((GRecMutex *)locker);
}

# 513 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 564 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRWLockWriterLocker;
# 643 "/usr/include/glib-2.0/glib/gthread.h"

# 643 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 643 "/usr/include/glib-2.0/glib/gthread.h"

# 643 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockWriterLocker *
g_rw_lock_writer_locker_new(GRWLock *rw_lock) {
  g_rw_lock_writer_lock(rw_lock);
  return (GRWLockWriterLocker *)rw_lock;
}

# 651 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 664 "/usr/include/glib-2.0/glib/gthread.h"

# 664 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 664 "/usr/include/glib-2.0/glib/gthread.h"

# 664 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline void g_rw_lock_writer_locker_free(GRWLockWriterLocker *locker) {
  g_rw_lock_writer_unlock((GRWLock *)locker);
}

# 671 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 722 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRWLockReaderLocker;
# 741 "/usr/include/glib-2.0/glib/gthread.h"

# 741 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 741 "/usr/include/glib-2.0/glib/gthread.h"

# 741 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockReaderLocker *
g_rw_lock_reader_locker_new(GRWLock *rw_lock) {
  g_rw_lock_reader_lock(rw_lock);
  return (GRWLockReaderLocker *)rw_lock;
}

# 749 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 762 "/usr/include/glib-2.0/glib/gthread.h"

# 762 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic push
# 762 "/usr/include/glib-2.0/glib/gthread.h"

# 762 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline void g_rw_lock_reader_locker_free(GRWLockReaderLocker *locker) {
  g_rw_lock_reader_unlock((GRWLock *)locker);
}

# 769 "/usr/include/glib-2.0/glib/gthread.h"
#pragma GCC diagnostic pop
# 814 "/usr/include/glib-2.0/glib/gthread.h"

# 35 "/usr/include/glib-2.0/glib/gasyncqueue.h" 2

typedef struct _GAsyncQueue GAsyncQueue;

extern GAsyncQueue *g_async_queue_new(void);
extern GAsyncQueue *g_async_queue_new_full(GDestroyNotify item_free_func);
extern void g_async_queue_lock(GAsyncQueue *queue);
extern void g_async_queue_unlock(GAsyncQueue *queue);
extern GAsyncQueue *g_async_queue_ref(GAsyncQueue *queue);
extern void g_async_queue_unref(GAsyncQueue *queue);

__attribute__((__deprecated__("Use '"
                              "g_async_queue_ref"
                              "' instead"))) extern void
g_async_queue_ref_unlocked(GAsyncQueue *queue);

__attribute__((__deprecated__("Use '"
                              "g_async_queue_unref"
                              "' instead"))) extern void
g_async_queue_unref_and_unlock(GAsyncQueue *queue);

extern void g_async_queue_push(GAsyncQueue *queue, gpointer data);
extern void g_async_queue_push_unlocked(GAsyncQueue *queue, gpointer data);
extern void g_async_queue_push_sorted(GAsyncQueue *queue, gpointer data,
                                      GCompareDataFunc func,
                                      gpointer user_data);
extern void g_async_queue_push_sorted_unlocked(GAsyncQueue *queue,
                                               gpointer data,
                                               GCompareDataFunc func,
                                               gpointer user_data);
extern gpointer g_async_queue_pop(GAsyncQueue *queue);
extern gpointer g_async_queue_pop_unlocked(GAsyncQueue *queue);
extern gpointer g_async_queue_try_pop(GAsyncQueue *queue);
extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue *queue);
extern gpointer g_async_queue_timeout_pop(GAsyncQueue *queue, guint64 timeout);
extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue *queue,
                                                   guint64 timeout);
extern gint g_async_queue_length(GAsyncQueue *queue);
extern gint g_async_queue_length_unlocked(GAsyncQueue *queue);
extern void g_async_queue_sort(GAsyncQueue *queue, GCompareDataFunc func,
                               gpointer user_data);
extern void g_async_queue_sort_unlocked(GAsyncQueue *queue,
                                        GCompareDataFunc func,
                                        gpointer user_data);

extern gboolean g_async_queue_remove(GAsyncQueue *queue, gpointer item);
extern gboolean g_async_queue_remove_unlocked(GAsyncQueue *queue,
                                              gpointer item);
extern void g_async_queue_push_front(GAsyncQueue *queue, gpointer item);
extern void g_async_queue_push_front_unlocked(GAsyncQueue *queue,
                                              gpointer item);

# 115 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic push
# 115 "/usr/include/glib-2.0/glib/gasyncqueue.h"

# 115 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_async_queue_timeout_pop"
                              "' instead"))) extern gpointer
g_async_queue_timed_pop(GAsyncQueue *queue, GTimeVal *end_time);
__attribute__((__deprecated__("Use '"
                              "g_async_queue_timeout_pop_unlocked"
                              "' instead"))) extern gpointer
g_async_queue_timed_pop_unlocked(GAsyncQueue *queue, GTimeVal *end_time);

# 122 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma GCC diagnostic pop

# 35 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gbacktrace.h" 1
# 40 "/usr/include/glib-2.0/glib/gbacktrace.h"

extern void g_on_error_query(const gchar *prg_name);
extern void g_on_error_stack_trace(const gchar *prg_name);
# 72 "/usr/include/glib-2.0/glib/gbacktrace.h"

# 37 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbase64.h" 1
# 30 "/usr/include/glib-2.0/glib/gbase64.h"

extern gsize g_base64_encode_step(const guchar *in, gsize len,
                                  gboolean break_lines, gchar *out, gint *state,
                                  gint *save);
extern gsize g_base64_encode_close(gboolean break_lines, gchar *out,
                                   gint *state, gint *save);
extern gchar *g_base64_encode(const guchar *data, gsize len)
    __attribute__((__malloc__));
extern gsize g_base64_decode_step(const gchar *in, gsize len, guchar *out,
                                  gint *state, guint *save);
extern guchar *g_base64_decode(const gchar *text, gsize *out_len)
    __attribute__((__malloc__));
extern guchar *g_base64_decode_inplace(gchar *text, gsize *out_len);

# 38 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbitlock.h" 1
# 32 "/usr/include/glib-2.0/glib/gbitlock.h"

extern void g_bit_lock(volatile gint *address, gint lock_bit);
extern gboolean g_bit_trylock(volatile gint *address, gint lock_bit);
extern void g_bit_unlock(volatile gint *address, gint lock_bit);

extern void g_pointer_bit_lock(volatile void *address, gint lock_bit);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_pointer_bit_lock_and_get(gpointer address, guint lock_bit, guintptr *out_ptr);

extern gboolean g_pointer_bit_trylock(volatile void *address, gint lock_bit);
extern void g_pointer_bit_unlock(volatile void *address, gint lock_bit);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern gpointer
g_pointer_bit_lock_mask_ptr(gpointer ptr, guint lock_bit, gboolean set,
                            guintptr preserve_mask, gpointer preserve_ptr);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_pointer_bit_unlock_and_set(void *address, guint lock_bit, gpointer ptr,
                             guintptr preserve_mask);
# 107 "/usr/include/glib-2.0/glib/gbitlock.h"

# 39 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 1
# 28 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
# 1 "/usr/include/glib-2.0/glib/gdatetime.h" 1
# 33 "/usr/include/glib-2.0/glib/gdatetime.h"
# 1 "/usr/include/glib-2.0/glib/gtimezone.h" 1
# 32 "/usr/include/glib-2.0/glib/gtimezone.h"

typedef struct _GTimeZone GTimeZone;
# 51 "/usr/include/glib-2.0/glib/gtimezone.h"
typedef enum {
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;

extern GTimeZone *g_time_zone_new(const gchar *identifier);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTimeZone *
g_time_zone_new_identifier(const gchar *identifier);
extern GTimeZone *g_time_zone_new_utc(void);
extern GTimeZone *g_time_zone_new_local(void);
extern GTimeZone *g_time_zone_new_offset(gint32 seconds);

extern GTimeZone *g_time_zone_ref(GTimeZone *tz);
extern void g_time_zone_unref(GTimeZone *tz);

extern gint g_time_zone_find_interval(GTimeZone *tz, GTimeType type,
                                      gint64 time_);

extern gint g_time_zone_adjust_time(GTimeZone *tz, GTimeType type,
                                    gint64 *time_);

extern const gchar *g_time_zone_get_abbreviation(GTimeZone *tz, gint interval);
extern gint32 g_time_zone_get_offset(GTimeZone *tz, gint interval);
extern gboolean g_time_zone_is_dst(GTimeZone *tz, gint interval);
extern const gchar *g_time_zone_get_identifier(GTimeZone *tz);

# 34 "/usr/include/glib-2.0/glib/gdatetime.h" 2

# 89 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef gint64 GTimeSpan;
# 122 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef struct _GDateTime GDateTime;

extern void g_date_time_unref(GDateTime *datetime);
extern GDateTime *g_date_time_ref(GDateTime *datetime);

extern GDateTime *g_date_time_new_now(GTimeZone *tz);
extern GDateTime *g_date_time_new_now_local(void);
extern GDateTime *g_date_time_new_now_utc(void);

extern GDateTime *g_date_time_new_from_unix_local(gint64 t);
extern GDateTime *g_date_time_new_from_unix_utc(gint64 t);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern GDateTime *
g_date_time_new_from_unix_local_usec(gint64 usecs);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern GDateTime *
g_date_time_new_from_unix_utc_usec(gint64 usecs);

# 146 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic push
# 146 "/usr/include/glib-2.0/glib/gdatetime.h"

# 146 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_date_time_new_from_unix_local"
                              "' instead"))) extern GDateTime *
g_date_time_new_from_timeval_local(const GTimeVal *tv);
__attribute__((__deprecated__("Use '"
                              "g_date_time_new_from_unix_utc"
                              "' instead"))) extern GDateTime *
g_date_time_new_from_timeval_utc(const GTimeVal *tv);

# 151 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic pop

extern GDateTime *g_date_time_new_from_iso8601(const gchar *text,
                                               GTimeZone *default_tz);

extern GDateTime *g_date_time_new(GTimeZone *tz, gint year, gint month,
                                  gint day, gint hour, gint minute,
                                  gdouble seconds);
extern GDateTime *g_date_time_new_local(gint year, gint month, gint day,
                                        gint hour, gint minute,
                                        gdouble seconds);
extern GDateTime *g_date_time_new_utc(gint year, gint month, gint day,
                                      gint hour, gint minute, gdouble seconds);

extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add(GDateTime *datetime, GTimeSpan timespan);

extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_years(GDateTime *datetime, gint years);
extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_months(GDateTime *datetime, gint months);
extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_weeks(GDateTime *datetime, gint weeks);
extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_days(GDateTime *datetime, gint days);

extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_hours(GDateTime *datetime, gint hours);
extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_minutes(GDateTime *datetime, gint minutes);
extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_seconds(GDateTime *datetime, gdouble seconds);

extern __attribute__((warn_unused_result)) GDateTime *
g_date_time_add_full(GDateTime *datetime, gint years, gint months, gint days,
                     gint hours, gint minutes, gdouble seconds);

extern gint g_date_time_compare(gconstpointer dt1, gconstpointer dt2);
extern GTimeSpan g_date_time_difference(GDateTime *end, GDateTime *begin);
extern guint g_date_time_hash(gconstpointer datetime);
extern gboolean g_date_time_equal(gconstpointer dt1, gconstpointer dt2);

extern void g_date_time_get_ymd(GDateTime *datetime, gint *year, gint *month,
                                gint *day);

extern gint g_date_time_get_year(GDateTime *datetime);
extern gint g_date_time_get_month(GDateTime *datetime);
extern gint g_date_time_get_day_of_month(GDateTime *datetime);

extern gint g_date_time_get_week_numbering_year(GDateTime *datetime);
extern gint g_date_time_get_week_of_year(GDateTime *datetime);
extern gint g_date_time_get_day_of_week(GDateTime *datetime);

extern gint g_date_time_get_day_of_year(GDateTime *datetime);

extern gint g_date_time_get_hour(GDateTime *datetime);
extern gint g_date_time_get_minute(GDateTime *datetime);
extern gint g_date_time_get_second(GDateTime *datetime);
extern gint g_date_time_get_microsecond(GDateTime *datetime);
extern gdouble g_date_time_get_seconds(GDateTime *datetime);

extern gint64 g_date_time_to_unix(GDateTime *datetime);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern gint64
g_date_time_to_unix_usec(GDateTime *datetime);

# 276 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic push
# 276 "/usr/include/glib-2.0/glib/gdatetime.h"

# 276 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_date_time_to_unix"
                              "' instead"))) extern gboolean
g_date_time_to_timeval(GDateTime *datetime, GTimeVal *tv);

# 280 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma GCC diagnostic pop

extern GTimeSpan g_date_time_get_utc_offset(GDateTime *datetime);
extern GTimeZone *g_date_time_get_timezone(GDateTime *datetime);
extern const gchar *g_date_time_get_timezone_abbreviation(GDateTime *datetime);
extern gboolean g_date_time_is_daylight_savings(GDateTime *datetime);

extern GDateTime *g_date_time_to_timezone(GDateTime *datetime, GTimeZone *tz);
extern GDateTime *g_date_time_to_local(GDateTime *datetime);
extern GDateTime *g_date_time_to_utc(GDateTime *datetime);

extern gchar *g_date_time_format(GDateTime *datetime, const gchar *format)
    __attribute__((__malloc__));
extern gchar *g_date_time_format_iso8601(GDateTime *datetime)
    __attribute__((__malloc__));

# 29 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 2

# 60 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
typedef enum {
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;

extern GQuark g_bookmark_file_error_quark(void);
# 118 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
typedef struct _GBookmarkFile GBookmarkFile;

extern GBookmarkFile *g_bookmark_file_new(void);
extern void g_bookmark_file_free(GBookmarkFile *bookmark);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GBookmarkFile *
g_bookmark_file_copy(GBookmarkFile *bookmark);

extern gboolean g_bookmark_file_load_from_file(GBookmarkFile *bookmark,
                                               const gchar *filename,
                                               GError **error);
extern gboolean g_bookmark_file_load_from_data(GBookmarkFile *bookmark,
                                               const gchar *data, gsize length,
                                               GError **error);
extern gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile *bookmark,
                                                    const gchar *file,
                                                    gchar **full_path,
                                                    GError **error);
extern gchar *g_bookmark_file_to_data(GBookmarkFile *bookmark, gsize *length,
                                      GError **error)
    __attribute__((__malloc__));
extern gboolean g_bookmark_file_to_file(GBookmarkFile *bookmark,
                                        const gchar *filename, GError **error);

extern void g_bookmark_file_set_title(GBookmarkFile *bookmark, const gchar *uri,
                                      const gchar *title);
extern gchar *g_bookmark_file_get_title(GBookmarkFile *bookmark,
                                        const gchar *uri, GError **error)
    __attribute__((__malloc__));
extern void g_bookmark_file_set_description(GBookmarkFile *bookmark,
                                            const gchar *uri,
                                            const gchar *description);
extern gchar *g_bookmark_file_get_description(GBookmarkFile *bookmark,
                                              const gchar *uri, GError **error)
    __attribute__((__malloc__));
extern void g_bookmark_file_set_mime_type(GBookmarkFile *bookmark,
                                          const gchar *uri,
                                          const gchar *mime_type);
extern gchar *g_bookmark_file_get_mime_type(GBookmarkFile *bookmark,
                                            const gchar *uri, GError **error)
    __attribute__((__malloc__));
extern void g_bookmark_file_set_groups(GBookmarkFile *bookmark,
                                       const gchar *uri, const gchar **groups,
                                       gsize length);
extern void g_bookmark_file_add_group(GBookmarkFile *bookmark, const gchar *uri,
                                      const gchar *group);
extern gboolean g_bookmark_file_has_group(GBookmarkFile *bookmark,
                                          const gchar *uri, const gchar *group,
                                          GError **error);
extern gchar **g_bookmark_file_get_groups(GBookmarkFile *bookmark,
                                          const gchar *uri, gsize *length,
                                          GError **error);
extern void g_bookmark_file_add_application(GBookmarkFile *bookmark,
                                            const gchar *uri, const gchar *name,
                                            const gchar *exec);
extern gboolean g_bookmark_file_has_application(GBookmarkFile *bookmark,
                                                const gchar *uri,
                                                const gchar *name,
                                                GError **error);
extern gchar **g_bookmark_file_get_applications(GBookmarkFile *bookmark,
                                                const gchar *uri, gsize *length,
                                                GError **error);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_set_application_info"
                              "' instead"))) extern gboolean
g_bookmark_file_set_app_info(GBookmarkFile *bookmark, const gchar *uri,
                             const gchar *name, const gchar *exec, gint count,
                             time_t stamp, GError **error);
extern gboolean g_bookmark_file_set_application_info(
    GBookmarkFile *bookmark, const char *uri, const char *name,
    const char *exec, int count, GDateTime *stamp, GError **error);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_get_application_info"
                              "' instead"))) extern gboolean
g_bookmark_file_get_app_info(GBookmarkFile *bookmark, const gchar *uri,
                             const gchar *name, gchar **exec, guint *count,
                             time_t *stamp, GError **error);
extern gboolean g_bookmark_file_get_application_info(
    GBookmarkFile *bookmark, const char *uri, const char *name, char **exec,
    unsigned int *count, GDateTime **stamp, GError **error);
extern void g_bookmark_file_set_is_private(GBookmarkFile *bookmark,
                                           const gchar *uri,
                                           gboolean is_private);
extern gboolean g_bookmark_file_get_is_private(GBookmarkFile *bookmark,
                                               const gchar *uri,
                                               GError **error);
extern void g_bookmark_file_set_icon(GBookmarkFile *bookmark, const gchar *uri,
                                     const gchar *href, const gchar *mime_type);
extern gboolean g_bookmark_file_get_icon(GBookmarkFile *bookmark,
                                         const gchar *uri, gchar **href,
                                         gchar **mime_type, GError **error);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_set_added_date_time"
                              "' instead"))) extern void
g_bookmark_file_set_added(GBookmarkFile *bookmark, const gchar *uri,
                          time_t added);
extern void g_bookmark_file_set_added_date_time(GBookmarkFile *bookmark,
                                                const char *uri,
                                                GDateTime *added);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_get_added_date_time"
                              "' instead"))) extern time_t
g_bookmark_file_get_added(GBookmarkFile *bookmark, const gchar *uri,
                          GError **error);
extern GDateTime *g_bookmark_file_get_added_date_time(GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GError **error);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_set_modified_date_time"
                              "' instead"))) extern void
g_bookmark_file_set_modified(GBookmarkFile *bookmark, const gchar *uri,
                             time_t modified);
extern void g_bookmark_file_set_modified_date_time(GBookmarkFile *bookmark,
                                                   const char *uri,
                                                   GDateTime *modified);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_get_modified_date_time"
                              "' instead"))) extern time_t
g_bookmark_file_get_modified(GBookmarkFile *bookmark, const gchar *uri,
                             GError **error);
extern GDateTime *
g_bookmark_file_get_modified_date_time(GBookmarkFile *bookmark, const char *uri,
                                       GError **error);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_set_visited_date_time"
                              "' instead"))) extern void
g_bookmark_file_set_visited(GBookmarkFile *bookmark, const gchar *uri,
                            time_t visited);
extern void g_bookmark_file_set_visited_date_time(GBookmarkFile *bookmark,
                                                  const char *uri,
                                                  GDateTime *visited);
__attribute__((__deprecated__("Use '"
                              "g_bookmark_file_get_visited_date_time"
                              "' instead"))) extern time_t
g_bookmark_file_get_visited(GBookmarkFile *bookmark, const gchar *uri,
                            GError **error);
extern GDateTime *g_bookmark_file_get_visited_date_time(GBookmarkFile *bookmark,
                                                        const char *uri,
                                                        GError **error);
extern gboolean g_bookmark_file_has_item(GBookmarkFile *bookmark,
                                         const gchar *uri);
extern gint g_bookmark_file_get_size(GBookmarkFile *bookmark);
extern gchar **g_bookmark_file_get_uris(GBookmarkFile *bookmark, gsize *length);
extern gboolean g_bookmark_file_remove_group(GBookmarkFile *bookmark,
                                             const gchar *uri,
                                             const gchar *group,
                                             GError **error);
extern gboolean g_bookmark_file_remove_application(GBookmarkFile *bookmark,
                                                   const gchar *uri,
                                                   const gchar *name,
                                                   GError **error);
extern gboolean g_bookmark_file_remove_item(GBookmarkFile *bookmark,
                                            const gchar *uri, GError **error);
extern gboolean g_bookmark_file_move_item(GBookmarkFile *bookmark,
                                          const gchar *old_uri,
                                          const gchar *new_uri, GError **error);

# 40 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbytes.h" 1
# 34 "/usr/include/glib-2.0/glib/gbytes.h"

extern GBytes *g_bytes_new(gconstpointer data, gsize size);

extern GBytes *g_bytes_new_take(gpointer data, gsize size);

extern GBytes *g_bytes_new_static(gconstpointer data, gsize size);

extern GBytes *g_bytes_new_with_free_func(gconstpointer data, gsize size,
                                          GDestroyNotify free_func,
                                          gpointer user_data);

extern GBytes *g_bytes_new_from_bytes(GBytes *bytes, gsize offset,
                                      gsize length);

extern gconstpointer g_bytes_get_data(GBytes *bytes, gsize *size);

extern gsize g_bytes_get_size(GBytes *bytes);

extern GBytes *g_bytes_ref(GBytes *bytes);

extern void g_bytes_unref(GBytes *bytes);

extern gpointer g_bytes_unref_to_data(GBytes *bytes, gsize *size);

extern GByteArray *g_bytes_unref_to_array(GBytes *bytes);

extern guint g_bytes_hash(gconstpointer bytes);

extern gboolean g_bytes_equal(gconstpointer bytes1, gconstpointer bytes2);

extern gint g_bytes_compare(gconstpointer bytes1, gconstpointer bytes2);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern gconstpointer
g_bytes_get_region(GBytes *bytes, gsize element_size, gsize offset,
                   gsize n_elements);

# 41 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcharset.h" 1
# 30 "/usr/include/glib-2.0/glib/gcharset.h"

extern gboolean g_get_charset(const char **charset);
extern gchar *g_get_codeset(void);
extern gboolean g_get_console_charset(const char **charset);

extern const gchar *const *g_get_language_names(void);
extern const gchar *const *
g_get_language_names_with_category(const gchar *category_name);
extern gchar **g_get_locale_variants(const gchar *locale);

# 42 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 31 "/usr/include/glib-2.0/glib/gchecksum.h"

# 49 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512,
  G_CHECKSUM_SHA384
} GChecksumType;

typedef struct _GChecksum GChecksum;

extern gssize g_checksum_type_get_length(GChecksumType checksum_type);

extern GChecksum *g_checksum_new(GChecksumType checksum_type);
extern void g_checksum_reset(GChecksum *checksum);
extern GChecksum *g_checksum_copy(const GChecksum *checksum);
extern void g_checksum_free(GChecksum *checksum);
extern void g_checksum_update(GChecksum *checksum, const guchar *data,
                              gssize length);
extern const gchar *g_checksum_get_string(GChecksum *checksum);
extern void g_checksum_get_digest(GChecksum *checksum, guint8 *buffer,
                                  gsize *digest_len);

extern gchar *g_compute_checksum_for_data(GChecksumType checksum_type,
                                          const guchar *data, gsize length);
extern gchar *g_compute_checksum_for_string(GChecksumType checksum_type,
                                            const gchar *str, gssize length);

extern gchar *g_compute_checksum_for_bytes(GChecksumType checksum_type,
                                           GBytes *data);

# 43 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 36 "/usr/include/glib-2.0/glib/gconvert.h"

# 56 "/usr/include/glib-2.0/glib/gconvert.h"
typedef enum {
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY,
  G_CONVERT_ERROR_EMBEDDED_NUL
} GConvertError;
# 76 "/usr/include/glib-2.0/glib/gconvert.h"
extern GQuark g_convert_error_quark(void);

typedef struct _GIConv *GIConv;

extern GIConv g_iconv_open(const gchar *to_codeset, const gchar *from_codeset);
extern gsize g_iconv(GIConv converter, gchar **inbuf, gsize *inbytes_left,
                     gchar **outbuf, gsize *outbytes_left);
extern gint g_iconv_close(GIConv converter);

extern gchar *g_convert(const gchar *str, gssize len, const gchar *to_codeset,
                        const gchar *from_codeset, gsize *bytes_read,
                        gsize *bytes_written, GError **error)
    __attribute__((__malloc__));
extern gchar *g_convert_with_iconv(const gchar *str, gssize len,
                                   GIConv converter, gsize *bytes_read,
                                   gsize *bytes_written, GError **error)
    __attribute__((__malloc__));
extern gchar *
g_convert_with_fallback(const gchar *str, gssize len, const gchar *to_codeset,
                        const gchar *from_codeset, const gchar *fallback,
                        gsize *bytes_read, gsize *bytes_written, GError **error)
    __attribute__((__malloc__));

extern gchar *g_locale_to_utf8(const gchar *opsysstring, gssize len,
                               gsize *bytes_read, gsize *bytes_written,
                               GError **error) __attribute__((__malloc__));
extern gchar *g_locale_from_utf8(const gchar *utf8string, gssize len,
                                 gsize *bytes_read, gsize *bytes_written,
                                 GError **error) __attribute__((__malloc__));

extern gchar *g_filename_to_utf8(const gchar *opsysstring, gssize len,
                                 gsize *bytes_read, gsize *bytes_written,
                                 GError **error) __attribute__((__malloc__));
extern gchar *g_filename_from_utf8(const gchar *utf8string, gssize len,
                                   gsize *bytes_read, gsize *bytes_written,
                                   GError **error) __attribute__((__malloc__));

extern gchar *g_filename_from_uri(const gchar *uri, gchar **hostname,
                                  GError **error) __attribute__((__malloc__));

extern gchar *g_filename_to_uri(const gchar *filename, const gchar *hostname,
                                GError **error) __attribute__((__malloc__));
extern gchar *g_filename_display_name(const gchar *filename)
    __attribute__((__malloc__));
extern gboolean g_get_filename_charsets(const gchar ***filename_charsets);

extern gchar *g_filename_display_basename(const gchar *filename)
    __attribute__((__malloc__));

extern gchar **g_uri_list_extract_uris(const gchar *uri_list);

# 44 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 36 "/usr/include/glib-2.0/glib/gdataset.h"

typedef struct _GData GData;

typedef void (*GDataForeachFunc)(GQuark key_id, gpointer data,
                                 gpointer user_data);

extern void g_datalist_init(GData **datalist);
extern void g_datalist_clear(GData **datalist);
extern gpointer g_datalist_id_get_data(GData **datalist, GQuark key_id);
extern void g_datalist_id_set_data_full(GData **datalist, GQuark key_id,
                                        gpointer data,
                                        GDestroyNotify destroy_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern void
g_datalist_id_remove_multiple(GData **datalist, GQuark *keys, gsize n_keys);

typedef gpointer (*GDuplicateFunc)(gpointer data, gpointer user_data);

extern gpointer g_datalist_id_dup_data(GData **datalist, GQuark key_id,
                                       GDuplicateFunc dup_func,
                                       gpointer user_data);
extern gboolean g_datalist_id_replace_data(GData **datalist, GQuark key_id,
                                           gpointer oldval, gpointer newval,
                                           GDestroyNotify destroy,
                                           GDestroyNotify *old_destroy);

extern gpointer g_datalist_id_remove_no_notify(GData **datalist, GQuark key_id);
extern void g_datalist_foreach(GData **datalist, GDataForeachFunc func,
                               gpointer user_data);
# 95 "/usr/include/glib-2.0/glib/gdataset.h"
extern void g_datalist_set_flags(GData **datalist, guint flags);
extern void g_datalist_unset_flags(GData **datalist, guint flags);
extern guint g_datalist_get_flags(GData **datalist);
# 119 "/usr/include/glib-2.0/glib/gdataset.h"
extern void g_dataset_destroy(gconstpointer dataset_location);
extern gpointer g_dataset_id_get_data(gconstpointer dataset_location,
                                      GQuark key_id);
extern gpointer g_datalist_get_data(GData **datalist, const gchar *key);
extern void g_dataset_id_set_data_full(gconstpointer dataset_location,
                                       GQuark key_id, gpointer data,
                                       GDestroyNotify destroy_func);
extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location,
                                              GQuark key_id);
extern void g_dataset_foreach(gconstpointer dataset_location,
                              GDataForeachFunc func, gpointer user_data);
# 154 "/usr/include/glib-2.0/glib/gdataset.h"

# 45 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdate.h" 1
# 39 "/usr/include/glib-2.0/glib/gdate.h"

typedef gint32 GTime __attribute__((__deprecated__("Use '"
                                                   "GDateTime"
                                                   "' instead")));
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;

typedef enum { G_DATE_DAY = 0, G_DATE_MONTH = 1, G_DATE_YEAR = 2 } GDateDMY;

typedef enum {
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum {
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
# 92 "/usr/include/glib-2.0/glib/gdate.h"
struct _GDate {
  guint julian_days : 32;

  guint julian : 1;
  guint dmy : 1;

  guint day : 6;
  guint month : 4;
  guint year : 16;
};

extern GDate *g_date_new(void);
extern GDate *g_date_new_dmy(GDateDay day, GDateMonth month, GDateYear year);
extern GDate *g_date_new_julian(guint32 julian_day);
extern void g_date_free(GDate *date);
extern GDate *g_date_copy(const GDate *date);

extern gboolean g_date_valid(const GDate *date);
extern gboolean g_date_valid_day(GDateDay day) __attribute__((__const__));
extern gboolean g_date_valid_month(GDateMonth month) __attribute__((__const__));
extern gboolean g_date_valid_year(GDateYear year) __attribute__((__const__));
extern gboolean g_date_valid_weekday(GDateWeekday weekday)
    __attribute__((__const__));
extern gboolean g_date_valid_julian(guint32 julian_date)
    __attribute__((__const__));
extern gboolean g_date_valid_dmy(GDateDay day, GDateMonth month, GDateYear year)
    __attribute__((__const__));

extern GDateWeekday g_date_get_weekday(const GDate *date);
extern GDateMonth g_date_get_month(const GDate *date);
extern GDateYear g_date_get_year(const GDate *date);
extern GDateDay g_date_get_day(const GDate *date);
extern guint32 g_date_get_julian(const GDate *date);
extern guint g_date_get_day_of_year(const GDate *date);

extern guint g_date_get_monday_week_of_year(const GDate *date);
extern guint g_date_get_sunday_week_of_year(const GDate *date);
extern guint g_date_get_iso8601_week_of_year(const GDate *date);

extern void g_date_clear(GDate *date, guint n_dates);

extern void g_date_set_parse(GDate *date, const gchar *str);
extern void g_date_set_time_t(GDate *date, time_t timet);

# 191 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic push
# 191 "/usr/include/glib-2.0/glib/gdate.h"

# 191 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_date_set_time_t"
                              "' instead"))) extern void
g_date_set_time_val(GDate *date, GTimeVal *timeval);
__attribute__((__deprecated__("Use '"
                              "g_date_set_time_t"
                              "' instead"))) extern void
g_date_set_time(GDate *date, GTime time_);

# 198 "/usr/include/glib-2.0/glib/gdate.h"
#pragma GCC diagnostic pop
extern void g_date_set_month(GDate *date, GDateMonth month);
extern void g_date_set_day(GDate *date, GDateDay day);
extern void g_date_set_year(GDate *date, GDateYear year);
extern void g_date_set_dmy(GDate *date, GDateDay day, GDateMonth month,
                           GDateYear y);
extern void g_date_set_julian(GDate *date, guint32 julian_date);
extern gboolean g_date_is_first_of_month(const GDate *date);
extern gboolean g_date_is_last_of_month(const GDate *date);

extern void g_date_add_days(GDate *date, guint n_days);
extern void g_date_subtract_days(GDate *date, guint n_days);

extern void g_date_add_months(GDate *date, guint n_months);
extern void g_date_subtract_months(GDate *date, guint n_months);

extern void g_date_add_years(GDate *date, guint n_years);
extern void g_date_subtract_years(GDate *date, guint n_years);
extern gboolean g_date_is_leap_year(GDateYear year) __attribute__((__const__));
extern guint8 g_date_get_days_in_month(GDateMonth month, GDateYear year)
    __attribute__((__const__));
extern guint8 g_date_get_monday_weeks_in_year(GDateYear year)
    __attribute__((__const__));
extern guint8 g_date_get_sunday_weeks_in_year(GDateYear year)
    __attribute__((__const__));

extern gint g_date_days_between(const GDate *date1, const GDate *date2);

extern gint g_date_compare(const GDate *lhs, const GDate *rhs);
extern void g_date_to_struct_tm(const GDate *date, struct tm *tm);

extern void g_date_clamp(GDate *date, const GDate *min_date,
                         const GDate *max_date);

extern void g_date_order(GDate *date1, GDate *date2);

extern gsize g_date_strftime(gchar *s, gsize slen, const gchar *format,
                             const GDate *date);
# 298 "/usr/include/glib-2.0/glib/gdate.h"

# 46 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gdir.h" 1
# 34 "/usr/include/glib-2.0/glib/gdir.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4

# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent {

  __ino64_t d_ino;
  __off64_t d_off;

  unsigned short int d_reclen;
  unsigned char d_type;
  char d_name[256];
};

struct dirent64 {
  __ino64_t d_ino;
  __off64_t d_off;
  unsigned short int d_reclen;
  unsigned char d_type;
  char d_name[256];
};
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum {
  DT_UNKNOWN = 0,

  DT_FIFO = 1,

  DT_CHR = 2,

  DT_DIR = 4,

  DT_BLK = 6,

  DT_REG = 8,

  DT_LNK = 10,

  DT_SOCK = 12,

  DT_WHT = 14

};
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;

extern int closedir(DIR *__dirp) __attribute__((__nonnull__(1)));

extern DIR *opendir(const char *__name) __attribute__((__nonnull__(1)))
__attribute__((__malloc__)) __attribute__((__malloc__(closedir, 1)));

extern DIR *fdopendir(int __fd) __attribute__((__malloc__))
__attribute__((__malloc__(closedir, 1)));
# 167 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir(DIR *__dirp) __asm__(""
                                                   "readdir64")
    __attribute__((__nonnull__(1)));

extern struct dirent64 *readdir64(DIR *__dirp) __attribute__((__nonnull__(1)));
# 191 "/usr/include/dirent.h" 3 4
extern int readdir_r(DIR *__restrict __dirp, struct dirent *__restrict __entry,
                     struct dirent **__restrict __result) __asm__(""
                                                                  "readdir64_r")

    __attribute__((__nonnull__(1, 2, 3))) __attribute__((__deprecated__));

extern int readdir64_r(DIR *__restrict __dirp,
                       struct dirent64 *__restrict __entry,
                       struct dirent64 **__restrict __result)
    __attribute__((__nonnull__(1, 2, 3))) __attribute__((__deprecated__));

extern void rewinddir(DIR *__dirp) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern void seekdir(DIR *__dirp, long int __pos)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int telldir(DIR *__dirp) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int dirfd(DIR *__dirp) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
# 247 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 248 "/usr/include/dirent.h" 2 3 4
# 265 "/usr/include/dirent.h" 3 4
extern int scandir(const char *__restrict __dir,
                   struct dirent ***__restrict __namelist,
                   int (*__selector)(const struct dirent *),
                   int (*__cmp)(const struct dirent **,
                                const struct dirent **)) __asm__(""
                                                                 "scandir64")

    __attribute__((__nonnull__(1, 2)));
# 280 "/usr/include/dirent.h" 3 4
extern int scandir64(const char *__restrict __dir,
                     struct dirent64 ***__restrict __namelist,
                     int (*__selector)(const struct dirent64 *),
                     int (*__cmp)(const struct dirent64 **,
                                  const struct dirent64 **))
    __attribute__((__nonnull__(1, 2)));
# 303 "/usr/include/dirent.h" 3 4
extern int
scandirat(int __dfd, const char *__restrict __dir,
          struct dirent ***__restrict __namelist,
          int (*__selector)(const struct dirent *),
          int (*__cmp)(const struct dirent **,
                       const struct dirent **)) __asm__(""
                                                        "scandirat64")

    __attribute__((__nonnull__(2, 3)));

extern int scandirat64(int __dfd, const char *__restrict __dir,
                       struct dirent64 ***__restrict __namelist,
                       int (*__selector)(const struct dirent64 *),
                       int (*__cmp)(const struct dirent64 **,
                                    const struct dirent64 **))
    __attribute__((__nonnull__(2, 3)));
# 332 "/usr/include/dirent.h" 3 4
extern int alphasort(const struct dirent **__e1,
                     const struct dirent **__e2) __asm__(""
                                                         "alphasort64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__pure__)) __attribute__((__nonnull__(1, 2)));

extern int alphasort64(const struct dirent64 **__e1,
                       const struct dirent64 **__e2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
# 361 "/usr/include/dirent.h" 3 4
extern __ssize_t
getdirentries(int __fd, char *__restrict __buf, size_t __nbytes,
              __off64_t *__restrict __basep) __asm__(""
                                                     "getdirentries64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(2, 4)));

extern __ssize_t getdirentries64(int __fd, char *__restrict __buf,
                                 size_t __nbytes, __off64_t *__restrict __basep)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 4)));
# 387 "/usr/include/dirent.h" 3 4
extern int versionsort(const struct dirent **__e1,
                       const struct dirent **__e2) __asm__(""
                                                           "versionsort64")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__pure__)) __attribute__((__nonnull__(1, 2)));

extern int versionsort64(const struct dirent64 **__e1,
                         const struct dirent64 **__e2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

# 1 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/dirent_ext.h" 3 4

extern __ssize_t getdents64(int __fd, void *__buffer, size_t __length)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

# 407 "/usr/include/dirent.h" 2 3 4
# 35 "/usr/include/glib-2.0/glib/gdir.h" 2

# 39 "/usr/include/glib-2.0/glib/gdir.h"
typedef struct _GDir GDir;

extern GDir *g_dir_open(const gchar *path, guint flags, GError **error);
extern const gchar *g_dir_read_name(GDir *dir);
extern void g_dir_rewind(GDir *dir);
extern void g_dir_close(GDir *dir);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern GDir *
g_dir_ref(GDir *dir);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_dir_unref(GDir *dir);

# 48 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/genviron.h" 1
# 36 "/usr/include/glib-2.0/glib/genviron.h"

extern const gchar *g_getenv(const gchar *variable);
extern gboolean g_setenv(const gchar *variable, const gchar *value,
                         gboolean overwrite);
extern void g_unsetenv(const gchar *variable);
extern gchar **g_listenv(void);

extern gchar **g_get_environ(void);
extern const gchar *g_environ_getenv(gchar **envp, const gchar *variable);
extern gchar **g_environ_setenv(gchar **envp, const gchar *variable,
                                const gchar *value, gboolean overwrite)
    __attribute__((warn_unused_result));
extern gchar **g_environ_unsetenv(gchar **envp, const gchar *variable)
    __attribute__((warn_unused_result));

# 49 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gfileutils.h" 1
# 31 "/usr/include/glib-2.0/glib/gfileutils.h"

typedef enum {
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;

typedef enum {
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;
# 101 "/usr/include/glib-2.0/glib/gfileutils.h"
typedef enum {
  G_FILE_SET_CONTENTS_NONE = 0,
  G_FILE_SET_CONTENTS_CONSISTENT = 1 << 0,
  G_FILE_SET_CONTENTS_DURABLE = 1 << 1,
  G_FILE_SET_CONTENTS_ONLY_EXISTING = 1 << 2
} GFileSetContentsFlags;

extern GQuark g_file_error_quark(void);

extern GFileError g_file_error_from_errno(gint err_no);

extern gboolean g_file_test(const gchar *filename, GFileTest test);
extern gboolean g_file_get_contents(const gchar *filename, gchar **contents,
                                    gsize *length, GError **error);
extern gboolean g_file_set_contents(const gchar *filename,
                                    const gchar *contents, gssize length,
                                    GError **error);

# 129 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic push
# 129 "/usr/include/glib-2.0/glib/gfileutils.h"

# 129 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
extern gboolean g_file_set_contents_full(const gchar *filename,
                                         const gchar *contents, gssize length,
                                         GFileSetContentsFlags flags, int mode,
                                         GError **error);

# 137 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma GCC diagnostic pop
extern gchar *g_file_read_link(const gchar *filename, GError **error);

extern gchar *g_mkdtemp(gchar *tmpl);
extern gchar *g_mkdtemp_full(gchar *tmpl, gint mode);

extern gint g_mkstemp(gchar *tmpl);
extern gint g_mkstemp_full(gchar *tmpl, gint flags, gint mode);

extern gint g_file_open_tmp(const gchar *tmpl, gchar **name_used,
                            GError **error);
extern gchar *g_dir_make_tmp(const gchar *tmpl, GError **error);

extern gchar *g_build_path(const gchar *separator, const gchar *first_element,
                           ...) __attribute__((__malloc__))
__attribute__((__sentinel__));
extern gchar *g_build_pathv(const gchar *separator, gchar **args)
    __attribute__((__malloc__));

extern gchar *g_build_filename(const gchar *first_element, ...)
    __attribute__((__malloc__)) __attribute__((__sentinel__));
extern gchar *g_build_filenamev(gchar **args) __attribute__((__malloc__));
extern gchar *g_build_filename_valist(const gchar *first_element, va_list *args)
    __attribute__((__malloc__));

extern gint g_mkdir_with_parents(const gchar *pathname, gint mode);
# 201 "/usr/include/glib-2.0/glib/gfileutils.h"
extern gboolean g_path_is_absolute(const gchar *file_name);
extern const gchar *g_path_skip_root(const gchar *file_name);

__attribute__((__deprecated__("Use '"
                              "g_path_get_basename"
                              "' instead"))) extern const gchar *
g_basename(const gchar *file_name);

extern gchar *g_get_current_dir(void);
extern gchar *g_path_get_basename(const gchar *file_name)
    __attribute__((__malloc__));
extern gchar *g_path_get_dirname(const gchar *file_name)
    __attribute__((__malloc__));

extern gchar *g_canonicalize_filename(const gchar *filename,
                                      const gchar *relative_to)
    __attribute__((__malloc__));

# 51 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ggettext.h" 1
# 36 "/usr/include/glib-2.0/glib/ggettext.h"

extern const gchar *g_strip_context(const gchar *msgid, const gchar *msgval)
    __attribute__((__format_arg__(1)));

extern const gchar *g_dgettext(const gchar *domain, const gchar *msgid)
    __attribute__((__format_arg__(2)));
extern const gchar *g_dcgettext(const gchar *domain, const gchar *msgid,
                                gint category)
    __attribute__((__format_arg__(2)));
extern const gchar *g_dngettext(const gchar *domain, const gchar *msgid,
                                const gchar *msgid_plural, gulong n)
    __attribute__((__format_arg__(3)));
extern const gchar *g_dpgettext(const gchar *domain, const gchar *msgctxtid,
                                gsize msgidoffset)
    __attribute__((__format_arg__(2)));
extern const gchar *g_dpgettext2(const gchar *domain, const gchar *context,
                                 const gchar *msgid)
    __attribute__((__format_arg__(3)));

# 52 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 36 "/usr/include/glib-2.0/glib/ghash.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 34 "/usr/include/glib-2.0/glib/glist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 37 "/usr/include/glib-2.0/glib/gmem.h"

# 54 "/usr/include/glib-2.0/glib/gmem.h"
typedef struct _GMemVTable GMemVTable;
# 73 "/usr/include/glib-2.0/glib/gmem.h"
extern void(g_free)(gpointer mem);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_free_sized(gpointer mem, size_t size);

extern void g_clear_pointer(gpointer *pp, GDestroyNotify destroy);

extern gpointer g_malloc(gsize n_bytes) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_malloc0(gsize n_bytes) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_realloc(gpointer mem, gsize n_bytes)
    __attribute__((warn_unused_result));
extern gpointer g_try_malloc(gsize n_bytes) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_try_malloc0(gsize n_bytes) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_try_realloc(gpointer mem, gsize n_bytes)
    __attribute__((warn_unused_result));

extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1, 2)));
extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1, 2)));
extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
    __attribute__((warn_unused_result));
extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1, 2)));
extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1, 2)));
extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks,
                                gsize n_block_bytes)
    __attribute__((warn_unused_result));

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern gpointer
g_aligned_alloc(gsize n_blocks, gsize n_block_bytes, gsize alignment)
    __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1, 2)));
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern gpointer
g_aligned_alloc0(gsize n_blocks, gsize n_block_bytes, gsize alignment)
    __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1, 2)));
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern void
g_aligned_free(gpointer mem);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_aligned_free_sized(gpointer mem, size_t alignment, size_t size);
# 232 "/usr/include/glib-2.0/glib/gmem.h"

static inline gpointer g_steal_pointer(gpointer pp) {
  gpointer *ptr = (gpointer *)pp;
  gpointer ref;

  ref = *ptr;
  *ptr =
# 240 "/usr/include/glib-2.0/glib/gmem.h" 3 4
      ((void *)0)
# 240 "/usr/include/glib-2.0/glib/gmem.h"
      ;

  return ref;
}
# 398 "/usr/include/glib-2.0/glib/gmem.h"
struct _GMemVTable {
  gpointer (*malloc)(gsize n_bytes);
  gpointer (*realloc)(gpointer mem, gsize n_bytes);
  void (*free)(gpointer mem);

  gpointer (*calloc)(gsize n_blocks, gsize n_block_bytes);
  gpointer (*try_malloc)(gsize n_bytes);
  gpointer (*try_realloc)(gpointer mem, gsize n_bytes);
};
__attribute__((__deprecated__)) extern void
g_mem_set_vtable(GMemVTable *vtable);
__attribute__((__deprecated__)) extern gboolean g_mem_is_system_malloc(void);

extern gboolean g_mem_gc_friendly;

extern GMemVTable *glib_mem_profiler_table;
__attribute__((__deprecated__)) extern void g_mem_profile(void);

# 35 "/usr/include/glib-2.0/glib/glist.h" 2
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 36 "/usr/include/glib-2.0/glib/gnode.h"

typedef struct _GNode GNode;

typedef enum {
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;

typedef enum {
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean (*GNodeTraverseFunc)(GNode *node, gpointer data);
typedef void (*GNodeForeachFunc)(GNode *node, gpointer data);

struct _GNode {
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};
# 100 "/usr/include/glib-2.0/glib/gnode.h"
extern GNode *g_node_new(gpointer data);
extern void g_node_destroy(GNode *root);
extern void g_node_unlink(GNode *node);
extern GNode *g_node_copy_deep(GNode *node, GCopyFunc copy_func, gpointer data);
extern GNode *g_node_copy(GNode *node);
extern GNode *g_node_insert(GNode *parent, gint position, GNode *node);
extern GNode *g_node_insert_before(GNode *parent, GNode *sibling, GNode *node);
extern GNode *g_node_insert_after(GNode *parent, GNode *sibling, GNode *node);
extern GNode *g_node_prepend(GNode *parent, GNode *node);
extern guint g_node_n_nodes(GNode *root, GTraverseFlags flags);
extern GNode *g_node_get_root(GNode *node);
extern gboolean g_node_is_ancestor(GNode *node, GNode *descendant);
extern guint g_node_depth(GNode *node);
extern GNode *g_node_find(GNode *root, GTraverseType order,
                          GTraverseFlags flags, gpointer data);
# 225 "/usr/include/glib-2.0/glib/gnode.h"
extern void g_node_traverse(GNode *root, GTraverseType order,
                            GTraverseFlags flags, gint max_depth,
                            GNodeTraverseFunc func, gpointer data);

extern guint g_node_max_height(GNode *root);

extern void g_node_children_foreach(GNode *node, GTraverseFlags flags,
                                    GNodeForeachFunc func, gpointer data);
extern void g_node_reverse_children(GNode *node);
extern guint g_node_n_children(GNode *node);
extern GNode *g_node_nth_child(GNode *node, guint n);
extern GNode *g_node_last_child(GNode *node);
extern GNode *g_node_find_child(GNode *node, GTraverseFlags flags,
                                gpointer data);
extern gint g_node_child_position(GNode *node, GNode *child);
extern gint g_node_child_index(GNode *node, gpointer data);

extern GNode *g_node_first_sibling(GNode *node);
extern GNode *g_node_last_sibling(GNode *node);
# 307 "/usr/include/glib-2.0/glib/gnode.h"

# 36 "/usr/include/glib-2.0/glib/glist.h" 2

typedef struct _GList GList;

struct _GList {
  gpointer data;
  GList *next;
  GList *prev;
};

extern GList *g_list_alloc(void) __attribute__((warn_unused_result));
extern void g_list_free(GList *list);
extern void g_list_free_1(GList *list);

extern void g_list_free_full(GList *list, GDestroyNotify free_func);
extern GList *g_list_append(GList *list, gpointer data)
    __attribute__((warn_unused_result));
extern GList *g_list_prepend(GList *list, gpointer data)
    __attribute__((warn_unused_result));
extern GList *g_list_insert(GList *list, gpointer data, gint position)
    __attribute__((warn_unused_result));
extern GList *g_list_insert_sorted(GList *list, gpointer data,
                                   GCompareFunc func)
    __attribute__((warn_unused_result));
extern GList *g_list_insert_sorted_with_data(GList *list, gpointer data,
                                             GCompareDataFunc func,
                                             gpointer user_data)
    __attribute__((warn_unused_result));
extern GList *g_list_insert_before(GList *list, GList *sibling, gpointer data)
    __attribute__((warn_unused_result));
extern GList *g_list_insert_before_link(GList *list, GList *sibling,
                                        GList *link_)
    __attribute__((warn_unused_result));
extern GList *g_list_concat(GList *list1, GList *list2)
    __attribute__((warn_unused_result));
extern GList *g_list_remove(GList *list, gconstpointer data)
    __attribute__((warn_unused_result));
extern GList *g_list_remove_all(GList *list, gconstpointer data)
    __attribute__((warn_unused_result));
extern GList *g_list_remove_link(GList *list, GList *llink)
    __attribute__((warn_unused_result));
extern GList *g_list_delete_link(GList *list, GList *link_)
    __attribute__((warn_unused_result));
extern GList *g_list_reverse(GList *list) __attribute__((warn_unused_result));
extern GList *g_list_copy(GList *list) __attribute__((warn_unused_result));

extern GList *g_list_copy_deep(GList *list, GCopyFunc func, gpointer user_data)
    __attribute__((warn_unused_result));

extern GList *g_list_nth(GList *list, guint n);
extern GList *g_list_nth_prev(GList *list, guint n);
extern GList *g_list_find(GList *list, gconstpointer data);
extern GList *g_list_find_custom(GList *list, gconstpointer data,
                                 GCompareFunc func);
extern gint g_list_position(GList *list, GList *llink);
extern gint g_list_index(GList *list, gconstpointer data);
extern GList *g_list_last(GList *list);
extern GList *g_list_first(GList *list);
extern guint g_list_length(GList *list);
extern void g_list_foreach(GList *list, GFunc func, gpointer user_data);
extern GList *g_list_sort(GList *list, GCompareFunc compare_func)
    __attribute__((warn_unused_result));
extern GList *g_list_sort_with_data(GList *list, GCompareDataFunc compare_func,
                                    gpointer user_data)
    __attribute__((warn_unused_result));
extern gpointer g_list_nth_data(GList *list, guint n);

extern void g_clear_list(GList **list_ptr, GDestroyNotify destroy);
# 177 "/usr/include/glib-2.0/glib/glist.h"

# 37 "/usr/include/glib-2.0/glib/ghash.h" 2

typedef struct _GHashTable GHashTable;

typedef gboolean (*GHRFunc)(gpointer key, gpointer value, gpointer user_data);

typedef struct _GHashTableIter GHashTableIter;

struct _GHashTableIter {

  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};

extern GHashTable *g_hash_table_new(GHashFunc hash_func,
                                    GEqualFunc key_equal_func);
extern GHashTable *g_hash_table_new_full(GHashFunc hash_func,
                                         GEqualFunc key_equal_func,
                                         GDestroyNotify key_destroy_func,
                                         GDestroyNotify value_destroy_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern GHashTable *
g_hash_table_new_similar(GHashTable *other_hash_table);
extern void g_hash_table_destroy(GHashTable *hash_table);
extern gboolean g_hash_table_insert(GHashTable *hash_table, gpointer key,
                                    gpointer value);
extern gboolean g_hash_table_replace(GHashTable *hash_table, gpointer key,
                                     gpointer value);
extern gboolean g_hash_table_add(GHashTable *hash_table, gpointer key);
extern gboolean g_hash_table_remove(GHashTable *hash_table, gconstpointer key);
extern void g_hash_table_remove_all(GHashTable *hash_table);
extern gboolean g_hash_table_steal(GHashTable *hash_table, gconstpointer key);
extern gboolean g_hash_table_steal_extended(GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *stolen_key,
                                            gpointer *stolen_value);
extern void g_hash_table_steal_all(GHashTable *hash_table);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_hash_table_steal_all_keys(GHashTable *hash_table);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_hash_table_steal_all_values(GHashTable *hash_table);
extern gpointer g_hash_table_lookup(GHashTable *hash_table, gconstpointer key);
extern gboolean g_hash_table_contains(GHashTable *hash_table,
                                      gconstpointer key);
extern gboolean g_hash_table_lookup_extended(GHashTable *hash_table,
                                             gconstpointer lookup_key,
                                             gpointer *orig_key,
                                             gpointer *value);
extern void g_hash_table_foreach(GHashTable *hash_table, GHFunc func,
                                 gpointer user_data);
extern gpointer g_hash_table_find(GHashTable *hash_table, GHRFunc predicate,
                                  gpointer user_data);
extern guint g_hash_table_foreach_remove(GHashTable *hash_table, GHRFunc func,
                                         gpointer user_data);
extern guint g_hash_table_foreach_steal(GHashTable *hash_table, GHRFunc func,
                                        gpointer user_data);
extern guint g_hash_table_size(GHashTable *hash_table);
extern GList *g_hash_table_get_keys(GHashTable *hash_table);
extern GList *g_hash_table_get_values(GHashTable *hash_table);
extern gpointer *g_hash_table_get_keys_as_array(GHashTable *hash_table,
                                                guint *length);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_hash_table_get_keys_as_ptr_array(GHashTable *hash_table);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPtrArray *
g_hash_table_get_values_as_ptr_array(GHashTable *hash_table);

extern void g_hash_table_iter_init(GHashTableIter *iter,
                                   GHashTable *hash_table);
extern gboolean g_hash_table_iter_next(GHashTableIter *iter, gpointer *key,
                                       gpointer *value);
extern GHashTable *g_hash_table_iter_get_hash_table(GHashTableIter *iter);
extern void g_hash_table_iter_remove(GHashTableIter *iter);
extern void g_hash_table_iter_replace(GHashTableIter *iter, gpointer value);
extern void g_hash_table_iter_steal(GHashTableIter *iter);

extern GHashTable *g_hash_table_ref(GHashTable *hash_table);
extern void g_hash_table_unref(GHashTable *hash_table);

extern gboolean g_str_equal(gconstpointer v1, gconstpointer v2);

extern guint g_str_hash(gconstpointer v);

extern gboolean g_int_equal(gconstpointer v1, gconstpointer v2);
extern guint g_int_hash(gconstpointer v);

extern gboolean g_int64_equal(gconstpointer v1, gconstpointer v2);
extern guint g_int64_hash(gconstpointer v);

extern gboolean g_double_equal(gconstpointer v1, gconstpointer v2);
extern guint g_double_hash(gconstpointer v);

extern guint g_direct_hash(gconstpointer v) __attribute__((__const__));
extern gboolean g_direct_equal(gconstpointer v1, gconstpointer v2)
    __attribute__((__const__));

# 53 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghmac.h" 1
# 29 "/usr/include/glib-2.0/glib/ghmac.h"
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 30 "/usr/include/glib-2.0/glib/ghmac.h" 2

typedef struct _GHmac GHmac;

extern GHmac *g_hmac_new(GChecksumType digest_type, const guchar *key,
                         gsize key_len);
extern GHmac *g_hmac_copy(const GHmac *hmac);
extern GHmac *g_hmac_ref(GHmac *hmac);
extern void g_hmac_unref(GHmac *hmac);
extern void g_hmac_update(GHmac *hmac, const guchar *data, gssize length);
extern const gchar *g_hmac_get_string(GHmac *hmac);
extern void g_hmac_get_digest(GHmac *hmac, guint8 *buffer, gsize *digest_len);

extern gchar *g_compute_hmac_for_data(GChecksumType digest_type,
                                      const guchar *key, gsize key_len,
                                      const guchar *data, gsize length);
extern gchar *g_compute_hmac_for_string(GChecksumType digest_type,
                                        const guchar *key, gsize key_len,
                                        const gchar *str, gssize length);
extern gchar *g_compute_hmac_for_bytes(GChecksumType digest_type, GBytes *key,
                                       GBytes *data);

# 54 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghook.h" 1
# 36 "/usr/include/glib-2.0/glib/ghook.h"

typedef struct _GHook GHook;
typedef struct _GHookList GHookList;

typedef gint (*GHookCompareFunc)(GHook *new_hook, GHook *sibling);
typedef gboolean (*GHookFindFunc)(GHook *hook, gpointer data);
typedef void (*GHookMarshaller)(GHook *hook, gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller)(GHook *hook, gpointer marshal_data);
typedef void (*GHookFunc)(gpointer data);
typedef gboolean (*GHookCheckFunc)(gpointer data);
typedef void (*GHookFinalizeFunc)(GHookList *hook_list, GHook *hook);
typedef enum {
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;

struct _GHookList {
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook {
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 106 "/usr/include/glib-2.0/glib/ghook.h"
extern void g_hook_list_init(GHookList *hook_list, guint hook_size);
extern void g_hook_list_clear(GHookList *hook_list);
extern GHook *g_hook_alloc(GHookList *hook_list);
extern void g_hook_free(GHookList *hook_list, GHook *hook);
extern GHook *g_hook_ref(GHookList *hook_list, GHook *hook);
extern void g_hook_unref(GHookList *hook_list, GHook *hook);
extern gboolean g_hook_destroy(GHookList *hook_list, gulong hook_id);
extern void g_hook_destroy_link(GHookList *hook_list, GHook *hook);
extern void g_hook_prepend(GHookList *hook_list, GHook *hook);
extern void g_hook_insert_before(GHookList *hook_list, GHook *sibling,
                                 GHook *hook);
extern void g_hook_insert_sorted(GHookList *hook_list, GHook *hook,
                                 GHookCompareFunc func);
extern GHook *g_hook_get(GHookList *hook_list, gulong hook_id);
extern GHook *g_hook_find(GHookList *hook_list, gboolean need_valids,
                          GHookFindFunc func, gpointer data);
extern GHook *g_hook_find_data(GHookList *hook_list, gboolean need_valids,
                               gpointer data);
extern GHook *g_hook_find_func(GHookList *hook_list, gboolean need_valids,
                               gpointer func);
extern GHook *g_hook_find_func_data(GHookList *hook_list, gboolean need_valids,
                                    gpointer func, gpointer data);

extern GHook *g_hook_first_valid(GHookList *hook_list, gboolean may_be_in_call);

extern GHook *g_hook_next_valid(GHookList *hook_list, GHook *hook,
                                gboolean may_be_in_call);

extern gint g_hook_compare_ids(GHook *new_hook, GHook *sibling);

extern void g_hook_list_invoke(GHookList *hook_list, gboolean may_recurse);

extern void g_hook_list_invoke_check(GHookList *hook_list,
                                     gboolean may_recurse);

extern void g_hook_list_marshal(GHookList *hook_list, gboolean may_recurse,
                                GHookMarshaller marshaller,
                                gpointer marshal_data);
extern void g_hook_list_marshal_check(GHookList *hook_list,
                                      gboolean may_recurse,
                                      GHookCheckMarshaller marshaller,
                                      gpointer marshal_data);

# 55 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghostutils.h" 1
# 29 "/usr/include/glib-2.0/glib/ghostutils.h"

extern gboolean g_hostname_is_non_ascii(const gchar *hostname);
extern gboolean g_hostname_is_ascii_encoded(const gchar *hostname);
extern gboolean g_hostname_is_ip_address(const gchar *hostname);

extern gchar *g_hostname_to_ascii(const gchar *hostname);
extern gchar *g_hostname_to_unicode(const gchar *hostname);

# 56 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/giochannel.h" 1
# 35 "/usr/include/glib-2.0/glib/giochannel.h"
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 27 "/usr/include/glib-2.0/glib/gmain.h"
# 1 "/usr/include/glib-2.0/glib/gpoll.h" 1
# 30 "/usr/include/glib-2.0/glib/gpoll.h"

# 61 "/usr/include/glib-2.0/glib/gpoll.h"
typedef struct _GPollFD GPollFD;
# 76 "/usr/include/glib-2.0/glib/gpoll.h"
typedef gint (*GPollFunc)(GPollFD *ufds, guint nfsd, gint timeout_);
# 93 "/usr/include/glib-2.0/glib/gpoll.h"
struct _GPollFD {

  gint fd;

  gushort events;
  gushort revents;
};
# 114 "/usr/include/glib-2.0/glib/gpoll.h"
extern gint g_poll(GPollFD *fds, guint nfds, gint timeout);

# 28 "/usr/include/glib-2.0/glib/gmain.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 37 "/usr/include/glib-2.0/glib/gslist.h"

typedef struct _GSList GSList;

struct _GSList {
  gpointer data;
  GSList *next;
};

extern GSList *g_slist_alloc(void) __attribute__((warn_unused_result));
extern void g_slist_free(GSList *list);
extern void g_slist_free_1(GSList *list);

extern void g_slist_free_full(GSList *list, GDestroyNotify free_func);
extern GSList *g_slist_append(GSList *list, gpointer data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_prepend(GSList *list, gpointer data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_insert(GSList *list, gpointer data, gint position)
    __attribute__((warn_unused_result));
extern GSList *g_slist_insert_sorted(GSList *list, gpointer data,
                                     GCompareFunc func)
    __attribute__((warn_unused_result));
extern GSList *g_slist_insert_sorted_with_data(GSList *list, gpointer data,
                                               GCompareDataFunc func,
                                               gpointer user_data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_insert_before(GSList *slist, GSList *sibling,
                                     gpointer data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_concat(GSList *list1, GSList *list2)
    __attribute__((warn_unused_result));
extern GSList *g_slist_remove(GSList *list, gconstpointer data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_remove_all(GSList *list, gconstpointer data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_remove_link(GSList *list, GSList *link_)
    __attribute__((warn_unused_result));
extern GSList *g_slist_delete_link(GSList *list, GSList *link_)
    __attribute__((warn_unused_result));
extern GSList *g_slist_reverse(GSList *list)
    __attribute__((warn_unused_result));
extern GSList *g_slist_copy(GSList *list) __attribute__((warn_unused_result));

extern GSList *g_slist_copy_deep(GSList *list, GCopyFunc func,
                                 gpointer user_data)
    __attribute__((warn_unused_result));
extern GSList *g_slist_nth(GSList *list, guint n);
extern GSList *g_slist_find(GSList *list, gconstpointer data);
extern GSList *g_slist_find_custom(GSList *list, gconstpointer data,
                                   GCompareFunc func);
extern gint g_slist_position(GSList *list, GSList *llink);
extern gint g_slist_index(GSList *list, gconstpointer data);
extern GSList *g_slist_last(GSList *list);
extern guint g_slist_length(GSList *list);
extern void g_slist_foreach(GSList *list, GFunc func, gpointer user_data);
extern GSList *g_slist_sort(GSList *list, GCompareFunc compare_func)
    __attribute__((warn_unused_result));
extern GSList *g_slist_sort_with_data(GSList *list,
                                      GCompareDataFunc compare_func,
                                      gpointer user_data)
    __attribute__((warn_unused_result));
extern gpointer g_slist_nth_data(GSList *list, guint n);

extern void g_clear_slist(GSList **slist_ptr, GDestroyNotify destroy);
# 164 "/usr/include/glib-2.0/glib/gslist.h"

# 29 "/usr/include/glib-2.0/glib/gmain.h" 2

typedef enum {
  G_IO_IN = 1,
  G_IO_OUT = 4,
  G_IO_PRI = 2,
  G_IO_ERR = 8,
  G_IO_HUP = 16,
  G_IO_NVAL = 32
} GIOCondition;
# 56 "/usr/include/glib-2.0/glib/gmain.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) typedef enum {
  G_MAIN_CONTEXT_FLAGS_NONE = 0,
  G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1
} GMainContextFlags;
# 70 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GMainContext GMainContext;

typedef struct _GMainLoop GMainLoop;

typedef struct _GSource GSource;
typedef struct _GSourcePrivate GSourcePrivate;
# 99 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
# 155 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceFuncs GSourceFuncs;
# 195 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFunc)(gpointer user_data);
# 209 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GSourceOnceFunc)(gpointer user_data);
# 244 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GChildWatchFunc)(GPid pid, gint wait_status, gpointer user_data);
# 258 "/usr/include/glib-2.0/glib/gmain.h"

typedef void (*GSourceDisposeFunc)(GSource *source);

struct _GSource {

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  const GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;

  GSource *prev;
  GSource *next;

  char *name;

  GSourcePrivate *priv;
};

struct _GSourceCallbackFuncs {
  void (*ref)(gpointer cb_data);
  void (*unref)(gpointer cb_data);
  void (*get)(gpointer cb_data, GSource *source, GSourceFunc *func,
              gpointer *data);
};

typedef void (*GSourceDummyMarshal)(void);

struct _GSourceFuncs {
  gboolean (*prepare)(GSource *source, gint *timeout_);
  gboolean (*check)(GSource *source);
  gboolean (*dispatch)(GSource *source, GSourceFunc callback,
                       gpointer user_data);
  void (*finalize)(GSource *source);

  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
# 395 "/usr/include/glib-2.0/glib/gmain.h"
extern GMainContext *g_main_context_new(void);

# 397 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 397 "/usr/include/glib-2.0/glib/gmain.h"

# 397 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern GMainContext *
g_main_context_new_with_flags(GMainContextFlags flags);

# 400 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
extern GMainContext *g_main_context_ref(GMainContext *context);
extern void g_main_context_unref(GMainContext *context);
extern GMainContext *g_main_context_default(void);

extern gboolean g_main_context_iteration(GMainContext *context,
                                         gboolean may_block);
extern gboolean g_main_context_pending(GMainContext *context);

extern GSource *g_main_context_find_source_by_id(GMainContext *context,
                                                 guint source_id);
extern GSource *g_main_context_find_source_by_user_data(GMainContext *context,
                                                        gpointer user_data);
extern GSource *g_main_context_find_source_by_funcs_user_data(
    GMainContext *context, GSourceFuncs *funcs, gpointer user_data);

extern void g_main_context_wakeup(GMainContext *context);
extern gboolean g_main_context_acquire(GMainContext *context);
extern void g_main_context_release(GMainContext *context);
extern gboolean g_main_context_is_owner(GMainContext *context);
__attribute__((__deprecated__("Use '"
                              "g_main_context_is_owner"
                              "' instead"))) extern gboolean
g_main_context_wait(GMainContext *context, GCond *cond, GMutex *mutex);

extern gboolean g_main_context_prepare(GMainContext *context, gint *priority);
extern gint g_main_context_query(GMainContext *context, gint max_priority,
                                 gint *timeout_, GPollFD *fds, gint n_fds);
extern gboolean g_main_context_check(GMainContext *context, gint max_priority,
                                     GPollFD *fds, gint n_fds);
extern void g_main_context_dispatch(GMainContext *context);

extern void g_main_context_set_poll_func(GMainContext *context, GPollFunc func);
extern GPollFunc g_main_context_get_poll_func(GMainContext *context);

extern void g_main_context_add_poll(GMainContext *context, GPollFD *fd,
                                    gint priority);
extern void g_main_context_remove_poll(GMainContext *context, GPollFD *fd);

extern gint g_main_depth(void);
extern GSource *g_main_current_source(void);

extern void g_main_context_push_thread_default(GMainContext *context);
extern void g_main_context_pop_thread_default(GMainContext *context);
extern GMainContext *g_main_context_get_thread_default(void);
extern GMainContext *g_main_context_ref_thread_default(void);
# 498 "/usr/include/glib-2.0/glib/gmain.h"
typedef void GMainContextPusher;
# 545 "/usr/include/glib-2.0/glib/gmain.h"

# 545 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 545 "/usr/include/glib-2.0/glib/gmain.h"

# 545 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline GMainContextPusher *
g_main_context_pusher_new(GMainContext *main_context) {
  g_main_context_push_thread_default(main_context);
  return (GMainContextPusher *)main_context;
}

# 553 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop
# 567 "/usr/include/glib-2.0/glib/gmain.h"

# 567 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 567 "/usr/include/glib-2.0/glib/gmain.h"

# 567 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static inline void g_main_context_pusher_free(GMainContextPusher *pusher) {
  g_main_context_pop_thread_default((GMainContext *)pusher);
}

# 574 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop

extern GMainLoop *g_main_loop_new(GMainContext *context, gboolean is_running);
extern void g_main_loop_run(GMainLoop *loop);
extern void g_main_loop_quit(GMainLoop *loop);
extern GMainLoop *g_main_loop_ref(GMainLoop *loop);
extern void g_main_loop_unref(GMainLoop *loop);
extern gboolean g_main_loop_is_running(GMainLoop *loop);
extern GMainContext *g_main_loop_get_context(GMainLoop *loop);

extern GSource *g_source_new(GSourceFuncs *source_funcs, guint struct_size);

# 600 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 600 "/usr/include/glib-2.0/glib/gmain.h"

# 600 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
extern void g_source_set_dispose_function(GSource *source,
                                          GSourceDisposeFunc dispose);

# 604 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop

extern GSource *g_source_ref(GSource *source);
extern void g_source_unref(GSource *source);

extern guint g_source_attach(GSource *source, GMainContext *context);
extern void g_source_destroy(GSource *source);

extern void g_source_set_priority(GSource *source, gint priority);
extern gint g_source_get_priority(GSource *source);
extern void g_source_set_can_recurse(GSource *source, gboolean can_recurse);
extern gboolean g_source_get_can_recurse(GSource *source);
extern guint g_source_get_id(GSource *source);

extern GMainContext *g_source_get_context(GSource *source);

extern void g_source_set_callback(GSource *source, GSourceFunc func,
                                  gpointer data, GDestroyNotify notify);

extern void g_source_set_funcs(GSource *source, GSourceFuncs *funcs);
extern gboolean g_source_is_destroyed(GSource *source);

extern void g_source_set_name(GSource *source, const char *name);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_source_set_static_name(GSource *source, const char *name);
extern const char *g_source_get_name(GSource *source);
extern void g_source_set_name_by_id(guint tag, const char *name);

extern void g_source_set_ready_time(GSource *source, gint64 ready_time);
extern gint64 g_source_get_ready_time(GSource *source);

extern gpointer g_source_add_unix_fd(GSource *source, gint fd,
                                     GIOCondition events);
extern void g_source_modify_unix_fd(GSource *source, gpointer tag,
                                    GIOCondition new_events);
extern void g_source_remove_unix_fd(GSource *source, gpointer tag);
extern GIOCondition g_source_query_unix_fd(GSource *source, gpointer tag);

extern void
g_source_set_callback_indirect(GSource *source, gpointer callback_data,
                               GSourceCallbackFuncs *callback_funcs);

extern void g_source_add_poll(GSource *source, GPollFD *fd);
extern void g_source_remove_poll(GSource *source, GPollFD *fd);

extern void g_source_add_child_source(GSource *source, GSource *child_source);
extern void g_source_remove_child_source(GSource *source,
                                         GSource *child_source);

# 700 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 700 "/usr/include/glib-2.0/glib/gmain.h"

# 700 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_source_get_time"
                              "' instead"))) extern void
g_source_get_current_time(GSource *source, GTimeVal *timeval);

# 704 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop

extern gint64 g_source_get_time(GSource *source);

extern GSource *g_idle_source_new(void);
extern GSource *g_child_watch_source_new(GPid pid);
extern GSource *g_timeout_source_new(guint interval);
extern GSource *g_timeout_source_new_seconds(guint interval);

# 726 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic push
# 726 "/usr/include/glib-2.0/glib/gmain.h"

# 726 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '"
                              "g_get_real_time"
                              "' instead"))) extern void
g_get_current_time(GTimeVal *result);

# 729 "/usr/include/glib-2.0/glib/gmain.h"
#pragma GCC diagnostic pop

extern gint64 g_get_monotonic_time(void);
extern gint64 g_get_real_time(void);

extern gboolean g_source_remove(guint tag);
extern gboolean g_source_remove_by_user_data(gpointer user_data);
extern gboolean g_source_remove_by_funcs_user_data(GSourceFuncs *funcs,
                                                   gpointer user_data);
# 757 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GClearHandleFunc)(guint handle_id);

extern void g_clear_handle_id(guint *tag_ptr, GClearHandleFunc clear_func);
# 779 "/usr/include/glib-2.0/glib/gmain.h"
extern guint g_timeout_add_full(gint priority, guint interval,
                                GSourceFunc function, gpointer data,
                                GDestroyNotify notify);
extern guint g_timeout_add(guint interval, GSourceFunc function, gpointer data);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern guint
g_timeout_add_once(guint interval, GSourceOnceFunc function, gpointer data);
extern guint g_timeout_add_seconds_full(gint priority, guint interval,
                                        GSourceFunc function, gpointer data,
                                        GDestroyNotify notify);
extern guint g_timeout_add_seconds(guint interval, GSourceFunc function,
                                   gpointer data);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "78"))) extern guint
g_timeout_add_seconds_once(guint interval, GSourceOnceFunc function,
                           gpointer data);
extern guint g_child_watch_add_full(gint priority, GPid pid,
                                    GChildWatchFunc function, gpointer data,
                                    GDestroyNotify notify);
extern guint g_child_watch_add(GPid pid, GChildWatchFunc function,
                               gpointer data);
extern guint g_idle_add(GSourceFunc function, gpointer data);
extern guint g_idle_add_full(gint priority, GSourceFunc function, gpointer data,
                             GDestroyNotify notify);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "74"))) extern guint
g_idle_add_once(GSourceOnceFunc function, gpointer data);
extern gboolean g_idle_remove_by_data(gpointer data);

extern void g_main_context_invoke_full(GMainContext *context, gint priority,
                                       GSourceFunc function, gpointer data,
                                       GDestroyNotify notify);
extern void g_main_context_invoke(GMainContext *context, GSourceFunc function,
                                  gpointer data);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) static inline int
g_steal_fd(int *fd_ptr) {
  int fd = *fd_ptr;
  *fd_ptr = -1;
  return fd;
}

extern GSourceFuncs g_timeout_funcs;
extern GSourceFuncs g_child_watch_funcs;
extern GSourceFuncs g_idle_funcs;

extern GSourceFuncs g_unix_signal_funcs;
extern GSourceFuncs g_unix_fd_source_funcs;

# 36 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 35 "/usr/include/glib-2.0/glib/gstring.h"
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 32 "/usr/include/glib-2.0/glib/gunicode.h"

# 61 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint32 gunichar;
# 79 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint16 gunichar2;
# 118 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;
# 220 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CLOSE_PARENTHESIS
  __attribute__((deprecated("Not available before "
                            "2"
                            "."
                            "70"))) = G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR,
  G_UNICODE_BREAK_EMOJI_BASE,
  G_UNICODE_BREAK_EMOJI_MODIFIER,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER,
  G_UNICODE_BREAK_AKSARA,
  G_UNICODE_BREAK_AKSARA_PRE_BASE,
  G_UNICODE_BREAK_AKSARA_START,
  G_UNICODE_BREAK_VIRAMA_FINAL,
  G_UNICODE_BREAK_VIRAMA
} GUnicodeBreakType;
# 463 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,

  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,

  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,

  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,

  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN,

  G_UNICODE_SCRIPT_AVESTAN,
  G_UNICODE_SCRIPT_BAMUM,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  G_UNICODE_SCRIPT_JAVANESE,
  G_UNICODE_SCRIPT_KAITHI,
  G_UNICODE_SCRIPT_LISU,
  G_UNICODE_SCRIPT_MEETEI_MAYEK,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_TURKIC,
  G_UNICODE_SCRIPT_SAMARITAN,
  G_UNICODE_SCRIPT_TAI_THAM,
  G_UNICODE_SCRIPT_TAI_VIET,

  G_UNICODE_SCRIPT_BATAK,
  G_UNICODE_SCRIPT_BRAHMI,
  G_UNICODE_SCRIPT_MANDAIC,

  G_UNICODE_SCRIPT_CHAKMA,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
  G_UNICODE_SCRIPT_MIAO,
  G_UNICODE_SCRIPT_SHARADA,
  G_UNICODE_SCRIPT_SORA_SOMPENG,
  G_UNICODE_SCRIPT_TAKRI,

  G_UNICODE_SCRIPT_BASSA_VAH,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
  G_UNICODE_SCRIPT_DUPLOYAN,
  G_UNICODE_SCRIPT_ELBASAN,
  G_UNICODE_SCRIPT_GRANTHA,
  G_UNICODE_SCRIPT_KHOJKI,
  G_UNICODE_SCRIPT_KHUDAWADI,
  G_UNICODE_SCRIPT_LINEAR_A,
  G_UNICODE_SCRIPT_MAHAJANI,
  G_UNICODE_SCRIPT_MANICHAEAN,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,
  G_UNICODE_SCRIPT_MODI,
  G_UNICODE_SCRIPT_MRO,
  G_UNICODE_SCRIPT_NABATAEAN,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_PERMIC,
  G_UNICODE_SCRIPT_PAHAWH_HMONG,
  G_UNICODE_SCRIPT_PALMYRENE,
  G_UNICODE_SCRIPT_PAU_CIN_HAU,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
  G_UNICODE_SCRIPT_SIDDHAM,
  G_UNICODE_SCRIPT_TIRHUTA,
  G_UNICODE_SCRIPT_WARANG_CITI,

  G_UNICODE_SCRIPT_AHOM,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_HATRAN,
  G_UNICODE_SCRIPT_MULTANI,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,
  G_UNICODE_SCRIPT_SIGNWRITING,

  G_UNICODE_SCRIPT_ADLAM,
  G_UNICODE_SCRIPT_BHAIKSUKI,
  G_UNICODE_SCRIPT_MARCHEN,
  G_UNICODE_SCRIPT_NEWA,
  G_UNICODE_SCRIPT_OSAGE,
  G_UNICODE_SCRIPT_TANGUT,

  G_UNICODE_SCRIPT_MASARAM_GONDI,
  G_UNICODE_SCRIPT_NUSHU,
  G_UNICODE_SCRIPT_SOYOMBO,
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE,

  G_UNICODE_SCRIPT_DOGRA,
  G_UNICODE_SCRIPT_GUNJALA_GONDI,
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA,
  G_UNICODE_SCRIPT_MAKASAR,
  G_UNICODE_SCRIPT_MEDEFAIDRIN,
  G_UNICODE_SCRIPT_OLD_SOGDIAN,
  G_UNICODE_SCRIPT_SOGDIAN,

  G_UNICODE_SCRIPT_ELYMAIC,
  G_UNICODE_SCRIPT_NANDINAGARI,
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG,
  G_UNICODE_SCRIPT_WANCHO,

  G_UNICODE_SCRIPT_CHORASMIAN,
  G_UNICODE_SCRIPT_DIVES_AKURU,
  G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT,
  G_UNICODE_SCRIPT_YEZIDI,

  G_UNICODE_SCRIPT_CYPRO_MINOAN,
  G_UNICODE_SCRIPT_OLD_UYGHUR,
  G_UNICODE_SCRIPT_TANGSA,
  G_UNICODE_SCRIPT_TOTO,
  G_UNICODE_SCRIPT_VITHKUQI,

  G_UNICODE_SCRIPT_MATH,

  G_UNICODE_SCRIPT_KAWI __attribute__((deprecated("Not available before "
                                                  "2"
                                                  "."
                                                  "74"))),
  G_UNICODE_SCRIPT_NAG_MUNDARI __attribute__((deprecated("Not available before "
                                                         "2"
                                                         "."
                                                         "74"))),
} GUnicodeScript;

extern guint32 g_unicode_script_to_iso15924(GUnicodeScript script);
extern GUnicodeScript g_unicode_script_from_iso15924(guint32 iso15924);

extern gboolean g_unichar_isalnum(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isalpha(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_iscntrl(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isdigit(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isgraph(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_islower(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isprint(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_ispunct(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isspace(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isupper(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isxdigit(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_istitle(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_isdefined(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_iswide(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_iswide_cjk(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_iszerowidth(gunichar c) __attribute__((__const__));
extern gboolean g_unichar_ismark(gunichar c) __attribute__((__const__));

extern gunichar g_unichar_toupper(gunichar c) __attribute__((__const__));
extern gunichar g_unichar_tolower(gunichar c) __attribute__((__const__));
extern gunichar g_unichar_totitle(gunichar c) __attribute__((__const__));

extern gint g_unichar_digit_value(gunichar c) __attribute__((__const__));

extern gint g_unichar_xdigit_value(gunichar c) __attribute__((__const__));

extern GUnicodeType g_unichar_type(gunichar c) __attribute__((__const__));

extern GUnicodeBreakType g_unichar_break_type(gunichar c)
    __attribute__((__const__));

extern gint g_unichar_combining_class(gunichar uc) __attribute__((__const__));

extern gboolean g_unichar_get_mirror_char(gunichar ch, gunichar *mirrored_ch);

extern GUnicodeScript g_unichar_get_script(gunichar ch)
    __attribute__((__const__));

extern gboolean g_unichar_validate(gunichar ch) __attribute__((__const__));

extern gboolean g_unichar_compose(gunichar a, gunichar b, gunichar *ch);
extern gboolean g_unichar_decompose(gunichar ch, gunichar *a, gunichar *b);

extern gsize g_unichar_fully_decompose(gunichar ch, gboolean compat,
                                       gunichar *result, gsize result_len);
# 780 "/usr/include/glib-2.0/glib/gunicode.h"
extern void g_unicode_canonical_ordering(gunichar *string, gsize len);

__attribute__((__deprecated__)) extern gunichar *
g_unicode_canonical_decomposition(gunichar ch, gsize *result_len)
    __attribute__((__malloc__));

extern const gchar *const g_utf8_skip;
# 811 "/usr/include/glib-2.0/glib/gunicode.h"
extern gunichar g_utf8_get_char(const gchar *p) __attribute__((__pure__));
extern gunichar g_utf8_get_char_validated(const gchar *p, gssize max_len)
    __attribute__((__pure__));

extern gchar *g_utf8_offset_to_pointer(const gchar *str, glong offset)
    __attribute__((__pure__));
extern glong g_utf8_pointer_to_offset(const gchar *str, const gchar *pos)
    __attribute__((__pure__));
extern gchar *g_utf8_prev_char(const gchar *p) __attribute__((__pure__));
extern gchar *g_utf8_find_next_char(const gchar *p, const gchar *end)
    __attribute__((__pure__));
extern gchar *g_utf8_find_prev_char(const gchar *str, const gchar *p)
    __attribute__((__pure__));

extern glong g_utf8_strlen(const gchar *p, gssize max)
    __attribute__((__pure__));

extern gchar *g_utf8_substring(const gchar *str, glong start_pos, glong end_pos)
    __attribute__((__malloc__));

extern gchar *g_utf8_strncpy(gchar *dest, const gchar *src, gsize n);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "78"))) extern gchar *
g_utf8_truncate_middle(const gchar *string, gsize truncate_length);

extern gchar *g_utf8_strchr(const gchar *p, gssize len, gunichar c);
extern gchar *g_utf8_strrchr(const gchar *p, gssize len, gunichar c);
extern gchar *g_utf8_strreverse(const gchar *str, gssize len);

extern gunichar2 *g_utf8_to_utf16(const gchar *str, glong len,
                                  glong *items_read, glong *items_written,
                                  GError **error) __attribute__((__malloc__));
extern gunichar *g_utf8_to_ucs4(const gchar *str, glong len, glong *items_read,
                                glong *items_written, GError **error)
    __attribute__((__malloc__));
extern gunichar *g_utf8_to_ucs4_fast(const gchar *str, glong len,
                                     glong *items_written)
    __attribute__((__malloc__));
extern gunichar *g_utf16_to_ucs4(const gunichar2 *str, glong len,
                                 glong *items_read, glong *items_written,
                                 GError **error) __attribute__((__malloc__));
extern gchar *g_utf16_to_utf8(const gunichar2 *str, glong len,
                              glong *items_read, glong *items_written,
                              GError **error) __attribute__((__malloc__));
extern gunichar2 *g_ucs4_to_utf16(const gunichar *str, glong len,
                                  glong *items_read, glong *items_written,
                                  GError **error) __attribute__((__malloc__));
extern gchar *g_ucs4_to_utf8(const gunichar *str, glong len, glong *items_read,
                             glong *items_written, GError **error)
    __attribute__((__malloc__));

extern gint g_unichar_to_utf8(gunichar c, gchar *outbuf);

extern gboolean g_utf8_validate(const gchar *str, gssize max_len,
                                const gchar **end);
extern gboolean g_utf8_validate_len(const gchar *str, gsize max_len,
                                    const gchar **end);

extern gchar *g_utf8_strup(const gchar *str, gssize len)
    __attribute__((__malloc__));
extern gchar *g_utf8_strdown(const gchar *str, gssize len)
    __attribute__((__malloc__));
extern gchar *g_utf8_casefold(const gchar *str, gssize len)
    __attribute__((__malloc__));
# 952 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

extern gchar *g_utf8_normalize(const gchar *str, gssize len,
                               GNormalizeMode mode) __attribute__((__malloc__));

extern gint g_utf8_collate(const gchar *str1, const gchar *str2)
    __attribute__((__pure__));
extern gchar *g_utf8_collate_key(const gchar *str, gssize len)
    __attribute__((__malloc__));
extern gchar *g_utf8_collate_key_for_filename(const gchar *str, gssize len)
    __attribute__((__malloc__));

extern gchar *g_utf8_make_valid(const gchar *str, gssize len)
    __attribute__((__malloc__));

# 36 "/usr/include/glib-2.0/glib/gstring.h" 2

# 1 "/usr/include/glib-2.0/glib/gstrfuncs.h" 1
# 42 "/usr/include/glib-2.0/glib/gstrfuncs.h"

typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

extern const guint16 *const g_ascii_table;
# 94 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern gchar g_ascii_tolower(gchar c) __attribute__((__const__));
extern gchar g_ascii_toupper(gchar c) __attribute__((__const__));

extern gint g_ascii_digit_value(gchar c) __attribute__((__const__));
extern gint g_ascii_xdigit_value(gchar c) __attribute__((__const__));

extern gchar *g_strdelimit(gchar *string, const gchar *delimiters,
                           gchar new_delimiter);
extern gchar *g_strcanon(gchar *string, const gchar *valid_chars,
                         gchar substitutor);
extern const gchar *g_strerror(gint errnum) __attribute__((__const__));
extern const gchar *g_strsignal(gint signum) __attribute__((__const__));
extern gchar *g_strreverse(gchar *string);
extern gsize g_strlcpy(gchar *dest, const gchar *src, gsize dest_size);
extern gsize g_strlcat(gchar *dest, const gchar *src, gsize dest_size);
extern gchar *g_strstr_len(const gchar *haystack, gssize haystack_len,
                           const gchar *needle);
extern gchar *g_strrstr(const gchar *haystack, const gchar *needle);
extern gchar *g_strrstr_len(const gchar *haystack, gssize haystack_len,
                            const gchar *needle);

extern gboolean(g_str_has_suffix)(const gchar *str, const gchar *suffix);
extern gboolean(g_str_has_prefix)(const gchar *str, const gchar *prefix);
# 213 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern gdouble g_strtod(const gchar *nptr, gchar **endptr);
extern gdouble g_ascii_strtod(const gchar *nptr, gchar **endptr);
extern guint64 g_ascii_strtoull(const gchar *nptr, gchar **endptr, guint base);
extern gint64 g_ascii_strtoll(const gchar *nptr, gchar **endptr, guint base);

extern gchar *g_ascii_dtostr(gchar *buffer, gint buf_len, gdouble d);
extern gchar *g_ascii_formatd(gchar *buffer, gint buf_len, const gchar *format,
                              gdouble d);

extern gchar *g_strchug(gchar *string);

extern gchar *g_strchomp(gchar *string);

extern gint g_ascii_strcasecmp(const gchar *s1, const gchar *s2);
extern gint g_ascii_strncasecmp(const gchar *s1, const gchar *s2, gsize n);
extern gchar *g_ascii_strdown(const gchar *str, gssize len)
    __attribute__((__malloc__));
extern gchar *g_ascii_strup(const gchar *str, gssize len)
    __attribute__((__malloc__));

extern gboolean g_str_is_ascii(const gchar *str);

__attribute__((__deprecated__)) extern gint g_strcasecmp(const gchar *s1,
                                                         const gchar *s2);
__attribute__((__deprecated__)) extern gint
g_strncasecmp(const gchar *s1, const gchar *s2, guint n);
__attribute__((__deprecated__)) extern gchar *g_strdown(gchar *string);
__attribute__((__deprecated__)) extern gchar *g_strup(gchar *string);

extern gchar *(g_strdup)(const gchar *str) __attribute__((__malloc__));
extern gchar *g_strdup_printf(const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2))) __attribute__((__malloc__));
extern gchar *g_strdup_vprintf(const gchar *format, va_list args)
    __attribute__((__format__(gnu_printf, 1, 0))) __attribute__((__malloc__));
extern gchar *g_strndup(const gchar *str, gsize n) __attribute__((__malloc__));
extern gchar *g_strnfill(gsize length, gchar fill_char)
    __attribute__((__malloc__));
extern gchar *g_strconcat(const gchar *string1, ...) __attribute__((__malloc__))
__attribute__((__sentinel__));
extern gchar *g_strjoin(const gchar *separator, ...) __attribute__((__malloc__))
__attribute__((__sentinel__));

__attribute__((__always_inline__)) static inline char *
g_strdup_inline(const char *str) {
  if (__builtin_constant_p(!str) && !str)
    return
# 312 "/usr/include/glib-2.0/glib/gstrfuncs.h" 3 4
        ((void *)0)
# 312 "/usr/include/glib-2.0/glib/gstrfuncs.h"
            ;

  if (__builtin_constant_p(!!str) && !!str &&
      __builtin_constant_p(strlen(str))) {
    const size_t len = strlen(str) + 1;
    char *dup_str = (char *)g_malloc(len);
    return (char *)memcpy(dup_str, str, len);
  }

  return g_strdup(str);
}
# 334 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern gchar *g_strcompress(const gchar *source) __attribute__((__malloc__));
# 345 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern gchar *g_strescape(const gchar *source, const gchar *exceptions)
    __attribute__((__malloc__));

extern gpointer g_memdup(gconstpointer mem, guint byte_size)
    __attribute__((__alloc_size__(2)));

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern gpointer
g_memdup2(gconstpointer mem, gsize byte_size)
    __attribute__((__alloc_size__(2)));
# 366 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef gchar **GStrv;
extern gchar **g_strsplit(const gchar *string, const gchar *delimiter,
                          gint max_tokens);
extern gchar **g_strsplit_set(const gchar *string, const gchar *delimiters,
                              gint max_tokens);
extern gchar *g_strjoinv(const gchar *separator, gchar **str_array)
    __attribute__((__malloc__));
extern void g_strfreev(gchar **str_array);
extern gchar **g_strdupv(gchar **str_array);
extern guint g_strv_length(gchar **str_array);

extern gchar *g_stpcpy(gchar *dest, const char *src);

extern gchar *g_str_to_ascii(const gchar *str, const gchar *from_locale);

extern gchar **g_str_tokenize_and_fold(const gchar *string,
                                       const gchar *translit_locale,
                                       gchar ***ascii_alternates);

extern gboolean g_str_match_string(const gchar *search_term,
                                   const gchar *potential_hit,
                                   gboolean accept_alternates);

extern gboolean g_strv_contains(const gchar *const *strv, const gchar *str);

extern gboolean g_strv_equal(const gchar *const *strv1,
                             const gchar *const *strv2);
# 422 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef enum {
  G_NUMBER_PARSER_ERROR_INVALID,
  G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS,
} GNumberParserError;
# 438 "/usr/include/glib-2.0/glib/gstrfuncs.h"
extern GQuark g_number_parser_error_quark(void);

extern gboolean g_ascii_string_to_signed(const gchar *str, guint base,
                                         gint64 min, gint64 max,
                                         gint64 *out_num, GError **error);

extern gboolean g_ascii_string_to_unsigned(const gchar *str, guint base,
                                           guint64 min, guint64 max,
                                           guint64 *out_num, GError **error);
# 490 "/usr/include/glib-2.0/glib/gstrfuncs.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) static inline gboolean
g_set_str(char **str_pointer, const char *new_str) {
  char *copy;

  if (*str_pointer == new_str ||
      (*str_pointer && new_str && strcmp(*str_pointer, new_str) == 0))
    return (0);

  copy = g_strdup_inline(new_str);
  g_free(*str_pointer);
  *str_pointer = copy;

  return (!(0));
}

# 38 "/usr/include/glib-2.0/glib/gstring.h" 2

typedef struct _GString GString;

struct _GString {
  gchar *str;
  gsize len;
  gsize allocated_len;
};

extern GString *g_string_new(const gchar *init);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "78"))) extern GString *
g_string_new_take(gchar *init);
extern GString *g_string_new_len(const gchar *init, gssize len);
extern GString *g_string_sized_new(gsize dfl_size);
extern gchar *(g_string_free)(GString *string, gboolean free_segment);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern gchar *
g_string_free_and_steal(GString *string) __attribute__((warn_unused_result));
# 79 "/usr/include/glib-2.0/glib/gstring.h"
extern GBytes *g_string_free_to_bytes(GString *string);
extern gboolean g_string_equal(const GString *v, const GString *v2);
extern guint g_string_hash(const GString *str);
extern GString *g_string_assign(GString *string, const gchar *rval);
extern GString *g_string_truncate(GString *string, gsize len);
extern GString *g_string_set_size(GString *string, gsize len);
extern GString *g_string_insert_len(GString *string, gssize pos,
                                    const gchar *val, gssize len);
extern GString *g_string_append(GString *string, const gchar *val);
extern GString *g_string_append_len(GString *string, const gchar *val,
                                    gssize len);
extern GString *g_string_append_c(GString *string, gchar c);
extern GString *g_string_append_unichar(GString *string, gunichar wc);
extern GString *g_string_prepend(GString *string, const gchar *val);
extern GString *g_string_prepend_c(GString *string, gchar c);
extern GString *g_string_prepend_unichar(GString *string, gunichar wc);
extern GString *g_string_prepend_len(GString *string, const gchar *val,
                                     gssize len);
extern GString *g_string_insert(GString *string, gssize pos, const gchar *val);
extern GString *g_string_insert_c(GString *string, gssize pos, gchar c);
extern GString *g_string_insert_unichar(GString *string, gssize pos,
                                        gunichar wc);
extern GString *g_string_overwrite(GString *string, gsize pos,
                                   const gchar *val);
extern GString *g_string_overwrite_len(GString *string, gsize pos,
                                       const gchar *val, gssize len);
extern GString *g_string_erase(GString *string, gssize pos, gssize len);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern guint
g_string_replace(GString *string, const gchar *find, const gchar *replace,
                 guint limit);
extern GString *g_string_ascii_down(GString *string);
extern GString *g_string_ascii_up(GString *string);
extern void g_string_vprintf(GString *string, const gchar *format, va_list args)
    __attribute__((__format__(gnu_printf, 2, 0)));
extern void g_string_printf(GString *string, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
extern void g_string_append_vprintf(GString *string, const gchar *format,
                                    va_list args)
    __attribute__((__format__(gnu_printf, 2, 0)));
extern void g_string_append_printf(GString *string, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
extern GString *g_string_append_uri_escaped(GString *string,
                                            const gchar *unescaped,
                                            const gchar *reserved_chars_allowed,
                                            gboolean allow_utf8);
# 193 "/usr/include/glib-2.0/glib/gstring.h"
__attribute__((__always_inline__)) static inline GString *
g_string_append_c_inline(GString *gstring, gchar c) {
  if ((gstring !=
# 198 "/usr/include/glib-2.0/glib/gstring.h" 3 4
           ((void *)0)
# 198 "/usr/include/glib-2.0/glib/gstring.h"
       && gstring->len + 1 < gstring->allocated_len)) {
    gstring->str[gstring->len++] = c;
    gstring->str[gstring->len] = 0;
  } else
    g_string_insert_c(gstring, -1, c);
  return gstring;
}

__attribute__((__always_inline__)) static inline GString *
g_string_append_len_inline(GString *gstring, const char *val, gssize len) {
  gsize len_unsigned;

  if (gstring ==
# 220 "/usr/include/glib-2.0/glib/gstring.h" 3 4
      ((void *)0)
# 220 "/usr/include/glib-2.0/glib/gstring.h"
  )
    return g_string_append_len(gstring, val, len);

  if (val ==
# 223 "/usr/include/glib-2.0/glib/gstring.h" 3 4
      ((void *)0)
# 223 "/usr/include/glib-2.0/glib/gstring.h"
  )
    return (len != 0) ? g_string_append_len(gstring, val, len) : gstring;

  if (len < 0)
    len_unsigned = strlen(val);
  else
    len_unsigned = (gsize)len;

  if ((gstring->len + len_unsigned < gstring->allocated_len)) {
    char *end = gstring->str + gstring->len;
    if ((val + len_unsigned <= end || val > end + len_unsigned))
      memcpy(end, val, len_unsigned);
    else
      memmove(end, val, len_unsigned);
    gstring->len += len_unsigned;
    gstring->str[gstring->len] = 0;
    return gstring;
  } else
    return g_string_insert_len(gstring, -1, val, len);
}

__attribute__((__always_inline__)) static inline GString *
g_string_truncate_inline(GString *gstring, gsize len) {
  gstring->len = (((len) < (gstring->len)) ? (len) : (gstring->len));
  gstring->str[gstring->len] = '\0';
  return gstring;
}
# 286 "/usr/include/glib-2.0/glib/gstring.h"
__attribute__((__deprecated__)) extern GString *g_string_down(GString *string);
__attribute__((__deprecated__)) extern GString *g_string_up(GString *string);

# 37 "/usr/include/glib-2.0/glib/giochannel.h" 2

typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;

typedef enum {
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;

typedef enum {

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum {
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum { G_SEEK_CUR, G_SEEK_SET, G_SEEK_END } GSeekType;

typedef enum {
  G_IO_FLAG_NONE __attribute__((deprecated("Not available before "
                                           "2"
                                           "."
                                           "74"))) = 0,
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITABLE = 1 << 3,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel {

  gint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;

  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];

  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;

  gpointer reserved1;
  gpointer reserved2;
};

typedef gboolean (*GIOFunc)(GIOChannel *source, GIOCondition condition,
                            gpointer data);
struct _GIOFuncs {
  GIOStatus (*io_read)(GIOChannel *channel, gchar *buf, gsize count,
                       gsize *bytes_read, GError **err);
  GIOStatus (*io_write)(GIOChannel *channel, const gchar *buf, gsize count,
                        gsize *bytes_written, GError **err);
  GIOStatus (*io_seek)(GIOChannel *channel, gint64 offset, GSeekType type,
                       GError **err);
  GIOStatus (*io_close)(GIOChannel *channel, GError **err);
  GSource *(*io_create_watch)(GIOChannel *channel, GIOCondition condition);
  void (*io_free)(GIOChannel *channel);
  GIOStatus (*io_set_flags)(GIOChannel *channel, GIOFlags flags, GError **err);
  GIOFlags (*io_get_flags)(GIOChannel *channel);
};

extern void g_io_channel_init(GIOChannel *channel);
extern GIOChannel *g_io_channel_ref(GIOChannel *channel);
extern void g_io_channel_unref(GIOChannel *channel);

__attribute__((__deprecated__("Use '"
                              "g_io_channel_read_chars"
                              "' instead"))) extern GIOError
g_io_channel_read(GIOChannel *channel, gchar *buf, gsize count,
                  gsize *bytes_read);

__attribute__((__deprecated__("Use '"
                              "g_io_channel_write_chars"
                              "' instead"))) extern GIOError
g_io_channel_write(GIOChannel *channel, const gchar *buf, gsize count,
                   gsize *bytes_written);

__attribute__((__deprecated__("Use '"
                              "g_io_channel_seek_position"
                              "' instead"))) extern GIOError
g_io_channel_seek(GIOChannel *channel, gint64 offset, GSeekType type);

__attribute__((__deprecated__("Use '"
                              "g_io_channel_shutdown"
                              "' instead"))) extern void
g_io_channel_close(GIOChannel *channel);

extern GIOStatus g_io_channel_shutdown(GIOChannel *channel, gboolean flush,
                                       GError **err);
extern guint g_io_add_watch_full(GIOChannel *channel, gint priority,
                                 GIOCondition condition, GIOFunc func,
                                 gpointer user_data, GDestroyNotify notify);
extern GSource *g_io_create_watch(GIOChannel *channel, GIOCondition condition);
extern guint g_io_add_watch(GIOChannel *channel, GIOCondition condition,
                            GIOFunc func, gpointer user_data);

extern void g_io_channel_set_buffer_size(GIOChannel *channel, gsize size);
extern gsize g_io_channel_get_buffer_size(GIOChannel *channel);
extern GIOCondition g_io_channel_get_buffer_condition(GIOChannel *channel);
extern GIOStatus g_io_channel_set_flags(GIOChannel *channel, GIOFlags flags,
                                        GError **error);
extern GIOFlags g_io_channel_get_flags(GIOChannel *channel);
extern void g_io_channel_set_line_term(GIOChannel *channel,
                                       const gchar *line_term, gint length);
extern const gchar *g_io_channel_get_line_term(GIOChannel *channel,
                                               gint *length);
extern void g_io_channel_set_buffered(GIOChannel *channel, gboolean buffered);
extern gboolean g_io_channel_get_buffered(GIOChannel *channel);
extern GIOStatus g_io_channel_set_encoding(GIOChannel *channel,
                                           const gchar *encoding,
                                           GError **error);
extern const gchar *g_io_channel_get_encoding(GIOChannel *channel);
extern void g_io_channel_set_close_on_unref(GIOChannel *channel,
                                            gboolean do_close);
extern gboolean g_io_channel_get_close_on_unref(GIOChannel *channel);

extern GIOStatus g_io_channel_flush(GIOChannel *channel, GError **error);
extern GIOStatus g_io_channel_read_line(GIOChannel *channel, gchar **str_return,
                                        gsize *length, gsize *terminator_pos,
                                        GError **error);
extern GIOStatus g_io_channel_read_line_string(GIOChannel *channel,
                                               GString *buffer,
                                               gsize *terminator_pos,
                                               GError **error);
extern GIOStatus g_io_channel_read_to_end(GIOChannel *channel,
                                          gchar **str_return, gsize *length,
                                          GError **error);
extern GIOStatus g_io_channel_read_chars(GIOChannel *channel, gchar *buf,
                                         gsize count, gsize *bytes_read,
                                         GError **error);
extern GIOStatus g_io_channel_read_unichar(GIOChannel *channel,
                                           gunichar *thechar, GError **error);
extern GIOStatus g_io_channel_write_chars(GIOChannel *channel, const gchar *buf,
                                          gssize count, gsize *bytes_written,
                                          GError **error);
extern GIOStatus g_io_channel_write_unichar(GIOChannel *channel,
                                            gunichar thechar, GError **error);
extern GIOStatus g_io_channel_seek_position(GIOChannel *channel, gint64 offset,
                                            GSeekType type, GError **error);
extern GIOChannel *g_io_channel_new_file(const gchar *filename,
                                         const gchar *mode, GError **error);

extern GQuark g_io_channel_error_quark(void);
extern GIOChannelError g_io_channel_error_from_errno(gint en);
# 323 "/usr/include/glib-2.0/glib/giochannel.h"
extern GIOChannel *g_io_channel_unix_new(int fd);
extern gint g_io_channel_unix_get_fd(GIOChannel *channel);

extern GSourceFuncs g_io_watch_funcs;
# 405 "/usr/include/glib-2.0/glib/giochannel.h"

# 57 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gkeyfile.h" 1
# 33 "/usr/include/glib-2.0/glib/gkeyfile.h"

typedef enum {
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;

extern GQuark g_key_file_error_quark(void);

typedef struct _GKeyFile GKeyFile;

typedef enum {
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;

extern GKeyFile *g_key_file_new(void);
extern GKeyFile *g_key_file_ref(GKeyFile *key_file);
extern void g_key_file_unref(GKeyFile *key_file);
extern void g_key_file_free(GKeyFile *key_file);
extern void g_key_file_set_list_separator(GKeyFile *key_file, gchar separator);
extern gboolean g_key_file_load_from_file(GKeyFile *key_file, const gchar *file,
                                          GKeyFileFlags flags, GError **error);
extern gboolean g_key_file_load_from_data(GKeyFile *key_file, const gchar *data,
                                          gsize length, GKeyFileFlags flags,
                                          GError **error);
extern gboolean g_key_file_load_from_bytes(GKeyFile *key_file, GBytes *bytes,
                                           GKeyFileFlags flags, GError **error);
extern gboolean g_key_file_load_from_dirs(GKeyFile *key_file, const gchar *file,
                                          const gchar **search_dirs,
                                          gchar **full_path,
                                          GKeyFileFlags flags, GError **error);
extern gboolean g_key_file_load_from_data_dirs(GKeyFile *key_file,
                                               const gchar *file,
                                               gchar **full_path,
                                               GKeyFileFlags flags,
                                               GError **error);
extern gchar *g_key_file_to_data(GKeyFile *key_file, gsize *length,
                                 GError **error) __attribute__((__malloc__));
extern gboolean g_key_file_save_to_file(GKeyFile *key_file,
                                        const gchar *filename, GError **error);
extern gchar *g_key_file_get_start_group(GKeyFile *key_file)
    __attribute__((__malloc__));
extern gchar **g_key_file_get_groups(GKeyFile *key_file, gsize *length);
extern gchar **g_key_file_get_keys(GKeyFile *key_file, const gchar *group_name,
                                   gsize *length, GError **error);
extern gboolean g_key_file_has_group(GKeyFile *key_file,
                                     const gchar *group_name);
extern gboolean g_key_file_has_key(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, GError **error);
extern gchar *g_key_file_get_value(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, GError **error)
    __attribute__((__malloc__));
extern void g_key_file_set_value(GKeyFile *key_file, const gchar *group_name,
                                 const gchar *key, const gchar *value);
extern gchar *g_key_file_get_string(GKeyFile *key_file, const gchar *group_name,
                                    const gchar *key, GError **error)
    __attribute__((__malloc__));
extern void g_key_file_set_string(GKeyFile *key_file, const gchar *group_name,
                                  const gchar *key, const gchar *string);
extern gchar *g_key_file_get_locale_string(GKeyFile *key_file,
                                           const gchar *group_name,
                                           const gchar *key,
                                           const gchar *locale, GError **error)
    __attribute__((__malloc__));
extern gchar *
g_key_file_get_locale_for_key(GKeyFile *key_file, const gchar *group_name,
                              const gchar *key, const gchar *locale)
    __attribute__((__malloc__));
extern void g_key_file_set_locale_string(GKeyFile *key_file,
                                         const gchar *group_name,
                                         const gchar *key, const gchar *locale,
                                         const gchar *string);
extern gboolean g_key_file_get_boolean(GKeyFile *key_file,
                                       const gchar *group_name,
                                       const gchar *key, GError **error);
extern void g_key_file_set_boolean(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, gboolean value);
extern gint g_key_file_get_integer(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, GError **error);
extern void g_key_file_set_integer(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, gint value);
extern gint64 g_key_file_get_int64(GKeyFile *key_file, const gchar *group_name,
                                   const gchar *key, GError **error);
extern void g_key_file_set_int64(GKeyFile *key_file, const gchar *group_name,
                                 const gchar *key, gint64 value);
extern guint64 g_key_file_get_uint64(GKeyFile *key_file,
                                     const gchar *group_name, const gchar *key,
                                     GError **error);
extern void g_key_file_set_uint64(GKeyFile *key_file, const gchar *group_name,
                                  const gchar *key, guint64 value);
extern gdouble g_key_file_get_double(GKeyFile *key_file,
                                     const gchar *group_name, const gchar *key,
                                     GError **error);
extern void g_key_file_set_double(GKeyFile *key_file, const gchar *group_name,
                                  const gchar *key, gdouble value);
extern gchar **g_key_file_get_string_list(GKeyFile *key_file,
                                          const gchar *group_name,
                                          const gchar *key, gsize *length,
                                          GError **error);
extern void g_key_file_set_string_list(GKeyFile *key_file,
                                       const gchar *group_name,
                                       const gchar *key,
                                       const gchar *const list[], gsize length);
extern gchar **g_key_file_get_locale_string_list(GKeyFile *key_file,
                                                 const gchar *group_name,
                                                 const gchar *key,
                                                 const gchar *locale,
                                                 gsize *length, GError **error);
extern void
g_key_file_set_locale_string_list(GKeyFile *key_file, const gchar *group_name,
                                  const gchar *key, const gchar *locale,
                                  const gchar *const list[], gsize length);
extern gboolean *
g_key_file_get_boolean_list(GKeyFile *key_file, const gchar *group_name,
                            const gchar *key, gsize *length, GError **error)
    __attribute__((__malloc__));
extern void g_key_file_set_boolean_list(GKeyFile *key_file,
                                        const gchar *group_name,
                                        const gchar *key, gboolean list[],
                                        gsize length);
extern gint *
g_key_file_get_integer_list(GKeyFile *key_file, const gchar *group_name,
                            const gchar *key, gsize *length, GError **error)
    __attribute__((__malloc__));
extern void g_key_file_set_double_list(GKeyFile *key_file,
                                       const gchar *group_name,
                                       const gchar *key, gdouble list[],
                                       gsize length);
extern gdouble *
g_key_file_get_double_list(GKeyFile *key_file, const gchar *group_name,
                           const gchar *key, gsize *length, GError **error)
    __attribute__((__malloc__));
extern void g_key_file_set_integer_list(GKeyFile *key_file,
                                        const gchar *group_name,
                                        const gchar *key, gint list[],
                                        gsize length);
extern gboolean g_key_file_set_comment(GKeyFile *key_file,
                                       const gchar *group_name,
                                       const gchar *key, const gchar *comment,
                                       GError **error);
extern gchar *g_key_file_get_comment(GKeyFile *key_file,
                                     const gchar *group_name, const gchar *key,
                                     GError **error)
    __attribute__((__malloc__));

extern gboolean g_key_file_remove_comment(GKeyFile *key_file,
                                          const gchar *group_name,
                                          const gchar *key, GError **error);
extern gboolean g_key_file_remove_key(GKeyFile *key_file,
                                      const gchar *group_name, const gchar *key,
                                      GError **error);
extern gboolean g_key_file_remove_group(GKeyFile *key_file,
                                        const gchar *group_name,
                                        GError **error);
# 330 "/usr/include/glib-2.0/glib/gkeyfile.h"

# 58 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gmappedfile.h" 1
# 32 "/usr/include/glib-2.0/glib/gmappedfile.h"

typedef struct _GMappedFile GMappedFile;

extern GMappedFile *g_mapped_file_new(const gchar *filename, gboolean writable,
                                      GError **error);
extern GMappedFile *g_mapped_file_new_from_fd(gint fd, gboolean writable,
                                              GError **error);
extern gsize g_mapped_file_get_length(GMappedFile *file);
extern gchar *g_mapped_file_get_contents(GMappedFile *file);
extern GBytes *g_mapped_file_get_bytes(GMappedFile *file);
extern GMappedFile *g_mapped_file_ref(GMappedFile *file);
extern void g_mapped_file_unref(GMappedFile *file);

__attribute__((__deprecated__("Use '"
                              "g_mapped_file_unref"
                              "' instead"))) extern void
g_mapped_file_free(GMappedFile *file);

# 62 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmarkup.h" 1
# 33 "/usr/include/glib-2.0/glib/gmarkup.h"

# 51 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum {
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,

  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;
# 74 "/usr/include/glib-2.0/glib/gmarkup.h"
extern GQuark g_markup_error_quark(void);
# 98 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum {
  G_MARKUP_DEFAULT_FLAGS __attribute__((deprecated("Not available before "
                                                   "2"
                                                   "."
                                                   "74"))) = 0,
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED = 1 << 3
} GMarkupParseFlags;
# 116 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;
# 147 "/usr/include/glib-2.0/glib/gmarkup.h"
struct _GMarkupParser {

  void (*start_element)(GMarkupParseContext *context, const gchar *element_name,
                        const gchar **attribute_names,
                        const gchar **attribute_values, gpointer user_data,
                        GError **error);

  void (*end_element)(GMarkupParseContext *context, const gchar *element_name,
                      gpointer user_data, GError **error);

  void (*text)(GMarkupParseContext *context, const gchar *text, gsize text_len,
               gpointer user_data, GError **error);

  void (*passthrough)(GMarkupParseContext *context,
                      const gchar *passthrough_text, gsize text_len,
                      gpointer user_data, GError **error);

  void (*error)(GMarkupParseContext *context, GError *error,
                gpointer user_data);
};

extern GMarkupParseContext *
g_markup_parse_context_new(const GMarkupParser *parser, GMarkupParseFlags flags,
                           gpointer user_data,
                           GDestroyNotify user_data_dnotify);
extern GMarkupParseContext *
g_markup_parse_context_ref(GMarkupParseContext *context);
extern void g_markup_parse_context_unref(GMarkupParseContext *context);
extern void g_markup_parse_context_free(GMarkupParseContext *context);
extern gboolean g_markup_parse_context_parse(GMarkupParseContext *context,
                                             const gchar *text, gssize text_len,
                                             GError **error);
extern void g_markup_parse_context_push(GMarkupParseContext *context,
                                        const GMarkupParser *parser,
                                        gpointer user_data);
extern gpointer g_markup_parse_context_pop(GMarkupParseContext *context);

extern gboolean g_markup_parse_context_end_parse(GMarkupParseContext *context,
                                                 GError **error);
extern const gchar *
g_markup_parse_context_get_element(GMarkupParseContext *context);
extern const GSList *
g_markup_parse_context_get_element_stack(GMarkupParseContext *context);

extern void g_markup_parse_context_get_position(GMarkupParseContext *context,
                                                gint *line_number,
                                                gint *char_number);
extern gpointer
g_markup_parse_context_get_user_data(GMarkupParseContext *context);

extern gchar *g_markup_escape_text(const gchar *text, gssize length);

extern gchar *g_markup_printf_escaped(const char *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern gchar *g_markup_vprintf_escaped(const char *format, va_list args)
    __attribute__((__format__(gnu_printf, 1, 0)));

typedef enum {
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,

  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;

extern gboolean g_markup_collect_attributes(const gchar *element_name,
                                            const gchar **attribute_names,
                                            const gchar **attribute_values,
                                            GError **error,
                                            GMarkupCollectType first_type,
                                            const gchar *first_attr, ...);

# 63 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gmessages.h" 1
# 38 "/usr/include/glib-2.0/glib/gmessages.h"
# 1 "/usr/include/glib-2.0/glib/gvariant.h" 1
# 30 "/usr/include/glib-2.0/glib/gvariant.h"
# 1 "/usr/include/glib-2.0/glib/gvarianttype.h" 1
# 32 "/usr/include/glib-2.0/glib/gvarianttype.h"

typedef struct _GVariantType GVariantType;
# 288 "/usr/include/glib-2.0/glib/gvarianttype.h"
extern gboolean g_variant_type_string_is_valid(const gchar *type_string);
extern gboolean g_variant_type_string_scan(const gchar *string,
                                           const gchar *limit,
                                           const gchar **endptr);

extern void g_variant_type_free(GVariantType *type);
extern GVariantType *g_variant_type_copy(const GVariantType *type);
extern GVariantType *g_variant_type_new(const gchar *type_string);

extern gsize g_variant_type_get_string_length(const GVariantType *type);
extern const gchar *g_variant_type_peek_string(const GVariantType *type);
extern gchar *g_variant_type_dup_string(const GVariantType *type);

extern gboolean g_variant_type_is_definite(const GVariantType *type);
extern gboolean g_variant_type_is_container(const GVariantType *type);
extern gboolean g_variant_type_is_basic(const GVariantType *type);
extern gboolean g_variant_type_is_maybe(const GVariantType *type);
extern gboolean g_variant_type_is_array(const GVariantType *type);
extern gboolean g_variant_type_is_tuple(const GVariantType *type);
extern gboolean g_variant_type_is_dict_entry(const GVariantType *type);
extern gboolean g_variant_type_is_variant(const GVariantType *type);

extern guint g_variant_type_hash(gconstpointer type);
extern gboolean g_variant_type_equal(gconstpointer type1, gconstpointer type2);

extern gboolean g_variant_type_is_subtype_of(const GVariantType *type,
                                             const GVariantType *supertype);

extern const GVariantType *g_variant_type_element(const GVariantType *type);
extern const GVariantType *g_variant_type_first(const GVariantType *type);
extern const GVariantType *g_variant_type_next(const GVariantType *type);
extern gsize g_variant_type_n_items(const GVariantType *type);
extern const GVariantType *g_variant_type_key(const GVariantType *type);
extern const GVariantType *g_variant_type_value(const GVariantType *type);

extern GVariantType *g_variant_type_new_array(const GVariantType *element);
extern GVariantType *g_variant_type_new_maybe(const GVariantType *element);
extern GVariantType *g_variant_type_new_tuple(const GVariantType *const *items,
                                              gint length);
extern GVariantType *g_variant_type_new_dict_entry(const GVariantType *key,
                                                   const GVariantType *value);

extern const GVariantType *g_variant_type_checked_(const gchar *type_string);
extern gsize g_variant_type_string_get_depth_(const gchar *type_string);

# 31 "/usr/include/glib-2.0/glib/gvariant.h" 2

typedef struct _GVariant GVariant;

typedef enum {
  G_VARIANT_CLASS_BOOLEAN = 'b',
  G_VARIANT_CLASS_BYTE = 'y',
  G_VARIANT_CLASS_INT16 = 'n',
  G_VARIANT_CLASS_UINT16 = 'q',
  G_VARIANT_CLASS_INT32 = 'i',
  G_VARIANT_CLASS_UINT32 = 'u',
  G_VARIANT_CLASS_INT64 = 'x',
  G_VARIANT_CLASS_UINT64 = 't',
  G_VARIANT_CLASS_HANDLE = 'h',
  G_VARIANT_CLASS_DOUBLE = 'd',
  G_VARIANT_CLASS_STRING = 's',
  G_VARIANT_CLASS_OBJECT_PATH = 'o',
  G_VARIANT_CLASS_SIGNATURE = 'g',
  G_VARIANT_CLASS_VARIANT = 'v',
  G_VARIANT_CLASS_MAYBE = 'm',
  G_VARIANT_CLASS_ARRAY = 'a',
  G_VARIANT_CLASS_TUPLE = '(',
  G_VARIANT_CLASS_DICT_ENTRY = '{'
} GVariantClass;

extern void g_variant_unref(GVariant *value);
extern GVariant *g_variant_ref(GVariant *value);
extern GVariant *g_variant_ref_sink(GVariant *value);
extern gboolean g_variant_is_floating(GVariant *value);
extern GVariant *g_variant_take_ref(GVariant *value);

extern const GVariantType *g_variant_get_type(GVariant *value);
extern const gchar *g_variant_get_type_string(GVariant *value);
extern gboolean g_variant_is_of_type(GVariant *value, const GVariantType *type);
extern gboolean g_variant_is_container(GVariant *value);
extern GVariantClass g_variant_classify(GVariant *value);
extern GVariant *g_variant_new_boolean(gboolean value);
extern GVariant *g_variant_new_byte(guint8 value);
extern GVariant *g_variant_new_int16(gint16 value);
extern GVariant *g_variant_new_uint16(guint16 value);
extern GVariant *g_variant_new_int32(gint32 value);
extern GVariant *g_variant_new_uint32(guint32 value);
extern GVariant *g_variant_new_int64(gint64 value);
extern GVariant *g_variant_new_uint64(guint64 value);
extern GVariant *g_variant_new_handle(gint32 value);
extern GVariant *g_variant_new_double(gdouble value);
extern GVariant *g_variant_new_string(const gchar *string);
extern GVariant *g_variant_new_take_string(gchar *string);
extern GVariant *g_variant_new_printf(const gchar *format_string, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern GVariant *g_variant_new_object_path(const gchar *object_path);
extern gboolean g_variant_is_object_path(const gchar *string);
extern GVariant *g_variant_new_signature(const gchar *signature);
extern gboolean g_variant_is_signature(const gchar *string);
extern GVariant *g_variant_new_variant(GVariant *value);
extern GVariant *g_variant_new_strv(const gchar *const *strv, gssize length);
extern GVariant *g_variant_new_objv(const gchar *const *strv, gssize length);
extern GVariant *g_variant_new_bytestring(const gchar *string);
extern GVariant *g_variant_new_bytestring_array(const gchar *const *strv,
                                                gssize length);
extern GVariant *g_variant_new_fixed_array(const GVariantType *element_type,
                                           gconstpointer elements,
                                           gsize n_elements,
                                           gsize element_size);
extern gboolean g_variant_get_boolean(GVariant *value);
extern guint8 g_variant_get_byte(GVariant *value);
extern gint16 g_variant_get_int16(GVariant *value);
extern guint16 g_variant_get_uint16(GVariant *value);
extern gint32 g_variant_get_int32(GVariant *value);
extern guint32 g_variant_get_uint32(GVariant *value);
extern gint64 g_variant_get_int64(GVariant *value);
extern guint64 g_variant_get_uint64(GVariant *value);
extern gint32 g_variant_get_handle(GVariant *value);
extern gdouble g_variant_get_double(GVariant *value);
extern GVariant *g_variant_get_variant(GVariant *value);
extern const gchar *g_variant_get_string(GVariant *value, gsize *length);
extern gchar *g_variant_dup_string(GVariant *value, gsize *length);
extern const gchar **g_variant_get_strv(GVariant *value, gsize *length);
extern gchar **g_variant_dup_strv(GVariant *value, gsize *length);
extern const gchar **g_variant_get_objv(GVariant *value, gsize *length);
extern gchar **g_variant_dup_objv(GVariant *value, gsize *length);
extern const gchar *g_variant_get_bytestring(GVariant *value);
extern gchar *g_variant_dup_bytestring(GVariant *value, gsize *length);
extern const gchar **g_variant_get_bytestring_array(GVariant *value,
                                                    gsize *length);
extern gchar **g_variant_dup_bytestring_array(GVariant *value, gsize *length);

extern GVariant *g_variant_new_maybe(const GVariantType *child_type,
                                     GVariant *child);
extern GVariant *g_variant_new_array(const GVariantType *child_type,
                                     GVariant *const *children,
                                     gsize n_children);
extern GVariant *g_variant_new_tuple(GVariant *const *children,
                                     gsize n_children);
extern GVariant *g_variant_new_dict_entry(GVariant *key, GVariant *value);

extern GVariant *g_variant_get_maybe(GVariant *value);
extern gsize g_variant_n_children(GVariant *value);
extern void g_variant_get_child(GVariant *value, gsize index_,
                                const gchar *format_string, ...);
extern GVariant *g_variant_get_child_value(GVariant *value, gsize index_);
extern gboolean g_variant_lookup(GVariant *dictionary, const gchar *key,
                                 const gchar *format_string, ...);
extern GVariant *g_variant_lookup_value(GVariant *dictionary, const gchar *key,
                                        const GVariantType *expected_type);
extern gconstpointer g_variant_get_fixed_array(GVariant *value,
                                               gsize *n_elements,
                                               gsize element_size);

extern gsize g_variant_get_size(GVariant *value);
extern gconstpointer g_variant_get_data(GVariant *value);
extern GBytes *g_variant_get_data_as_bytes(GVariant *value);
extern void g_variant_store(GVariant *value, gpointer data);

extern gchar *g_variant_print(GVariant *value, gboolean type_annotate);
extern GString *g_variant_print_string(GVariant *value, GString *string,
                                       gboolean type_annotate);

extern guint g_variant_hash(gconstpointer value);
extern gboolean g_variant_equal(gconstpointer one, gconstpointer two);

extern GVariant *g_variant_get_normal_form(GVariant *value);
extern gboolean g_variant_is_normal_form(GVariant *value);
extern GVariant *g_variant_byteswap(GVariant *value);

extern GVariant *g_variant_new_from_bytes(const GVariantType *type,
                                          GBytes *bytes, gboolean trusted);
extern GVariant *g_variant_new_from_data(const GVariantType *type,
                                         gconstpointer data, gsize size,
                                         gboolean trusted,
                                         GDestroyNotify notify,
                                         gpointer user_data);

typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {

  guintptr x[16];
};

extern GVariantIter *g_variant_iter_new(GVariant *value);
extern gsize g_variant_iter_init(GVariantIter *iter, GVariant *value);
extern GVariantIter *g_variant_iter_copy(GVariantIter *iter);
extern gsize g_variant_iter_n_children(GVariantIter *iter);
extern void g_variant_iter_free(GVariantIter *iter);
extern GVariant *g_variant_iter_next_value(GVariantIter *iter);
extern gboolean g_variant_iter_next(GVariantIter *iter,
                                    const gchar *format_string, ...);
extern gboolean g_variant_iter_loop(GVariantIter *iter,
                                    const gchar *format_string, ...);

typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {

  union {
    struct {
      gsize partial_magic;
      const GVariantType *type;
      guintptr y[14];
    } s;
    guintptr x[16];
  } u;
};

typedef enum {
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED,
  G_VARIANT_PARSE_ERROR_RECURSION
} GVariantParseError;

__attribute__((__deprecated__("Use '"
                              "g_variant_parse_error_quark"
                              "' instead"))) extern GQuark
g_variant_parser_get_error_quark(void);

extern GQuark g_variant_parse_error_quark(void);
# 376 "/usr/include/glib-2.0/glib/gvariant.h"
extern GVariantBuilder *g_variant_builder_new(const GVariantType *type);
extern void g_variant_builder_unref(GVariantBuilder *builder);
extern GVariantBuilder *g_variant_builder_ref(GVariantBuilder *builder);
extern void g_variant_builder_init(GVariantBuilder *builder,
                                   const GVariantType *type);
extern GVariant *g_variant_builder_end(GVariantBuilder *builder);
extern void g_variant_builder_clear(GVariantBuilder *builder);
extern void g_variant_builder_open(GVariantBuilder *builder,
                                   const GVariantType *type);
extern void g_variant_builder_close(GVariantBuilder *builder);
extern void g_variant_builder_add_value(GVariantBuilder *builder,
                                        GVariant *value);
extern void g_variant_builder_add(GVariantBuilder *builder,
                                  const gchar *format_string, ...);
extern void g_variant_builder_add_parsed(GVariantBuilder *builder,
                                         const gchar *format, ...);

extern GVariant *g_variant_new(const gchar *format_string, ...);
extern void g_variant_get(GVariant *value, const gchar *format_string, ...);
extern GVariant *g_variant_new_va(const gchar *format_string,
                                  const gchar **endptr, va_list *app);
extern void g_variant_get_va(GVariant *value, const gchar *format_string,
                             const gchar **endptr, va_list *app);
extern gboolean g_variant_check_format_string(GVariant *value,
                                              const gchar *format_string,
                                              gboolean copy_only);

extern GVariant *g_variant_parse(const GVariantType *type, const gchar *text,
                                 const gchar *limit, const gchar **endptr,
                                 GError **error);
extern GVariant *g_variant_new_parsed(const gchar *format, ...);
extern GVariant *g_variant_new_parsed_va(const gchar *format, va_list *app);

extern gchar *g_variant_parse_error_print_context(GError *error,
                                                  const gchar *source_str);

extern gint g_variant_compare(gconstpointer one, gconstpointer two);

typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {

  union {
    struct {
      GVariant *asv;
      gsize partial_magic;
      guintptr y[14];
    } s;
    guintptr x[16];
  } u;
};
# 499 "/usr/include/glib-2.0/glib/gvariant.h"
extern GVariantDict *g_variant_dict_new(GVariant *from_asv);

extern void g_variant_dict_init(GVariantDict *dict, GVariant *from_asv);

extern gboolean g_variant_dict_lookup(GVariantDict *dict, const gchar *key,
                                      const gchar *format_string, ...);
extern GVariant *g_variant_dict_lookup_value(GVariantDict *dict,
                                             const gchar *key,
                                             const GVariantType *expected_type);
extern gboolean g_variant_dict_contains(GVariantDict *dict, const gchar *key);
extern void g_variant_dict_insert(GVariantDict *dict, const gchar *key,
                                  const gchar *format_string, ...);
extern void g_variant_dict_insert_value(GVariantDict *dict, const gchar *key,
                                        GVariant *value);
extern gboolean g_variant_dict_remove(GVariantDict *dict, const gchar *key);
extern void g_variant_dict_clear(GVariantDict *dict);
extern GVariant *g_variant_dict_end(GVariantDict *dict);
extern GVariantDict *g_variant_dict_ref(GVariantDict *dict);
extern void g_variant_dict_unref(GVariantDict *dict);

# 39 "/usr/include/glib-2.0/glib/gmessages.h" 2

extern gsize g_printf_string_upper_bound(const gchar *format, va_list args)
    __attribute__((__format__(gnu_printf, 1, 0)));
# 55 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum {

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,

  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,

  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;

typedef void (*GLogFunc)(const gchar *log_domain, GLogLevelFlags log_level,
                         const gchar *message, gpointer user_data);

extern guint g_log_set_handler(const gchar *log_domain,
                               GLogLevelFlags log_levels, GLogFunc log_func,
                               gpointer user_data);
extern guint g_log_set_handler_full(const gchar *log_domain,
                                    GLogLevelFlags log_levels,
                                    GLogFunc log_func, gpointer user_data,
                                    GDestroyNotify destroy);
extern void g_log_remove_handler(const gchar *log_domain, guint handler_id);
extern void g_log_default_handler(const gchar *log_domain,
                                  GLogLevelFlags log_level,
                                  const gchar *message, gpointer unused_data);
extern GLogFunc g_log_set_default_handler(GLogFunc log_func,
                                          gpointer user_data);
extern void g_log(const gchar *log_domain, GLogLevelFlags log_level,
                  const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 3, 4)));
extern void g_logv(const gchar *log_domain, GLogLevelFlags log_level,
                   const gchar *format, va_list args)
    __attribute__((__format__(gnu_printf, 3, 0)));
extern GLogLevelFlags g_log_set_fatal_mask(const gchar *log_domain,
                                           GLogLevelFlags fatal_mask);
extern GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags fatal_mask);
# 136 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum {
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0,
} GLogWriterOutput;
# 158 "/usr/include/glib-2.0/glib/gmessages.h"
typedef struct _GLogField GLogField;
struct _GLogField {
  const gchar *key;
  gconstpointer value;
  gssize length;
};
# 197 "/usr/include/glib-2.0/glib/gmessages.h"
typedef GLogWriterOutput (*GLogWriterFunc)(GLogLevelFlags log_level,
                                           const GLogField *fields,
                                           gsize n_fields, gpointer user_data);

extern void g_log_structured(const gchar *log_domain, GLogLevelFlags log_level,
                             ...);
extern void g_log_structured_array(GLogLevelFlags log_level,
                                   const GLogField *fields, gsize n_fields);

extern void g_log_variant(const gchar *log_domain, GLogLevelFlags log_level,
                          GVariant *fields);

extern void g_log_set_writer_func(GLogWriterFunc func, gpointer user_data,
                                  GDestroyNotify user_data_free);

extern gboolean g_log_writer_supports_color(gint output_fd);
extern gboolean g_log_writer_is_journald(gint output_fd);

extern gchar *g_log_writer_format_fields(GLogLevelFlags log_level,
                                         const GLogField *fields,
                                         gsize n_fields, gboolean use_color);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern GLogWriterOutput
g_log_writer_syslog(GLogLevelFlags log_level, const GLogField *fields,
                    gsize n_fields, gpointer user_data);
extern GLogWriterOutput g_log_writer_journald(GLogLevelFlags log_level,
                                              const GLogField *fields,
                                              gsize n_fields,
                                              gpointer user_data);
extern GLogWriterOutput g_log_writer_standard_streams(GLogLevelFlags log_level,
                                                      const GLogField *fields,
                                                      gsize n_fields,
                                                      gpointer user_data);
extern GLogWriterOutput g_log_writer_default(GLogLevelFlags log_level,
                                             const GLogField *fields,
                                             gsize n_fields,
                                             gpointer user_data);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern void
g_log_writer_default_set_use_stderr(gboolean use_stderr);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern gboolean
g_log_writer_default_would_drop(GLogLevelFlags log_level,
                                const char *log_domain);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_log_writer_default_set_debug_domains(const gchar *const *domains);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern gboolean
g_log_get_debug_enabled(void);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "72"))) extern void
g_log_set_debug_enabled(gboolean enabled);
# 286 "/usr/include/glib-2.0/glib/gmessages.h"
void _g_log_fallback_handler(const gchar *log_domain, GLogLevelFlags log_level,
                             const gchar *message, gpointer unused_data);

extern void g_return_if_fail_warning(const char *log_domain,
                                     const char *pretty_function,
                                     const char *expression);
extern void g_warn_message(const char *domain, const char *file, int line,
                           const char *func, const char *warnexpr);
__attribute__((__noreturn__)) __attribute__((__deprecated__)) extern void
g_assert_warning(const char *log_domain, const char *file, const int line,
                 const char *pretty_function, const char *expression);

extern void
g_log_structured_standard(const gchar *log_domain, GLogLevelFlags log_level,
                          const gchar *file, const gchar *line,
                          const gchar *func, const gchar *message_format, ...)
    __attribute__((__format__(gnu_printf, 6, 7)));
# 525 "/usr/include/glib-2.0/glib/gmessages.h"
typedef void (*GPrintFunc)(const gchar *string);
extern void g_print(const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern GPrintFunc g_set_print_handler(GPrintFunc func);
extern void g_printerr(const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern GPrintFunc g_set_printerr_handler(GPrintFunc func);
# 699 "/usr/include/glib-2.0/glib/gmessages.h"

# 65 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/goption.h" 1
# 31 "/usr/include/glib-2.0/glib/goption.h"

# 40 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionContext GOptionContext;
# 53 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;
# 84 "/usr/include/glib-2.0/glib/goption.h"
typedef enum {
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;
# 122 "/usr/include/glib-2.0/glib/goption.h"
typedef enum {
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;
# 152 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionArgFunc)(const gchar *option_name, const gchar *value,
                                   gpointer data, GError **error);
# 170 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionParseFunc)(GOptionContext *context,
                                     GOptionGroup *group, gpointer data,
                                     GError **error);
# 185 "/usr/include/glib-2.0/glib/goption.h"
typedef void (*GOptionErrorFunc)(GOptionContext *context, GOptionGroup *group,
                                 gpointer data, GError **error);
# 209 "/usr/include/glib-2.0/glib/goption.h"
typedef enum {
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;

extern GQuark g_option_error_quark(void);
# 261 "/usr/include/glib-2.0/glib/goption.h"
struct _GOptionEntry {
  const gchar *long_name;
  gchar short_name;
  gint flags;

  GOptionArg arg;
  gpointer arg_data;

  const gchar *description;
  const gchar *arg_description;
};
# 310 "/usr/include/glib-2.0/glib/goption.h"
extern GOptionContext *g_option_context_new(const gchar *parameter_string);
extern void g_option_context_set_summary(GOptionContext *context,
                                         const gchar *summary);
extern const gchar *g_option_context_get_summary(GOptionContext *context);
extern void g_option_context_set_description(GOptionContext *context,
                                             const gchar *description);
extern const gchar *g_option_context_get_description(GOptionContext *context);
extern void g_option_context_free(GOptionContext *context);
extern void g_option_context_set_help_enabled(GOptionContext *context,
                                              gboolean help_enabled);
extern gboolean g_option_context_get_help_enabled(GOptionContext *context);
extern void
g_option_context_set_ignore_unknown_options(GOptionContext *context,
                                            gboolean ignore_unknown);
extern gboolean
g_option_context_get_ignore_unknown_options(GOptionContext *context);

extern void g_option_context_set_strict_posix(GOptionContext *context,
                                              gboolean strict_posix);
extern gboolean g_option_context_get_strict_posix(GOptionContext *context);

extern void g_option_context_add_main_entries(GOptionContext *context,
                                              const GOptionEntry *entries,
                                              const gchar *translation_domain);
extern gboolean g_option_context_parse(GOptionContext *context, gint *argc,
                                       gchar ***argv, GError **error);
extern gboolean g_option_context_parse_strv(GOptionContext *context,
                                            gchar ***arguments, GError **error);
extern void g_option_context_set_translate_func(GOptionContext *context,
                                                GTranslateFunc func,
                                                gpointer data,
                                                GDestroyNotify destroy_notify);
extern void g_option_context_set_translation_domain(GOptionContext *context,
                                                    const gchar *domain);

extern void g_option_context_add_group(GOptionContext *context,
                                       GOptionGroup *group);
extern void g_option_context_set_main_group(GOptionContext *context,
                                            GOptionGroup *group);
extern GOptionGroup *g_option_context_get_main_group(GOptionContext *context);
extern gchar *g_option_context_get_help(GOptionContext *context,
                                        gboolean main_help,
                                        GOptionGroup *group);

extern GOptionGroup *g_option_group_new(const gchar *name,
                                        const gchar *description,
                                        const gchar *help_description,
                                        gpointer user_data,
                                        GDestroyNotify destroy);
extern void g_option_group_set_parse_hooks(GOptionGroup *group,
                                           GOptionParseFunc pre_parse_func,
                                           GOptionParseFunc post_parse_func);
extern void g_option_group_set_error_hook(GOptionGroup *group,
                                          GOptionErrorFunc error_func);
__attribute__((__deprecated__)) extern void
g_option_group_free(GOptionGroup *group);
extern GOptionGroup *g_option_group_ref(GOptionGroup *group);
extern void g_option_group_unref(GOptionGroup *group);
extern void g_option_group_add_entries(GOptionGroup *group,
                                       const GOptionEntry *entries);
extern void g_option_group_set_translate_func(GOptionGroup *group,
                                              GTranslateFunc func,
                                              gpointer data,
                                              GDestroyNotify destroy_notify);
extern void g_option_group_set_translation_domain(GOptionGroup *group,
                                                  const gchar *domain);

# 67 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpathbuf.h" 1

typedef struct _GPathBuf GPathBuf;

struct _GPathBuf {

  gpointer dummy[8];
};
# 43 "/usr/include/glib-2.0/glib/gpathbuf.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_new(void);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_new_from_path(const char *path);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_init(GPathBuf *buf);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_init_from_path(GPathBuf *buf, const char *path);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_path_buf_clear(GPathBuf *buf);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern char *
g_path_buf_clear_to_path(GPathBuf *buf) __attribute__((warn_unused_result));
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern void
g_path_buf_free(GPathBuf *buf);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern char *
g_path_buf_free_to_path(GPathBuf *buf) __attribute__((warn_unused_result));
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_copy(GPathBuf *buf);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern GPathBuf *
g_path_buf_push(GPathBuf *buf, const char *path);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern gboolean
g_path_buf_pop(GPathBuf *buf);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern gboolean
g_path_buf_set_filename(GPathBuf *buf, const char *file_name);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern gboolean
g_path_buf_set_extension(GPathBuf *buf, const char *extension);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern char *
g_path_buf_to_path(GPathBuf *buf) __attribute__((warn_unused_result));

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) extern gboolean
g_path_buf_equal(gconstpointer v1, gconstpointer v2);

# 68 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpattern.h" 1
# 29 "/usr/include/glib-2.0/glib/gpattern.h"

typedef struct _GPatternSpec GPatternSpec;

extern GPatternSpec *g_pattern_spec_new(const gchar *pattern);
extern void g_pattern_spec_free(GPatternSpec *pspec);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern GPatternSpec *
g_pattern_spec_copy(GPatternSpec *pspec);
extern gboolean g_pattern_spec_equal(GPatternSpec *pspec1,
                                     GPatternSpec *pspec2);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern gboolean
g_pattern_spec_match(GPatternSpec *pspec, gsize string_length,
                     const gchar *string, const gchar *string_reversed);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern gboolean
g_pattern_spec_match_string(GPatternSpec *pspec, const gchar *string);
extern gboolean g_pattern_match(GPatternSpec *pspec, guint string_length,
                                const gchar *string,
                                const gchar *string_reversed);
extern gboolean g_pattern_match_string(GPatternSpec *pspec,
                                       const gchar *string);
extern gboolean g_pattern_match_simple(const gchar *pattern,
                                       const gchar *string);

# 69 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gprimes.h" 1
# 36 "/usr/include/glib-2.0/glib/gprimes.h"

# 47 "/usr/include/glib-2.0/glib/gprimes.h"
extern guint g_spaced_primes_closest(guint num) __attribute__((__const__));

# 71 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqsort.h" 1
# 36 "/usr/include/glib-2.0/glib/gqsort.h"

extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size,
                              GCompareDataFunc compare_func,
                              gpointer user_data);

# 72 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gqueue.h" 1
# 36 "/usr/include/glib-2.0/glib/gqueue.h"

typedef struct _GQueue GQueue;
# 49 "/usr/include/glib-2.0/glib/gqueue.h"
struct _GQueue {
  GList *head;
  GList *tail;
  guint length;
};
# 74 "/usr/include/glib-2.0/glib/gqueue.h"
extern GQueue *g_queue_new(void);
extern void g_queue_free(GQueue *queue);
extern void g_queue_free_full(GQueue *queue, GDestroyNotify free_func);
extern void g_queue_init(GQueue *queue);
extern void g_queue_clear(GQueue *queue);
extern gboolean g_queue_is_empty(GQueue *queue);
extern void g_queue_clear_full(GQueue *queue, GDestroyNotify free_func);
extern guint g_queue_get_length(GQueue *queue);
extern void g_queue_reverse(GQueue *queue);
extern GQueue *g_queue_copy(GQueue *queue);
extern void g_queue_foreach(GQueue *queue, GFunc func, gpointer user_data);
extern GList *g_queue_find(GQueue *queue, gconstpointer data);
extern GList *g_queue_find_custom(GQueue *queue, gconstpointer data,
                                  GCompareFunc func);
extern void g_queue_sort(GQueue *queue, GCompareDataFunc compare_func,
                         gpointer user_data);

extern void g_queue_push_head(GQueue *queue, gpointer data);
extern void g_queue_push_tail(GQueue *queue, gpointer data);
extern void g_queue_push_nth(GQueue *queue, gpointer data, gint n);
extern gpointer g_queue_pop_head(GQueue *queue);
extern gpointer g_queue_pop_tail(GQueue *queue);
extern gpointer g_queue_pop_nth(GQueue *queue, guint n);
extern gpointer g_queue_peek_head(GQueue *queue);
extern gpointer g_queue_peek_tail(GQueue *queue);
extern gpointer g_queue_peek_nth(GQueue *queue, guint n);
extern gint g_queue_index(GQueue *queue, gconstpointer data);
extern gboolean g_queue_remove(GQueue *queue, gconstpointer data);
extern guint g_queue_remove_all(GQueue *queue, gconstpointer data);
extern void g_queue_insert_before(GQueue *queue, GList *sibling, gpointer data);
extern void g_queue_insert_before_link(GQueue *queue, GList *sibling,
                                       GList *link_);
extern void g_queue_insert_after(GQueue *queue, GList *sibling, gpointer data);
extern void g_queue_insert_after_link(GQueue *queue, GList *sibling,
                                      GList *link_);
extern void g_queue_insert_sorted(GQueue *queue, gpointer data,
                                  GCompareDataFunc func, gpointer user_data);

extern void g_queue_push_head_link(GQueue *queue, GList *link_);
extern void g_queue_push_tail_link(GQueue *queue, GList *link_);
extern void g_queue_push_nth_link(GQueue *queue, gint n, GList *link_);
extern GList *g_queue_pop_head_link(GQueue *queue);
extern GList *g_queue_pop_tail_link(GQueue *queue);
extern GList *g_queue_pop_nth_link(GQueue *queue, guint n);
extern GList *g_queue_peek_head_link(GQueue *queue);
extern GList *g_queue_peek_tail_link(GQueue *queue);
extern GList *g_queue_peek_nth_link(GQueue *queue, guint n);
extern gint g_queue_link_index(GQueue *queue, GList *link_);
extern void g_queue_unlink(GQueue *queue, GList *link_);
extern void g_queue_delete_link(GQueue *queue, GList *link_);

# 74 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grand.h" 1
# 36 "/usr/include/glib-2.0/glib/grand.h"

typedef struct _GRand GRand;
# 49 "/usr/include/glib-2.0/glib/grand.h"
extern GRand *g_rand_new_with_seed(guint32 seed);
extern GRand *g_rand_new_with_seed_array(const guint32 *seed,
                                         guint seed_length);
extern GRand *g_rand_new(void);
extern void g_rand_free(GRand *rand_);
extern GRand *g_rand_copy(GRand *rand_);
extern void g_rand_set_seed(GRand *rand_, guint32 seed);
extern void g_rand_set_seed_array(GRand *rand_, const guint32 *seed,
                                  guint seed_length);

extern guint32 g_rand_int(GRand *rand_);
extern gint32 g_rand_int_range(GRand *rand_, gint32 begin, gint32 end);
extern gdouble g_rand_double(GRand *rand_);
extern gdouble g_rand_double_range(GRand *rand_, gdouble begin, gdouble end);
extern void g_random_set_seed(guint32 seed);

extern guint32 g_random_int(void);
extern gint32 g_random_int_range(gint32 begin, gint32 end);
extern gdouble g_random_double(void);
extern gdouble g_random_double_range(gdouble begin, gdouble end);

# 75 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grcbox.h" 1
# 21 "/usr/include/glib-2.0/glib/grcbox.h"

# 30 "/usr/include/glib-2.0/glib/grcbox.h"

extern gpointer g_rc_box_alloc(gsize block_size) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_rc_box_alloc0(gsize block_size) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_rc_box_dup(gsize block_size, gconstpointer mem_block)
    __attribute__((__alloc_size__(1)));
extern gpointer g_rc_box_acquire(gpointer mem_block);
extern void g_rc_box_release(gpointer mem_block);
extern void g_rc_box_release_full(gpointer mem_block,
                                  GDestroyNotify clear_func);

extern gsize g_rc_box_get_size(gpointer mem_block);

extern gpointer g_atomic_rc_box_alloc(gsize block_size)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern gpointer g_atomic_rc_box_alloc0(gsize block_size)
    __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
extern gpointer g_atomic_rc_box_dup(gsize block_size, gconstpointer mem_block)
    __attribute__((__alloc_size__(1)));
extern gpointer g_atomic_rc_box_acquire(gpointer mem_block);
extern void g_atomic_rc_box_release(gpointer mem_block);
extern void g_atomic_rc_box_release_full(gpointer mem_block,
                                         GDestroyNotify clear_func);

extern gsize g_atomic_rc_box_get_size(gpointer mem_block);
# 91 "/usr/include/glib-2.0/glib/grcbox.h"

# 76 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefcount.h" 1
# 31 "/usr/include/glib-2.0/glib/grefcount.h"

extern void g_ref_count_init(grefcount *rc);
extern void g_ref_count_inc(grefcount *rc);
extern gboolean g_ref_count_dec(grefcount *rc);
extern gboolean g_ref_count_compare(grefcount *rc, gint val);

extern void g_atomic_ref_count_init(gatomicrefcount *arc);
extern void g_atomic_ref_count_inc(gatomicrefcount *arc);
extern gboolean g_atomic_ref_count_dec(gatomicrefcount *arc);
extern gboolean g_atomic_ref_count_compare(gatomicrefcount *arc, gint val);
# 177 "/usr/include/glib-2.0/glib/grefcount.h"

# 77 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefstring.h" 1
# 21 "/usr/include/glib-2.0/glib/grefstring.h"

# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 24 "/usr/include/glib-2.0/glib/grefstring.h" 2
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 25 "/usr/include/glib-2.0/glib/grefstring.h" 2

extern char *g_ref_string_new(const char *str);
extern char *g_ref_string_new_len(const char *str, gssize len);
extern char *g_ref_string_new_intern(const char *str);

extern char *g_ref_string_acquire(char *str);
extern void g_ref_string_release(char *str);

extern gsize g_ref_string_length(char *str);
# 57 "/usr/include/glib-2.0/glib/grefstring.h"
typedef char GRefString;

# 78 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gregex.h" 1
# 33 "/usr/include/glib-2.0/glib/gregex.h"

# 142 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum {
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,

  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;
# 216 "/usr/include/glib-2.0/glib/gregex.h"
extern GQuark g_regex_error_quark(void);
# 304 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum {
  G_REGEX_DEFAULT __attribute__((deprecated("Not available before "
                                            "2"
                                            "."
                                            "74"))) = 0,
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_FIRSTLINE = 1 << 18,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT = 1 << 25
} GRegexCompileFlags;
# 396 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum {
  G_REGEX_MATCH_DEFAULT __attribute__((deprecated("Not available before "
                                                  "2"
                                                  "."
                                                  "74"))) = 0,
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF =
      G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF =
      G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF = 1 << 23,
  G_REGEX_MATCH_BSR_ANY = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;

typedef struct _GRegex GRegex;
# 425 "/usr/include/glib-2.0/glib/gregex.h"
typedef struct _GMatchInfo GMatchInfo;
# 444 "/usr/include/glib-2.0/glib/gregex.h"
typedef gboolean (*GRegexEvalCallback)(const GMatchInfo *match_info,
                                       GString *result, gpointer user_data);

extern GRegex *g_regex_new(const gchar *pattern,
                           GRegexCompileFlags compile_options,
                           GRegexMatchFlags match_options, GError **error);
extern GRegex *g_regex_ref(GRegex *regex);
extern void g_regex_unref(GRegex *regex);
extern const gchar *g_regex_get_pattern(const GRegex *regex);
extern gint g_regex_get_max_backref(const GRegex *regex);
extern gint g_regex_get_capture_count(const GRegex *regex);
extern gboolean g_regex_get_has_cr_or_lf(const GRegex *regex);
extern gint g_regex_get_max_lookbehind(const GRegex *regex);
extern gint g_regex_get_string_number(const GRegex *regex, const gchar *name);
extern gchar *g_regex_escape_string(const gchar *string, gint length);
extern gchar *g_regex_escape_nul(const gchar *string, gint length);

extern GRegexCompileFlags g_regex_get_compile_flags(const GRegex *regex);
extern GRegexMatchFlags g_regex_get_match_flags(const GRegex *regex);

extern gboolean g_regex_match_simple(const gchar *pattern, const gchar *string,
                                     GRegexCompileFlags compile_options,
                                     GRegexMatchFlags match_options);
extern gboolean g_regex_match(const GRegex *regex, const gchar *string,
                              GRegexMatchFlags match_options,
                              GMatchInfo **match_info);
extern gboolean g_regex_match_full(const GRegex *regex, const gchar *string,
                                   gssize string_len, gint start_position,
                                   GRegexMatchFlags match_options,
                                   GMatchInfo **match_info, GError **error);
extern gboolean g_regex_match_all(const GRegex *regex, const gchar *string,
                                  GRegexMatchFlags match_options,
                                  GMatchInfo **match_info);
extern gboolean g_regex_match_all_full(const GRegex *regex, const gchar *string,
                                       gssize string_len, gint start_position,
                                       GRegexMatchFlags match_options,
                                       GMatchInfo **match_info, GError **error);

extern gchar **g_regex_split_simple(const gchar *pattern, const gchar *string,
                                    GRegexCompileFlags compile_options,
                                    GRegexMatchFlags match_options);
extern gchar **g_regex_split(const GRegex *regex, const gchar *string,
                             GRegexMatchFlags match_options);
extern gchar **g_regex_split_full(const GRegex *regex, const gchar *string,
                                  gssize string_len, gint start_position,
                                  GRegexMatchFlags match_options,
                                  gint max_tokens, GError **error);

extern gchar *g_regex_replace(const GRegex *regex, const gchar *string,
                              gssize string_len, gint start_position,
                              const gchar *replacement,
                              GRegexMatchFlags match_options, GError **error);
extern gchar *g_regex_replace_literal(const GRegex *regex, const gchar *string,
                                      gssize string_len, gint start_position,
                                      const gchar *replacement,
                                      GRegexMatchFlags match_options,
                                      GError **error);
extern gchar *g_regex_replace_eval(const GRegex *regex, const gchar *string,
                                   gssize string_len, gint start_position,
                                   GRegexMatchFlags match_options,
                                   GRegexEvalCallback eval, gpointer user_data,
                                   GError **error);
extern gboolean g_regex_check_replacement(const gchar *replacement,
                                          gboolean *has_references,
                                          GError **error);

extern GRegex *g_match_info_get_regex(const GMatchInfo *match_info);
extern const gchar *g_match_info_get_string(const GMatchInfo *match_info);

extern GMatchInfo *g_match_info_ref(GMatchInfo *match_info);
extern void g_match_info_unref(GMatchInfo *match_info);
extern void g_match_info_free(GMatchInfo *match_info);
extern gboolean g_match_info_next(GMatchInfo *match_info, GError **error);
extern gboolean g_match_info_matches(const GMatchInfo *match_info);
extern gint g_match_info_get_match_count(const GMatchInfo *match_info);
extern gboolean g_match_info_is_partial_match(const GMatchInfo *match_info);
extern gchar *g_match_info_expand_references(const GMatchInfo *match_info,
                                             const gchar *string_to_expand,
                                             GError **error);
extern gchar *g_match_info_fetch(const GMatchInfo *match_info, gint match_num);
extern gboolean g_match_info_fetch_pos(const GMatchInfo *match_info,
                                       gint match_num, gint *start_pos,
                                       gint *end_pos);
extern gchar *g_match_info_fetch_named(const GMatchInfo *match_info,
                                       const gchar *name);
extern gboolean g_match_info_fetch_named_pos(const GMatchInfo *match_info,
                                             const gchar *name, gint *start_pos,
                                             gint *end_pos);
extern gchar **g_match_info_fetch_all(const GMatchInfo *match_info);

# 79 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gscanner.h" 1
# 37 "/usr/include/glib-2.0/glib/gscanner.h"

typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;

typedef void (*GScannerMsgFunc)(GScanner *scanner, gchar *message,
                                gboolean error);
# 64 "/usr/include/glib-2.0/glib/gscanner.h"
typedef enum {
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;

typedef enum {
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,

  G_TOKEN_LAST
} GTokenType;

union _GTokenValue {
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};

struct _GScannerConfig {

  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;

  guint case_sensitive : 1;

  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;

  guint padding_dummy;
};

struct _GScanner {

  gpointer user_data;
  guint max_parse_errors;

  guint parse_errors;

  const gchar *input_name;

  GData *qdata;

  GScannerConfig *config;

  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;

  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;

  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;

  GScannerMsgFunc msg_handler;
};

extern GScanner *g_scanner_new(const GScannerConfig *config_templ);
extern void g_scanner_destroy(GScanner *scanner);
extern void g_scanner_input_file(GScanner *scanner, gint input_fd);
extern void g_scanner_sync_file_offset(GScanner *scanner);
extern void g_scanner_input_text(GScanner *scanner, const gchar *text,
                                 guint text_len);
extern GTokenType g_scanner_get_next_token(GScanner *scanner);
extern GTokenType g_scanner_peek_next_token(GScanner *scanner);
extern GTokenType g_scanner_cur_token(GScanner *scanner);
extern GTokenValue g_scanner_cur_value(GScanner *scanner);
extern guint g_scanner_cur_line(GScanner *scanner);
extern guint g_scanner_cur_position(GScanner *scanner);
extern gboolean g_scanner_eof(GScanner *scanner);
extern guint g_scanner_set_scope(GScanner *scanner, guint scope_id);
extern void g_scanner_scope_add_symbol(GScanner *scanner, guint scope_id,
                                       const gchar *symbol, gpointer value);
extern void g_scanner_scope_remove_symbol(GScanner *scanner, guint scope_id,
                                          const gchar *symbol);
extern gpointer g_scanner_scope_lookup_symbol(GScanner *scanner, guint scope_id,
                                              const gchar *symbol);
extern void g_scanner_scope_foreach_symbol(GScanner *scanner, guint scope_id,
                                           GHFunc func, gpointer user_data);
extern gpointer g_scanner_lookup_symbol(GScanner *scanner, const gchar *symbol);
extern void g_scanner_unexp_token(GScanner *scanner, GTokenType expected_token,
                                  const gchar *identifier_spec,
                                  const gchar *symbol_spec,
                                  const gchar *symbol_name,
                                  const gchar *message, gint is_error);
extern void g_scanner_error(GScanner *scanner, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
extern void g_scanner_warn(GScanner *scanner, const gchar *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
# 299 "/usr/include/glib-2.0/glib/gscanner.h"

# 80 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gsequence.h" 1
# 30 "/usr/include/glib-2.0/glib/gsequence.h"

typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;

typedef gint (*GSequenceIterCompareFunc)(GSequenceIter *a, GSequenceIter *b,
                                         gpointer data);

extern GSequence *g_sequence_new(GDestroyNotify data_destroy);
extern void g_sequence_free(GSequence *seq);
extern gint g_sequence_get_length(GSequence *seq);
extern void g_sequence_foreach(GSequence *seq, GFunc func, gpointer user_data);
extern void g_sequence_foreach_range(GSequenceIter *begin, GSequenceIter *end,
                                     GFunc func, gpointer user_data);
extern void g_sequence_sort(GSequence *seq, GCompareDataFunc cmp_func,
                            gpointer cmp_data);
extern void g_sequence_sort_iter(GSequence *seq,
                                 GSequenceIterCompareFunc cmp_func,
                                 gpointer cmp_data);
extern gboolean g_sequence_is_empty(GSequence *seq);

extern GSequenceIter *g_sequence_get_begin_iter(GSequence *seq);
extern GSequenceIter *g_sequence_get_end_iter(GSequence *seq);
extern GSequenceIter *g_sequence_get_iter_at_pos(GSequence *seq, gint pos);
extern GSequenceIter *g_sequence_append(GSequence *seq, gpointer data);
extern GSequenceIter *g_sequence_prepend(GSequence *seq, gpointer data);
extern GSequenceIter *g_sequence_insert_before(GSequenceIter *iter,
                                               gpointer data);
extern void g_sequence_move(GSequenceIter *src, GSequenceIter *dest);
extern void g_sequence_swap(GSequenceIter *a, GSequenceIter *b);
extern GSequenceIter *g_sequence_insert_sorted(GSequence *seq, gpointer data,
                                               GCompareDataFunc cmp_func,
                                               gpointer cmp_data);
extern GSequenceIter *
g_sequence_insert_sorted_iter(GSequence *seq, gpointer data,
                              GSequenceIterCompareFunc iter_cmp,
                              gpointer cmp_data);
extern void g_sequence_sort_changed(GSequenceIter *iter,
                                    GCompareDataFunc cmp_func,
                                    gpointer cmp_data);
extern void g_sequence_sort_changed_iter(GSequenceIter *iter,
                                         GSequenceIterCompareFunc iter_cmp,
                                         gpointer cmp_data);
extern void g_sequence_remove(GSequenceIter *iter);
extern void g_sequence_remove_range(GSequenceIter *begin, GSequenceIter *end);
extern void g_sequence_move_range(GSequenceIter *dest, GSequenceIter *begin,
                                  GSequenceIter *end);
extern GSequenceIter *g_sequence_search(GSequence *seq, gpointer data,
                                        GCompareDataFunc cmp_func,
                                        gpointer cmp_data);
extern GSequenceIter *g_sequence_search_iter(GSequence *seq, gpointer data,
                                             GSequenceIterCompareFunc iter_cmp,
                                             gpointer cmp_data);
extern GSequenceIter *g_sequence_lookup(GSequence *seq, gpointer data,
                                        GCompareDataFunc cmp_func,
                                        gpointer cmp_data);
extern GSequenceIter *g_sequence_lookup_iter(GSequence *seq, gpointer data,
                                             GSequenceIterCompareFunc iter_cmp,
                                             gpointer cmp_data);

extern gpointer g_sequence_get(GSequenceIter *iter);
extern void g_sequence_set(GSequenceIter *iter, gpointer data);

extern gboolean g_sequence_iter_is_begin(GSequenceIter *iter);
extern gboolean g_sequence_iter_is_end(GSequenceIter *iter);
extern GSequenceIter *g_sequence_iter_next(GSequenceIter *iter);
extern GSequenceIter *g_sequence_iter_prev(GSequenceIter *iter);
extern gint g_sequence_iter_get_position(GSequenceIter *iter);
extern GSequenceIter *g_sequence_iter_move(GSequenceIter *iter, gint delta);
extern GSequence *g_sequence_iter_get_sequence(GSequenceIter *iter);

extern gint g_sequence_iter_compare(GSequenceIter *a, GSequenceIter *b);
extern GSequenceIter *g_sequence_range_get_midpoint(GSequenceIter *begin,
                                                    GSequenceIter *end);

# 81 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gshell.h" 1
# 30 "/usr/include/glib-2.0/glib/gshell.h"

typedef enum {

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

extern GQuark g_shell_error_quark(void);

extern gchar *g_shell_quote(const gchar *unquoted_string);
extern gchar *g_shell_unquote(const gchar *quoted_string, GError **error);
extern gboolean g_shell_parse_argv(const gchar *command_line, gint *argcp,
                                   gchar ***argvp, GError **error);

# 82 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gslice.h" 1
# 30 "/usr/include/glib-2.0/glib/gslice.h"

extern gpointer g_slice_alloc(gsize block_size) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_slice_alloc0(gsize block_size) __attribute__((__malloc__))
__attribute__((__alloc_size__(1)));
extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block)
    __attribute__((__alloc_size__(1)));
extern void g_slice_free1(gsize block_size, gpointer mem_block);
extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain,
                                           gsize next_offset);
# 94 "/usr/include/glib-2.0/glib/gslice.h"
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;

__attribute__((__deprecated__)) extern void
g_slice_set_config(GSliceConfig ckey, gint64 value);
__attribute__((__deprecated__)) extern gint64
g_slice_get_config(GSliceConfig ckey);
__attribute__((__deprecated__)) extern gint64 *
g_slice_get_config_state(GSliceConfig ckey, gint64 address, guint *n_values);
# 117 "/usr/include/glib-2.0/glib/gslice.h"

# 83 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gspawn.h" 1
# 30 "/usr/include/glib-2.0/glib/gspawn.h"

# 70 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum {
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_2BIG __attribute__((__deprecated__("Use '"
                                                   "G_SPAWN_ERROR_TOO_BIG"
                                                   "' instead"))) =
      G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED

} GSpawnError;
# 140 "/usr/include/glib-2.0/glib/gspawn.h"
typedef void (*GSpawnChildSetupFunc)(gpointer data);
# 176 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum {
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES = 1 << 8,
# 198 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_CHILD_INHERITS_STDOUT = 1 << 9,
# 207 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_CHILD_INHERITS_STDERR = 1 << 10,
# 216 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_STDIN_FROM_DEV_NULL = 1 << 11
} GSpawnFlags;

extern GQuark g_spawn_error_quark(void);
extern GQuark g_spawn_exit_error_quark(void);

extern gboolean g_spawn_async(const gchar *working_directory, gchar **argv,
                              gchar **envp, GSpawnFlags flags,
                              GSpawnChildSetupFunc child_setup,
                              gpointer user_data, GPid *child_pid,
                              GError **error);

extern gboolean g_spawn_async_with_pipes(
    const gchar *working_directory, gchar **argv, gchar **envp,
    GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data,
    GPid *child_pid, gint *standard_input, gint *standard_output,
    gint *standard_error, GError **error);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern gboolean
g_spawn_async_with_pipes_and_fds(const gchar *working_directory,
                                 const gchar *const *argv,
                                 const gchar *const *envp, GSpawnFlags flags,
                                 GSpawnChildSetupFunc child_setup,
                                 gpointer user_data, gint stdin_fd,
                                 gint stdout_fd, gint stderr_fd,
                                 const gint *source_fds, const gint *target_fds,
                                 gsize n_fds, GPid *child_pid_out,
                                 gint *stdin_pipe_out, gint *stdout_pipe_out,
                                 gint *stderr_pipe_out, GError **error);

extern gboolean g_spawn_async_with_fds(const gchar *working_directory,
                                       gchar **argv, gchar **envp,
                                       GSpawnFlags flags,
                                       GSpawnChildSetupFunc child_setup,
                                       gpointer user_data, GPid *child_pid,
                                       gint stdin_fd, gint stdout_fd,
                                       gint stderr_fd, GError **error);

extern gboolean g_spawn_sync(const gchar *working_directory, gchar **argv,
                             gchar **envp, GSpawnFlags flags,
                             GSpawnChildSetupFunc child_setup,
                             gpointer user_data, gchar **standard_output,
                             gchar **standard_error, gint *wait_status,
                             GError **error);

extern gboolean g_spawn_command_line_sync(const gchar *command_line,
                                          gchar **standard_output,
                                          gchar **standard_error,
                                          gint *wait_status, GError **error);
extern gboolean g_spawn_command_line_async(const gchar *command_line,
                                           GError **error);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern gboolean
g_spawn_check_wait_status(gint wait_status, GError **error);

extern gboolean g_spawn_check_exit_status(gint wait_status, GError **error);

extern void g_spawn_close_pid(GPid pid);

# 85 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gstringchunk.h" 1
# 36 "/usr/include/glib-2.0/glib/gstringchunk.h"

typedef struct _GStringChunk GStringChunk;

extern GStringChunk *g_string_chunk_new(gsize size);
extern void g_string_chunk_free(GStringChunk *chunk);
extern void g_string_chunk_clear(GStringChunk *chunk);
extern gchar *g_string_chunk_insert(GStringChunk *chunk, const gchar *string);
extern gchar *g_string_chunk_insert_len(GStringChunk *chunk,
                                        const gchar *string, gssize len);
extern gchar *g_string_chunk_insert_const(GStringChunk *chunk,
                                          const gchar *string);

# 87 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gstrvbuilder.h" 1
# 31 "/usr/include/glib-2.0/glib/gstrvbuilder.h"

typedef struct _GStrvBuilder GStrvBuilder;

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GStrvBuilder *
g_strv_builder_new(void);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern void
g_strv_builder_unref(GStrvBuilder *builder);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GStrvBuilder *
g_strv_builder_ref(GStrvBuilder *builder);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern void
g_strv_builder_add(GStrvBuilder *builder, const char *value);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_strv_builder_addv(GStrvBuilder *builder, const char **value);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_strv_builder_add_many(GStrvBuilder *builder, ...)
    __attribute__((__sentinel__));

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_strv_builder_take(GStrvBuilder *builder, char *value);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GStrv
g_strv_builder_end(GStrvBuilder *builder);

# 89 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtestutils.h" 1
# 36 "/usr/include/glib-2.0/glib/gtestutils.h"

typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc)(void);
typedef void (*GTestDataFunc)(gconstpointer user_data);
typedef void (*GTestFixtureFunc)(gpointer fixture, gconstpointer user_data);
# 282 "/usr/include/glib-2.0/glib/gtestutils.h"
extern int g_strcmp0(const char *str1, const char *str2);

extern void g_test_minimized_result(double minimized_quantity,
                                    const char *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
extern void g_test_maximized_result(double maximized_quantity,
                                    const char *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

extern void g_test_init(int *argc, char ***argv, ...)
    __attribute__((__sentinel__));
# 364 "/usr/include/glib-2.0/glib/gtestutils.h"
extern gboolean g_test_subprocess(void);

extern int g_test_run(void);

extern void g_test_add_func(const char *testpath, GTestFunc test_func);

extern void g_test_add_data_func(const char *testpath, gconstpointer test_data,
                                 GTestDataFunc test_func);

extern void g_test_add_data_func_full(const char *testpath, gpointer test_data,
                                      GTestDataFunc test_func,
                                      GDestroyNotify data_free_func);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern const char *
g_test_get_path(void);

extern void g_test_fail(void);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_test_fail_printf(const char *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern void g_test_incomplete(const gchar *msg);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_test_incomplete_printf(const char *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern void g_test_skip(const gchar *msg);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_test_skip_printf(const char *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern gboolean g_test_failed(void);
extern void g_test_set_nonfatal_assertions(void);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "78"))) extern void
g_test_disable_crash_reporting(void);
# 445 "/usr/include/glib-2.0/glib/gtestutils.h"
extern void g_test_message(const char *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern void g_test_bug_base(const char *uri_pattern);
extern void g_test_bug(const char *bug_uri_snippet);
extern void g_test_summary(const char *summary);

extern void g_test_timer_start(void);
extern double g_test_timer_elapsed(void);
extern double g_test_timer_last(void);

extern void g_test_queue_free(gpointer gfree_pointer);
extern void g_test_queue_destroy(GDestroyNotify destroy_func,
                                 gpointer destroy_data);
# 492 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef enum {
  G_TEST_TRAP_DEFAULT __attribute__((deprecated("Not available before "
                                                "2"
                                                "."
                                                "74"))) = 0,
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags __attribute__((__deprecated__("Use '"
                                               "GTestSubprocessFlags"
                                               "' instead")));

# 499 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic push
# 499 "/usr/include/glib-2.0/glib/gtestutils.h"

# 499 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__("Use '"
                              "g_test_trap_subprocess"
                              "' instead"))) extern gboolean
g_test_trap_fork(guint64 usec_timeout, GTestTrapFlags test_trap_flags);

# 505 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma GCC diagnostic pop

typedef enum {
  G_TEST_SUBPROCESS_DEFAULT __attribute__((deprecated("Not available before "
                                                      "2"
                                                      "."
                                                      "74"))) = 0,
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;

extern void g_test_trap_subprocess(const char *test_path, guint64 usec_timeout,
                                   GTestSubprocessFlags test_flags);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern void
g_test_trap_subprocess_with_envp(const char *test_path, const char *const *envp,
                                 guint64 usec_timeout,
                                 GTestSubprocessFlags test_flags);

extern gboolean g_test_trap_has_passed(void);
extern gboolean g_test_trap_reached_timeout(void);
# 537 "/usr/include/glib-2.0/glib/gtestutils.h"
extern gint32 g_test_rand_int(void);
extern gint32 g_test_rand_int_range(gint32 begin, gint32 end);
extern double g_test_rand_double(void);
extern double g_test_rand_double_range(double range_start, double range_end);

extern GTestCase *g_test_create_case(const char *test_name, gsize data_size,
                                     gconstpointer test_data,
                                     GTestFixtureFunc data_setup,
                                     GTestFixtureFunc data_test,
                                     GTestFixtureFunc data_teardown);
extern GTestSuite *g_test_create_suite(const char *suite_name);
extern GTestSuite *g_test_get_root(void);
extern void g_test_suite_add(GTestSuite *suite, GTestCase *test_case);
extern void g_test_suite_add_suite(GTestSuite *suite, GTestSuite *nestedsuite);
extern int g_test_run_suite(GTestSuite *suite);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_test_case_free(GTestCase *test_case);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_test_suite_free(GTestSuite *suite);

extern void g_test_trap_assertions(const char *domain, const char *file,
                                   int line, const char *func,
                                   guint64 assertion_flags,
                                   const char *pattern);
extern void g_assertion_message(const char *domain, const char *file, int line,
                                const char *func, const char *message);
__attribute__((__noreturn__)) extern void
g_assertion_message_expr(const char *domain, const char *file, int line,
                         const char *func, const char *expr);
extern void g_assertion_message_cmpstr(const char *domain, const char *file,
                                       int line, const char *func,
                                       const char *expr, const char *arg1,
                                       const char *cmp, const char *arg2);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern void
g_assertion_message_cmpstrv(const char *domain, const char *file, int line,
                            const char *func, const char *expr,
                            const char *const *arg1, const char *const *arg2,
                            gsize first_wrong_idx);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "78"))) extern void
g_assertion_message_cmpint(const char *domain, const char *file, int line,
                           const char *func, const char *expr, guint64 arg1,
                           const char *cmp, guint64 arg2, char numtype);
extern void g_assertion_message_cmpnum(const char *domain, const char *file,
                                       int line, const char *func,
                                       const char *expr, long double arg1,
                                       const char *cmp, long double arg2,
                                       char numtype);
extern void g_assertion_message_error(const char *domain, const char *file,
                                      int line, const char *func,
                                      const char *expr, const GError *error,
                                      GQuark error_domain, int error_code);
extern void g_test_add_vtable(const char *testpath, gsize data_size,
                              gconstpointer test_data,
                              GTestFixtureFunc data_setup,
                              GTestFixtureFunc data_test,
                              GTestFixtureFunc data_teardown);
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
  gboolean test_undefined;
} GTestConfig;
extern const GTestConfig *const g_test_config_vars;

typedef enum {
  G_TEST_RUN_SUCCESS,
  G_TEST_RUN_SKIPPED,
  G_TEST_RUN_FAILURE,
  G_TEST_RUN_INCOMPLETE
} GTestResult;

typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE,
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;

typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {

  GString *data;
  GSList *msgs;
} GTestLogBuffer;

extern const char *g_test_log_type_name(GTestLogType log_type);
extern GTestLogBuffer *g_test_log_buffer_new(void);
extern void g_test_log_buffer_free(GTestLogBuffer *tbuffer);
extern void g_test_log_buffer_push(GTestLogBuffer *tbuffer, guint n_bytes,
                                   const guint8 *bytes);
extern GTestLogMsg *g_test_log_buffer_pop(GTestLogBuffer *tbuffer);
extern void g_test_log_msg_free(GTestLogMsg *tmsg);
# 728 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef gboolean (*GTestLogFatalFunc)(const gchar *log_domain,
                                      GLogLevelFlags log_level,
                                      const gchar *message, gpointer user_data);
extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func,
                                         gpointer user_data);

extern void g_test_expect_message(const gchar *log_domain,
                                  GLogLevelFlags log_level,
                                  const gchar *pattern);
extern void g_test_assert_expected_messages_internal(const char *domain,
                                                     const char *file, int line,
                                                     const char *func);

typedef enum { G_TEST_DIST, G_TEST_BUILT } GTestFileType;

extern gchar *g_test_build_filename(GTestFileType file_type,
                                    const gchar *first_path, ...)
    __attribute__((__sentinel__));
extern const gchar *g_test_get_dir(GTestFileType file_type);
extern const gchar *g_test_get_filename(GTestFileType file_type,
                                        const gchar *first_path, ...)
    __attribute__((__sentinel__));

# 90 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gthreadpool.h" 1
# 36 "/usr/include/glib-2.0/glib/gthreadpool.h"

typedef struct _GThreadPool GThreadPool;

struct _GThreadPool {
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};

extern GThreadPool *g_thread_pool_new(GFunc func, gpointer user_data,
                                      gint max_threads, gboolean exclusive,
                                      GError **error);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern GThreadPool *
g_thread_pool_new_full(GFunc func, gpointer user_data,
                       GDestroyNotify item_free_func, gint max_threads,
                       gboolean exclusive, GError **error);
extern void g_thread_pool_free(GThreadPool *pool, gboolean immediate,
                               gboolean wait_);
extern gboolean g_thread_pool_push(GThreadPool *pool, gpointer data,
                                   GError **error);
extern guint g_thread_pool_unprocessed(GThreadPool *pool);
extern void g_thread_pool_set_sort_function(GThreadPool *pool,
                                            GCompareDataFunc func,
                                            gpointer user_data);
extern gboolean g_thread_pool_move_to_front(GThreadPool *pool, gpointer data);

extern gboolean g_thread_pool_set_max_threads(GThreadPool *pool,
                                              gint max_threads, GError **error);
extern gint g_thread_pool_get_max_threads(GThreadPool *pool);
extern guint g_thread_pool_get_num_threads(GThreadPool *pool);

extern void g_thread_pool_set_max_unused_threads(gint max_threads);
extern gint g_thread_pool_get_max_unused_threads(void);
extern guint g_thread_pool_get_num_unused_threads(void);
extern void g_thread_pool_stop_unused_threads(void);
extern void g_thread_pool_set_max_idle_time(guint interval);
extern guint g_thread_pool_get_max_idle_time(void);

# 92 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtimer.h" 1
# 36 "/usr/include/glib-2.0/glib/gtimer.h"

typedef struct _GTimer GTimer;

extern GTimer *g_timer_new(void);
extern void g_timer_destroy(GTimer *timer);
extern void g_timer_start(GTimer *timer);
extern void g_timer_stop(GTimer *timer);
extern void g_timer_reset(GTimer *timer);
extern void g_timer_continue(GTimer *timer);
extern gdouble g_timer_elapsed(GTimer *timer, gulong *microseconds);
extern gboolean g_timer_is_active(GTimer *timer);

extern void g_usleep(gulong microseconds);

# 67 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic push
# 67 "/usr/include/glib-2.0/glib/gtimer.h"

# 67 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern void g_time_val_add(GTimeVal *time_,
                                                           glong microseconds);
__attribute__((__deprecated__("Use '"
                              "g_date_time_new_from_iso8601"
                              "' instead"))) extern gboolean
g_time_val_from_iso8601(const gchar *iso_date, GTimeVal *time_);
__attribute__((__deprecated__("Use '"
                              "g_date_time_format"
                              "' instead"))) extern gchar *
g_time_val_to_iso8601(GTimeVal *time_) __attribute__((__malloc__));

# 76 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma GCC diagnostic pop

# 93 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gtrashstack.h" 1
# 36 "/usr/include/glib-2.0/glib/gtrashstack.h"

# 38 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/glib/gtrashstack.h"

# 38 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

typedef struct _GTrashStack GTrashStack __attribute__((__deprecated__));
struct _GTrashStack {
  GTrashStack *next;
} __attribute__((__deprecated__));

__attribute__((__deprecated__)) extern void
g_trash_stack_push(GTrashStack **stack_p, gpointer data_p);
__attribute__((__deprecated__)) extern gpointer
g_trash_stack_pop(GTrashStack **stack_p);
__attribute__((__deprecated__)) extern gpointer
g_trash_stack_peek(GTrashStack **stack_p);
__attribute__((__deprecated__)) extern guint
g_trash_stack_height(GTrashStack **stack_p);

# 56 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma GCC diagnostic pop

# 95 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtree.h" 1
# 36 "/usr/include/glib-2.0/glib/gtree.h"

typedef struct _GTree GTree;
# 49 "/usr/include/glib-2.0/glib/gtree.h"
typedef struct _GTreeNode GTreeNode;

typedef gboolean (*GTraverseFunc)(gpointer key, gpointer value, gpointer data);
# 68 "/usr/include/glib-2.0/glib/gtree.h"
typedef gboolean (*GTraverseNodeFunc)(GTreeNode *node, gpointer data);

extern GTree *g_tree_new(GCompareFunc key_compare_func);
extern GTree *g_tree_new_with_data(GCompareDataFunc key_compare_func,
                                   gpointer key_compare_data);
extern GTree *g_tree_new_full(GCompareDataFunc key_compare_func,
                              gpointer key_compare_data,
                              GDestroyNotify key_destroy_func,
                              GDestroyNotify value_destroy_func);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_node_first(GTree *tree);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_node_last(GTree *tree);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_node_previous(GTreeNode *node);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_node_next(GTreeNode *node);
extern GTree *g_tree_ref(GTree *tree);
extern void g_tree_unref(GTree *tree);
extern void g_tree_destroy(GTree *tree);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_insert_node(GTree *tree, gpointer key, gpointer value);
extern void g_tree_insert(GTree *tree, gpointer key, gpointer value);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_replace_node(GTree *tree, gpointer key, gpointer value);
extern void g_tree_replace(GTree *tree, gpointer key, gpointer value);
extern gboolean g_tree_remove(GTree *tree, gconstpointer key);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "70"))) extern void
g_tree_remove_all(GTree *tree);

extern gboolean g_tree_steal(GTree *tree, gconstpointer key);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern gpointer
g_tree_node_key(GTreeNode *node);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern gpointer
g_tree_node_value(GTreeNode *node);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_lookup_node(GTree *tree, gconstpointer key);
extern gpointer g_tree_lookup(GTree *tree, gconstpointer key);
extern gboolean g_tree_lookup_extended(GTree *tree, gconstpointer lookup_key,
                                       gpointer *orig_key, gpointer *value);
extern void g_tree_foreach(GTree *tree, GTraverseFunc func, gpointer user_data);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern void
g_tree_foreach_node(GTree *tree, GTraverseNodeFunc func, gpointer user_data);

__attribute__((__deprecated__)) extern void
g_tree_traverse(GTree *tree, GTraverseFunc traverse_func,
                GTraverseType traverse_type, gpointer user_data);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_search_node(GTree *tree, GCompareFunc search_func,
                   gconstpointer user_data);
extern gpointer g_tree_search(GTree *tree, GCompareFunc search_func,
                              gconstpointer user_data);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_lower_bound(GTree *tree, gconstpointer key);
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "68"))) extern GTreeNode *
g_tree_upper_bound(GTree *tree, gconstpointer key);
extern gint g_tree_height(GTree *tree);
extern gint g_tree_nnodes(GTree *tree);
# 179 "/usr/include/glib-2.0/glib/gtree.h"

# 96 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/guri.h" 1
# 21 "/usr/include/glib-2.0/glib/guri.h"

# 31 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic push
# 31 "/usr/include/glib-2.0/glib/guri.h"

# 31 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

typedef struct _GUri GUri;

extern GUri *g_uri_ref(GUri *uri);
extern void g_uri_unref(GUri *uri);
# 81 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_FLAGS_NONE = 0,
  G_URI_FLAGS_PARSE_RELAXED = 1 << 0,
  G_URI_FLAGS_HAS_PASSWORD = 1 << 1,
  G_URI_FLAGS_HAS_AUTH_PARAMS = 1 << 2,
  G_URI_FLAGS_ENCODED = 1 << 3,
  G_URI_FLAGS_NON_DNS = 1 << 4,
  G_URI_FLAGS_ENCODED_QUERY = 1 << 5,
  G_URI_FLAGS_ENCODED_PATH = 1 << 6,
  G_URI_FLAGS_ENCODED_FRAGMENT = 1 << 7,
  G_URI_FLAGS_SCHEME_NORMALIZE __attribute__((deprecated("Not available before "
                                                         "2"
                                                         "."
                                                         "68"))) = 1 << 8,
} GUriFlags;

extern gboolean g_uri_split(const gchar *uri_ref, GUriFlags flags,
                            gchar **scheme, gchar **userinfo, gchar **host,
                            gint *port, gchar **path, gchar **query,
                            gchar **fragment, GError **error);
extern gboolean g_uri_split_with_user(const gchar *uri_ref, GUriFlags flags,
                                      gchar **scheme, gchar **user,
                                      gchar **password, gchar **auth_params,
                                      gchar **host, gint *port, gchar **path,
                                      gchar **query, gchar **fragment,
                                      GError **error);
extern gboolean g_uri_split_network(const gchar *uri_string, GUriFlags flags,
                                    gchar **scheme, gchar **host, gint *port,
                                    GError **error);

extern gboolean g_uri_is_valid(const gchar *uri_string, GUriFlags flags,
                               GError **error);

extern gchar *g_uri_join(GUriFlags flags, const gchar *scheme,
                         const gchar *userinfo, const gchar *host, gint port,
                         const gchar *path, const gchar *query,
                         const gchar *fragment);
extern gchar *g_uri_join_with_user(GUriFlags flags, const gchar *scheme,
                                   const gchar *user, const gchar *password,
                                   const gchar *auth_params, const gchar *host,
                                   gint port, const gchar *path,
                                   const gchar *query, const gchar *fragment);

extern GUri *g_uri_parse(const gchar *uri_string, GUriFlags flags,
                         GError **error);
extern GUri *g_uri_parse_relative(GUri *base_uri, const gchar *uri_ref,
                                  GUriFlags flags, GError **error);

extern gchar *g_uri_resolve_relative(const gchar *base_uri_string,
                                     const gchar *uri_ref, GUriFlags flags,
                                     GError **error);

extern GUri *g_uri_build(GUriFlags flags, const gchar *scheme,
                         const gchar *userinfo, const gchar *host, gint port,
                         const gchar *path, const gchar *query,
                         const gchar *fragment);
extern GUri *g_uri_build_with_user(GUriFlags flags, const gchar *scheme,
                                   const gchar *user, const gchar *password,
                                   const gchar *auth_params, const gchar *host,
                                   gint port, const gchar *path,
                                   const gchar *query, const gchar *fragment);
# 206 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_HIDE_NONE = 0,
  G_URI_HIDE_USERINFO = 1 << 0,
  G_URI_HIDE_PASSWORD = 1 << 1,
  G_URI_HIDE_AUTH_PARAMS = 1 << 2,
  G_URI_HIDE_QUERY = 1 << 3,
  G_URI_HIDE_FRAGMENT = 1 << 4,
} GUriHideFlags;

extern char *g_uri_to_string(GUri *uri);
extern char *g_uri_to_string_partial(GUri *uri, GUriHideFlags flags);

extern const gchar *g_uri_get_scheme(GUri *uri);
extern const gchar *g_uri_get_userinfo(GUri *uri);
extern const gchar *g_uri_get_user(GUri *uri);
extern const gchar *g_uri_get_password(GUri *uri);
extern const gchar *g_uri_get_auth_params(GUri *uri);
extern const gchar *g_uri_get_host(GUri *uri);
extern gint g_uri_get_port(GUri *uri);
extern const gchar *g_uri_get_path(GUri *uri);
extern const gchar *g_uri_get_query(GUri *uri);
extern const gchar *g_uri_get_fragment(GUri *uri);
extern GUriFlags g_uri_get_flags(GUri *uri);
# 258 "/usr/include/glib-2.0/glib/guri.h"

typedef enum {
  G_URI_PARAMS_NONE = 0,
  G_URI_PARAMS_CASE_INSENSITIVE = 1 << 0,
  G_URI_PARAMS_WWW_FORM = 1 << 1,
  G_URI_PARAMS_PARSE_RELAXED = 1 << 2,
} GUriParamsFlags;

extern GHashTable *g_uri_parse_params(const gchar *params, gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags, GError **error);

typedef struct _GUriParamsIter GUriParamsIter;

struct _GUriParamsIter {

  gint dummy0;
  gpointer dummy1;
  gpointer dummy2;
  guint8 dummy3[256];
};

extern void g_uri_params_iter_init(GUriParamsIter *iter, const gchar *params,
                                   gssize length, const gchar *separators,
                                   GUriParamsFlags flags);

extern gboolean g_uri_params_iter_next(GUriParamsIter *iter, gchar **attribute,
                                       gchar **value, GError **error);
# 307 "/usr/include/glib-2.0/glib/guri.h"
extern GQuark g_uri_error_quark(void);
# 328 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_ERROR_FAILED,
  G_URI_ERROR_BAD_SCHEME,
  G_URI_ERROR_BAD_USER,
  G_URI_ERROR_BAD_PASSWORD,
  G_URI_ERROR_BAD_AUTH_PARAMS,
  G_URI_ERROR_BAD_HOST,
  G_URI_ERROR_BAD_PORT,
  G_URI_ERROR_BAD_PATH,
  G_URI_ERROR_BAD_QUERY,
  G_URI_ERROR_BAD_FRAGMENT,
} GUriError;
# 389 "/usr/include/glib-2.0/glib/guri.h"
extern char *g_uri_unescape_string(const char *escaped_string,
                                   const char *illegal_characters);
extern char *g_uri_unescape_segment(const char *escaped_string,
                                    const char *escaped_string_end,
                                    const char *illegal_characters);

extern char *g_uri_parse_scheme(const char *uri);
extern const char *g_uri_peek_scheme(const char *uri);

extern char *g_uri_escape_string(const char *unescaped,
                                 const char *reserved_chars_allowed,
                                 gboolean allow_utf8);

extern GBytes *g_uri_unescape_bytes(const char *escaped_string, gssize length,
                                    const char *illegal_characters,
                                    GError **error);

extern char *g_uri_escape_bytes(const guint8 *unescaped, gsize length,
                                const char *reserved_chars_allowed);

# 418 "/usr/include/glib-2.0/glib/guri.h"
#pragma GCC diagnostic pop

# 99 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/guuid.h" 1
# 32 "/usr/include/glib-2.0/glib/guuid.h"

extern gboolean g_uuid_string_is_valid(const gchar *str);

extern gchar *g_uuid_string_random(void);

# 101 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gversion.h" 1
# 36 "/usr/include/glib-2.0/glib/gversion.h"

extern const guint glib_major_version;
extern const guint glib_minor_version;
extern const guint glib_micro_version;
extern const guint glib_interface_age;
extern const guint glib_binary_age;

extern const gchar *glib_check_version(guint required_major,
                                       guint required_minor,
                                       guint required_micro);

# 104 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/deprecated/gallocator.h" 1
# 25 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"

typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
# 42 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"
__attribute__((__deprecated__)) extern GMemChunk *
g_mem_chunk_new(const gchar *name, gint atom_size, gsize area_size, gint type);
__attribute__((__deprecated__)) extern void
g_mem_chunk_destroy(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern gpointer
g_mem_chunk_alloc(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern gpointer
g_mem_chunk_alloc0(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern void
g_mem_chunk_free(GMemChunk *mem_chunk, gpointer mem);
__attribute__((__deprecated__)) extern void
g_mem_chunk_clean(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern void
g_mem_chunk_reset(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern void
g_mem_chunk_print(GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern void g_mem_chunk_info(void);
__attribute__((__deprecated__)) extern void g_blow_chunks(void);

__attribute__((__deprecated__)) extern GAllocator *
g_allocator_new(const gchar *name, guint n_preallocs);
__attribute__((__deprecated__)) extern void
g_allocator_free(GAllocator *allocator);
__attribute__((__deprecated__)) extern void
g_list_push_allocator(GAllocator *allocator);
__attribute__((__deprecated__)) extern void g_list_pop_allocator(void);
__attribute__((__deprecated__)) extern void
g_slist_push_allocator(GAllocator *allocator);
__attribute__((__deprecated__)) extern void g_slist_pop_allocator(void);
__attribute__((__deprecated__)) extern void
g_node_push_allocator(GAllocator *allocator);
__attribute__((__deprecated__)) extern void g_node_pop_allocator(void);

# 111 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcache.h" 1
# 36 "/usr/include/glib-2.0/glib/deprecated/gcache.h"

typedef struct _GCache GCache __attribute__((__deprecated__("Use '"
                                                            "GHashTable"
                                                            "' instead")));

typedef gpointer (*GCacheNewFunc)(gpointer key) __attribute__((__deprecated__));
typedef gpointer (*GCacheDupFunc)(gpointer value)
    __attribute__((__deprecated__));
typedef void (*GCacheDestroyFunc)(gpointer value)
    __attribute__((__deprecated__));

# 44 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic push
# 44 "/usr/include/glib-2.0/glib/deprecated/gcache.h"

# 44 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__)) extern GCache *
g_cache_new(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func,
            GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func,
            GHashFunc hash_key_func, GHashFunc hash_value_func,
            GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern void g_cache_destroy(GCache *cache);
__attribute__((__deprecated__)) extern gpointer g_cache_insert(GCache *cache,
                                                               gpointer key);
__attribute__((__deprecated__)) extern void g_cache_remove(GCache *cache,
                                                           gconstpointer value);
__attribute__((__deprecated__)) extern void
g_cache_key_foreach(GCache *cache, GHFunc func, gpointer user_data);
__attribute__((__deprecated__)) extern void
g_cache_value_foreach(GCache *cache, GHFunc func, gpointer user_data);

# 73 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma GCC diagnostic pop

# 112 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h" 1
# 36 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h"

typedef struct _GCompletion GCompletion;

typedef gchar *(*GCompletionFunc)(gpointer item);

typedef gint (*GCompletionStrncmpFunc)(const gchar *s1, const gchar *s2,
                                       gsize n);

struct _GCompletion {
  GList *items;
  GCompletionFunc func;

  gchar *prefix;
  GList *cache;
  GCompletionStrncmpFunc strncmp_func;
};

__attribute__((__deprecated__)) extern GCompletion *
g_completion_new(GCompletionFunc func);
__attribute__((__deprecated__)) extern void
g_completion_add_items(GCompletion *cmp, GList *items);
__attribute__((__deprecated__)) extern void
g_completion_remove_items(GCompletion *cmp, GList *items);
__attribute__((__deprecated__)) extern void
g_completion_clear_items(GCompletion *cmp);
__attribute__((__deprecated__)) extern GList *
g_completion_complete(GCompletion *cmp, const gchar *prefix,
                      gchar **new_prefix);
__attribute__((__deprecated__)) extern GList *
g_completion_complete_utf8(GCompletion *cmp, const gchar *prefix,
                           gchar **new_prefix);
__attribute__((__deprecated__)) extern void
g_completion_set_compare(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func);
__attribute__((__deprecated__)) extern void g_completion_free(GCompletion *cmp);

# 113 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gmain.h" 1
# 36 "/usr/include/glib-2.0/glib/deprecated/gmain.h"

# 135 "/usr/include/glib-2.0/glib/deprecated/gmain.h"

# 114 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/grel.h" 1
# 36 "/usr/include/glib-2.0/glib/deprecated/grel.h"

typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;

struct _GTuples {
  guint len;
};

__attribute__((__deprecated__)) extern GRelation *g_relation_new(gint fields);
__attribute__((__deprecated__)) extern void
g_relation_destroy(GRelation *relation);
__attribute__((__deprecated__)) extern void
g_relation_index(GRelation *relation, gint field, GHashFunc hash_func,
                 GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern void
g_relation_insert(GRelation *relation, ...);
__attribute__((__deprecated__)) extern gint
g_relation_delete(GRelation *relation, gconstpointer key, gint field);
__attribute__((__deprecated__)) extern GTuples *
g_relation_select(GRelation *relation, gconstpointer key, gint field);
__attribute__((__deprecated__)) extern gint
g_relation_count(GRelation *relation, gconstpointer key, gint field);
__attribute__((__deprecated__)) extern gboolean
g_relation_exists(GRelation *relation, ...);
__attribute__((__deprecated__)) extern void
g_relation_print(GRelation *relation);
__attribute__((__deprecated__)) extern void g_tuples_destroy(GTuples *tuples);
__attribute__((__deprecated__)) extern gpointer
g_tuples_index(GTuples *tuples, gint index_, gint field);

# 115 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 1
# 36 "/usr/include/glib-2.0/glib/deprecated/gthread.h"

# 38 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic push
# 38 "/usr/include/glib-2.0/glib/deprecated/gthread.h"

# 38 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

typedef enum {
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority __attribute__((__deprecated__));

struct _GThread {

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};

typedef struct _GThreadFunctions GThreadFunctions
    __attribute__((__deprecated__));
struct _GThreadFunctions {
  GMutex *(*mutex_new)(void);
  void (*mutex_lock)(GMutex *mutex);
  gboolean (*mutex_trylock)(GMutex *mutex);
  void (*mutex_unlock)(GMutex *mutex);
  void (*mutex_free)(GMutex *mutex);
  GCond *(*cond_new)(void);
  void (*cond_signal)(GCond *cond);
  void (*cond_broadcast)(GCond *cond);
  void (*cond_wait)(GCond *cond, GMutex *mutex);
  gboolean (*cond_timed_wait)(GCond *cond, GMutex *mutex, GTimeVal *end_time);
  void (*cond_free)(GCond *cond);
  GPrivate *(*private_new)(GDestroyNotify destructor);
  gpointer (*private_get)(GPrivate *private_key);
  void (*private_set)(GPrivate *private_key, gpointer data);
  void (*thread_create)(GThreadFunc func, gpointer data, gulong stack_size,
                        gboolean joinable, gboolean bound,
                        GThreadPriority priority, gpointer thread,
                        GError **error);
  void (*thread_yield)(void);
  void (*thread_join)(gpointer thread);
  void (*thread_exit)(void);
  void (*thread_set_priority)(gpointer thread, GThreadPriority priority);
  void (*thread_self)(gpointer thread);
  gboolean (*thread_equal)(gpointer thread1, gpointer thread2);
} __attribute__((__deprecated__));

extern GThreadFunctions g_thread_functions_for_glib_use;
extern gboolean g_thread_use_default_impl;

extern guint64 (*g_thread_gettime)(void);

__attribute__((__deprecated__("Use '"
                              "g_thread_new"
                              "' instead"))) extern GThread *
g_thread_create(GThreadFunc func, gpointer data, gboolean joinable,
                GError **error);

__attribute__((__deprecated__("Use '"
                              "g_thread_new"
                              "' instead"))) extern GThread *
g_thread_create_full(GThreadFunc func, gpointer data, gulong stack_size,
                     gboolean joinable, gboolean bound,
                     GThreadPriority priority, GError **error);

__attribute__((__deprecated__)) extern void
g_thread_set_priority(GThread *thread, GThreadPriority priority);

__attribute__((__deprecated__)) extern void
g_thread_foreach(GFunc thread_func, gpointer user_data);

# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 80 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4

# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param {
  int sched_priority;
};
# 81 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern int clone(int (*__fn)(void *__arg), void *__child_stack, int __flags,
                 void *__arg, ...) __attribute__((__nothrow__, __leaf__));

extern int unshare(int __flags) __attribute__((__nothrow__, __leaf__));

extern int sched_getcpu(void) __attribute__((__nothrow__, __leaf__));

extern int getcpu(unsigned int *, unsigned int *)
    __attribute__((__nothrow__, __leaf__));

extern int setns(int __fd, int __nstype) __attribute__((__nothrow__, __leaf__));

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;

typedef struct {
  __cpu_mask __bits[1024 / (8 * sizeof(__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4

extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp)
    __attribute__((__nothrow__, __leaf__));
extern cpu_set_t *__sched_cpualloc(size_t __count)
    __attribute__((__nothrow__, __leaf__));
extern void __sched_cpufree(cpu_set_t *__set)
    __attribute__((__nothrow__, __leaf__));

# 45 "/usr/include/sched.h" 2 3 4

extern int sched_setparam(__pid_t __pid, const struct sched_param *__param)
    __attribute__((__nothrow__, __leaf__));

extern int sched_getparam(__pid_t __pid, struct sched_param *__param)
    __attribute__((__nothrow__, __leaf__));

extern int sched_setscheduler(__pid_t __pid, int __policy,
                              const struct sched_param *__param)
    __attribute__((__nothrow__, __leaf__));

extern int sched_getscheduler(__pid_t __pid)
    __attribute__((__nothrow__, __leaf__));

extern int sched_yield(void) __attribute__((__nothrow__, __leaf__));

extern int sched_get_priority_max(int __algorithm)
    __attribute__((__nothrow__, __leaf__));

extern int sched_get_priority_min(int __algorithm)
    __attribute__((__nothrow__, __leaf__));

extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t)
    __attribute__((__nothrow__, __leaf__));
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize,
                             const cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__));

extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize,
                             cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__));

# 23 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4
# 37 "/usr/include/pthread.h" 3 4
enum {
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};

enum {
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL

  ,
  PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};

enum {
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};

enum { PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, PTHREAD_PRIO_PROTECT };
# 104 "/usr/include/pthread.h" 3 4
enum {
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum {
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};

enum {
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};

enum {
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer {
  void (*__routine)(void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};

enum {
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum {
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4

extern int pthread_create(pthread_t *__restrict __newthread,
                          const pthread_attr_t *__restrict __attr,
                          void *(*__start_routine)(void *),
                          void *__restrict __arg) __attribute__((__nothrow__))
__attribute__((__nonnull__(1, 3)));

extern void pthread_exit(void *__retval) __attribute__((__noreturn__));

extern int pthread_join(pthread_t __th, void **__thread_return);

extern int pthread_tryjoin_np(pthread_t __th, void **__thread_return)
    __attribute__((__nothrow__, __leaf__));
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np(pthread_t __th, void **__thread_return,
                                const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np(pthread_t __th, void **__thread_return,
                                clockid_t __clockid,
                                const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach(pthread_t __th)
    __attribute__((__nothrow__, __leaf__));

extern pthread_t pthread_self(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int pthread_equal(pthread_t __thread1, pthread_t __thread2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int pthread_attr_init(pthread_attr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_destroy(pthread_attr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getdetachstate(const pthread_attr_t *__attr,
                                       int *__detachstate)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setdetachstate(pthread_attr_t *__attr,
                                       int __detachstate)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getguardsize(const pthread_attr_t *__attr,
                                     size_t *__guardsize)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict __attr,
                                      struct sched_param *__restrict __param)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int
pthread_attr_setschedparam(pthread_attr_t *__restrict __attr,
                           const struct sched_param *__restrict __param)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict __attr,
                                       int *__restrict __policy)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict __attr,
                                        int *__restrict __inherit)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getscope(const pthread_attr_t *__restrict __attr,
                                 int *__restrict __scope)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict __attr,
                                     void **__restrict __stackaddr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)))
    __attribute__((__deprecated__));

extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__deprecated__));

extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict __attr,
                                     size_t *__restrict __stacksize)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_getstack(const pthread_attr_t *__restrict __attr,
                                 void **__restrict __stackaddr,
                                 size_t *__restrict __stacksize)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(1, 2, 3)));

extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr,
                                 size_t __stacksize)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_setaffinity_np(pthread_attr_t *__attr,
                                       size_t __cpusetsize,
                                       const cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern int pthread_attr_getaffinity_np(const pthread_attr_t *__attr,
                                       size_t __cpusetsize, cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern int pthread_getattr_default_np(pthread_attr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_attr_setsigmask_np(pthread_attr_t *__attr,
                                      const __sigset_t *sigmask);

extern int pthread_attr_getsigmask_np(const pthread_attr_t *__attr,
                                      __sigset_t *sigmask);

extern int pthread_setattr_default_np(const pthread_attr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_getattr_np(pthread_t __th, pthread_attr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int pthread_setschedparam(pthread_t __target_thread, int __policy,
                                 const struct sched_param *__param)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)));

extern int pthread_getschedparam(pthread_t __target_thread,
                                 int *__restrict __policy,
                                 struct sched_param *__restrict __param)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

extern int pthread_setschedprio(pthread_t __target_thread, int __prio)
    __attribute__((__nothrow__, __leaf__));

extern int pthread_getname_np(pthread_t __target_thread, char *__buf,
                              size_t __buflen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int pthread_setname_np(pthread_t __target_thread, const char *__name)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int pthread_getconcurrency(void) __attribute__((__nothrow__, __leaf__));

extern int pthread_setconcurrency(int __level)
    __attribute__((__nothrow__, __leaf__));

extern int pthread_yield(void) __attribute__((__nothrow__, __leaf__));

extern int pthread_yield(void) __asm__(""
                                       "sched_yield")
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__(
        "pthread_yield is deprecated, use sched_yield instead")));

extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize,
                                  const cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)));

extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize,
                                  cpu_set_t *__cpuset)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once(pthread_once_t *__once_control,
                        void (*__init_routine)(void))
    __attribute__((__nonnull__(1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate(int __state, int *__oldstate);

extern int pthread_setcanceltype(int __type, int *__oldtype);

extern int pthread_cancel(pthread_t __th);

extern void pthread_testcancel(void);

struct __cancel_jmp_buf_tag {
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct {
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame {
  void (*__cancel_routine)(void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf);
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf);
# 732 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer(__pthread_unwind_buf_t *__buf);
# 745 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore(__pthread_unwind_buf_t *__buf);

extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf)
    __attribute__((__noreturn__))

    __attribute__((__weak__))

    ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag __env[1],
                              int __savemask) __asm__(""
                                                      "__sigsetjmp")
    __attribute__((__nothrow__))

    __attribute__((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init(pthread_mutex_t *__mutex,
                              const pthread_mutexattr_t *__mutexattr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutex_destroy(pthread_mutex_t *__mutex)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutex_trylock(pthread_mutex_t *__mutex)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_mutex_lock(pthread_mutex_t *__mutex)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict __mutex,
                                   const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict __mutex,
                                   clockid_t __clockid,
                                   const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock(pthread_mutex_t *__mutex)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int
pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict __mutex,
                             int *__restrict __prioceiling)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict __mutex,
                                        int __prioceiling,
                                        int *__restrict __old_ceiling)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 3)));

extern int pthread_mutex_consistent(pthread_mutex_t *__mutex)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutex_consistent_np(pthread_mutex_t *) __asm__(
    ""
    "pthread_mutex_consistent") __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)))
__attribute__((__deprecated__("pthread_mutex_consistent_np is deprecated, use "
                              "pthread_mutex_consistent")));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict __attr,
                             int *__restrict __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr,
                                        int __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict __attr,
                          int *__restrict __kind)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict __attr,
                              int *__restrict __protocol)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr,
                                         int __protocol)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict __attr,
                                 int *__restrict __prioceiling)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr,
                                            int __prioceiling)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__attr,
                                       int *__robustness)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_mutexattr_getrobust_np(pthread_mutexattr_t *, int *) __asm__(
    ""
    "pthread_mutexattr_getrobust") __attribute__((__nothrow__, __leaf__))

__attribute__((__nonnull__(1)))
__attribute__((__deprecated__("pthread_mutexattr_getrobust_np is deprecated, "
                              "use pthread_mutexattr_getrobust")));

extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr,
                                       int __robustness)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int) __asm__(
    ""
    "pthread_mutexattr_setrobust") __attribute__((__nothrow__, __leaf__))

__attribute__((__nonnull__(1)))
__attribute__((__deprecated__("pthread_mutexattr_setrobust_np is deprecated, "
                              "use pthread_mutexattr_setrobust")));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict __rwlock,
                               const pthread_rwlockattr_t *__restrict __attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int
pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict __rwlock,
                           const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int
pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict __rwlock,
                           clockid_t __clockid,
                           const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int
pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict __rwlock,
                           const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int
pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict __rwlock,
                           clockid_t __clockid,
                           const struct timespec *__restrict __abstime)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict __attr,
                              int *__restrict __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr,
                                         int __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict __attr,
                              int *__restrict __pref)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr,
                                         int __pref)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_cond_init(pthread_cond_t *__restrict __cond,
                             const pthread_condattr_t *__restrict __cond_attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_cond_destroy(pthread_cond_t *__cond)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_cond_signal(pthread_cond_t *__cond)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_cond_broadcast(pthread_cond_t *__cond)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_cond_wait(pthread_cond_t *__restrict __cond,
                             pthread_mutex_t *__restrict __mutex)
    __attribute__((__nonnull__(1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait(pthread_cond_t *__restrict __cond,
                                  pthread_mutex_t *__restrict __mutex,
                                  const struct timespec *__restrict __abstime)
    __attribute__((__nonnull__(1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait(pthread_cond_t *__restrict __cond,
                                  pthread_mutex_t *__restrict __mutex,
                                  __clockid_t __clock_id,
                                  const struct timespec *__restrict __abstime)
    __attribute__((__nonnull__(1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init(pthread_condattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_condattr_destroy(pthread_condattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_condattr_getpshared(const pthread_condattr_t *__restrict __attr,
                            int *__restrict __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_condattr_setpshared(pthread_condattr_t *__attr,
                                       int __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_condattr_getclock(const pthread_condattr_t *__restrict __attr,
                          __clockid_t *__restrict __clock_id)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_condattr_setclock(pthread_condattr_t *__attr,
                                     __clockid_t __clock_id)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_spin_destroy(pthread_spinlock_t *__lock)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_spin_lock(pthread_spinlock_t *__lock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_spin_trylock(pthread_spinlock_t *__lock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_spin_unlock(pthread_spinlock_t *__lock)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_barrier_init(pthread_barrier_t *__restrict __barrier,
                                const pthread_barrierattr_t *__restrict __attr,
                                unsigned int __count)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_barrier_destroy(pthread_barrier_t *__barrier)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_barrier_wait(pthread_barrier_t *__barrier)
    __attribute__((__nothrow__)) __attribute__((__nonnull__(1)));

extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int
pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict __attr,
                               int *__restrict __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr,
                                          int __pshared)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create(pthread_key_t *__key,
                              void (*__destr_function)(void *))
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int pthread_key_delete(pthread_key_t __key)
    __attribute__((__nothrow__, __leaf__));

extern void *pthread_getspecific(pthread_key_t __key)
    __attribute__((__nothrow__, __leaf__));

extern int pthread_setspecific(pthread_key_t __key, const void *__pointer)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__none__, 2)));

extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void),
                          void (*__child)(void))
    __attribute__((__nothrow__, __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 127 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 2
# 135 "/usr/include/glib-2.0/glib/deprecated/gthread.h"

# 135 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
typedef struct {
  GMutex *mutex;

  pthread_mutex_t unused;

} GStaticMutex __attribute__((__deprecated__("Use '"
                                             "GMutex"
                                             "' instead")));
# 153 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
__attribute__((__deprecated__("Use '"
                              "g_mutex_init"
                              "' instead"))) extern void
g_static_mutex_init(GStaticMutex *mutex);
__attribute__((__deprecated__("Use '"
                              "g_mutex_clear"
                              "' instead"))) extern void
g_static_mutex_free(GStaticMutex *mutex);
__attribute__((__deprecated__("Use '"
                              "GMutex"
                              "' instead"))) extern GMutex *
g_static_mutex_get_mutex_impl(GStaticMutex *mutex);

typedef struct _GStaticRecMutex GStaticRecMutex
    __attribute__((__deprecated__("Use '"
                                  "GRecMutex"
                                  "' instead")));
struct _GStaticRecMutex {

  GStaticMutex mutex;
  guint depth;

  union {

    pthread_t owner;

    gdouble dummy;
  } unused;

} __attribute__((__deprecated__("Use '"
                                "GRecMutex"
                                "' instead")));

__attribute__((__deprecated__("Use '"
                              "g_rec_mutex_init"
                              "' instead"))) extern void
g_static_rec_mutex_init(GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '"
                              "g_rec_mutex_lock"
                              "' instead"))) extern void
g_static_rec_mutex_lock(GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '"
                              "g_rec_mutex_try_lock"
                              "' instead"))) extern gboolean
g_static_rec_mutex_trylock(GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '"
                              "g_rec_mutex_unlock"
                              "' instead"))) extern void
g_static_rec_mutex_unlock(GStaticRecMutex *mutex);

__attribute__((__deprecated__)) extern void
g_static_rec_mutex_lock_full(GStaticRecMutex *mutex, guint depth);

__attribute__((__deprecated__)) extern guint
g_static_rec_mutex_unlock_full(GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '"
                              "g_rec_mutex_free"
                              "' instead"))) extern void
g_static_rec_mutex_free(GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock
    __attribute__((__deprecated__("Use '"
                                  "GRWLock"
                                  "' instead")));
struct _GStaticRWLock {

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
} __attribute__((__deprecated__("Use '"
                                "GRWLock"
                                "' instead")));

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_init"
                              "' instead"))) extern void
g_static_rw_lock_init(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_reader_lock"
                              "' instead"))) extern void
g_static_rw_lock_reader_lock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_reader_trylock"
                              "' instead"))) extern gboolean
g_static_rw_lock_reader_trylock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_reader_unlock"
                              "' instead"))) extern void
g_static_rw_lock_reader_unlock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_writer_lock"
                              "' instead"))) extern void
g_static_rw_lock_writer_lock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_writer_trylock"
                              "' instead"))) extern gboolean
g_static_rw_lock_writer_trylock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_writer_unlock"
                              "' instead"))) extern void
g_static_rw_lock_writer_unlock(GStaticRWLock *lock);

__attribute__((__deprecated__("Use '"
                              "g_rw_lock_free"
                              "' instead"))) extern void
g_static_rw_lock_free(GStaticRWLock *lock);

__attribute__((__deprecated__)) extern GPrivate *
g_private_new(GDestroyNotify notify);

typedef struct _GStaticPrivate GStaticPrivate
    __attribute__((__deprecated__("Use '"
                                  "GPrivate"
                                  "' instead")));
struct _GStaticPrivate {

  guint index;
} __attribute__((__deprecated__("Use '"
                                "GPrivate"
                                "' instead")));

__attribute__((__deprecated__)) extern void
g_static_private_init(GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '"
                              "g_private_get"
                              "' instead"))) extern gpointer
g_static_private_get(GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '"
                              "g_private_set"
                              "' instead"))) extern void
g_static_private_set(GStaticPrivate *private_key, gpointer data,
                     GDestroyNotify notify);

__attribute__((__deprecated__)) extern void
g_static_private_free(GStaticPrivate *private_key);

__attribute__((__deprecated__)) extern gboolean
g_once_init_enter_impl(volatile gsize *location);

__attribute__((__deprecated__)) extern void g_thread_init(gpointer vtable);
__attribute__((__deprecated__)) extern void
g_thread_init_with_errorcheck_mutexes(gpointer vtable);

__attribute__((__deprecated__)) extern gboolean g_thread_get_initialized(void);

extern gboolean g_threads_got_initialized;

__attribute__((__deprecated__)) extern GMutex *g_mutex_new(void);
__attribute__((__deprecated__)) extern void g_mutex_free(GMutex *mutex);
__attribute__((__deprecated__)) extern GCond *g_cond_new(void);
__attribute__((__deprecated__)) extern void g_cond_free(GCond *cond);
__attribute__((__deprecated__)) extern gboolean
g_cond_timed_wait(GCond *cond, GMutex *mutex, GTimeVal *abs_time);

# 295 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma GCC diagnostic pop

# 116 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/glib-autocleanups.h" 1
# 28 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static inline void g_autoptr_cleanup_generic_gfree(void *p) {
  void **pp = (void **)p;
  g_free(*pp);
}

static inline void g_autoptr_cleanup_gstring_free(GString *string) {
  if (string)
    g_string_free(string, (!(0)));
}

# 44 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 44 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 44 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

typedef GAsyncQueue *GAsyncQueue_autoptr;
typedef GList *GAsyncQueue_listautoptr;
typedef GSList *GAsyncQueue_slistautoptr;
typedef GQueue *GAsyncQueue_queueautoptr;
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GAsyncQueue(GAsyncQueue *_ptr) {
  if (_ptr)
    (g_async_queue_unref)((GAsyncQueue *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GAsyncQueue(GAsyncQueue **_ptr) {
  glib_autoptr_clear_GAsyncQueue(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GAsyncQueue(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_async_queue_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GAsyncQueue(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_async_queue_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GAsyncQueue(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_async_queue_unref);
}
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GBookmarkFile *GBookmarkFile_autoptr;
typedef GList *GBookmarkFile_listautoptr;
typedef GSList *GBookmarkFile_slistautoptr;
typedef GQueue *GBookmarkFile_queueautoptr;
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GBookmarkFile(GBookmarkFile *_ptr) {
  if (_ptr)
    (g_bookmark_file_free)((GBookmarkFile *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GBookmarkFile(GBookmarkFile **_ptr) {
  glib_autoptr_clear_GBookmarkFile(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GBookmarkFile(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_bookmark_file_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GBookmarkFile(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_bookmark_file_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GBookmarkFile(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_bookmark_file_free);
}
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GBytes *GBytes_autoptr;
typedef GList *GBytes_listautoptr;
typedef GSList *GBytes_slistautoptr;
typedef GQueue *GBytes_queueautoptr;
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GBytes(GBytes *_ptr) {
  if (_ptr)
    (g_bytes_unref)((GBytes *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GBytes(GBytes **_ptr) {
  glib_autoptr_clear_GBytes(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GBytes(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_bytes_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GBytes(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_bytes_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GBytes(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_bytes_unref);
}
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GChecksum *GChecksum_autoptr;
typedef GList *GChecksum_listautoptr;
typedef GSList *GChecksum_slistautoptr;
typedef GQueue *GChecksum_queueautoptr;
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GChecksum(GChecksum *_ptr) {
  if (_ptr)
    (g_checksum_free)((GChecksum *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GChecksum(GChecksum **_ptr) {
  glib_autoptr_clear_GChecksum(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GChecksum(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_checksum_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GChecksum(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_checksum_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GChecksum(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_checksum_free);
}
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GDateTime *GDateTime_autoptr;
typedef GList *GDateTime_listautoptr;
typedef GSList *GDateTime_slistautoptr;
typedef GQueue *GDateTime_queueautoptr;
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GDateTime(GDateTime *_ptr) {
  if (_ptr)
    (g_date_time_unref)((GDateTime *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GDateTime(GDateTime **_ptr) {
  glib_autoptr_clear_GDateTime(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GDateTime(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_date_time_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GDateTime(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_date_time_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GDateTime(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_date_time_unref);
}
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GDate *GDate_autoptr;
typedef GList *GDate_listautoptr;
typedef GSList *GDate_slistautoptr;
typedef GQueue *GDate_queueautoptr;
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GDate(GDate *_ptr) {
  if (_ptr)
    (g_date_free)((GDate *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GDate(GDate **_ptr) {
  glib_autoptr_clear_GDate(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GDate(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_date_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GDate(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_date_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GDate(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_date_free);
}
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GDir *GDir_autoptr;
typedef GList *GDir_listautoptr;
typedef GSList *GDir_slistautoptr;
typedef GQueue *GDir_queueautoptr;
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GDir(GDir *_ptr) {
  if (_ptr)
    (g_dir_close)((GDir *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GDir(GDir **_ptr) {
  glib_autoptr_clear_GDir(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GDir(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_dir_close);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GDir(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_dir_close);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GDir(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_dir_close);
}
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GError *GError_autoptr;
typedef GList *GError_listautoptr;
typedef GSList *GError_slistautoptr;
typedef GQueue *GError_queueautoptr;
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GError(GError *_ptr) {
  if (_ptr)
    (g_error_free)((GError *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GError(GError **_ptr) {
  glib_autoptr_clear_GError(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GError(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_error_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GError(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_error_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GError(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_error_free);
}
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GHashTable *GHashTable_autoptr;
typedef GList *GHashTable_listautoptr;
typedef GSList *GHashTable_slistautoptr;
typedef GQueue *GHashTable_queueautoptr;
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GHashTable(GHashTable *_ptr) {
  if (_ptr)
    (g_hash_table_unref)((GHashTable *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GHashTable(GHashTable **_ptr) {
  glib_autoptr_clear_GHashTable(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GHashTable(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_hash_table_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GHashTable(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_hash_table_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GHashTable(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_hash_table_unref);
}
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GHmac *GHmac_autoptr;
typedef GList *GHmac_listautoptr;
typedef GSList *GHmac_slistautoptr;
typedef GQueue *GHmac_queueautoptr;
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GHmac(GHmac *_ptr) {
  if (_ptr)
    (g_hmac_unref)((GHmac *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GHmac(GHmac **_ptr) {
  glib_autoptr_clear_GHmac(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GHmac(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_hmac_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GHmac(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_hmac_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GHmac(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_hmac_unref);
}
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GIOChannel *GIOChannel_autoptr;
typedef GList *GIOChannel_listautoptr;
typedef GSList *GIOChannel_slistautoptr;
typedef GQueue *GIOChannel_queueautoptr;
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GIOChannel(GIOChannel *_ptr) {
  if (_ptr)
    (g_io_channel_unref)((GIOChannel *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GIOChannel(GIOChannel **_ptr) {
  glib_autoptr_clear_GIOChannel(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GIOChannel(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_io_channel_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GIOChannel(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_io_channel_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GIOChannel(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_io_channel_unref);
}
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GKeyFile *GKeyFile_autoptr;
typedef GList *GKeyFile_listautoptr;
typedef GSList *GKeyFile_slistautoptr;
typedef GQueue *GKeyFile_queueautoptr;
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GKeyFile(GKeyFile *_ptr) {
  if (_ptr)
    (g_key_file_unref)((GKeyFile *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GKeyFile(GKeyFile **_ptr) {
  glib_autoptr_clear_GKeyFile(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GKeyFile(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_key_file_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GKeyFile(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_key_file_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GKeyFile(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_key_file_unref);
}
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GList *GList_autoptr;
typedef GList *GList_listautoptr;
typedef GSList *GList_slistautoptr;
typedef GQueue *GList_queueautoptr;
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GList(GList *_ptr) {
  if (_ptr)
    (g_list_free)((GList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GList(GList **_ptr) {
  glib_autoptr_clear_GList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_list_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_list_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_list_free);
}
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GArray *GArray_autoptr;
typedef GList *GArray_listautoptr;
typedef GSList *GArray_slistautoptr;
typedef GQueue *GArray_queueautoptr;
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GArray(GArray *_ptr) {
  if (_ptr)
    (g_array_unref)((GArray *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GArray(GArray **_ptr) {
  glib_autoptr_clear_GArray(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GArray(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_array_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GArray(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_array_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GArray(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_array_unref);
}
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GPtrArray *GPtrArray_autoptr;
typedef GList *GPtrArray_listautoptr;
typedef GSList *GPtrArray_slistautoptr;
typedef GQueue *GPtrArray_queueautoptr;
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GPtrArray(GPtrArray *_ptr) {
  if (_ptr)
    (g_ptr_array_unref)((GPtrArray *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GPtrArray(GPtrArray **_ptr) {
  glib_autoptr_clear_GPtrArray(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GPtrArray(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_ptr_array_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GPtrArray(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_ptr_array_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GPtrArray(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_ptr_array_unref);
}
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GByteArray *GByteArray_autoptr;
typedef GList *GByteArray_listautoptr;
typedef GSList *GByteArray_slistautoptr;
typedef GQueue *GByteArray_queueautoptr;
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GByteArray(GByteArray *_ptr) {
  if (_ptr)
    (g_byte_array_unref)((GByteArray *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GByteArray(GByteArray **_ptr) {
  glib_autoptr_clear_GByteArray(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GByteArray(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_byte_array_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GByteArray(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_byte_array_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GByteArray(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_byte_array_unref);
}
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMainContext *GMainContext_autoptr;
typedef GList *GMainContext_listautoptr;
typedef GSList *GMainContext_slistautoptr;
typedef GQueue *GMainContext_queueautoptr;
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMainContext(GMainContext *_ptr) {
  if (_ptr)
    (g_main_context_unref)((GMainContext *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMainContext(GMainContext **_ptr) {
  glib_autoptr_clear_GMainContext(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMainContext(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_main_context_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMainContext(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_main_context_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMainContext(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_main_context_unref);
}
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMainContextPusher *GMainContextPusher_autoptr;
typedef GList *GMainContextPusher_listautoptr;
typedef GSList *GMainContextPusher_slistautoptr;
typedef GQueue *GMainContextPusher_queueautoptr;
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMainContextPusher(GMainContextPusher *_ptr) {
  if (_ptr)
    (g_main_context_pusher_free)((GMainContextPusher *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMainContextPusher(GMainContextPusher **_ptr) {
  glib_autoptr_clear_GMainContextPusher(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMainContextPusher(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))g_main_context_pusher_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMainContextPusher(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))g_main_context_pusher_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMainContextPusher(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))g_main_context_pusher_free);
}
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMainLoop *GMainLoop_autoptr;
typedef GList *GMainLoop_listautoptr;
typedef GSList *GMainLoop_slistautoptr;
typedef GQueue *GMainLoop_queueautoptr;
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMainLoop(GMainLoop *_ptr) {
  if (_ptr)
    (g_main_loop_unref)((GMainLoop *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMainLoop(GMainLoop **_ptr) {
  glib_autoptr_clear_GMainLoop(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMainLoop(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_main_loop_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMainLoop(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_main_loop_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMainLoop(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_main_loop_unref);
}
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GSource *GSource_autoptr;
typedef GList *GSource_listautoptr;
typedef GSList *GSource_slistautoptr;
typedef GQueue *GSource_queueautoptr;
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GSource(GSource *_ptr) {
  if (_ptr)
    (g_source_unref)((GSource *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GSource(GSource **_ptr) {
  glib_autoptr_clear_GSource(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GSource(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_source_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GSource(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_source_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GSource(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_source_unref);
}
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMappedFile *GMappedFile_autoptr;
typedef GList *GMappedFile_listautoptr;
typedef GSList *GMappedFile_slistautoptr;
typedef GQueue *GMappedFile_queueautoptr;
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMappedFile(GMappedFile *_ptr) {
  if (_ptr)
    (g_mapped_file_unref)((GMappedFile *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMappedFile(GMappedFile **_ptr) {
  glib_autoptr_clear_GMappedFile(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMappedFile(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_mapped_file_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMappedFile(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_mapped_file_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMappedFile(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_mapped_file_unref);
}
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMarkupParseContext *GMarkupParseContext_autoptr;
typedef GList *GMarkupParseContext_listautoptr;
typedef GSList *GMarkupParseContext_slistautoptr;
typedef GQueue *GMarkupParseContext_queueautoptr;
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMarkupParseContext(GMarkupParseContext *_ptr) {
  if (_ptr)
    (g_markup_parse_context_unref)((GMarkupParseContext *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMarkupParseContext(GMarkupParseContext **_ptr) {
  glib_autoptr_clear_GMarkupParseContext(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMarkupParseContext(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_markup_parse_context_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMarkupParseContext(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_markup_parse_context_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMarkupParseContext(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))g_markup_parse_context_unref);
}
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GNode *GNode_autoptr;
typedef GList *GNode_listautoptr;
typedef GSList *GNode_slistautoptr;
typedef GQueue *GNode_queueautoptr;
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GNode(GNode *_ptr) {
  if (_ptr)
    (g_node_destroy)((GNode *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GNode(GNode **_ptr) {
  glib_autoptr_clear_GNode(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GNode(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_node_destroy);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GNode(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_node_destroy);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GNode(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_node_destroy);
}
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GOptionContext *GOptionContext_autoptr;
typedef GList *GOptionContext_listautoptr;
typedef GSList *GOptionContext_slistautoptr;
typedef GQueue *GOptionContext_queueautoptr;
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GOptionContext(GOptionContext *_ptr) {
  if (_ptr)
    (g_option_context_free)((GOptionContext *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GOptionContext(GOptionContext **_ptr) {
  glib_autoptr_clear_GOptionContext(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GOptionContext(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_option_context_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GOptionContext(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_option_context_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GOptionContext(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_option_context_free);
}
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GOptionGroup *GOptionGroup_autoptr;
typedef GList *GOptionGroup_listautoptr;
typedef GSList *GOptionGroup_slistautoptr;
typedef GQueue *GOptionGroup_queueautoptr;
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GOptionGroup(GOptionGroup *_ptr) {
  if (_ptr)
    (g_option_group_unref)((GOptionGroup *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GOptionGroup(GOptionGroup **_ptr) {
  glib_autoptr_clear_GOptionGroup(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GOptionGroup(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_option_group_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GOptionGroup(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_option_group_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GOptionGroup(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_option_group_unref);
}
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GPatternSpec *GPatternSpec_autoptr;
typedef GList *GPatternSpec_listautoptr;
typedef GSList *GPatternSpec_slistautoptr;
typedef GQueue *GPatternSpec_queueautoptr;
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GPatternSpec(GPatternSpec *_ptr) {
  if (_ptr)
    (g_pattern_spec_free)((GPatternSpec *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GPatternSpec(GPatternSpec **_ptr) {
  glib_autoptr_clear_GPatternSpec(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GPatternSpec(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_pattern_spec_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GPatternSpec(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_pattern_spec_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GPatternSpec(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_pattern_spec_free);
}
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GQueue *GQueue_autoptr;
typedef GList *GQueue_listautoptr;
typedef GSList *GQueue_slistautoptr;
typedef GQueue *GQueue_queueautoptr;
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GQueue(GQueue *_ptr) {
  if (_ptr)
    (g_queue_free)((GQueue *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GQueue(GQueue **_ptr) {
  glib_autoptr_clear_GQueue(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GQueue(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_queue_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GQueue(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_queue_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GQueue(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_queue_free);
}
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GQueue(GQueue *_ptr) {
  (g_queue_clear)(_ptr);
}
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRand *GRand_autoptr;
typedef GList *GRand_listautoptr;
typedef GSList *GRand_slistautoptr;
typedef GQueue *GRand_queueautoptr;
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRand(GRand *_ptr) {
  if (_ptr)
    (g_rand_free)((GRand *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRand(GRand **_ptr) {
  glib_autoptr_clear_GRand(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRand(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_rand_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRand(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_rand_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRand(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_rand_free);
}
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRegex *GRegex_autoptr;
typedef GList *GRegex_listautoptr;
typedef GSList *GRegex_slistautoptr;
typedef GQueue *GRegex_queueautoptr;
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRegex(GRegex *_ptr) {
  if (_ptr)
    (g_regex_unref)((GRegex *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRegex(GRegex **_ptr) {
  glib_autoptr_clear_GRegex(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRegex(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_regex_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRegex(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_regex_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRegex(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_regex_unref);
}
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMatchInfo *GMatchInfo_autoptr;
typedef GList *GMatchInfo_listautoptr;
typedef GSList *GMatchInfo_slistautoptr;
typedef GQueue *GMatchInfo_queueautoptr;
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMatchInfo(GMatchInfo *_ptr) {
  if (_ptr)
    (g_match_info_unref)((GMatchInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMatchInfo(GMatchInfo **_ptr) {
  glib_autoptr_clear_GMatchInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMatchInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_match_info_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMatchInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_match_info_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMatchInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_match_info_unref);
}
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GScanner *GScanner_autoptr;
typedef GList *GScanner_listautoptr;
typedef GSList *GScanner_slistautoptr;
typedef GQueue *GScanner_queueautoptr;
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GScanner(GScanner *_ptr) {
  if (_ptr)
    (g_scanner_destroy)((GScanner *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GScanner(GScanner **_ptr) {
  glib_autoptr_clear_GScanner(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GScanner(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_scanner_destroy);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GScanner(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_scanner_destroy);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GScanner(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_scanner_destroy);
}
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GSequence *GSequence_autoptr;
typedef GList *GSequence_listautoptr;
typedef GSList *GSequence_slistautoptr;
typedef GQueue *GSequence_queueautoptr;
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GSequence(GSequence *_ptr) {
  if (_ptr)
    (g_sequence_free)((GSequence *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GSequence(GSequence **_ptr) {
  glib_autoptr_clear_GSequence(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GSequence(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_sequence_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GSequence(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_sequence_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GSequence(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_sequence_free);
}
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GSList *GSList_autoptr;
typedef GList *GSList_listautoptr;
typedef GSList *GSList_slistautoptr;
typedef GQueue *GSList_queueautoptr;
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GSList(GSList *_ptr) {
  if (_ptr)
    (g_slist_free)((GSList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GSList(GSList **_ptr) {
  glib_autoptr_clear_GSList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GSList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_slist_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GSList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_slist_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GSList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_slist_free);
}
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GString *GString_autoptr;
typedef GList *GString_listautoptr;
typedef GSList *GString_slistautoptr;
typedef GQueue *GString_queueautoptr;
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GString(GString *_ptr) {
  if (_ptr)
    (g_autoptr_cleanup_gstring_free)((GString *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GString(GString **_ptr) {
  glib_autoptr_clear_GString(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GString(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_autoptr_cleanup_gstring_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GString(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_autoptr_cleanup_gstring_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GString(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))g_autoptr_cleanup_gstring_free);
}
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GStringChunk *GStringChunk_autoptr;
typedef GList *GStringChunk_listautoptr;
typedef GSList *GStringChunk_slistautoptr;
typedef GQueue *GStringChunk_queueautoptr;
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GStringChunk(GStringChunk *_ptr) {
  if (_ptr)
    (g_string_chunk_free)((GStringChunk *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GStringChunk(GStringChunk **_ptr) {
  glib_autoptr_clear_GStringChunk(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GStringChunk(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_string_chunk_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GStringChunk(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_string_chunk_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GStringChunk(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_string_chunk_free);
}
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GStrvBuilder *GStrvBuilder_autoptr;
typedef GList *GStrvBuilder_listautoptr;
typedef GSList *GStrvBuilder_slistautoptr;
typedef GQueue *GStrvBuilder_queueautoptr;
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GStrvBuilder(GStrvBuilder *_ptr) {
  if (_ptr)
    (g_strv_builder_unref)((GStrvBuilder *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GStrvBuilder(GStrvBuilder **_ptr) {
  glib_autoptr_clear_GStrvBuilder(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GStrvBuilder(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_strv_builder_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GStrvBuilder(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_strv_builder_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GStrvBuilder(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_strv_builder_unref);
}
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GThread *GThread_autoptr;
typedef GList *GThread_listautoptr;
typedef GSList *GThread_slistautoptr;
typedef GQueue *GThread_queueautoptr;
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GThread(GThread *_ptr) {
  if (_ptr)
    (g_thread_unref)((GThread *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GThread(GThread **_ptr) {
  glib_autoptr_clear_GThread(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GThread(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_thread_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GThread(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_thread_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GThread(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_thread_unref);
}
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GMutex(GMutex *_ptr) {
  (g_mutex_clear)(_ptr);
}
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GMutexLocker *GMutexLocker_autoptr;
typedef GList *GMutexLocker_listautoptr;
typedef GSList *GMutexLocker_slistautoptr;
typedef GQueue *GMutexLocker_queueautoptr;
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GMutexLocker(GMutexLocker *_ptr) {
  if (_ptr)
    (g_mutex_locker_free)((GMutexLocker *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GMutexLocker(GMutexLocker **_ptr) {
  glib_autoptr_clear_GMutexLocker(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GMutexLocker(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_mutex_locker_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GMutexLocker(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_mutex_locker_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GMutexLocker(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_mutex_locker_free);
}
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRecMutexLocker *GRecMutexLocker_autoptr;
typedef GList *GRecMutexLocker_listautoptr;
typedef GSList *GRecMutexLocker_slistautoptr;
typedef GQueue *GRecMutexLocker_queueautoptr;
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRecMutexLocker(GRecMutexLocker *_ptr) {
  if (_ptr)
    (g_rec_mutex_locker_free)((GRecMutexLocker *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRecMutexLocker(GRecMutexLocker **_ptr) {
  glib_autoptr_clear_GRecMutexLocker(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRecMutexLocker(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))g_rec_mutex_locker_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRecMutexLocker(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))g_rec_mutex_locker_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRecMutexLocker(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_rec_mutex_locker_free);
}
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRWLockWriterLocker *GRWLockWriterLocker_autoptr;
typedef GList *GRWLockWriterLocker_listautoptr;
typedef GSList *GRWLockWriterLocker_slistautoptr;
typedef GQueue *GRWLockWriterLocker_queueautoptr;
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRWLockWriterLocker(GRWLockWriterLocker *_ptr) {
  if (_ptr)
    (g_rw_lock_writer_locker_free)((GRWLockWriterLocker *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRWLockWriterLocker(GRWLockWriterLocker **_ptr) {
  glib_autoptr_clear_GRWLockWriterLocker(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRWLockWriterLocker(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_rw_lock_writer_locker_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRWLockWriterLocker(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_rw_lock_writer_locker_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRWLockWriterLocker(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))g_rw_lock_writer_locker_free);
}
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRWLockReaderLocker *GRWLockReaderLocker_autoptr;
typedef GList *GRWLockReaderLocker_listautoptr;
typedef GSList *GRWLockReaderLocker_slistautoptr;
typedef GQueue *GRWLockReaderLocker_queueautoptr;
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRWLockReaderLocker(GRWLockReaderLocker *_ptr) {
  if (_ptr)
    (g_rw_lock_reader_locker_free)((GRWLockReaderLocker *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRWLockReaderLocker(GRWLockReaderLocker **_ptr) {
  glib_autoptr_clear_GRWLockReaderLocker(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRWLockReaderLocker(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_rw_lock_reader_locker_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRWLockReaderLocker(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))g_rw_lock_reader_locker_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRWLockReaderLocker(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))g_rw_lock_reader_locker_free);
}
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GCond(GCond *_ptr) {
  (g_cond_clear)(_ptr);
}
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GTimer *GTimer_autoptr;
typedef GList *GTimer_listautoptr;
typedef GSList *GTimer_slistautoptr;
typedef GQueue *GTimer_queueautoptr;
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GTimer(GTimer *_ptr) {
  if (_ptr)
    (g_timer_destroy)((GTimer *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GTimer(GTimer **_ptr) {
  glib_autoptr_clear_GTimer(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GTimer(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_timer_destroy);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GTimer(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_timer_destroy);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GTimer(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_timer_destroy);
}
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GTimeZone *GTimeZone_autoptr;
typedef GList *GTimeZone_listautoptr;
typedef GSList *GTimeZone_slistautoptr;
typedef GQueue *GTimeZone_queueautoptr;
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GTimeZone(GTimeZone *_ptr) {
  if (_ptr)
    (g_time_zone_unref)((GTimeZone *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GTimeZone(GTimeZone **_ptr) {
  glib_autoptr_clear_GTimeZone(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GTimeZone(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_time_zone_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GTimeZone(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_time_zone_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GTimeZone(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_time_zone_unref);
}
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GTree *GTree_autoptr;
typedef GList *GTree_listautoptr;
typedef GSList *GTree_slistautoptr;
typedef GQueue *GTree_queueautoptr;
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GTree(GTree *_ptr) {
  if (_ptr)
    (g_tree_unref)((GTree *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GTree(GTree **_ptr) {
  glib_autoptr_clear_GTree(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GTree(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_tree_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GTree(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_tree_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GTree(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_tree_unref);
}
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GVariant *GVariant_autoptr;
typedef GList *GVariant_listautoptr;
typedef GSList *GVariant_slistautoptr;
typedef GQueue *GVariant_queueautoptr;
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GVariant(GVariant *_ptr) {
  if (_ptr)
    (g_variant_unref)((GVariant *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GVariant(GVariant **_ptr) {
  glib_autoptr_clear_GVariant(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GVariant(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GVariant(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GVariant(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_variant_unref);
}
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GVariantBuilder *GVariantBuilder_autoptr;
typedef GList *GVariantBuilder_listautoptr;
typedef GSList *GVariantBuilder_slistautoptr;
typedef GQueue *GVariantBuilder_queueautoptr;
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GVariantBuilder(GVariantBuilder *_ptr) {
  if (_ptr)
    (g_variant_builder_unref)((GVariantBuilder *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GVariantBuilder(GVariantBuilder **_ptr) {
  glib_autoptr_clear_GVariantBuilder(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GVariantBuilder(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))g_variant_builder_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GVariantBuilder(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))g_variant_builder_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GVariantBuilder(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_variant_builder_unref);
}
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GVariantBuilder(GVariantBuilder *_ptr) {
  (g_variant_builder_clear)(_ptr);
}
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GVariantIter *GVariantIter_autoptr;
typedef GList *GVariantIter_listautoptr;
typedef GSList *GVariantIter_slistautoptr;
typedef GQueue *GVariantIter_queueautoptr;
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GVariantIter(GVariantIter *_ptr) {
  if (_ptr)
    (g_variant_iter_free)((GVariantIter *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GVariantIter(GVariantIter **_ptr) {
  glib_autoptr_clear_GVariantIter(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GVariantIter(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_iter_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GVariantIter(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_iter_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GVariantIter(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_variant_iter_free);
}
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GVariantDict *GVariantDict_autoptr;
typedef GList *GVariantDict_listautoptr;
typedef GSList *GVariantDict_slistautoptr;
typedef GQueue *GVariantDict_queueautoptr;
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GVariantDict(GVariantDict *_ptr) {
  if (_ptr)
    (g_variant_dict_unref)((GVariantDict *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GVariantDict(GVariantDict **_ptr) {
  glib_autoptr_clear_GVariantDict(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GVariantDict(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_dict_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GVariantDict(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_dict_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GVariantDict(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_variant_dict_unref);
}
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GVariantDict(GVariantDict *_ptr) {
  (g_variant_dict_clear)(_ptr);
}
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GVariantType *GVariantType_autoptr;
typedef GList *GVariantType_listautoptr;
typedef GSList *GVariantType_slistautoptr;
typedef GQueue *GVariantType_queueautoptr;
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GVariantType(GVariantType *_ptr) {
  if (_ptr)
    (g_variant_type_free)((GVariantType *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GVariantType(GVariantType **_ptr) {
  glib_autoptr_clear_GVariantType(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GVariantType(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_type_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GVariantType(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_variant_type_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GVariantType(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_variant_type_free);
}
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GStrv(GStrv *_ptr) {
  if (*_ptr !=
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h" 3 4
      ((void *)0)
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
  )
    (g_strfreev)(*_ptr);
}
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GRefString *GRefString_autoptr;
typedef GList *GRefString_listautoptr;
typedef GSList *GRefString_slistautoptr;
typedef GQueue *GRefString_queueautoptr;
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GRefString(GRefString *_ptr) {
  if (_ptr)
    (g_ref_string_release)((GRefString *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GRefString(GRefString **_ptr) {
  glib_autoptr_clear_GRefString(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GRefString(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_ref_string_release);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GRefString(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_ref_string_release);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GRefString(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))g_ref_string_release);
}
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GUri *GUri_autoptr;
typedef GList *GUri_listautoptr;
typedef GSList *GUri_slistautoptr;
typedef GQueue *GUri_queueautoptr;
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GUri(GUri *_ptr) {
  if (_ptr)
    (g_uri_unref)((GUri *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GUri(GUri **_ptr) {
  glib_autoptr_clear_GUri(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GUri(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_uri_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GUri(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_uri_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GUri(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_uri_unref);
}
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
typedef GPathBuf *GPathBuf_autoptr;
typedef GList *GPathBuf_listautoptr;
typedef GSList *GPathBuf_slistautoptr;
typedef GQueue *GPathBuf_queueautoptr;
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GPathBuf(GPathBuf *_ptr) {
  if (_ptr)
    (g_path_buf_free)((GPathBuf *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GPathBuf(GPathBuf **_ptr) {
  glib_autoptr_clear_GPathBuf(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GPathBuf(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))g_path_buf_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GPathBuf(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))g_path_buf_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GPathBuf(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))g_path_buf_free);
}
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic push
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"

# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GPathBuf(GPathBuf *_ptr) {
  (g_path_buf_clear)(_ptr);
}
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop

# 109 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma GCC diagnostic pop
# 118 "/usr/include/glib-2.0/glib.h" 2
# 33 "/home/paulning/study/qemu/include/glib-compat.h" 2

# 1 "/usr/include/glib-2.0/glib-unix.h" 1
# 37 "/usr/include/glib-2.0/glib-unix.h"
# 1 "/usr/include/glib-2.0/glib/gstdio.h" 1
# 24 "/usr/include/glib-2.0/glib/gstdio.h"
# 1 "/usr/include/glib-2.0/glib/gprintf.h" 1
# 27 "/usr/include/glib-2.0/glib/gprintf.h"

extern gint g_printf(gchar const *format, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
extern gint g_fprintf(FILE *file, gchar const *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
extern gint g_sprintf(gchar *string, gchar const *format, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

extern gint g_vprintf(gchar const *format, va_list args)
    __attribute__((__format__(gnu_printf, 1, 0)));
extern gint g_vfprintf(FILE *file, gchar const *format, va_list args)
    __attribute__((__format__(gnu_printf, 2, 0)));
extern gint g_vsprintf(gchar *string, gchar const *format, va_list args)
    __attribute__((__format__(gnu_printf, 2, 0)));
extern gint g_vasprintf(gchar **string, gchar const *format, va_list args)
    __attribute__((__format__(gnu_printf, 2, 0)));

# 25 "/usr/include/glib-2.0/glib/gstdio.h" 2

# 56 "/usr/include/glib-2.0/glib/gstdio.h"
typedef struct stat GStatBuf;
# 86 "/usr/include/glib-2.0/glib/gstdio.h"
extern int g_access(const gchar *filename, int mode);

extern int g_chdir(const gchar *path);

extern int g_unlink(const gchar *filename);

extern int g_rmdir(const gchar *filename);
# 178 "/usr/include/glib-2.0/glib/gstdio.h"
extern gboolean g_close(gint fd, GError **error);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "76"))) static inline gboolean
g_clear_fd(int *fd_ptr, GError **error) {
  int fd = *fd_ptr;

  *fd_ptr = -1;

  if (fd < 0)
    return (!(0));

# 195 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic push
# 195 "/usr/include/glib-2.0/glib/gstdio.h"

# 195 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  return g_close(fd, error);

# 197 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic pop
}

static inline void _g_clear_fd_ignore_error(int *fd_ptr) {

  int errsv =
# 209 "/usr/include/glib-2.0/glib/gstdio.h" 3 4
      (*__errno_location())
# 209 "/usr/include/glib-2.0/glib/gstdio.h"
      ;

# 212 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic push
# 212 "/usr/include/glib-2.0/glib/gstdio.h"

# 212 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  if (!g_clear_fd(fd_ptr,
# 214 "/usr/include/glib-2.0/glib/gstdio.h" 3 4
                  ((void *)0)
# 214 "/usr/include/glib-2.0/glib/gstdio.h"
                      )) {
  }

# 220 "/usr/include/glib-2.0/glib/gstdio.h"
#pragma GCC diagnostic pop

# 222 "/usr/include/glib-2.0/glib/gstdio.h" 3 4
  (*__errno_location())
# 222 "/usr/include/glib-2.0/glib/gstdio.h"
      = errsv;
}

# 38 "/usr/include/glib-2.0/glib-unix.h" 2

# 60 "/usr/include/glib-2.0/glib-unix.h"
extern GQuark g_unix_error_quark(void);

extern gboolean g_unix_open_pipe(gint *fds, gint flags, GError **error);

extern gboolean g_unix_set_fd_nonblocking(gint fd, gboolean nonblock,
                                          GError **error);

extern GSource *g_unix_signal_source_new(gint signum);

extern guint g_unix_signal_add_full(gint priority, gint signum,
                                    GSourceFunc handler, gpointer user_data,
                                    GDestroyNotify notify);

extern guint g_unix_signal_add(gint signum, GSourceFunc handler,
                               gpointer user_data);
# 99 "/usr/include/glib-2.0/glib-unix.h"
typedef gboolean (*GUnixFDSourceFunc)(gint fd, GIOCondition condition,
                                      gpointer user_data);

extern GSource *g_unix_fd_source_new(gint fd, GIOCondition condition);

extern guint g_unix_fd_add_full(gint priority, gint fd, GIOCondition condition,
                                GUnixFDSourceFunc function, gpointer user_data,
                                GDestroyNotify notify);

extern guint g_unix_fd_add(gint fd, GIOCondition condition,
                           GUnixFDSourceFunc function, gpointer user_data);

extern struct passwd *g_unix_get_passwd_entry(const gchar *user_name,
                                              GError **error);
# 137 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) typedef struct {
  int fds[2];
} GUnixPipe;
# 151 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) typedef enum {
  G_UNIX_PIPE_END_READ = 0,
  G_UNIX_PIPE_END_WRITE = 1
} GUnixPipeEnd;
# 171 "/usr/include/glib-2.0/glib-unix.h"

# 171 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic push
# 171 "/usr/include/glib-2.0/glib-unix.h"

# 171 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 186 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) static inline gboolean
g_unix_pipe_open(GUnixPipe *self, int flags, GError **error) {
  return g_unix_open_pipe(self->fds, flags, error);
}
# 214 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) static inline int
g_unix_pipe_get(GUnixPipe *self, GUnixPipeEnd end) {
  return self->fds[end];
}
# 243 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) static inline int
g_unix_pipe_steal(GUnixPipe *self, GUnixPipeEnd end) {
  return g_steal_fd(&self->fds[end]);
}
# 278 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) static inline gboolean
g_unix_pipe_close(GUnixPipe *self, GUnixPipeEnd end, GError **error) {
  return g_clear_fd(&self->fds[end], error);
}
# 307 "/usr/include/glib-2.0/glib-unix.h"
__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) static inline void
g_unix_pipe_clear(GUnixPipe *self) {

  int errsv =
# 312 "/usr/include/glib-2.0/glib-unix.h" 3 4
      (*__errno_location())
# 312 "/usr/include/glib-2.0/glib-unix.h"
      ;

  if (!g_unix_pipe_close(self, G_UNIX_PIPE_END_READ,
# 314 "/usr/include/glib-2.0/glib-unix.h" 3 4
                         ((void *)0)
# 314 "/usr/include/glib-2.0/glib-unix.h"
                             )) {
  }

  if (!g_unix_pipe_close(self, G_UNIX_PIPE_END_WRITE,
# 319 "/usr/include/glib-2.0/glib-unix.h" 3 4
                         ((void *)0)
# 319 "/usr/include/glib-2.0/glib-unix.h"
                             )) {
  }

# 324 "/usr/include/glib-2.0/glib-unix.h" 3 4
  (*__errno_location())
# 324 "/usr/include/glib-2.0/glib-unix.h"
      = errsv;
}

# 327 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic push
# 327 "/usr/include/glib-2.0/glib-unix.h"

# 327 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 327 "/usr/include/glib-2.0/glib-unix.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_GUnixPipe(GUnixPipe *_ptr) {
  (g_unix_pipe_clear)(_ptr);
}
# 327 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic pop

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern int
g_closefrom(int lowfd);

__attribute__((deprecated("Not available before "
                          "2"
                          "."
                          "80"))) extern int
g_fdwalk_set_cloexec(int lowfd);

# 335 "/usr/include/glib-2.0/glib-unix.h"
#pragma GCC diagnostic pop

# 35 "/home/paulning/study/qemu/include/glib-compat.h" 2

# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4

# 49 "/usr/include/pwd.h" 3 4
struct passwd {
  char *pw_name;
  char *pw_passwd;

  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent(void);

extern void endpwent(void);

extern struct passwd *getpwent(void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent(FILE *__stream) __attribute__((__nonnull__(1)));

extern int putpwent(const struct passwd *__restrict __p, FILE *__restrict __f);

extern struct passwd *getpwuid(__uid_t __uid);

extern struct passwd *getpwnam(const char *__name)
    __attribute__((__nonnull__(1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r(struct passwd *__restrict __resultbuf,
                      char *__restrict __buffer, size_t __buflen,
                      struct passwd **__restrict __result)
    __attribute__((__nonnull__(1, 2, 4)))
    __attribute__((__access__(__write_only__, 2, 3)));

extern int getpwuid_r(__uid_t __uid, struct passwd *__restrict __resultbuf,
                      char *__restrict __buffer, size_t __buflen,
                      struct passwd **__restrict __result)
    __attribute__((__nonnull__(2, 3, 5)))
    __attribute__((__access__(__write_only__, 3, 4)));

extern int getpwnam_r(const char *__restrict __name,
                      struct passwd *__restrict __resultbuf,
                      char *__restrict __buffer, size_t __buflen,
                      struct passwd **__restrict __result)
    __attribute__((__nonnull__(1, 2, 3, 5)))
    __attribute__((__access__(__write_only__, 3, 4)));
# 169 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r(FILE *__restrict __stream,
                       struct passwd *__restrict __resultbuf,
                       char *__restrict __buffer, size_t __buflen,
                       struct passwd **__restrict __result)
    __attribute__((__nonnull__(1, 2, 3, 5)))
    __attribute__((__access__(__write_only__, 3, 4)));
# 188 "/usr/include/pwd.h" 3 4
extern int getpw(__uid_t __uid, char *__buffer);

# 37 "/home/paulning/study/qemu/include/glib-compat.h" 2
# 89 "/home/paulning/study/qemu/include/glib-compat.h"

# 89 "/home/paulning/study/qemu/include/glib-compat.h"
static inline gpointer g_memdup2_qemu(gconstpointer mem, gsize byte_size) {

  return g_memdup2(mem, byte_size);
# 105 "/home/paulning/study/qemu/include/glib-compat.h"
}

static inline
# 108 "/home/paulning/study/qemu/include/glib-compat.h" 3 4
    _Bool

# 109 "/home/paulning/study/qemu/include/glib-compat.h"
    qemu_g_test_slow(void) {
  static int cached = -1;
  if (cached == -1) {
    cached = (!g_test_config_vars->test_quick) || getenv("G_TEST_SLOW") !=
# 113 "/home/paulning/study/qemu/include/glib-compat.h" 3 4
                                                      ((void *)0)
# 113 "/home/paulning/study/qemu/include/glib-compat.h"
        ;
  }
  return cached;
}
# 125 "/home/paulning/study/qemu/include/glib-compat.h"
#pragma GCC diagnostic pop
# 162 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/home/paulning/study/qemu/include/system/os-posix.h" 1
# 29 "/home/paulning/study/qemu/include/system/os-posix.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 116 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 51 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
int memfd_create(const char *__name, unsigned int __flags)
    __attribute__((__nothrow__, __leaf__));

int mlock2(const void *__addr, size_t __length, unsigned int __flags)
    __attribute__((__nothrow__, __leaf__));

int pkey_alloc(unsigned int __flags, unsigned int __access_rights)
    __attribute__((__nothrow__, __leaf__));

int pkey_set(int __key, unsigned int __access_rights)
    __attribute__((__nothrow__, __leaf__));

int pkey_get(int __key) __attribute__((__nothrow__, __leaf__));

int pkey_free(int __key) __attribute__((__nothrow__, __leaf__));

int pkey_mprotect(void *__addr, size_t __len, int __prot, int __pkey)
    __attribute__((__nothrow__, __leaf__));

# 117 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4

# 61 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap(void *__addr, size_t __len, int __prot, int __flags, int __fd,
                  __off64_t __offset) __asm__(""
                                              "mmap64")
    __attribute__((__nothrow__, __leaf__))

    ;

extern void *mmap64(void *__addr, size_t __len, int __prot, int __flags,
                    int __fd, __off64_t __offset)
    __attribute__((__nothrow__, __leaf__));

extern int munmap(void *__addr, size_t __len)
    __attribute__((__nothrow__, __leaf__));

extern int mprotect(void *__addr, size_t __len, int __prot)
    __attribute__((__nothrow__, __leaf__));

extern int msync(void *__addr, size_t __len, int __flags);

extern int madvise(void *__addr, size_t __len, int __advice)
    __attribute__((__nothrow__, __leaf__));

extern int posix_madvise(void *__addr, size_t __len, int __advice)
    __attribute__((__nothrow__, __leaf__));

extern int mlock(const void *__addr, size_t __len)
    __attribute__((__nothrow__, __leaf__));

extern int munlock(const void *__addr, size_t __len)
    __attribute__((__nothrow__, __leaf__));

extern int mlockall(int __flags) __attribute__((__nothrow__, __leaf__));

extern int munlockall(void) __attribute__((__nothrow__, __leaf__));

extern int mincore(void *__start, size_t __len, unsigned char *__vec)
    __attribute__((__nothrow__, __leaf__));
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap(void *__addr, size_t __old_len, size_t __new_len,
                    int __flags, ...) __attribute__((__nothrow__, __leaf__));

extern int remap_file_pages(void *__start, size_t __size, int __prot,
                            size_t __pgoff, int __flags)
    __attribute__((__nothrow__, __leaf__));

extern int shm_open(const char *__name, int __oflag, mode_t __mode);

extern int shm_unlink(const char *__name);

# 1 "/usr/include/x86_64-linux-gnu/bits/mman_ext.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mman_ext.h" 3 4
struct iovec;
extern __ssize_t process_madvise(int __pid_fd, const struct iovec *__iov,
                                 size_t __count, int __advice, unsigned __flags)
    __attribute__((__nothrow__, __leaf__));

extern int process_mrelease(int pidfd, unsigned int flags)
    __attribute__((__nothrow__, __leaf__));
# 151 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4

# 30 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/socket.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/socket.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/socket_type.h" 3 4
enum __socket_type {
  SOCK_STREAM = 1,

  SOCK_DGRAM = 2,

  SOCK_RAW = 3,

  SOCK_RDM = 4,

  SOCK_SEQPACKET = 5,

  SOCK_DCCP = 6,

  SOCK_PACKET = 10,

  SOCK_CLOEXEC = 02000000,

  SOCK_NONBLOCK = 00004000

};
# 39 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4
# 180 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/sockaddr.h" 3 4
typedef unsigned short int sa_family_t;
# 181 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4

struct sockaddr {
  sa_family_t sa_family;
  char sa_data[14];
};
# 196 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
struct sockaddr_storage {
  sa_family_t ss_family;
  char __ss_padding[(128 - (sizeof(unsigned short int)) -
                     sizeof(unsigned long int))];
  unsigned long int __ss_align;
};

enum {
  MSG_OOB = 0x01,

  MSG_PEEK = 0x02,

  MSG_DONTROUTE = 0x04,

  MSG_TRYHARD = MSG_DONTROUTE,

  MSG_CTRUNC = 0x08,

  MSG_PROXY = 0x10,

  MSG_TRUNC = 0x20,

  MSG_DONTWAIT = 0x40,

  MSG_EOR = 0x80,

  MSG_WAITALL = 0x100,

  MSG_FIN = 0x200,

  MSG_SYN = 0x400,

  MSG_CONFIRM = 0x800,

  MSG_RST = 0x1000,

  MSG_ERRQUEUE = 0x2000,

  MSG_NOSIGNAL = 0x4000,

  MSG_MORE = 0x8000,

  MSG_WAITFORONE = 0x10000,

  MSG_BATCH = 0x40000,

  MSG_ZEROCOPY = 0x4000000,

  MSG_FASTOPEN = 0x20000000,

  MSG_CMSG_CLOEXEC = 0x40000000

};

struct msghdr {
  void *msg_name;
  socklen_t msg_namelen;

  struct iovec *msg_iov;
  size_t msg_iovlen;

  void *msg_control;
  size_t msg_controllen;

  int msg_flags;
};

struct cmsghdr {
  size_t cmsg_len;

  int cmsg_level;
  int cmsg_type;

  __extension__ unsigned char __cmsg_data[];
};
# 316 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr,
                                     struct cmsghdr *__cmsg)
    __attribute__((__nothrow__, __leaf__));
# 363 "/usr/include/x86_64-linux-gnu/bits/socket.h" 3 4
enum {
  SCM_RIGHTS = 0x01

  ,
  SCM_CREDENTIALS = 0x02

  ,
  SCM_SECURITY = 0x03

  ,
  SCM_PIDFD = 0x04

};

struct ucred {
  pid_t pid;
  uid_t uid;
  gid_t gid;
};

# 1 "/usr/include/x86_64-linux-gnu/asm/socket.h" 1 3 4
# 1 "/usr/include/asm-generic/socket.h" 1 3 4

# 1 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 1 3 4
# 1 "/usr/include/asm-generic/sockios.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/sockios.h" 2 3 4
# 7 "/usr/include/asm-generic/socket.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/socket.h" 2 3 4
# 390 "/usr/include/x86_64-linux-gnu/bits/socket.h" 2 3 4

struct linger {
  int l_onoff;
  int l_linger;
};
# 34 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h" 1 3 4

struct osockaddr {
  unsigned short int sa_family;
  unsigned char sa_data[14];
};
# 37 "/usr/include/x86_64-linux-gnu/sys/socket.h" 2 3 4

enum {
  SHUT_RD = 0,

  SHUT_WR,

  SHUT_RDWR

};
# 79 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
typedef union {
  struct sockaddr *__restrict __sockaddr__;
  struct sockaddr_at *__restrict __sockaddr_at__;
  struct sockaddr_ax25 *__restrict __sockaddr_ax25__;
  struct sockaddr_dl *__restrict __sockaddr_dl__;
  struct sockaddr_eon *__restrict __sockaddr_eon__;
  struct sockaddr_in *__restrict __sockaddr_in__;
  struct sockaddr_in6 *__restrict __sockaddr_in6__;
  struct sockaddr_inarp *__restrict __sockaddr_inarp__;
  struct sockaddr_ipx *__restrict __sockaddr_ipx__;
  struct sockaddr_iso *__restrict __sockaddr_iso__;
  struct sockaddr_ns *__restrict __sockaddr_ns__;
  struct sockaddr_un *__restrict __sockaddr_un__;
  struct sockaddr_x25 *__restrict __sockaddr_x25__;
} __SOCKADDR_ARG __attribute__((__transparent_union__));

typedef union {
  const struct sockaddr *__restrict __sockaddr__;
  const struct sockaddr_at *__restrict __sockaddr_at__;
  const struct sockaddr_ax25 *__restrict __sockaddr_ax25__;
  const struct sockaddr_dl *__restrict __sockaddr_dl__;
  const struct sockaddr_eon *__restrict __sockaddr_eon__;
  const struct sockaddr_in *__restrict __sockaddr_in__;
  const struct sockaddr_in6 *__restrict __sockaddr_in6__;
  const struct sockaddr_inarp *__restrict __sockaddr_inarp__;
  const struct sockaddr_ipx *__restrict __sockaddr_ipx__;
  const struct sockaddr_iso *__restrict __sockaddr_iso__;
  const struct sockaddr_ns *__restrict __sockaddr_ns__;
  const struct sockaddr_un *__restrict __sockaddr_un__;
  const struct sockaddr_x25 *__restrict __sockaddr_x25__;
} __CONST_SOCKADDR_ARG __attribute__((__transparent_union__));

struct mmsghdr {
  struct msghdr msg_hdr;
  unsigned int msg_len;
};

extern int socket(int __domain, int __type, int __protocol)
    __attribute__((__nothrow__, __leaf__));

extern int socketpair(int __domain, int __type, int __protocol, int __fds[2])
    __attribute__((__nothrow__, __leaf__));

extern int bind(int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)
    __attribute__((__nothrow__, __leaf__));

extern int getsockname(int __fd, __SOCKADDR_ARG __addr,
                       socklen_t *__restrict __len)
    __attribute__((__nothrow__, __leaf__));
# 126 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int connect(int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len);

extern int getpeername(int __fd, __SOCKADDR_ARG __addr,
                       socklen_t *__restrict __len)
    __attribute__((__nothrow__, __leaf__));

extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags);

extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags);

extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags,
                      __CONST_SOCKADDR_ARG __addr, socklen_t __addr_len);
# 163 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvfrom(int __fd, void *__restrict __buf, size_t __n,
                        int __flags, __SOCKADDR_ARG __addr,
                        socklen_t *__restrict __addr_len);
# 174 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags);
# 195 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int sendmmsg(int __fd, struct mmsghdr *__vmessages, unsigned int __vlen,
                    int __flags);
# 216 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags);
# 235 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int recvmmsg(int __fd, struct mmsghdr *__vmessages, unsigned int __vlen,
                    int __flags, struct timespec *__tmo);
# 255 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int getsockopt(int __fd, int __level, int __optname,
                      void *__restrict __optval, socklen_t *__restrict __optlen)
    __attribute__((__nothrow__, __leaf__));
# 277 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int setsockopt(int __fd, int __level, int __optname,
                      const void *__optval, socklen_t __optlen)
    __attribute__((__nothrow__, __leaf__));
# 296 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int listen(int __fd, int __n) __attribute__((__nothrow__, __leaf__));
# 306 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int accept(int __fd, __SOCKADDR_ARG __addr,
                  socklen_t *__restrict __addr_len);

extern int accept4(int __fd, __SOCKADDR_ARG __addr,
                   socklen_t *__restrict __addr_len, int __flags);
# 324 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4
extern int shutdown(int __fd, int __how) __attribute__((__nothrow__, __leaf__));

extern int sockatmark(int __fd) __attribute__((__nothrow__, __leaf__));

extern int isfdtype(int __fd, int __fdtype)
    __attribute__((__nothrow__, __leaf__));
# 346 "/usr/include/x86_64-linux-gnu/sys/socket.h" 3 4

# 31 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/netinet/in.h" 1 3 4
# 27 "/usr/include/netinet/in.h" 3 4

typedef uint32_t in_addr_t;
struct in_addr {
  in_addr_t s_addr;
};

# 1 "/usr/include/x86_64-linux-gnu/bits/in.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/bits/in.h" 3 4
struct ip_opts {
  struct in_addr ip_dst;
  char ip_opts[40];
};

struct in_pktinfo {
  int ipi_ifindex;
  struct in_addr ipi_spec_dst;
  struct in_addr ipi_addr;
};
# 38 "/usr/include/netinet/in.h" 2 3 4

enum {
  IPPROTO_IP = 0,

  IPPROTO_ICMP = 1,

  IPPROTO_IGMP = 2,

  IPPROTO_IPIP = 4,

  IPPROTO_TCP = 6,

  IPPROTO_EGP = 8,

  IPPROTO_PUP = 12,

  IPPROTO_UDP = 17,

  IPPROTO_IDP = 22,

  IPPROTO_TP = 29,

  IPPROTO_DCCP = 33,

  IPPROTO_IPV6 = 41,

  IPPROTO_RSVP = 46,

  IPPROTO_GRE = 47,

  IPPROTO_ESP = 50,

  IPPROTO_AH = 51,

  IPPROTO_MTP = 92,

  IPPROTO_BEETPH = 94,

  IPPROTO_ENCAP = 98,

  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,

  IPPROTO_L2TP = 115,

  IPPROTO_SCTP = 132,

  IPPROTO_UDPLITE = 136,

  IPPROTO_MPLS = 137,

  IPPROTO_ETHERNET = 143,

  IPPROTO_RAW = 255,

  IPPROTO_MPTCP = 262,

  IPPROTO_MAX
};

enum {
  IPPROTO_HOPOPTS = 0,

  IPPROTO_ROUTING = 43,

  IPPROTO_FRAGMENT = 44,

  IPPROTO_ICMPV6 = 58,

  IPPROTO_NONE = 59,

  IPPROTO_DSTOPTS = 60,

  IPPROTO_MH = 135

};

typedef uint16_t in_port_t;

enum {
  IPPORT_ECHO = 7,
  IPPORT_DISCARD = 9,
  IPPORT_SYSTAT = 11,
  IPPORT_DAYTIME = 13,
  IPPORT_NETSTAT = 15,
  IPPORT_FTP = 21,
  IPPORT_TELNET = 23,
  IPPORT_SMTP = 25,
  IPPORT_TIMESERVER = 37,
  IPPORT_NAMESERVER = 42,
  IPPORT_WHOIS = 43,
  IPPORT_MTP = 57,

  IPPORT_TFTP = 69,
  IPPORT_RJE = 77,
  IPPORT_FINGER = 79,
  IPPORT_TTYLINK = 87,
  IPPORT_SUPDUP = 95,

  IPPORT_EXECSERVER = 512,
  IPPORT_LOGINSERVER = 513,
  IPPORT_CMDSERVER = 514,
  IPPORT_EFSSERVER = 520,

  IPPORT_BIFFUDP = 512,
  IPPORT_WHOSERVER = 513,
  IPPORT_ROUTESERVER = 520,

  IPPORT_RESERVED = 1024,

  IPPORT_USERRESERVED = 5000
};
# 221 "/usr/include/netinet/in.h" 3 4
struct in6_addr {
  union {
    uint8_t __u6_addr8[16];
    uint16_t __u6_addr16[8];
    uint32_t __u6_addr32[4];
  } __in6_u;
};

extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 247 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in {
  sa_family_t sin_family;
  in_port_t sin_port;
  struct in_addr sin_addr;

  unsigned char sin_zero[sizeof(struct sockaddr) -
                         (sizeof(unsigned short int)) - sizeof(in_port_t) -
                         sizeof(struct in_addr)];
};

struct sockaddr_in6 {
  sa_family_t sin6_family;
  in_port_t sin6_port;
  uint32_t sin6_flowinfo;
  struct in6_addr sin6_addr;
  uint32_t sin6_scope_id;
};

struct ip_mreq {

  struct in_addr imr_multiaddr;

  struct in_addr imr_interface;
};

struct ip_mreqn {

  struct in_addr imr_multiaddr;

  struct in_addr imr_address;

  int imr_ifindex;
};

struct ip_mreq_source {

  struct in_addr imr_multiaddr;

  struct in_addr imr_interface;

  struct in_addr imr_sourceaddr;
};

struct ipv6_mreq {

  struct in6_addr ipv6mr_multiaddr;

  unsigned int ipv6mr_interface;
};

struct group_req {

  uint32_t gr_interface;

  struct sockaddr_storage gr_group;
};

struct group_source_req {

  uint32_t gsr_interface;

  struct sockaddr_storage gsr_group;

  struct sockaddr_storage gsr_source;
};

struct ip_msfilter {

  struct in_addr imsf_multiaddr;

  struct in_addr imsf_interface;

  uint32_t imsf_fmode;

  uint32_t imsf_numsrc;

  struct in_addr imsf_slist[1];
};

struct group_filter {

  uint32_t gf_interface;

  struct sockaddr_storage gf_group;

  uint32_t gf_fmode;

  uint32_t gf_numsrc;

  struct sockaddr_storage gf_slist[1];
};
# 397 "/usr/include/netinet/in.h" 3 4
extern uint32_t ntohl(uint32_t __netlong) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern uint16_t ntohs(uint16_t __netshort)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern uint32_t htonl(uint32_t __hostlong)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern uint16_t htons(uint16_t __hostshort)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 409 "/usr/include/netinet/in.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 410 "/usr/include/netinet/in.h" 2 3 4
# 525 "/usr/include/netinet/in.h" 3 4
extern int bindresvport(int __sockfd, struct sockaddr_in *__sock_in)
    __attribute__((__nothrow__, __leaf__));

extern int bindresvport6(int __sockfd, struct sockaddr_in6 *__sock_in)
    __attribute__((__nothrow__, __leaf__));
# 555 "/usr/include/netinet/in.h" 3 4
struct cmsghdr;

struct in6_pktinfo {
  struct in6_addr ipi6_addr;
  unsigned int ipi6_ifindex;
};

struct ip6_mtuinfo {
  struct sockaddr_in6 ip6m_addr;
  uint32_t ip6m_mtu;
};

extern int inet6_option_space(int __nbytes)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));
extern int inet6_option_init(void *__bp, struct cmsghdr **__cmsgp, int __type)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));
extern int inet6_option_append(struct cmsghdr *__cmsg, const uint8_t *__typep,
                               int __multx, int __plusy)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));
extern uint8_t *inet6_option_alloc(struct cmsghdr *__cmsg, int __datalen,
                                   int __multx, int __plusy)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));
extern int inet6_option_next(const struct cmsghdr *__cmsg, uint8_t **__tptrp)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__deprecated__));
extern int inet6_option_find(const struct cmsghdr *__cmsg, uint8_t **__tptrp,
                             int __type) __attribute__((__nothrow__, __leaf__))
__attribute__((__deprecated__));

extern int inet6_opt_init(void *__extbuf, socklen_t __extlen)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_append(void *__extbuf, socklen_t __extlen, int __offset,
                            uint8_t __type, socklen_t __len, uint8_t __align,
                            void **__databufp)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_finish(void *__extbuf, socklen_t __extlen, int __offset)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_set_val(void *__databuf, int __offset, void *__val,
                             socklen_t __vallen)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_next(void *__extbuf, socklen_t __extlen, int __offset,
                          uint8_t *__typep, socklen_t *__lenp,
                          void **__databufp)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_find(void *__extbuf, socklen_t __extlen, int __offset,
                          uint8_t __type, socklen_t *__lenp, void **__databufp)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_opt_get_val(void *__databuf, int __offset, void *__val,
                             socklen_t __vallen)
    __attribute__((__nothrow__, __leaf__));

extern socklen_t inet6_rth_space(int __type, int __segments)
    __attribute__((__nothrow__, __leaf__));
extern void *inet6_rth_init(void *__bp, socklen_t __bp_len, int __type,
                            int __segments)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_rth_add(void *__bp, const struct in6_addr *__addr)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_rth_reverse(const void *__in, void *__out)
    __attribute__((__nothrow__, __leaf__));
extern int inet6_rth_segments(const void *__bp)
    __attribute__((__nothrow__, __leaf__));
extern struct in6_addr *inet6_rth_getaddr(const void *__bp, int __index)
    __attribute__((__nothrow__, __leaf__));

extern int getipv4sourcefilter(int __s, struct in_addr __interface_addr,
                               struct in_addr __group, uint32_t *__fmode,
                               uint32_t *__numsrc, struct in_addr *__slist)
    __attribute__((__nothrow__, __leaf__));

extern int setipv4sourcefilter(int __s, struct in_addr __interface_addr,
                               struct in_addr __group, uint32_t __fmode,
                               uint32_t __numsrc, const struct in_addr *__slist)
    __attribute__((__nothrow__, __leaf__));

extern int getsourcefilter(int __s, uint32_t __interface_addr,
                           const struct sockaddr *__group, socklen_t __grouplen,
                           uint32_t *__fmode, uint32_t *__numsrc,
                           struct sockaddr_storage *__slist)
    __attribute__((__nothrow__, __leaf__));

extern int setsourcefilter(int __s, uint32_t __interface_addr,
                           const struct sockaddr *__group, socklen_t __grouplen,
                           uint32_t __fmode, uint32_t __numsrc,
                           const struct sockaddr_storage *__slist)
    __attribute__((__nothrow__, __leaf__));

# 32 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 93 "/usr/include/netinet/tcp.h" 3 4
typedef uint32_t tcp_seq;

struct tcphdr {
  __extension__ union {
    struct {
      uint16_t th_sport;
      uint16_t th_dport;
      tcp_seq th_seq;
      tcp_seq th_ack;

      uint8_t th_x2 : 4;
      uint8_t th_off : 4;

      uint8_t th_flags;

      uint16_t th_win;
      uint16_t th_sum;
      uint16_t th_urp;
    };
    struct {
      uint16_t source;
      uint16_t dest;
      uint32_t seq;
      uint32_t ack_seq;

      uint16_t res1 : 4;
      uint16_t doff : 4;
      uint16_t fin : 1;
      uint16_t syn : 1;
      uint16_t rst : 1;
      uint16_t psh : 1;
      uint16_t ack : 1;
      uint16_t urg : 1;
      uint16_t res2 : 2;
# 156 "/usr/include/netinet/tcp.h" 3 4
      uint16_t window;
      uint16_t check;
      uint16_t urg_ptr;
    };
  };
};

enum {
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING
};
# 217 "/usr/include/netinet/tcp.h" 3 4
enum tcp_ca_state {
  TCP_CA_Open = 0,
  TCP_CA_Disorder = 1,
  TCP_CA_CWR = 2,
  TCP_CA_Recovery = 3,
  TCP_CA_Loss = 4
};

struct tcp_info {
  uint8_t tcpi_state;
  uint8_t tcpi_ca_state;
  uint8_t tcpi_retransmits;
  uint8_t tcpi_probes;
  uint8_t tcpi_backoff;
  uint8_t tcpi_options;
  uint8_t tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

  uint32_t tcpi_rto;
  uint32_t tcpi_ato;
  uint32_t tcpi_snd_mss;
  uint32_t tcpi_rcv_mss;

  uint32_t tcpi_unacked;
  uint32_t tcpi_sacked;
  uint32_t tcpi_lost;
  uint32_t tcpi_retrans;
  uint32_t tcpi_fackets;

  uint32_t tcpi_last_data_sent;
  uint32_t tcpi_last_ack_sent;
  uint32_t tcpi_last_data_recv;
  uint32_t tcpi_last_ack_recv;

  uint32_t tcpi_pmtu;
  uint32_t tcpi_rcv_ssthresh;
  uint32_t tcpi_rtt;
  uint32_t tcpi_rttvar;
  uint32_t tcpi_snd_ssthresh;
  uint32_t tcpi_snd_cwnd;
  uint32_t tcpi_advmss;
  uint32_t tcpi_reordering;

  uint32_t tcpi_rcv_rtt;
  uint32_t tcpi_rcv_space;

  uint32_t tcpi_total_retrans;
};
# 277 "/usr/include/netinet/tcp.h" 3 4
struct tcp_md5sig {
  struct sockaddr_storage tcpm_addr;
  uint8_t tcpm_flags;
  uint8_t tcpm_prefixlen;
  uint16_t tcpm_keylen;
  int tcpm_ifindex;
  uint8_t tcpm_key[80];
};

struct tcp_repair_opt {
  uint32_t opt_code;
  uint32_t opt_val;
};

enum {
  TCP_NO_QUEUE,
  TCP_RECV_QUEUE,
  TCP_SEND_QUEUE,
  TCP_QUEUES_NR,
};
# 320 "/usr/include/netinet/tcp.h" 3 4
struct tcp_cookie_transactions {
  uint16_t tcpct_flags;
  uint8_t __tcpct_pad1;
  uint8_t tcpct_cookie_desired;
  uint16_t tcpct_s_data_desired;
  uint16_t tcpct_used;
  uint8_t tcpct_value[536U];
};

struct tcp_repair_window {
  uint32_t snd_wl1;
  uint32_t snd_wnd;
  uint32_t max_window;
  uint32_t rcv_wnd;
  uint32_t rcv_wup;
};

struct tcp_zerocopy_receive {
  uint64_t address;
  uint32_t length;
  uint32_t recv_skip_hint;
};
# 33 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 30 "/usr/include/arpa/inet.h" 3 4

extern in_addr_t inet_addr(const char *__cp)
    __attribute__((__nothrow__, __leaf__));

extern in_addr_t inet_lnaof(struct in_addr __in)
    __attribute__((__nothrow__, __leaf__));

extern struct in_addr inet_makeaddr(in_addr_t __net, in_addr_t __host)
    __attribute__((__nothrow__, __leaf__));

extern in_addr_t inet_netof(struct in_addr __in)
    __attribute__((__nothrow__, __leaf__));

extern in_addr_t inet_network(const char *__cp)
    __attribute__((__nothrow__, __leaf__));

extern char *inet_ntoa(struct in_addr __in)
    __attribute__((__nothrow__, __leaf__));

extern int inet_pton(int __af, const char *__restrict __cp,
                     void *__restrict __buf)
    __attribute__((__nothrow__, __leaf__));

extern const char *inet_ntop(int __af, const void *__restrict __cp,
                             char *__restrict __buf, socklen_t __len)
    __attribute__((__nothrow__, __leaf__));

extern int inet_aton(const char *__cp, struct in_addr *__inp)
    __attribute__((__nothrow__, __leaf__));

extern char *inet_neta(in_addr_t __net, char *__buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__deprecated__("Use inet_ntop instead")));

extern char *inet_net_ntop(int __af, const void *__cp, int __bits, char *__buf,
                           size_t __len) __attribute__((__nothrow__, __leaf__));

extern int inet_net_pton(int __af, const char *__cp, void *__buf, size_t __len)
    __attribute__((__nothrow__, __leaf__));

extern unsigned int inet_nsap_addr(const char *__cp, unsigned char *__buf,
                                   int __len)
    __attribute__((__nothrow__, __leaf__));

extern char *inet_nsap_ntoa(int __len, const unsigned char *__cp, char *__buf)
    __attribute__((__nothrow__, __leaf__));

# 34 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/netdb.h" 1 3 4
# 32 "/usr/include/netdb.h" 3 4
# 1 "/usr/include/rpc/netdb.h" 1 3 4
# 42 "/usr/include/rpc/netdb.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 43 "/usr/include/rpc/netdb.h" 2 3 4

struct rpcent {
  char *r_name;
  char **r_aliases;
  int r_number;
};

extern void setrpcent(int __stayopen) __attribute__((__nothrow__, __leaf__));
extern void endrpcent(void) __attribute__((__nothrow__, __leaf__));
extern struct rpcent *getrpcbyname(const char *__name)
    __attribute__((__nothrow__, __leaf__));
extern struct rpcent *getrpcbynumber(int __number)
    __attribute__((__nothrow__, __leaf__));
extern struct rpcent *getrpcent(void) __attribute__((__nothrow__, __leaf__));

extern int getrpcbyname_r(const char *__name, struct rpcent *__result_buf,
                          char *__buffer, size_t __buflen,
                          struct rpcent **__result)
    __attribute__((__nothrow__, __leaf__));

extern int getrpcbynumber_r(int __number, struct rpcent *__result_buf,
                            char *__buffer, size_t __buflen,
                            struct rpcent **__result)
    __attribute__((__nothrow__, __leaf__));

extern int getrpcent_r(struct rpcent *__result_buf, char *__buffer,
                       size_t __buflen, struct rpcent **__result)
    __attribute__((__nothrow__, __leaf__));

# 33 "/usr/include/netdb.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/netdb.h" 3 4
struct netent {
  char *n_name;
  char **n_aliases;
  int n_addrtype;
  uint32_t n_net;
};
# 41 "/usr/include/netdb.h" 2 3 4
# 51 "/usr/include/netdb.h" 3 4

extern int *__h_errno_location(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
# 90 "/usr/include/netdb.h" 3 4
extern void herror(const char *__str) __attribute__((__nothrow__, __leaf__));

extern const char *hstrerror(int __err_num)
    __attribute__((__nothrow__, __leaf__));

struct hostent {
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;
};

extern void sethostent(int __stay_open);

extern void endhostent(void);

extern struct hostent *gethostent(void);

extern struct hostent *gethostbyaddr(const void *__addr, __socklen_t __len,
                                     int __type);

extern struct hostent *gethostbyname(const char *__name);
# 153 "/usr/include/netdb.h" 3 4
extern struct hostent *gethostbyname2(const char *__name, int __af);
# 165 "/usr/include/netdb.h" 3 4
extern int gethostent_r(struct hostent *__restrict __result_buf,
                        char *__restrict __buf, size_t __buflen,
                        struct hostent **__restrict __result,
                        int *__restrict __h_errnop);

extern int gethostbyaddr_r(const void *__restrict __addr, __socklen_t __len,
                           int __type, struct hostent *__restrict __result_buf,
                           char *__restrict __buf, size_t __buflen,
                           struct hostent **__restrict __result,
                           int *__restrict __h_errnop);

extern int gethostbyname_r(const char *__restrict __name,
                           struct hostent *__restrict __result_buf,
                           char *__restrict __buf, size_t __buflen,
                           struct hostent **__restrict __result,
                           int *__restrict __h_errnop);

extern int gethostbyname2_r(const char *__restrict __name, int __af,
                            struct hostent *__restrict __result_buf,
                            char *__restrict __buf, size_t __buflen,
                            struct hostent **__restrict __result,
                            int *__restrict __h_errnop);
# 196 "/usr/include/netdb.h" 3 4
extern void setnetent(int __stay_open);

extern void endnetent(void);

extern struct netent *getnetent(void);

extern struct netent *getnetbyaddr(uint32_t __net, int __type);

extern struct netent *getnetbyname(const char *__name);
# 235 "/usr/include/netdb.h" 3 4
extern int getnetent_r(struct netent *__restrict __result_buf,
                       char *__restrict __buf, size_t __buflen,
                       struct netent **__restrict __result,
                       int *__restrict __h_errnop);

extern int getnetbyaddr_r(uint32_t __net, int __type,
                          struct netent *__restrict __result_buf,
                          char *__restrict __buf, size_t __buflen,
                          struct netent **__restrict __result,
                          int *__restrict __h_errnop);

extern int getnetbyname_r(const char *__restrict __name,
                          struct netent *__restrict __result_buf,
                          char *__restrict __buf, size_t __buflen,
                          struct netent **__restrict __result,
                          int *__restrict __h_errnop);

struct servent {
  char *s_name;
  char **s_aliases;
  int s_port;
  char *s_proto;
};

extern void setservent(int __stay_open);

extern void endservent(void);

extern struct servent *getservent(void);

extern struct servent *getservbyname(const char *__name, const char *__proto);

extern struct servent *getservbyport(int __port, const char *__proto);
# 306 "/usr/include/netdb.h" 3 4
extern int getservent_r(struct servent *__restrict __result_buf,
                        char *__restrict __buf, size_t __buflen,
                        struct servent **__restrict __result);

extern int getservbyname_r(const char *__restrict __name,
                           const char *__restrict __proto,
                           struct servent *__restrict __result_buf,
                           char *__restrict __buf, size_t __buflen,
                           struct servent **__restrict __result);

extern int getservbyport_r(int __port, const char *__restrict __proto,
                           struct servent *__restrict __result_buf,
                           char *__restrict __buf, size_t __buflen,
                           struct servent **__restrict __result);

struct protoent {
  char *p_name;
  char **p_aliases;
  int p_proto;
};

extern void setprotoent(int __stay_open);

extern void endprotoent(void);

extern struct protoent *getprotoent(void);

extern struct protoent *getprotobyname(const char *__name);

extern struct protoent *getprotobynumber(int __proto);
# 372 "/usr/include/netdb.h" 3 4
extern int getprotoent_r(struct protoent *__restrict __result_buf,
                         char *__restrict __buf, size_t __buflen,
                         struct protoent **__restrict __result);

extern int getprotobyname_r(const char *__restrict __name,
                            struct protoent *__restrict __result_buf,
                            char *__restrict __buf, size_t __buflen,
                            struct protoent **__restrict __result);

extern int getprotobynumber_r(int __proto,
                              struct protoent *__restrict __result_buf,
                              char *__restrict __buf, size_t __buflen,
                              struct protoent **__restrict __result);
# 393 "/usr/include/netdb.h" 3 4
extern int setnetgrent(const char *__netgroup);

extern void endnetgrent(void);
# 410 "/usr/include/netdb.h" 3 4
extern int getnetgrent(char **__restrict __hostp, char **__restrict __userp,
                       char **__restrict __domainp);
# 421 "/usr/include/netdb.h" 3 4
extern int innetgr(const char *__netgroup, const char *__host,
                   const char *__user, const char *__domain);

extern int getnetgrent_r(char **__restrict __hostp, char **__restrict __userp,
                         char **__restrict __domainp, char *__restrict __buffer,
                         size_t __buflen);
# 449 "/usr/include/netdb.h" 3 4
extern int rcmd(char **__restrict __ahost, unsigned short int __rport,
                const char *__restrict __locuser,
                const char *__restrict __remuser, const char *__restrict __cmd,
                int *__restrict __fd2p);
# 461 "/usr/include/netdb.h" 3 4
extern int rcmd_af(char **__restrict __ahost, unsigned short int __rport,
                   const char *__restrict __locuser,
                   const char *__restrict __remuser,
                   const char *__restrict __cmd, int *__restrict __fd2p,
                   sa_family_t __af);
# 477 "/usr/include/netdb.h" 3 4
extern int rexec(char **__restrict __ahost, int __rport,
                 const char *__restrict __name, const char *__restrict __pass,
                 const char *__restrict __cmd, int *__restrict __fd2p);
# 489 "/usr/include/netdb.h" 3 4
extern int rexec_af(char **__restrict __ahost, int __rport,
                    const char *__restrict __name,
                    const char *__restrict __pass, const char *__restrict __cmd,
                    int *__restrict __fd2p, sa_family_t __af);
# 503 "/usr/include/netdb.h" 3 4
extern int ruserok(const char *__rhost, int __suser, const char *__remuser,
                   const char *__locuser);
# 513 "/usr/include/netdb.h" 3 4
extern int ruserok_af(const char *__rhost, int __suser, const char *__remuser,
                      const char *__locuser, sa_family_t __af);
# 526 "/usr/include/netdb.h" 3 4
extern int iruserok(uint32_t __raddr, int __suser, const char *__remuser,
                    const char *__locuser);
# 537 "/usr/include/netdb.h" 3 4
extern int iruserok_af(const void *__raddr, int __suser, const char *__remuser,
                       const char *__locuser, sa_family_t __af);
# 549 "/usr/include/netdb.h" 3 4
extern int rresvport(int *__alport);
# 558 "/usr/include/netdb.h" 3 4
extern int rresvport_af(int *__alport, sa_family_t __af);

struct addrinfo {
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  struct sockaddr *ai_addr;
  char *ai_canonname;
  struct addrinfo *ai_next;
};

struct gaicb {
  const char *ar_name;
  const char *ar_service;
  const struct addrinfo *ar_request;
  struct addrinfo *ar_result;

  int __return;
  int __glibc_reserved[5];
};
# 660 "/usr/include/netdb.h" 3 4
extern int getaddrinfo(const char *__restrict __name,
                       const char *__restrict __service,
                       const struct addrinfo *__restrict __req,
                       struct addrinfo **__restrict __pai);

extern void freeaddrinfo(struct addrinfo *__ai)
    __attribute__((__nothrow__, __leaf__));

extern const char *gai_strerror(int __ecode)
    __attribute__((__nothrow__, __leaf__));

extern int getnameinfo(const struct sockaddr *__restrict __sa,
                       socklen_t __salen, char *__restrict __host,
                       socklen_t __hostlen, char *__restrict __serv,
                       socklen_t __servlen, int __flags);
# 690 "/usr/include/netdb.h" 3 4
extern int getaddrinfo_a(int __mode, struct gaicb *__list[__restrict],
                         int __ent, struct sigevent *__restrict __sig);
# 701 "/usr/include/netdb.h" 3 4
extern int gai_suspend(const struct gaicb *const __list[], int __ent,
                       const struct timespec *__timeout);
# 716 "/usr/include/netdb.h" 3 4
extern int gai_error(struct gaicb *__req)
    __attribute__((__nothrow__, __leaf__));

extern int gai_cancel(struct gaicb *__gaicbp)
    __attribute__((__nothrow__, __leaf__));

# 35 "/home/paulning/study/qemu/include/system/os-posix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/un.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/un.h" 3 4

struct sockaddr_un {
  sa_family_t sun_family;
  char sun_path[108];
};

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/sys/un.h" 2 3 4

# 36 "/home/paulning/study/qemu/include/system/os-posix.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 33 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

extern unsigned int gnu_dev_major(__dev_t __dev)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern unsigned int gnu_dev_minor(__dev_t __dev)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern __dev_t gnu_dev_makedev(unsigned int __major, unsigned int __minor)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
# 47 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 39 "/home/paulning/study/qemu/include/system/os-posix.h" 2

# 45 "/home/paulning/study/qemu/include/system/os-posix.h"
void os_set_line_buffering(void);
void os_setup_early_signal_handling(void);
void os_set_proc_name(const char *s);
void os_setup_signal_handling(void);
int os_set_daemonize(
# 49 "/home/paulning/study/qemu/include/system/os-posix.h" 3 4
    _Bool
# 49 "/home/paulning/study/qemu/include/system/os-posix.h"
        d);

# 50 "/home/paulning/study/qemu/include/system/os-posix.h" 3 4
_Bool
# 50 "/home/paulning/study/qemu/include/system/os-posix.h"
    is_daemonized(void);
void os_daemonize(void);

# 52 "/home/paulning/study/qemu/include/system/os-posix.h" 3 4
_Bool
# 52 "/home/paulning/study/qemu/include/system/os-posix.h"
    os_set_runas(const char *user_id);
void os_set_chroot(const char *path);
void os_setup_limits(void);
void os_setup_post(void);
int os_mlock(
# 56 "/home/paulning/study/qemu/include/system/os-posix.h" 3 4
    _Bool
# 56 "/home/paulning/study/qemu/include/system/os-posix.h"
        on_fault);
# 73 "/home/paulning/study/qemu/include/system/os-posix.h"
void *qemu_alloc_stack(size_t *sz);
# 83 "/home/paulning/study/qemu/include/system/os-posix.h"
void qemu_free_stack(void *stack, size_t sz);

static inline void qemu_flockfile(FILE *f) { flockfile(f); }

static inline void qemu_funlockfile(FILE *f) { funlockfile(f); }
# 169 "/home/paulning/study/qemu/include/qemu/osdep.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/typedefs.h" 1
# 24 "/home/paulning/study/qemu/include/qemu/typedefs.h"
typedef struct AccelCPUState AccelCPUState;
typedef struct AccelOpsClass AccelOpsClass;
typedef struct AccelState AccelState;
typedef struct AddressSpace AddressSpace;
typedef struct AioContext AioContext;
typedef struct Aml Aml;
typedef struct ArchCPU ArchCPU;
typedef struct BdrvDirtyBitmap BdrvDirtyBitmap;
typedef struct BdrvDirtyBitmapIter BdrvDirtyBitmapIter;
typedef struct BlockBackend BlockBackend;
typedef struct BlockBackendRootState BlockBackendRootState;
typedef struct BlockDriverState BlockDriverState;
typedef struct BusClass BusClass;
typedef struct BusState BusState;
typedef struct Chardev Chardev;
typedef struct Clock Clock;
typedef struct ConfidentialGuestSupport ConfidentialGuestSupport;
typedef struct CPUArchState CPUArchState;
typedef struct CPUPluginState CPUPluginState;
typedef struct CPUState CPUState;
typedef struct CPUTLBEntryFull CPUTLBEntryFull;
typedef struct DeviceState DeviceState;
typedef struct DirtyBitmapSnapshot DirtyBitmapSnapshot;
typedef struct DisasContextBase DisasContextBase;
typedef struct DisplayChangeListener DisplayChangeListener;
typedef struct DriveInfo DriveInfo;
typedef struct DumpState DumpState;
typedef struct Error Error;
typedef struct EventNotifier EventNotifier;
typedef struct FlatView FlatView;
typedef struct FWCfgState FWCfgState;
typedef struct HostMemoryBackend HostMemoryBackend;
typedef struct I2CBus I2CBus;
typedef struct I2SCodec I2SCodec;
typedef struct IOMMUMemoryRegion IOMMUMemoryRegion;
typedef struct ISABus ISABus;
typedef struct ISADevice ISADevice;
typedef struct IsaDma IsaDma;
typedef struct JSONWriter JSONWriter;
typedef struct MACAddr MACAddr;
typedef struct MachineClass MachineClass;
typedef struct MachineState MachineState;
typedef struct MemoryListener MemoryListener;
typedef struct MemoryMappingList MemoryMappingList;
typedef struct MemoryRegion MemoryRegion;
typedef struct MemoryRegionCache MemoryRegionCache;
typedef struct MemoryRegionSection MemoryRegionSection;
typedef struct MigrationIncomingState MigrationIncomingState;
typedef struct MigrationState MigrationState;
typedef struct Monitor Monitor;
typedef struct MSIMessage MSIMessage;
typedef struct NetClientState NetClientState;
typedef struct NetFilterState NetFilterState;
typedef struct NICInfo NICInfo;
typedef struct Object Object;
typedef struct ObjectClass ObjectClass;
typedef struct PCIBridge PCIBridge;
typedef struct PCIBus PCIBus;
typedef struct PCIDevice PCIDevice;
typedef struct PCIEPort PCIEPort;
typedef struct PCIESlot PCIESlot;
typedef struct PCIExpressDevice PCIExpressDevice;
typedef struct PCIExpressHost PCIExpressHost;
typedef struct PCIHostDeviceAddress PCIHostDeviceAddress;
typedef struct PCIHostState PCIHostState;
typedef struct Property Property;
typedef struct PropertyInfo PropertyInfo;
typedef struct QBool QBool;
typedef struct QDict QDict;
typedef struct QEMUBH QEMUBH;
typedef struct QemuConsole QemuConsole;
typedef struct QEMUCursor QEMUCursor;
typedef struct QEMUFile QEMUFile;
typedef struct QemuMutex QemuMutex;
typedef struct QemuOpts QemuOpts;
typedef struct QemuOptsList QemuOptsList;
typedef struct QEMUSGList QEMUSGList;
typedef struct QemuSpin QemuSpin;
typedef struct QEMUTimer QEMUTimer;
typedef struct QEMUTimerListGroup QEMUTimerListGroup;
typedef struct QList QList;
typedef struct QNull QNull;
typedef struct QNum QNum;
typedef struct QObject QObject;
typedef struct QString QString;
typedef struct RAMBlock RAMBlock;
typedef struct Range Range;
typedef struct ReservedRegion ReservedRegion;
typedef struct SaveLiveCompletePrecopyThreadData
    SaveLiveCompletePrecopyThreadData;
typedef struct SHPCDevice SHPCDevice;
typedef struct SSIBus SSIBus;
typedef struct TCGCPUOps TCGCPUOps;
typedef struct TCGHelperInfo TCGHelperInfo;
typedef struct TaskState TaskState;
typedef struct TranslationBlock TranslationBlock;
typedef struct VirtIODevice VirtIODevice;
typedef struct Visitor Visitor;
typedef struct VMChangeStateEntry VMChangeStateEntry;
typedef struct VMStateDescription VMStateDescription;

typedef struct IRQState *qemu_irq;

typedef void (*qemu_irq_handler)(void *opaque, int n, int level);
typedef
# 136 "/home/paulning/study/qemu/include/qemu/typedefs.h" 3 4
    _Bool
# 136 "/home/paulning/study/qemu/include/qemu/typedefs.h"
    (*MigrationLoadThread)(void *opaque,
# 136 "/home/paulning/study/qemu/include/qemu/typedefs.h" 3 4
                           _Bool
# 136 "/home/paulning/study/qemu/include/qemu/typedefs.h"
                               *should_quit,
                           Error **errp);
typedef
# 138 "/home/paulning/study/qemu/include/qemu/typedefs.h" 3 4
    _Bool
# 138 "/home/paulning/study/qemu/include/qemu/typedefs.h"
    (*SaveLiveCompletePrecopyThreadHandler)(
        SaveLiveCompletePrecopyThreadData *d, Error **errp);
# 176 "/home/paulning/study/qemu/include/qemu/osdep.h" 2
# 257 "/home/paulning/study/qemu/include/qemu/osdep.h"
__attribute__((__noreturn__)) void
    __attribute__((error("code path is reachable")))
    qemu_build_not_reached_always(void);
# 508 "/home/paulning/study/qemu/include/qemu/osdep.h"
int qemu_daemon(int nochdir, int noclose);
void *qemu_anon_ram_alloc(size_t size, uint64_t *align,
# 509 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                          _Bool
# 509 "/home/paulning/study/qemu/include/qemu/osdep.h"
                              shared,

# 510 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                          _Bool
# 510 "/home/paulning/study/qemu/include/qemu/osdep.h"
                              noreserve);
void qemu_anon_ram_free(void *ptr, size_t size);
int qemu_shm_alloc(size_t size, Error **errp);
# 575 "/home/paulning/study/qemu/include/qemu/osdep.h"
struct qemu_signalfd_siginfo {
  uint32_t ssi_signo;
  int32_t ssi_errno;
  int32_t ssi_code;
  uint32_t ssi_pid;
  uint32_t ssi_uid;
  int32_t ssi_fd;
  uint32_t ssi_tid;
  uint32_t ssi_band;
  uint32_t ssi_overrun;
  uint32_t ssi_trapno;
  int32_t ssi_status;
  int32_t ssi_int;
  uint64_t ssi_ptr;
  uint64_t ssi_utime;
  uint64_t ssi_stime;
  uint64_t ssi_addr;

  uint8_t pad[48];
};

int qemu_signalfd(const sigset_t *mask);
void sigaction_invoke(struct sigaction *action,
                      struct qemu_signalfd_siginfo *info);

int qemu_open_old(const char *name, int flags, ...);
int qemu_open(const char *name, int flags, Error **errp);
int qemu_create(const char *name, int flags, mode_t mode, Error **errp);
int qemu_close(int fd);
int qemu_unlink(const char *name);

int qemu_dup_flags(int fd, int flags);
int qemu_dup(int fd);
int qemu_lock_fd(int fd, int64_t start, int64_t len,
# 614 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                 _Bool
# 614 "/home/paulning/study/qemu/include/qemu/osdep.h"
                     exclusive);
int qemu_unlock_fd(int fd, int64_t start, int64_t len);
int qemu_lock_fd_test(int fd, int64_t start, int64_t len,
# 616 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                      _Bool
# 616 "/home/paulning/study/qemu/include/qemu/osdep.h"
                          exclusive);

# 617 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
_Bool
# 617 "/home/paulning/study/qemu/include/qemu/osdep.h"
    qemu_has_ofd_lock(void);

# 620 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
_Bool
# 620 "/home/paulning/study/qemu/include/qemu/osdep.h"
    qemu_has_direct_io(void);
# 630 "/home/paulning/study/qemu/include/qemu/osdep.h"

# 630 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
_Bool
# 630 "/home/paulning/study/qemu/include/qemu/osdep.h"
    qemu_write_pidfile(const char *pidfile, Error **errp);

int qemu_get_thread_id(void);
# 641 "/home/paulning/study/qemu/include/qemu/osdep.h"
int qemu_kill_thread(int tid, int sig);
# 674 "/home/paulning/study/qemu/include/qemu/osdep.h"
ssize_t qemu_write_full(int fd, const void *buf, size_t count)
    __attribute__((warn_unused_result));

void qemu_set_cloexec(int fd);

char *qemu_get_local_state_dir(void);
# 694 "/home/paulning/study/qemu/include/qemu/osdep.h"
unsigned long qemu_getauxval(unsigned long type);

void qemu_set_tty_echo(int fd,
# 696 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                       _Bool
# 696 "/home/paulning/study/qemu/include/qemu/osdep.h"
                           echo);

typedef struct ThreadContext ThreadContext;
# 721 "/home/paulning/study/qemu/include/qemu/osdep.h"

# 721 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
_Bool
# 721 "/home/paulning/study/qemu/include/qemu/osdep.h"
    qemu_prealloc_mem(int fd, char *area, size_t sz, int max_threads,
                       ThreadContext *tc,
# 722 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
                                         _Bool
# 722 "/home/paulning/study/qemu/include/qemu/osdep.h"
                                              async, Error **errp);
# 732 "/home/paulning/study/qemu/include/qemu/osdep.h"

# 732 "/home/paulning/study/qemu/include/qemu/osdep.h" 3 4
_Bool
# 732 "/home/paulning/study/qemu/include/qemu/osdep.h"
    qemu_finish_async_prealloc_mem(Error **errp);
# 742 "/home/paulning/study/qemu/include/qemu/osdep.h"
char *qemu_get_pid_name(pid_t pid);

static inline uintptr_t qemu_real_host_page_size(void) { return getpagesize(); }

static inline intptr_t qemu_real_host_page_mask(void) {
  return -(intptr_t)qemu_real_host_page_size();
}

static inline void qemu_reset_optind(void) { optind = 0; }

int qemu_fdatasync(int fd);
# 783 "/home/paulning/study/qemu/include/qemu/osdep.h"
void qemu_close_all_open_fd(const int *skip, unsigned int nskip);
# 796 "/home/paulning/study/qemu/include/qemu/osdep.h"
int qemu_msync(void *addr, size_t length, int fd);
# 808 "/home/paulning/study/qemu/include/qemu/osdep.h"
size_t qemu_get_host_physmem(void);
# 825 "/home/paulning/study/qemu/include/qemu/osdep.h"
static inline void qemu_thread_jit_write(void) {}
static inline void qemu_thread_jit_execute(void) {}
# 10 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/qemu/log.h" 1

# 1 "/home/paulning/study/qemu/include/qemu/log-for-trace.h" 1
# 22 "/home/paulning/study/qemu/include/qemu/log-for-trace.h"
extern int qemu_loglevel;

static inline
# 27 "/home/paulning/study/qemu/include/qemu/log-for-trace.h" 3 4
    _Bool
# 27 "/home/paulning/study/qemu/include/qemu/log-for-trace.h"
    qemu_loglevel_mask(int mask) {
  return (qemu_loglevel & mask) != 0;
}

void __attribute__((__format__(gnu_printf, 1, 2))) qemu_log(const char *fmt,
                                                            ...);
# 6 "/home/paulning/study/qemu/include/qemu/log.h" 2

# 12 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 12 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_log_enabled(void);

# 15 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 15 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_log_separate(void);
# 44 "/home/paulning/study/qemu/include/qemu/log.h"
FILE *qemu_log_trylock(void) __attribute__((warn_unused_result));
void qemu_log_unlock(FILE *fd);
# 79 "/home/paulning/study/qemu/include/qemu/log.h"
typedef struct QEMULogItem {
  int mask;
  const char *name;
  const char *help;
} QEMULogItem;

extern const QEMULogItem qemu_log_items[];

# 87 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 87 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_set_log(int log_flags, Error **errp);

# 88 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 88 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_set_log_filename(const char *filename, Error **errp);

# 89 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 89 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_set_log_filename_flags(const char *name, int flags, Error **errp);
void qemu_set_dfilter_ranges(const char *ranges, Error **errp);

# 91 "/home/paulning/study/qemu/include/qemu/log.h" 3 4
_Bool
# 91 "/home/paulning/study/qemu/include/qemu/log.h"
    qemu_log_in_addr_range(uint64_t addr);
int qemu_str_to_log_mask(const char *str);

void qemu_print_log_usage(FILE *f);
# 11 "../../../target/arm/helper.c" 2
# 1 "../../../target/arm/trace.h" 1
# 1 "./trace/trace-target_arm.h" 1

# 1 "/home/paulning/study/qemu/trace/control.h" 1
# 13 "/home/paulning/study/qemu/trace/control.h"
# 1 "/home/paulning/study/qemu/trace/event-internal.h" 1
# 33 "/home/paulning/study/qemu/trace/event-internal.h"
typedef struct TraceEvent {
  uint32_t id;
  const char *name;
  const
# 36 "/home/paulning/study/qemu/trace/event-internal.h" 3 4
      _Bool
# 36 "/home/paulning/study/qemu/trace/event-internal.h"
          sstate;
  uint16_t *dstate;
} TraceEvent;

void trace_event_set_state_dynamic_init(TraceEvent *ev,
# 40 "/home/paulning/study/qemu/trace/event-internal.h" 3 4
                                        _Bool
# 40 "/home/paulning/study/qemu/trace/event-internal.h"
                                            state);
# 14 "/home/paulning/study/qemu/trace/control.h" 2

typedef struct TraceEventIter {

  size_t event;
  size_t group;

  size_t group_id;
  const char *pattern;
} TraceEventIter;
# 32 "/home/paulning/study/qemu/trace/control.h"
void trace_event_iter_init_all(TraceEventIter *iter);
# 43 "/home/paulning/study/qemu/trace/control.h"
void trace_event_iter_init_pattern(TraceEventIter *iter, const char *pattern);
# 53 "/home/paulning/study/qemu/trace/control.h"
void trace_event_iter_init_group(TraceEventIter *iter, size_t group_id);
# 64 "/home/paulning/study/qemu/trace/control.h"
TraceEvent *trace_event_iter_next(TraceEventIter *iter);
# 75 "/home/paulning/study/qemu/trace/control.h"
TraceEvent *trace_event_name(const char *name);

static
# 82 "/home/paulning/study/qemu/trace/control.h" 3 4
    _Bool
# 82 "/home/paulning/study/qemu/trace/control.h"
    trace_event_is_pattern(const char *str);

static uint32_t trace_event_get_id(TraceEvent *ev);

static const char *trace_event_get_name(TraceEvent *ev);
# 136 "/home/paulning/study/qemu/trace/control.h"
static
# 136 "/home/paulning/study/qemu/trace/control.h" 3 4
    _Bool
# 136 "/home/paulning/study/qemu/trace/control.h"
    trace_event_get_state_static(TraceEvent *ev);
# 145 "/home/paulning/study/qemu/trace/control.h"
static
# 145 "/home/paulning/study/qemu/trace/control.h" 3 4
    _Bool
# 145 "/home/paulning/study/qemu/trace/control.h"
    trace_event_get_state_dynamic(TraceEvent *ev);
# 156 "/home/paulning/study/qemu/trace/control.h"
void trace_event_set_state_dynamic(TraceEvent *ev,
# 156 "/home/paulning/study/qemu/trace/control.h" 3 4
                                   _Bool
# 156 "/home/paulning/study/qemu/trace/control.h"
                                       state);
# 165 "/home/paulning/study/qemu/trace/control.h"

# 165 "/home/paulning/study/qemu/trace/control.h" 3 4
_Bool
# 165 "/home/paulning/study/qemu/trace/control.h"
    trace_init_backends(void);
# 174 "/home/paulning/study/qemu/trace/control.h"
void trace_init_file(void);

void trace_list_events(FILE *f);
# 191 "/home/paulning/study/qemu/trace/control.h"
void trace_enable_events(const char *line_buf);

extern QemuOptsList qemu_trace_opts;

void trace_opt_parse(const char *optstr);

uint32_t trace_get_vcpu_event_count(void);

# 1 "/home/paulning/study/qemu/trace/control-internal.h" 1
# 13 "/home/paulning/study/qemu/trace/control-internal.h"
extern int trace_events_enabled_count;

static inline
# 16 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
    _Bool
# 16 "/home/paulning/study/qemu/trace/control-internal.h"
    trace_event_is_pattern(const char *str) {

# 18 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
  ((void)sizeof((
# 18 "/home/paulning/study/qemu/trace/control-internal.h"
                    str !=
# 18 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
                    ((void *)0))
                    ? 1
                    : 0),
   __extension__({
     if (
# 18 "/home/paulning/study/qemu/trace/control-internal.h"
         str !=
# 18 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
         ((void *)0))
       ;
     else
       __assert_fail(
# 18 "/home/paulning/study/qemu/trace/control-internal.h"
           "str != NULL"
# 18 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
           ,
           "/home/paulning/study/qemu/trace/control-internal.h", 18,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 18 "/home/paulning/study/qemu/trace/control-internal.h"
      ;
  return strchr(str, '*') !=
# 19 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
         ((void *)0)
# 19 "/home/paulning/study/qemu/trace/control-internal.h"
      ;
}

static inline uint32_t trace_event_get_id(TraceEvent *ev) {

# 24 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
  ((void)sizeof((
# 24 "/home/paulning/study/qemu/trace/control-internal.h"
                    ev !=
# 24 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
                    ((void *)0))
                    ? 1
                    : 0),
   __extension__({
     if (
# 24 "/home/paulning/study/qemu/trace/control-internal.h"
         ev !=
# 24 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
         ((void *)0))
       ;
     else
       __assert_fail(
# 24 "/home/paulning/study/qemu/trace/control-internal.h"
           "ev != NULL"
# 24 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
           ,
           "/home/paulning/study/qemu/trace/control-internal.h", 24,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 24 "/home/paulning/study/qemu/trace/control-internal.h"
      ;
  return ev->id;
}

static inline const char *trace_event_get_name(TraceEvent *ev) {

# 30 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
  ((void)sizeof((
# 30 "/home/paulning/study/qemu/trace/control-internal.h"
                    ev !=
# 30 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
                    ((void *)0))
                    ? 1
                    : 0),
   __extension__({
     if (
# 30 "/home/paulning/study/qemu/trace/control-internal.h"
         ev !=
# 30 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
         ((void *)0))
       ;
     else
       __assert_fail(
# 30 "/home/paulning/study/qemu/trace/control-internal.h"
           "ev != NULL"
# 30 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
           ,
           "/home/paulning/study/qemu/trace/control-internal.h", 30,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 30 "/home/paulning/study/qemu/trace/control-internal.h"
      ;
  return ev->name;
}

static inline
# 34 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
    _Bool
# 34 "/home/paulning/study/qemu/trace/control-internal.h"
    trace_event_get_state_static(TraceEvent *ev) {

# 36 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
  ((void)sizeof((
# 36 "/home/paulning/study/qemu/trace/control-internal.h"
                    ev !=
# 36 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
                    ((void *)0))
                    ? 1
                    : 0),
   __extension__({
     if (
# 36 "/home/paulning/study/qemu/trace/control-internal.h"
         ev !=
# 36 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
         ((void *)0))
       ;
     else
       __assert_fail(
# 36 "/home/paulning/study/qemu/trace/control-internal.h"
           "ev != NULL"
# 36 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
           ,
           "/home/paulning/study/qemu/trace/control-internal.h", 36,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 36 "/home/paulning/study/qemu/trace/control-internal.h"
      ;
  return ev->sstate;
}

static inline
# 44 "/home/paulning/study/qemu/trace/control-internal.h" 3 4
    _Bool
# 44 "/home/paulning/study/qemu/trace/control-internal.h"
    trace_event_get_state_dynamic(TraceEvent *ev) {
  return __builtin_expect(!!(trace_events_enabled_count), 0) && *ev->dstate;
}

void trace_event_register_group(TraceEvent **events);
# 215 "/home/paulning/study/qemu/trace/control.h" 2
# 7 "./trace/trace-target_arm.h" 2

extern TraceEvent _TRACE_ARM_GT_RECALC_EVENT;
extern TraceEvent _TRACE_ARM_GT_RECALC_DISABLED_EVENT;
extern TraceEvent _TRACE_ARM_GT_CVAL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_TVAL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_CTL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_IMASK_TOGGLE_EVENT;
extern TraceEvent _TRACE_ARM_GT_CNTVOFF_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_CNTPOFF_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_KVM_ARM_FIXUP_MSI_ROUTE_EVENT;
extern uint16_t _TRACE_ARM_GT_RECALC_DSTATE;
extern uint16_t _TRACE_ARM_GT_RECALC_DISABLED_DSTATE;
extern uint16_t _TRACE_ARM_GT_CVAL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_TVAL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_CTL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_IMASK_TOGGLE_DSTATE;
extern uint16_t _TRACE_ARM_GT_CNTVOFF_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_CNTPOFF_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_KVM_ARM_FIXUP_MSI_ROUTE_DSTATE;
# 39 "./trace/trace-target_arm.h"
# 1 "/home/paulning/study/qemu/include/qemu/error-report.h" 1
# 16 "/home/paulning/study/qemu/include/qemu/error-report.h"
typedef struct Location {

  enum { LOC_NONE, LOC_CMDLINE, LOC_FILE } kind;
  int num;
  const void *ptr;
  struct Location *prev;
} Location;

Location *loc_push_restore(Location *loc);
Location *loc_push_none(Location *loc);
Location *loc_pop(Location *loc);
Location *loc_save(Location *loc);
void loc_restore(Location *loc);
void loc_set_none(void);
void loc_set_cmdline(char **argv, int idx, int cnt);
void loc_set_file(const char *fname, int lno);

int error_vprintf(const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 1, 0)));
int error_printf(const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));

void error_vreport(const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 1, 0)));
void warn_vreport(const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 1, 0)));
void info_vreport(const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 1, 0)));

void error_report(const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
void warn_report(const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));
void info_report(const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));

# 44 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
_Bool
# 44 "/home/paulning/study/qemu/include/qemu/error-report.h"
    error_report_once_cond(
# 44 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
                           _Bool
# 44 "/home/paulning/study/qemu/include/qemu/error-report.h"
                                *printed, const char *fmt, ...)
    __attribute__((__format__ (gnu_printf, 2, 3)));

# 46 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
_Bool
# 46 "/home/paulning/study/qemu/include/qemu/error-report.h"
    warn_report_once_cond(
# 46 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
                          _Bool
# 46 "/home/paulning/study/qemu/include/qemu/error-report.h"
                               *printed, const char *fmt, ...)
    __attribute__((__format__ (gnu_printf, 2, 3)));

void error_init(const char *argv0);
# 73 "/home/paulning/study/qemu/include/qemu/error-report.h"
extern
# 73 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
    _Bool
# 73 "/home/paulning/study/qemu/include/qemu/error-report.h"
        message_with_timestamp;
extern
# 74 "/home/paulning/study/qemu/include/qemu/error-report.h" 3 4
    _Bool
# 74 "/home/paulning/study/qemu/include/qemu/error-report.h"
        error_with_guestname;
extern const char *error_guest_name;
# 40 "./trace/trace-target_arm.h" 2

static inline void _nocheck__trace_arm_gt_recalc(int timer, uint64_t nexttick) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_RECALC_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 51 "./trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 51 "./trace/trace-target_arm.h"
      );
# 4 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_recalc "
               "gt recalc: timer %d next tick 0x%"
# 4 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 4 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer, nexttick);
# 58 "trace/trace-target_arm.h"
    } else {
# 4 "../../../target/arm/trace-events"
      qemu_log("arm_gt_recalc "
               "gt recalc: timer %d next tick 0x%"
# 4 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 4 "../../../target/arm/trace-events"
               "\n",
               timer, nexttick);
# 62 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_recalc(int timer, uint64_t nexttick) {
  if (
# 68 "trace/trace-target_arm.h" 3 4
      1
# 68 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_recalc(timer, nexttick);
  }
}

static inline void _nocheck__trace_arm_gt_recalc_disabled(int timer) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_RECALC_DISABLED_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 82 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 82 "trace/trace-target_arm.h"
      );
# 5 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_recalc_disabled "
               "gt recalc: timer %d timer disabled"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer);
# 89 "trace/trace-target_arm.h"
    } else {
# 5 "../../../target/arm/trace-events"
      qemu_log("arm_gt_recalc_disabled "
               "gt recalc: timer %d timer disabled"
               "\n",
               timer);
# 93 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_recalc_disabled(int timer) {
  if (
# 99 "trace/trace-target_arm.h" 3 4
      1
# 99 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_recalc_disabled(timer);
  }
}

static inline void _nocheck__trace_arm_gt_cval_write(int timer,
                                                     uint64_t value) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_CVAL_WRITE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 113 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 113 "trace/trace-target_arm.h"
      );
# 6 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_cval_write "
               "gt_cval_write: timer %d value 0x%"
# 6 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 6 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer, value);
# 120 "trace/trace-target_arm.h"
    } else {
# 6 "../../../target/arm/trace-events"
      qemu_log("arm_gt_cval_write "
               "gt_cval_write: timer %d value 0x%"
# 6 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 6 "../../../target/arm/trace-events"
               "\n",
               timer, value);
# 124 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_cval_write(int timer, uint64_t value) {
  if (
# 130 "trace/trace-target_arm.h" 3 4
      1
# 130 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_cval_write(timer, value);
  }
}

static inline void _nocheck__trace_arm_gt_tval_write(int timer,
                                                     uint64_t value) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_TVAL_WRITE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 144 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 144 "trace/trace-target_arm.h"
      );
# 7 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_tval_write "
               "gt_tval_write: timer %d value 0x%"
# 7 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 7 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer, value);
# 151 "trace/trace-target_arm.h"
    } else {
# 7 "../../../target/arm/trace-events"
      qemu_log("arm_gt_tval_write "
               "gt_tval_write: timer %d value 0x%"
# 7 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 7 "../../../target/arm/trace-events"
               "\n",
               timer, value);
# 155 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_tval_write(int timer, uint64_t value) {
  if (
# 161 "trace/trace-target_arm.h" 3 4
      1
# 161 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_tval_write(timer, value);
  }
}

static inline void _nocheck__trace_arm_gt_ctl_write(int timer, uint64_t value) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_CTL_WRITE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 175 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 175 "trace/trace-target_arm.h"
      );
# 8 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_ctl_write "
               "gt_ctl_write: timer %d value 0x%"
# 8 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 8 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer, value);
# 182 "trace/trace-target_arm.h"
    } else {
# 8 "../../../target/arm/trace-events"
      qemu_log("arm_gt_ctl_write "
               "gt_ctl_write: timer %d value 0x%"
# 8 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 8 "../../../target/arm/trace-events"
               "\n",
               timer, value);
# 186 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_ctl_write(int timer, uint64_t value) {
  if (
# 192 "trace/trace-target_arm.h" 3 4
      1
# 192 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_ctl_write(timer, value);
  }
}

static inline void _nocheck__trace_arm_gt_imask_toggle(int timer) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_IMASK_TOGGLE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 206 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 206 "trace/trace-target_arm.h"
      );
# 9 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_imask_toggle "
               "gt_ctl_write: timer %d IMASK toggle"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer);
# 213 "trace/trace-target_arm.h"
    } else {
# 9 "../../../target/arm/trace-events"
      qemu_log("arm_gt_imask_toggle "
               "gt_ctl_write: timer %d IMASK toggle"
               "\n",
               timer);
# 217 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_imask_toggle(int timer) {
  if (
# 223 "trace/trace-target_arm.h" 3 4
      1
# 223 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_imask_toggle(timer);
  }
}

static inline void _nocheck__trace_arm_gt_cntvoff_write(uint64_t value) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_CNTVOFF_WRITE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 237 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 237 "trace/trace-target_arm.h"
      );
# 10 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_cntvoff_write "
               "gt_cntvoff_write: value 0x%"
# 10 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 10 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               value);
# 244 "trace/trace-target_arm.h"
    } else {
# 10 "../../../target/arm/trace-events"
      qemu_log("arm_gt_cntvoff_write "
               "gt_cntvoff_write: value 0x%"
# 10 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 10 "../../../target/arm/trace-events"
               "\n",
               value);
# 248 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_cntvoff_write(uint64_t value) {
  if (
# 254 "trace/trace-target_arm.h" 3 4
      1
# 254 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_cntvoff_write(value);
  }
}

static inline void _nocheck__trace_arm_gt_cntpoff_write(uint64_t value) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_CNTPOFF_WRITE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 268 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 268 "trace/trace-target_arm.h"
      );
# 11 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_cntpoff_write "
               "gt_cntpoff_write: value 0x%"
# 11 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 11 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               value);
# 275 "trace/trace-target_arm.h"
    } else {
# 11 "../../../target/arm/trace-events"
      qemu_log("arm_gt_cntpoff_write "
               "gt_cntpoff_write: value 0x%"
# 11 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 11 "../../../target/arm/trace-events"
               "\n",
               value);
# 279 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_cntpoff_write(uint64_t value) {
  if (
# 285 "trace/trace-target_arm.h" 3 4
      1
# 285 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_cntpoff_write(value);
  }
}

static inline void _nocheck__trace_arm_gt_update_irq(int timer, int irqstate) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_ARM_GT_UPDATE_IRQ_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 299 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 299 "trace/trace-target_arm.h"
      );
# 12 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:arm_gt_update_irq "
               "gt_update_irq: timer %d irqstate %d"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               timer, irqstate);
# 306 "trace/trace-target_arm.h"
    } else {
# 12 "../../../target/arm/trace-events"
      qemu_log("arm_gt_update_irq "
               "gt_update_irq: timer %d irqstate %d"
               "\n",
               timer, irqstate);
# 310 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_arm_gt_update_irq(int timer, int irqstate) {
  if (
# 316 "trace/trace-target_arm.h" 3 4
      1
# 316 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_arm_gt_update_irq(timer, irqstate);
  }
}

static inline void _nocheck__trace_kvm_arm_fixup_msi_route(uint64_t iova,
                                                           uint64_t gpa) {
  if (((1) && (__builtin_expect(!!(trace_events_enabled_count), 0) &&
               _TRACE_KVM_ARM_FIXUP_MSI_ROUTE_DSTATE)) &&
      qemu_loglevel_mask((1 << 15))) {
    if (message_with_timestamp) {
      struct timeval _now;
      gettimeofday(&_now,
# 330 "trace/trace-target_arm.h" 3 4
                   ((void *)0)
# 330 "trace/trace-target_arm.h"
      );
# 15 "../../../target/arm/trace-events"
      qemu_log("%d@%zu.%06zu:kvm_arm_fixup_msi_route "
               "MSI iova = 0x%"
# 15 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 15 "../../../target/arm/trace-events"
               " is translated into 0x%"
# 15 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 15 "../../../target/arm/trace-events"
               "\n",
               qemu_get_thread_id(), (size_t)_now.tv_sec, (size_t)_now.tv_usec,
               iova, gpa);
# 337 "trace/trace-target_arm.h"
    } else {
# 15 "../../../target/arm/trace-events"
      qemu_log("kvm_arm_fixup_msi_route "
               "MSI iova = 0x%"
# 15 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 15 "../../../target/arm/trace-events"
               " is translated into 0x%"
# 15 "../../../target/arm/trace-events" 3 4
               "l"
               "x"
# 15 "../../../target/arm/trace-events"
               "\n",
               iova, gpa);
# 341 "trace/trace-target_arm.h"
    }
  }
}

static inline void trace_kvm_arm_fixup_msi_route(uint64_t iova, uint64_t gpa) {
  if (
# 347 "trace/trace-target_arm.h" 3 4
      1
# 347 "trace/trace-target_arm.h"
  ) {
    _nocheck__trace_kvm_arm_fixup_msi_route(iova, gpa);
  }
}
# 2 "../../../target/arm/trace.h" 2
# 12 "../../../target/arm/helper.c" 2
# 1 "../../../target/arm/cpu.h" 1
# 23 "../../../target/arm/cpu.h"
# 1 "../../../target/arm/kvm-consts.h" 1
# 36 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 50 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 82 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 101 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");

_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 117 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 142 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 166 "../../../target/arm/kvm-consts.h"
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
_Static_assert(!(0), "not expecting: "
                     "0");
# 24 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/cpu-float.h" 1

# 1 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 1
# 83 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
# 1 "/home/paulning/study/qemu/include/hw/registerfields.h" 1
# 14 "/home/paulning/study/qemu/include/hw/registerfields.h"
# 1 "/home/paulning/study/qemu/include/qemu/bitops.h" 1
# 16 "/home/paulning/study/qemu/include/qemu/bitops.h"
# 1 "/home/paulning/study/qemu/include/qemu/host-utils.h" 1
# 33 "/home/paulning/study/qemu/include/qemu/host-utils.h"
# 1 "/home/paulning/study/qemu/include/qemu/bswap.h" 1
# 11 "/home/paulning/study/qemu/include/qemu/bswap.h"
static inline uint32_t bswap24(uint32_t x) {
  return (((x & 0x000000ffU) << 16) | ((x & 0x0000ff00U) << 0) |
          ((x & 0x00ff0000U) >> 16));
}

static inline void bswap16s(uint16_t *s) { *s = __builtin_bswap16(*s); }

static inline void bswap24s(uint32_t *s) { *s = bswap24(*s & 0x00ffffffU); }

static inline void bswap32s(uint32_t *s) { *s = __builtin_bswap32(*s); }

static inline void bswap64s(uint64_t *s) { *s = __builtin_bswap64(*s); }
# 135 "/home/paulning/study/qemu/include/qemu/bswap.h"
static inline uint16_t be16_to_cpu(uint16_t v) { return __builtin_bswap16(v); }
static inline uint16_t cpu_to_be16(uint16_t v) { return __builtin_bswap16(v); }
static inline void be16_to_cpus(uint16_t *p) {
  do {
    *p = __builtin_bswap16(*p);
  } while (0);
}
static inline void cpu_to_be16s(uint16_t *p) {
  do {
    *p = __builtin_bswap16(*p);
  } while (0);
}
static inline uint32_t be32_to_cpu(uint32_t v) { return __builtin_bswap32(v); }
static inline uint32_t cpu_to_be32(uint32_t v) { return __builtin_bswap32(v); }
static inline void be32_to_cpus(uint32_t *p) {
  do {
    *p = __builtin_bswap32(*p);
  } while (0);
}
static inline void cpu_to_be32s(uint32_t *p) {
  do {
    *p = __builtin_bswap32(*p);
  } while (0);
}
static inline uint64_t be64_to_cpu(uint64_t v) { return __builtin_bswap64(v); }
static inline uint64_t cpu_to_be64(uint64_t v) { return __builtin_bswap64(v); }
static inline void be64_to_cpus(uint64_t *p) {
  do {
    *p = __builtin_bswap64(*p);
  } while (0);
}
static inline void cpu_to_be64s(uint64_t *p) {
  do {
    *p = __builtin_bswap64(*p);
  } while (0);
}

static inline uint16_t le16_to_cpu(uint16_t v) { return (v); }
static inline uint16_t cpu_to_le16(uint16_t v) { return (v); }
static inline void le16_to_cpus(uint16_t *p) { ; }
static inline void cpu_to_le16s(uint16_t *p) { ; }
static inline uint32_t le32_to_cpu(uint32_t v) { return (v); }
static inline uint32_t cpu_to_le32(uint32_t v) { return (v); }
static inline void le32_to_cpus(uint32_t *p) { ; }
static inline void cpu_to_le32s(uint32_t *p) { ; }
static inline uint64_t le64_to_cpu(uint64_t v) { return (v); }
static inline uint64_t cpu_to_le64(uint64_t v) { return (v); }
static inline void le64_to_cpus(uint64_t *p) { ; }
static inline void cpu_to_le64s(uint64_t *p) { ; }
# 226 "/home/paulning/study/qemu/include/qemu/bswap.h"
static inline int ldub_p(const void *ptr) { return *(uint8_t *)ptr; }

static inline int ldsb_p(const void *ptr) { return *(int8_t *)ptr; }

static inline void stb_p(void *ptr, uint8_t v) { *(uint8_t *)ptr = v; }
# 251 "/home/paulning/study/qemu/include/qemu/bswap.h"
static inline int lduw_he_p(const void *ptr) {
  uint16_t r;
  __builtin_memcpy(&r, ptr, sizeof(r));
  return r;
}

static inline int ldsw_he_p(const void *ptr) {
  int16_t r;
  __builtin_memcpy(&r, ptr, sizeof(r));
  return r;
}

static inline void stw_he_p(void *ptr, uint16_t v) {
  __builtin_memcpy(ptr, &v, sizeof(v));
}

static inline void st24_he_p(void *ptr, uint32_t v) {
  __builtin_memcpy(ptr, &v, 3);
}

static inline int ldl_he_p(const void *ptr) {
  int32_t r;
  __builtin_memcpy(&r, ptr, sizeof(r));
  return r;
}

static inline void stl_he_p(void *ptr, uint32_t v) {
  __builtin_memcpy(ptr, &v, sizeof(v));
}

static inline uint64_t ldq_he_p(const void *ptr) {
  uint64_t r;
  __builtin_memcpy(&r, ptr, sizeof(r));
  return r;
}

static inline void stq_he_p(void *ptr, uint64_t v) {
  __builtin_memcpy(ptr, &v, sizeof(v));
}

static inline int lduw_le_p(const void *ptr) {
  return (uint16_t)(lduw_he_p(ptr));
}

static inline int ldsw_le_p(const void *ptr) {
  return (int16_t)(lduw_he_p(ptr));
}

static inline int ldl_le_p(const void *ptr) { return (ldl_he_p(ptr)); }

static inline uint64_t ldq_le_p(const void *ptr) { return (ldq_he_p(ptr)); }

static inline void stw_le_p(void *ptr, uint16_t v) { stw_he_p(ptr, (v)); }

static inline void st24_le_p(void *ptr, uint32_t v) { st24_he_p(ptr, (v)); }

static inline void stl_le_p(void *ptr, uint32_t v) { stl_he_p(ptr, (v)); }

static inline void stq_le_p(void *ptr, uint64_t v) { stq_he_p(ptr, (v)); }

static inline int lduw_be_p(const void *ptr) {
  return (uint16_t)__builtin_bswap16(lduw_he_p(ptr));
}

static inline int ldsw_be_p(const void *ptr) {
  return (int16_t)__builtin_bswap16(lduw_he_p(ptr));
}

static inline int ldl_be_p(const void *ptr) {
  return __builtin_bswap32(ldl_he_p(ptr));
}

static inline uint64_t ldq_be_p(const void *ptr) {
  return __builtin_bswap64(ldq_he_p(ptr));
}

static inline void stw_be_p(void *ptr, uint16_t v) {
  stw_he_p(ptr, __builtin_bswap16(v));
}

static inline void st24_be_p(void *ptr, uint32_t v) {
  st24_he_p(ptr, bswap24(v));
}

static inline void stl_be_p(void *ptr, uint32_t v) {
  stl_he_p(ptr, __builtin_bswap32(v));
}

static inline void stq_be_p(void *ptr, uint64_t v) {
  stq_he_p(ptr, __builtin_bswap64(v));
}

static inline unsigned long leul_to_cpu(unsigned long v) { return (v); }
# 427 "/home/paulning/study/qemu/include/qemu/bswap.h"
static inline void stn_he_p(void *ptr, int sz, uint64_t v) {
  switch (sz) {
  case 1:
    stb_p(ptr, v);
    break;
  case 2:
    stw_he_p(ptr, v);
    break;
  case 4:
    stl_he_p(ptr, v);
    break;
  case 8:
    stq_he_p(ptr, v);
    break;
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               427, ((const char *)(__func__)),
# 427 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 427 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
static inline uint64_t ldn_he_p(const void *ptr, int sz) {
  switch (sz) {
  case 1:
    return ldub_p(ptr);
  case 2:
    return lduw_he_p(ptr);
  case 4:
    return (uint32_t)ldl_he_p(ptr);
  case 8:
    return ldq_he_p(ptr);
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               427, ((const char *)(__func__)),
# 427 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 427 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
static inline void stn_le_p(void *ptr, int sz, uint64_t v) {
  switch (sz) {
  case 1:
    stb_p(ptr, v);
    break;
  case 2:
    stw_le_p(ptr, v);
    break;
  case 4:
    stl_le_p(ptr, v);
    break;
  case 8:
    stq_le_p(ptr, v);
    break;
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               428, ((const char *)(__func__)),
# 428 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 428 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
static inline uint64_t ldn_le_p(const void *ptr, int sz) {
  switch (sz) {
  case 1:
    return ldub_p(ptr);
  case 2:
    return lduw_le_p(ptr);
  case 4:
    return (uint32_t)ldl_le_p(ptr);
  case 8:
    return ldq_le_p(ptr);
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               428, ((const char *)(__func__)),
# 428 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 428 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
static inline void stn_be_p(void *ptr, int sz, uint64_t v) {
  switch (sz) {
  case 1:
    stb_p(ptr, v);
    break;
  case 2:
    stw_be_p(ptr, v);
    break;
  case 4:
    stl_be_p(ptr, v);
    break;
  case 8:
    stq_be_p(ptr, v);
    break;
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               429, ((const char *)(__func__)),
# 429 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 429 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
static inline uint64_t ldn_be_p(const void *ptr, int sz) {
  switch (sz) {
  case 1:
    return ldub_p(ptr);
  case 2:
    return lduw_be_p(ptr);
  case 4:
    return (uint32_t)ldl_be_p(ptr);
  case 8:
    return ldq_be_p(ptr);
  default:
    do {
      g_assertion_message_expr(((gchar *)0),
                               "/home/paulning/study/qemu/include/qemu/bswap.h",
                               429, ((const char *)(__func__)),
# 429 "/home/paulning/study/qemu/include/qemu/bswap.h" 3 4
                               ((void *)0)
# 429 "/home/paulning/study/qemu/include/qemu/bswap.h"
      );
    } while (0);
  }
}
# 34 "/home/paulning/study/qemu/include/qemu/host-utils.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/int128.h" 1
# 227 "/home/paulning/study/qemu/include/qemu/int128.h"
typedef struct Int128 Int128;
typedef struct Int128 __attribute__((aligned(16))) Int128Aligned;
# 238 "/home/paulning/study/qemu/include/qemu/int128.h"
struct Int128 {

  uint64_t lo;
  int64_t hi;
};

static inline Int128 int128_make64(uint64_t a) {
  return (Int128){.lo = a, .hi = 0};
}

static inline Int128 int128_makes64(int64_t a) {
  return (Int128){.lo = a, .hi = a >> 63};
}

static inline Int128 int128_make128(uint64_t lo, uint64_t hi) {
  return (Int128){.lo = lo, .hi = hi};
}

static inline uint64_t int128_get64(Int128 a) {

# 265 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
  ((void)sizeof((
# 265 "/home/paulning/study/qemu/include/qemu/int128.h"
                    !a.hi
# 265 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 265 "/home/paulning/study/qemu/include/qemu/int128.h"
         !a.hi
# 265 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
     )
       ;
     else
       __assert_fail(
# 265 "/home/paulning/study/qemu/include/qemu/int128.h"
           "!a.hi"
# 265 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/int128.h", 265,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 265 "/home/paulning/study/qemu/include/qemu/int128.h"
      ;
  return a.lo;
}

static inline uint64_t int128_getlo(Int128 a) { return a.lo; }

static inline int64_t int128_gethi(Int128 a) { return a.hi; }

static inline Int128 int128_zero(void) { return int128_make64(0); }

static inline Int128 int128_one(void) { return int128_make64(1); }

static inline Int128 int128_2_64(void) { return int128_make128(0, 1); }

static inline Int128 int128_exts64(int64_t a) {
  return int128_make128(a, (a < 0) ? -1 : 0);
}

static inline Int128 int128_not(Int128 a) {
  return int128_make128(~a.lo, ~a.hi);
}

static inline Int128 int128_and(Int128 a, Int128 b) {
  return int128_make128(a.lo & b.lo, a.hi & b.hi);
}

static inline Int128 int128_or(Int128 a, Int128 b) {
  return int128_make128(a.lo | b.lo, a.hi | b.hi);
}

static inline Int128 int128_xor(Int128 a, Int128 b) {
  return int128_make128(a.lo ^ b.lo, a.hi ^ b.hi);
}

static inline Int128 int128_rshift(Int128 a, int n) {
  int64_t h;
  if (!n) {
    return a;
  }
  h = a.hi >> (n & 63);
  if (n >= 64) {
    return int128_make128(h, h >> 63);
  } else {
    return int128_make128((a.lo >> n) | ((uint64_t)a.hi << (64 - n)), h);
  }
}

static inline Int128 int128_urshift(Int128 a, int n) {
  uint64_t h = a.hi;
  if (!n) {
    return a;
  }
  h = h >> (n & 63);
  if (n >= 64) {
    return int128_make64(h);
  } else {
    return int128_make128((a.lo >> n) | ((uint64_t)a.hi << (64 - n)), h);
  }
}

static inline Int128 int128_lshift(Int128 a, int n) {
  uint64_t l = a.lo << (n & 63);
  if (n >= 64) {
    return int128_make128(0, l);
  } else if (n > 0) {
    return int128_make128(l, (a.hi << n) | (a.lo >> (64 - n)));
  }
  return a;
}

static inline Int128 int128_add(Int128 a, Int128 b) {
  uint64_t lo = a.lo + b.lo;

  return int128_make128(lo, (uint64_t)a.hi + b.hi + (lo < a.lo));
}

static inline Int128 int128_neg(Int128 a) {
  uint64_t lo = -a.lo;
  return int128_make128(lo, ~(uint64_t)a.hi + !lo);
}

static inline Int128 int128_sub(Int128 a, Int128 b) {
  return int128_make128(a.lo - b.lo, (uint64_t)a.hi - b.hi - (a.lo < b.lo));
}

static inline
# 382 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 382 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_nonneg(Int128 a) {
  return a.hi >= 0;
}

static inline
# 387 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 387 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_eq(Int128 a, Int128 b) {
  return a.lo == b.lo && a.hi == b.hi;
}

static inline
# 392 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 392 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_ne(Int128 a, Int128 b) {
  return !int128_eq(a, b);
}

static inline
# 397 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 397 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_ge(Int128 a, Int128 b) {
  return a.hi > b.hi || (a.hi == b.hi && a.lo >= b.lo);
}

static inline
# 402 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 402 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_uge(Int128 a, Int128 b) {
  return (uint64_t)a.hi > (uint64_t)b.hi || (a.hi == b.hi && a.lo >= b.lo);
}

static inline
# 407 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 407 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_lt(Int128 a, Int128 b) {
  return !int128_ge(a, b);
}

static inline
# 412 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 412 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_ult(Int128 a, Int128 b) {
  return !int128_uge(a, b);
}

static inline
# 417 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 417 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_le(Int128 a, Int128 b) {
  return int128_ge(b, a);
}

static inline
# 422 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 422 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_gt(Int128 a, Int128 b) {
  return !int128_le(a, b);
}

static inline
# 427 "/home/paulning/study/qemu/include/qemu/int128.h" 3 4
    _Bool
# 427 "/home/paulning/study/qemu/include/qemu/int128.h"
    int128_nz(Int128 a) {
  return a.lo || a.hi;
}

static inline Int128 int128_min(Int128 a, Int128 b) {
  return int128_le(a, b) ? a : b;
}

static inline Int128 int128_max(Int128 a, Int128 b) {
  return int128_ge(a, b) ? a : b;
}

static inline void int128_addto(Int128 *a, Int128 b) { *a = int128_add(*a, b); }

static inline void int128_subfrom(Int128 *a, Int128 b) {
  *a = int128_sub(*a, b);
}

static inline Int128 bswap128(Int128 a) {
  return int128_make128(__builtin_bswap64(a.hi), __builtin_bswap64(a.lo));
}

static inline int clz128(Int128 a) {
  if (a.hi) {
    return __builtin_clzll(a.hi);
  } else {
    return (a.lo) ? __builtin_clzll(a.lo) + 64 : 128;
  }
}

Int128 int128_divu(Int128, Int128);
Int128 int128_remu(Int128, Int128);
Int128 int128_divs(Int128, Int128);
Int128 int128_rems(Int128, Int128);

static inline void bswap128s(Int128 *s) { *s = bswap128(*s); }
# 487 "/home/paulning/study/qemu/include/qemu/int128.h"
typedef union {
  __uint128_t u;
  __int128_t i;
  Int128 s;
} Int128Alias __attribute__((transparent_union));
# 35 "/home/paulning/study/qemu/include/qemu/host-utils.h" 2

static inline void mulu64(uint64_t *plow, uint64_t *phigh, uint64_t a,
                          uint64_t b) {
  __uint128_t r = (__uint128_t)a * b;
  *plow = r;
  *phigh = r >> 64;
}

static inline void muls64(uint64_t *plow, uint64_t *phigh, int64_t a,
                          int64_t b) {
  __int128_t r = (__int128_t)a * b;
  *plow = r;
  *phigh = r >> 64;
}

static inline uint64_t muldiv64(uint64_t a, uint32_t b, uint32_t c) {
  return (__int128_t)a * b / c;
}

static inline uint64_t muldiv64_round_up(uint64_t a, uint32_t b, uint32_t c) {
  return ((__int128_t)a * b + c - 1) / c;
}

static inline uint64_t divu128(uint64_t *plow, uint64_t *phigh,
                               uint64_t divisor) {
  __uint128_t dividend = ((__uint128_t)*phigh << 64) | *plow;
  __uint128_t result = dividend / divisor;

  *plow = result;
  *phigh = result >> 64;
  return dividend % divisor;
}

static inline int64_t divs128(uint64_t *plow, int64_t *phigh, int64_t divisor) {
  __int128_t dividend = ((__int128_t)*phigh << 64) | *plow;
  __int128_t result = dividend / divisor;

  *plow = result;
  *phigh = result >> 64;
  return dividend % divisor;
}
# 139 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clz8(uint8_t val) {
  return val ? __builtin_clz(val) - 24 : 8;
}
# 154 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clz16(uint16_t val) {
  return val ? __builtin_clz(val) - 16 : 16;
}
# 166 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clz32(uint32_t val) { return val ? __builtin_clz(val) : 32; }

static inline int clo32(uint32_t val) { return clz32(~val); }
# 189 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clz64(uint64_t val) {
  return val ? __builtin_clzll(val) : 64;
}

static inline int clo64(uint64_t val) { return clz64(~val); }
# 212 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int ctz8(uint8_t val) { return val ? __builtin_ctz(val) : 8; }
# 224 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int ctz16(uint16_t val) { return val ? __builtin_ctz(val) : 16; }
# 236 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int ctz32(uint32_t val) { return val ? __builtin_ctz(val) : 32; }

static inline int cto32(uint32_t val) { return ctz32(~val); }
# 259 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int ctz64(uint64_t val) {
  return val ? __builtin_ctzll(val) : 64;
}

static inline int cto64(uint64_t val) { return ctz64(~val); }
# 282 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clrsb32(uint32_t val) { return __builtin_clrsb(val); }
# 298 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline int clrsb64(uint64_t val) { return __builtin_clrsbll(val); }

static inline int ctpop8(uint8_t val) { return __builtin_popcount(val); }

static inline int parity8(uint8_t val) { return __builtin_parity(val); }

static inline int ctpop16(uint16_t val) { return __builtin_popcount(val); }

static inline int ctpop32(uint32_t val) { return __builtin_popcount(val); }

static inline int ctpop64(uint64_t val) { return __builtin_popcountll(val); }

static inline uint8_t revbit8(uint8_t x) {

  x = ((x & 0xf0) >> 4) | ((x & 0x0f) << 4);

  x = ((x & 0x88) >> 3) | ((x & 0x44) >> 1) | ((x & 0x22) << 1) |
      ((x & 0x11) << 3);
  return x;
}

static inline uint16_t revbit16(uint16_t x) {

  x = __builtin_bswap16(x);

  x = ((x & 0xf0f0) >> 4) | ((x & 0x0f0f) << 4);

  x = ((x & 0x8888) >> 3) | ((x & 0x4444) >> 1) | ((x & 0x2222) << 1) |
      ((x & 0x1111) << 3);
  return x;
}

static inline uint32_t revbit32(uint32_t x) {

  x = __builtin_bswap32(x);

  x = ((x & 0xf0f0f0f0u) >> 4) | ((x & 0x0f0f0f0fu) << 4);

  x = ((x & 0x88888888u) >> 3) | ((x & 0x44444444u) >> 1) |
      ((x & 0x22222222u) << 1) | ((x & 0x11111111u) << 3);
  return x;
}

static inline uint64_t revbit64(uint64_t x) {

  x = __builtin_bswap64(x);

  x = ((x & 0xf0f0f0f0f0f0f0f0ull) >> 4) | ((x & 0x0f0f0f0f0f0f0f0full) << 4);

  x = ((x & 0x8888888888888888ull) >> 3) | ((x & 0x4444444444444444ull) >> 1) |
      ((x & 0x2222222222222222ull) << 1) | ((x & 0x1111111111111111ull) << 3);
  return x;
}

static inline uint64_t uabs64(int64_t v) { return v < 0 ? -v : v; }
# 458 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 458 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 458 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    sadd32_overflow(int32_t x, int32_t y, int32_t *ret) {
  return __builtin_add_overflow(x, y, ret);
}
# 471 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 471 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 471 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    sadd64_overflow(int64_t x, int64_t y, int64_t *ret) {
  return __builtin_add_overflow(x, y, ret);
}
# 484 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 484 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 484 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    uadd32_overflow(uint32_t x, uint32_t y, uint32_t *ret) {
  return __builtin_add_overflow(x, y, ret);
}
# 497 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 497 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 497 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    uadd64_overflow(uint64_t x, uint64_t y, uint64_t *ret) {
  return __builtin_add_overflow(x, y, ret);
}
# 511 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 511 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 511 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    ssub32_overflow(int32_t x, int32_t y, int32_t *ret) {
  return __builtin_sub_overflow(x, y, ret);
}
# 525 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 525 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 525 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    ssub64_overflow(int64_t x, int64_t y, int64_t *ret) {
  return __builtin_sub_overflow(x, y, ret);
}
# 539 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 539 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 539 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    usub32_overflow(uint32_t x, uint32_t y, uint32_t *ret) {
  return __builtin_sub_overflow(x, y, ret);
}
# 553 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 553 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 553 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    usub64_overflow(uint64_t x, uint64_t y, uint64_t *ret) {
  return __builtin_sub_overflow(x, y, ret);
}
# 566 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 566 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 566 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    smul32_overflow(int32_t x, int32_t y, int32_t *ret) {
  return __builtin_mul_overflow(x, y, ret);
}
# 579 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 579 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 579 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    smul64_overflow(int64_t x, int64_t y, int64_t *ret) {
  return __builtin_mul_overflow(x, y, ret);
}
# 592 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 592 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 592 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    umul32_overflow(uint32_t x, uint32_t y, uint32_t *ret) {
  return __builtin_mul_overflow(x, y, ret);
}
# 605 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 605 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 605 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    umul64_overflow(uint64_t x, uint64_t y, uint64_t *ret) {
  return __builtin_mul_overflow(x, y, ret);
}

static inline
# 615 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 615 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    mulu128(uint64_t *plow, uint64_t *phigh, uint64_t factor) {

# 618 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
  _Bool
# 618 "/home/paulning/study/qemu/include/qemu/host-utils.h"
      res;
  __uint128_t r;
  __uint128_t f = ((__uint128_t)*phigh << 64) | *plow;
  res = __builtin_mul_overflow(f, factor, &r);

  *plow = r;
  *phigh = r >> 64;

  return res;
# 643 "/home/paulning/study/qemu/include/qemu/host-utils.h"
}
# 653 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline uint64_t uadd64_carry(uint64_t x, uint64_t y,
# 653 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
                                    _Bool
# 653 "/home/paulning/study/qemu/include/qemu/host-utils.h"
                                        *pcarry) {

# 661 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
  _Bool
# 661 "/home/paulning/study/qemu/include/qemu/host-utils.h"
      c = *pcarry;

  c = uadd64_overflow(x, c, &x);
  c |= uadd64_overflow(x, y, &x);
  *pcarry = c;
  return x;
}
# 678 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline uint64_t usub64_borrow(uint64_t x, uint64_t y,
# 678 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
                                     _Bool
# 678 "/home/paulning/study/qemu/include/qemu/host-utils.h"
                                         *pborrow) {

# 686 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
  _Bool
# 686 "/home/paulning/study/qemu/include/qemu/host-utils.h"
      b = *pborrow;
  b = usub64_overflow(x, b, &x);
  b |= usub64_overflow(x, y, &x);
  *pborrow = b;
  return x;
}
# 714 "/home/paulning/study/qemu/include/qemu/host-utils.h"
static inline
# 714 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
    _Bool
# 714 "/home/paulning/study/qemu/include/qemu/host-utils.h"
    is_power_of_2(uint64_t value) {
  if (!value) {
    return
# 717 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
        0
# 717 "/home/paulning/study/qemu/include/qemu/host-utils.h"
        ;
  }

  return !(value & (value - 1));
}

static inline uint64_t pow2floor(uint64_t value) {
  if (!value) {

    return 0;
  }
  return 0x8000000000000000ull >> clz64(value);
}

static inline uint64_t pow2ceil(uint64_t value) {
  int n = clz64(value - 1);

  if (!n) {

    return !value;
  }
  return 0x8000000000000000ull >> (n - 1);
}

static inline uint32_t pow2roundup32(uint32_t x) {
  x |= (x >> 1);
  x |= (x >> 2);
  x |= (x >> 4);
  x |= (x >> 8);
  x |= (x >> 16);
  return x + 1;
}
# 775 "/home/paulning/study/qemu/include/qemu/host-utils.h"
void urshift(uint64_t *plow, uint64_t *phigh, int32_t shift);
# 789 "/home/paulning/study/qemu/include/qemu/host-utils.h"
void ulshift(uint64_t *plow, uint64_t *phigh, int32_t shift,
# 789 "/home/paulning/study/qemu/include/qemu/host-utils.h" 3 4
             _Bool
# 789 "/home/paulning/study/qemu/include/qemu/host-utils.h"
                 *overflow);

static inline uint64_t udiv_qrnnd(uint64_t *r, uint64_t n1, uint64_t n0,
                                  uint64_t d) {

  uint64_t q;
  asm("divq %4" : "=a"(q), "=d"(*r) : "0"(n0), "1"(n1), "rm"(d));
  return q;
# 866 "/home/paulning/study/qemu/include/qemu/host-utils.h"
}

Int128 divu256(Int128 *plow, Int128 *phigh, Int128 divisor);
Int128 divs256(Int128 *plow, Int128 *phigh, Int128 divisor);
# 17 "/home/paulning/study/qemu/include/qemu/bitops.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/atomic.h" 1
# 18 "/home/paulning/study/qemu/include/qemu/atomic.h"
# 1 "/home/paulning/study/qemu/include/qemu/compiler.h" 1
# 19 "/home/paulning/study/qemu/include/qemu/atomic.h" 2
# 247 "/home/paulning/study/qemu/include/qemu/atomic.h"
typedef int64_t aligned_int64_t __attribute__((aligned(8)));
typedef uint64_t aligned_uint64_t __attribute__((aligned(8)));
# 261 "/home/paulning/study/qemu/include/qemu/atomic.h"
static inline void qatomic64_init(void) {}
# 18 "/home/paulning/study/qemu/include/qemu/bitops.h" 2
# 67 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline void set_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 69 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 70 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));

  *p |= mask;
}

static inline void set_bit_atomic(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 82 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 83 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));

  ((void)__atomic_fetch_or(p, mask, 5));
}

static inline void clear_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 95 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 96 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));

  *p &= ~mask;
}

static inline void clear_bit_atomic(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 108 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 109 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));

  return ((void)__atomic_fetch_and(p, ~mask, 5));
}

static inline void change_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 121 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 122 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));

  *p ^= mask;
}

static inline int test_and_set_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 134 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 135 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));
  unsigned long old = *p;

  *p = old | mask;
  return (old & mask) != 0;
}

static inline int test_and_clear_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 149 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 150 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));
  unsigned long old = *p;

  *p = old & ~mask;
  return (old & mask) != 0;
}

static inline int test_and_change_bit(long nr, unsigned long *addr) {
  unsigned long mask = (1UL << ((nr) % (sizeof(unsigned long) * 8
# 164 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                        )));
  unsigned long *p = addr + ((nr) / (sizeof(unsigned long) * 8
# 165 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                     ));
  unsigned long old = *p;

  *p = old ^ mask;
  return (old & mask) != 0;
}

static inline int test_bit(long nr, const unsigned long *addr) {
  return 1UL & (addr[((nr) / (sizeof(unsigned long) * 8
# 179 "/home/paulning/study/qemu/include/qemu/bitops.h"
                              ))] >>
                (nr & ((sizeof(unsigned long) * 8
# 179 "/home/paulning/study/qemu/include/qemu/bitops.h"
                        ) -
                       1)));
}
# 190 "/home/paulning/study/qemu/include/qemu/bitops.h"
unsigned long find_last_bit(const unsigned long *addr, unsigned long size);
# 202 "/home/paulning/study/qemu/include/qemu/bitops.h"
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
                            unsigned long offset);
# 216 "/home/paulning/study/qemu/include/qemu/bitops.h"
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
                                 unsigned long offset);
# 228 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline unsigned long find_first_bit(const unsigned long *addr,
                                           unsigned long size) {
  unsigned long result, tmp;

  for (result = 0; result < size; result += (sizeof(unsigned long) * 8
# 233 "/home/paulning/study/qemu/include/qemu/bitops.h"
                                             )) {
    tmp = *addr++;
    if (tmp) {
      result += ctz64(tmp);
      return result < size ? result : size;
    }
  }

  return size;
}
# 252 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline unsigned long find_first_zero_bit(const unsigned long *addr,
                                                unsigned long size) {
  return find_next_zero_bit(addr, size, 0);
}
# 270 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline void set_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);

  *p |= mask;
}

static inline void set_bit32_atomic(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);

  ((void)__atomic_fetch_or(p, mask, 5));
}

static inline void clear_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);

  *p &= ~mask;
}

static inline void clear_bit32_atomic(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);

  return ((void)__atomic_fetch_and(p, ~mask, 5));
}

static inline void change_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);

  *p ^= mask;
}

static inline int test_and_set_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);
  uint32_t old = *p;

  *p = old | mask;
  return (old & mask) != 0;
}

static inline int test_and_clear_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);
  uint32_t old = *p;

  *p = old & ~mask;
  return (old & mask) != 0;
}

static inline int test_and_change_bit32(long nr, uint32_t *addr) {
  uint32_t mask = (1UL << ((nr) % 32));
  uint32_t *p = addr + ((nr) / 32);
  uint32_t old = *p;

  *p = old ^ mask;
  return (old & mask) != 0;
}

static inline int test_bit32(long nr, const uint32_t *addr) {
  return 1U & (addr[((nr) / 32)] >> (nr & 31));
}
# 398 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint8_t rol8(uint8_t word, unsigned int shift) {
  return (word << (shift & 7)) | (word >> (-shift & 7));
}

static inline uint8_t ror8(uint8_t word, unsigned int shift) {
  return (word >> (shift & 7)) | (word << (-shift & 7));
}

static inline uint16_t rol16(uint16_t word, unsigned int shift) {
  return (word << (shift & 15)) | (word >> (-shift & 15));
}

static inline uint16_t ror16(uint16_t word, unsigned int shift) {
  return (word >> (shift & 15)) | (word << (-shift & 15));
}

static inline uint32_t rol32(uint32_t word, unsigned int shift) {
  return (word << (shift & 31)) | (word >> (-shift & 31));
}

static inline uint32_t ror32(uint32_t word, unsigned int shift) {
  return (word >> (shift & 31)) | (word << (-shift & 31));
}

static inline uint64_t rol64(uint64_t word, unsigned int shift) {
  return (word << (shift & 63)) | (word >> (-shift & 63));
}

static inline uint64_t ror64(uint64_t word, unsigned int shift) {
  return (word >> (shift & 63)) | (word << (-shift & 63));
}

static inline uint32_t hswap32(uint32_t h) { return rol32(h, 16); }

static inline uint64_t hswap64(uint64_t h) {
  uint64_t m = 0x0000ffff0000ffffull;
  h = rol64(h, 32);
  return ((h & m) << 16) | ((h >> 16) & m);
}

static inline uint64_t wswap64(uint64_t h) { return rol64(h, 32); }
# 515 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint32_t extract32(uint32_t value, int start, int length) {

# 517 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 32 - start
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 32 - start
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 32 - start"
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 517,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 517 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  return (value >> start) & (~0U >> (32 - length));
}
# 534 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint8_t extract8(uint8_t value, int start, int length) {

# 536 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 8 - start
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 8 - start
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 8 - start"
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 536,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 536 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  return extract32(value, start, length);
}
# 553 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint16_t extract16(uint16_t value, int start, int length) {

# 555 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 16 - start
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 16 - start
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 16 - start"
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 555,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 555 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  return extract32(value, start, length);
}
# 572 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint64_t extract64(uint64_t value, int start, int length) {

# 574 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 64 - start
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 64 - start
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 64 - start"
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 574,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 574 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  return (value >> start) & (~0ULL >> (64 - length));
}
# 594 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline int32_t sextract32(uint32_t value, int start, int length) {

# 596 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 32 - start
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 32 - start
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 32 - start"
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 596,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 596 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;

  return ((int32_t)(value << (32 - length - start))) >> (32 - length);
}
# 619 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline int64_t sextract64(uint64_t value, int start, int length) {

# 621 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 64 - start
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 64 - start
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 64 - start"
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 621,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 621 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;

  return ((int64_t)(value << (64 - length - start))) >> (64 - length);
}
# 645 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint32_t deposit32(uint32_t value, int start, int length,
                                 uint32_t fieldval) {
  uint32_t mask;

# 649 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 32 - start
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 32 - start
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 32 - start"
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 649,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 649 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  mask = (~0U >> (32 - length)) << start;
  return (value & ~mask) | ((fieldval << start) & mask);
}
# 671 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint64_t deposit64(uint64_t value, int start, int length,
                                 uint64_t fieldval) {
  uint64_t mask;

# 675 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
  ((void)sizeof((
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h"
                    start >= 0 && length > 0 && length <= 64 - start
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h"
         start >= 0 && length > 0 && length <= 64 - start
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
     )
       ;
     else
       __assert_fail(
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h"
           "start >= 0 && length > 0 && length <= 64 - start"
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/bitops.h", 675,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 675 "/home/paulning/study/qemu/include/qemu/bitops.h"
      ;
  mask = (~0ULL >> (64 - length)) << start;
  return (value & ~mask) | ((fieldval << start) & mask);
}
# 697 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint32_t half_shuffle32(uint32_t x) {

  x = ((x & 0xFF00) << 8) | (x & 0x00FF);
  x = ((x << 4) | x) & 0x0F0F0F0F;
  x = ((x << 2) | x) & 0x33333333;
  x = ((x << 1) | x) & 0x55555555;
  return x;
}
# 726 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint64_t half_shuffle64(uint64_t x) {

  x = ((x & 0xFFFF0000ULL) << 16) | (x & 0xFFFF);
  x = ((x << 8) | x) & 0x00FF00FF00FF00FFULL;
  x = ((x << 4) | x) & 0x0F0F0F0F0F0F0F0FULL;
  x = ((x << 2) | x) & 0x3333333333333333ULL;
  x = ((x << 1) | x) & 0x5555555555555555ULL;
  return x;
}
# 756 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint32_t half_unshuffle32(uint32_t x) {

  x &= 0x55555555;
  x = ((x >> 1) | x) & 0x33333333;
  x = ((x >> 2) | x) & 0x0F0F0F0F;
  x = ((x >> 4) | x) & 0x00FF00FF;
  x = ((x >> 8) | x) & 0x0000FFFF;
  return x;
}
# 786 "/home/paulning/study/qemu/include/qemu/bitops.h"
static inline uint64_t half_unshuffle64(uint64_t x) {

  x &= 0x5555555555555555ULL;
  x = ((x >> 1) | x) & 0x3333333333333333ULL;
  x = ((x >> 2) | x) & 0x0F0F0F0F0F0F0F0FULL;
  x = ((x >> 4) | x) & 0x00FF00FF00FF00FFULL;
  x = ((x >> 8) | x) & 0x0000FFFF0000FFFFULL;
  x = ((x >> 16) | x) & 0x00000000FFFFFFFFULL;
  return x;
}
# 15 "/home/paulning/study/qemu/include/hw/registerfields.h" 2
# 84 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 2

typedef uint16_t float16;
typedef uint32_t float32;
typedef uint64_t float64;
# 101 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef struct {
  uint64_t low;
  uint16_t high;
} floatx80;

typedef struct {

  uint64_t low, high;

} float128;

typedef uint16_t bfloat16;
# 133 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef enum __attribute__((__packed__)) {
  float_round_nearest_even = 0,
  float_round_down = 1,
  float_round_up = 2,
  float_round_to_zero = 3,
  float_round_ties_away = 4,

  float_round_to_odd = 5,

  float_round_to_odd_inf = 6,

  float_round_nearest_even_max = 7,
} FloatRoundMode;

enum {
  float_flag_invalid = 0x0001,
  float_flag_divbyzero = 0x0002,
  float_flag_overflow = 0x0004,
  float_flag_underflow = 0x0008,
  float_flag_inexact = 0x0010,

  float_flag_input_denormal_flushed = 0x0020,

  float_flag_output_denormal_flushed = 0x0040,
  float_flag_invalid_isi = 0x0080,
  float_flag_invalid_imz = 0x0100,
  float_flag_invalid_idi = 0x0200,
  float_flag_invalid_zdz = 0x0400,
  float_flag_invalid_sqrt = 0x0800,
  float_flag_invalid_cvti = 0x1000,
  float_flag_invalid_snan = 0x2000,

  float_flag_input_denormal_used = 0x4000,
};

typedef enum __attribute__((__packed__)) {
  floatx80_precision_x,
  floatx80_precision_d,
  floatx80_precision_s,
} FloatX80RoundPrec;
# 198 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef enum __attribute__((__packed__)) {

  float_2nan_prop_none = 0,

  float_2nan_prop_s_ab,

  float_2nan_prop_s_ba,

  float_2nan_prop_ab,

  float_2nan_prop_ba,
# 220 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
  float_2nan_prop_x87,
} Float2NaNPropRule;
# 249 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
enum { R_3NAN_1ST_SHIFT = (0) };
enum { R_3NAN_1ST_LENGTH = (2) };
enum { R_3NAN_1ST_MASK = (((~0ULL) >> (64 - (2))) << (0)) };
enum { R_3NAN_2ND_SHIFT = (2) };
enum { R_3NAN_2ND_LENGTH = (2) };
enum { R_3NAN_2ND_MASK = (((~0ULL) >> (64 - (2))) << (2)) };
enum { R_3NAN_3RD_SHIFT = (4) };
enum { R_3NAN_3RD_LENGTH = (2) };
enum { R_3NAN_3RD_MASK = (((~0ULL) >> (64 - (2))) << (4)) };
enum { R_3NAN_SNAN_SHIFT = (6) };
enum { R_3NAN_SNAN_LENGTH = (1) };
enum { R_3NAN_SNAN_MASK = (((~0ULL) >> (64 - (1))) << (6)) };

typedef enum __attribute__((__packed__)) {
  float_3nan_prop_none = 0,
  float_3nan_prop_abc = ((0 << R_3NAN_1ST_SHIFT) | (1 << R_3NAN_2ND_SHIFT) |
                         (2 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_acb = ((0 << R_3NAN_1ST_SHIFT) | (2 << R_3NAN_2ND_SHIFT) |
                         (1 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_bac = ((1 << R_3NAN_1ST_SHIFT) | (0 << R_3NAN_2ND_SHIFT) |
                         (2 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_bca = ((1 << R_3NAN_1ST_SHIFT) | (2 << R_3NAN_2ND_SHIFT) |
                         (0 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_cab = ((2 << R_3NAN_1ST_SHIFT) | (0 << R_3NAN_2ND_SHIFT) |
                         (1 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_cba = ((2 << R_3NAN_1ST_SHIFT) | (1 << R_3NAN_2ND_SHIFT) |
                         (0 << R_3NAN_3RD_SHIFT)),
  float_3nan_prop_s_abc = float_3nan_prop_abc | R_3NAN_SNAN_MASK,
  float_3nan_prop_s_acb = float_3nan_prop_acb | R_3NAN_SNAN_MASK,
  float_3nan_prop_s_bac = float_3nan_prop_bac | R_3NAN_SNAN_MASK,
  float_3nan_prop_s_bca = float_3nan_prop_bca | R_3NAN_SNAN_MASK,
  float_3nan_prop_s_cab = float_3nan_prop_cab | R_3NAN_SNAN_MASK,
  float_3nan_prop_s_cba = float_3nan_prop_cba | R_3NAN_SNAN_MASK,
} Float3NaNPropRule;
# 286 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef enum __attribute__((__packed__)) {

  float_infzeronan_none = 0,

  float_infzeronan_dnan_never = 1,

  float_infzeronan_dnan_always = 2,

  float_infzeronan_dnan_if_qnan = 3,
# 304 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
  float_infzeronan_suppress_invalid = (1 << 7),
} FloatInfZeroNaNRule;
# 318 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef enum __attribute__((__packed__)) {
  float_ftz_after_rounding = 0,
  float_ftz_before_rounding = 1,
} FloatFTZDetection;
# 330 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef enum __attribute__((__packed__)) {

  floatx80_default_inf_int_bit_is_zero = 1,

  floatx80_pseudo_inf_valid = 2,

  floatx80_pseudo_nan_valid = 4,

  floatx80_unnormal_valid = 8,
# 370 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
  floatx80_pseudo_denormal_valid = 16,
} FloatX80Behaviour;
# 380 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
typedef struct float_status {
  uint16_t float_exception_flags;
  FloatRoundMode float_rounding_mode;
  FloatX80RoundPrec floatx80_rounding_precision;
  FloatX80Behaviour floatx80_behaviour;
  Float2NaNPropRule float_2nan_prop_rule;
  Float3NaNPropRule float_3nan_prop_rule;
  FloatInfZeroNaNRule float_infzeronan_rule;

# 388 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 388 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      tininess_before_rounding;

# 390 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 390 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      flush_to_zero;

  FloatFTZDetection ftz_detection;

# 394 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 394 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      flush_inputs_to_zero;

# 395 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 395 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      default_nan_mode;
# 405 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
  uint8_t default_nan_pattern;

# 411 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 411 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      snan_bit_is_one;

# 412 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 412 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      no_signaling_nans;

# 414 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 414 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      rebias_overflow;

# 416 "/home/paulning/study/qemu/include/fpu/softfloat-types.h" 3 4
  _Bool
# 416 "/home/paulning/study/qemu/include/fpu/softfloat-types.h"
      rebias_underflow;
} float_status;
# 5 "/home/paulning/study/qemu/include/qemu/cpu-float.h" 2

typedef union {
  float32 f;
  uint32_t l;
} CPU_FloatU;

typedef union {
  float64 d;

  struct {
    uint32_t lower;
    uint32_t upper;
  } l;

  uint64_t ll;
} CPU_DoubleU;

typedef union {
  floatx80 d;
  struct {
    uint64_t lower;
    uint16_t upper;
  } l;
} CPU_LDoubleU;

typedef union {
  float128 q;
# 51 "/home/paulning/study/qemu/include/qemu/cpu-float.h"
  struct {
    uint32_t lowest;
    uint32_t lower;
    uint32_t upper;
    uint32_t upmost;
  } l;
  struct {
    uint64_t lower;
    uint64_t upper;
  } ll;

} CPU_QuadU;
# 25 "../../../target/arm/cpu.h" 2

# 1 "../../../target/arm/cpu-qom.h" 1
# 23 "../../../target/arm/cpu-qom.h"
# 1 "/home/paulning/study/qemu/include/hw/core/cpu.h" 1
# 23 "/home/paulning/study/qemu/include/hw/core/cpu.h"
# 1 "/home/paulning/study/qemu/include/hw/qdev-core.h" 1

# 1 "/home/paulning/study/qemu/include/qemu/atomic.h" 1
# 5 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/queue.h" 1
# 385 "/home/paulning/study/qemu/include/qemu/queue.h"
typedef struct QTailQLink {
  void *tql_next;
  struct QTailQLink *tql_prev;
} QTailQLink;
# 6 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/bitmap.h" 1
# 83 "/home/paulning/study/qemu/include/qemu/bitmap.h"
int slow_bitmap_empty(const unsigned long *bitmap, long bits);
int slow_bitmap_full(const unsigned long *bitmap, long bits);
int slow_bitmap_equal(const unsigned long *bitmap1,
                      const unsigned long *bitmap2, long bits);
void slow_bitmap_complement(unsigned long *dst, const unsigned long *src,
                            long bits);
int slow_bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
                    const unsigned long *bitmap2, long bits);
void slow_bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
                    const unsigned long *bitmap2, long bits);
void slow_bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
                     const unsigned long *bitmap2, long bits);
int slow_bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
                       const unsigned long *bitmap2, long bits);
int slow_bitmap_intersects(const unsigned long *bitmap1,
                           const unsigned long *bitmap2, long bits);
long slow_bitmap_count_one(const unsigned long *bitmap, long nbits);

static inline unsigned long *bitmap_try_new(long nbits) {
  long nelem = (((nbits) +
                 (8
# 103 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                  * sizeof(long)) -
                 1) /
                (8
# 103 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                 * sizeof(long)));
  return ((unsigned long *)g_try_malloc0_n((nelem), sizeof(unsigned long)));
}

static inline unsigned long *bitmap_new(long nbits) {
  long nelem = (((nbits) +
                 (8
# 109 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                  * sizeof(long)) -
                 1) /
                (8
# 109 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                 * sizeof(long)));
  return ((unsigned long *)g_malloc0_n((nelem), sizeof(unsigned long)));
}

static inline void bitmap_zero(unsigned long *dst, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 115 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    *dst = 0UL;
  } else {
    long len = (((nbits) +
                 (8
# 118 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                  * sizeof(long)) -
                 1) /
                (8
# 118 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                 * sizeof(long))) *
               sizeof(unsigned long);
    memset(dst, 0, len);
  }
}

static inline void bitmap_fill(unsigned long *dst, long nbits) {
  size_t nlongs = (((nbits) +
                    (8
# 125 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                     * sizeof(long)) -
                    1) /
                   (8
# 125 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                    * sizeof(long)));
  if (!((nbits) <= (sizeof(unsigned long) * 8
# 126 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                    ))) {
    long len = (nlongs - 1) * sizeof(unsigned long);
    memset(dst, 0xff, len);
  }
  dst[nlongs - 1] = (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 130 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                           ) -
                                          1)));
}

static inline void bitmap_copy(unsigned long *dst, const unsigned long *src,
                               long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 136 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    *dst = *src;
  } else {
    long len = (((nbits) +
                 (8
# 139 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                  * sizeof(long)) -
                 1) /
                (8
# 139 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                 * sizeof(long))) *
               sizeof(unsigned long);
    memcpy(dst, src, len);
  }
}

static inline int bitmap_and(unsigned long *dst, const unsigned long *src1,
                             const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 147 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return (*dst = *src1 & *src2) != 0;
  }
  return slow_bitmap_and(dst, src1, src2, nbits);
}

static inline void bitmap_or(unsigned long *dst, const unsigned long *src1,
                             const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 156 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    *dst = *src1 | *src2;
  } else {
    slow_bitmap_or(dst, src1, src2, nbits);
  }
}

static inline void bitmap_xor(unsigned long *dst, const unsigned long *src1,
                              const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 166 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    *dst = *src1 ^ *src2;
  } else {
    slow_bitmap_xor(dst, src1, src2, nbits);
  }
}

static inline int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
                                const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 176 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return (*dst = *src1 & ~(*src2)) != 0;
  }
  return slow_bitmap_andnot(dst, src1, src2, nbits);
}

static inline void bitmap_complement(unsigned long *dst,
                                     const unsigned long *src, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 186 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    *dst = ~(*src) & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 187 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                            ) -
                                           1)));
  } else {
    slow_bitmap_complement(dst, src, nbits);
  }
}

static inline int bitmap_equal(const unsigned long *src1,
                               const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 196 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 197 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                                      ) -
                                                     1))));
  } else {
    return slow_bitmap_equal(src1, src2, nbits);
  }
}

static inline int bitmap_empty(const unsigned long *src, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 205 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return !(*src & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 206 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                           ) -
                                          1))));
  } else {
    return slow_bitmap_empty(src, nbits);
  }
}

static inline int bitmap_full(const unsigned long *src, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 214 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return !(~(*src) & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 215 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                              ) -
                                             1))));
  } else {
    return slow_bitmap_full(src, nbits);
  }
}

static inline int bitmap_intersects(const unsigned long *src1,
                                    const unsigned long *src2, long nbits) {
  if (((nbits) <= (sizeof(unsigned long) * 8
# 224 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return ((*src1 & *src2) & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 225 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                                     ) -
                                                    1)))) != 0;
  } else {
    return slow_bitmap_intersects(src1, src2, nbits);
  }
}

static inline long bitmap_count_one(const unsigned long *bitmap, long nbits) {
  if (__builtin_expect(!!(!nbits), 0)) {
    return 0;
  }

  if (((nbits) <= (sizeof(unsigned long) * 8
# 237 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                   ))) {
    return ctpop64(*bitmap & (~0UL >> (-(nbits) & ((sizeof(unsigned long) * 8
# 238 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                                    ) -
                                                   1))));
  } else {
    return slow_bitmap_count_one(bitmap, nbits);
  }
}

static inline long bitmap_count_one_with_offset(const unsigned long *bitmap,
                                                long offset, long nbits) {
  long aligned_offset = ((offset) /
                         ((sizeof(unsigned long) * 8
# 247 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                           )) *
                         ((sizeof(unsigned long) * 8
# 247 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                           )));
  long redundant_bits = offset - aligned_offset;
  long bits_to_count = nbits + redundant_bits;
  const unsigned long *bitmap_start =
      bitmap + aligned_offset / (sizeof(unsigned long) * 8
# 251 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                                );

  return bitmap_count_one(bitmap_start, bits_to_count) -
         bitmap_count_one(bitmap_start, redundant_bits);
}

void bitmap_set(unsigned long *map, long i, long len);
void bitmap_set_atomic(unsigned long *map, long i, long len);
void bitmap_clear(unsigned long *map, long start, long nr);

# 260 "/home/paulning/study/qemu/include/qemu/bitmap.h" 3 4
_Bool
# 260 "/home/paulning/study/qemu/include/qemu/bitmap.h"
    bitmap_test_and_clear_atomic(unsigned long *map, long start, long nr);

# 261 "/home/paulning/study/qemu/include/qemu/bitmap.h" 3 4
_Bool
# 261 "/home/paulning/study/qemu/include/qemu/bitmap.h"
    bitmap_test_and_clear(unsigned long *map, long start, long nr);
void bitmap_copy_and_clear_atomic(unsigned long *dst, unsigned long *src,
                                  long nr);
unsigned long bitmap_find_next_zero_area(unsigned long *map, unsigned long size,
                                         unsigned long start, unsigned long nr,
                                         unsigned long align_mask);

static inline unsigned long *
bitmap_zero_extend(unsigned long *old, long old_nbits, long new_nbits) {
  long new_nelem = (((new_nbits) +
                     (8
# 273 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                      * sizeof(long)) -
                     1) /
                    (8
# 273 "/home/paulning/study/qemu/include/qemu/bitmap.h"
                     * sizeof(long)));
  unsigned long *ptr =
      ((unsigned long *)g_realloc_n(old, (new_nelem), sizeof(unsigned long)));
  bitmap_clear(ptr, old_nbits, new_nbits - old_nbits);
  return ptr;
}

void bitmap_to_le(unsigned long *dst, const unsigned long *src, long nbits);
void bitmap_from_le(unsigned long *dst, const unsigned long *src, long nbits);

void bitmap_copy_with_src_offset(unsigned long *dst, const unsigned long *src,
                                 unsigned long offset, unsigned long nbits);
void bitmap_copy_with_dst_offset(unsigned long *dst, const unsigned long *src,
                                 unsigned long shift, unsigned long nbits);
# 7 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/rcu.h" 1
# 27 "/home/paulning/study/qemu/include/qemu/rcu.h"
# 1 "/home/paulning/study/qemu/include/qemu/thread.h" 1

# 1 "/home/paulning/study/qemu/include/qemu/processor.h" 1
# 5 "/home/paulning/study/qemu/include/qemu/thread.h" 2

typedef struct QemuCond QemuCond;
typedef struct QemuSemaphore QemuSemaphore;
typedef struct QemuEvent QemuEvent;
typedef struct QemuLockCnt QemuLockCnt;
typedef struct QemuThread QemuThread;

# 1 "/home/paulning/study/qemu/include/qemu/thread-posix.h" 1

# 1 "/usr/include/semaphore.h" 1 3 4
# 28 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 2 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3 4

# 35 "/usr/include/x86_64-linux-gnu/bits/semaphore.h" 3 4
typedef union {
  char __size[32];
  long int __align;
} sem_t;
# 29 "/usr/include/semaphore.h" 2 3 4

extern int sem_init(sem_t *__sem, int __pshared, unsigned int __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sem_destroy(sem_t *__sem) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern sem_t *sem_open(const char *__name, int __oflag, ...)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int sem_close(sem_t *__sem) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int sem_unlink(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int sem_wait(sem_t *__sem) __attribute__((__nonnull__(1)));

extern int sem_timedwait(sem_t *__restrict __sem,
                         const struct timespec *__restrict __abstime)
    __attribute__((__nonnull__(1, 2)));
# 81 "/usr/include/semaphore.h" 3 4
extern int sem_clockwait(sem_t *__restrict __sem, clockid_t clock,
                         const struct timespec *__restrict __abstime)
    __attribute__((__nonnull__(1, 3)));
# 100 "/usr/include/semaphore.h" 3 4
extern int sem_trywait(sem_t *__sem) __attribute__((__nothrow__))
__attribute__((__nonnull__(1)));

extern int sem_post(sem_t *__sem) __attribute__((__nothrow__))
__attribute__((__nonnull__(1)));

extern int sem_getvalue(sem_t *__restrict __sem, int *__restrict __sval)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

# 6 "/home/paulning/study/qemu/include/qemu/thread-posix.h" 2

# 7 "/home/paulning/study/qemu/include/qemu/thread-posix.h"
struct QemuMutex {
  pthread_mutex_t lock;

  const char *file;
  int line;

# 13 "/home/paulning/study/qemu/include/qemu/thread-posix.h" 3 4
  _Bool
# 13 "/home/paulning/study/qemu/include/qemu/thread-posix.h"
      initialized;
};

typedef struct QemuRecMutex {
  QemuMutex m;
} QemuRecMutex;

struct QemuCond {
  pthread_cond_t cond;

# 26 "/home/paulning/study/qemu/include/qemu/thread-posix.h" 3 4
  _Bool
# 26 "/home/paulning/study/qemu/include/qemu/thread-posix.h"
      initialized;
};

struct QemuSemaphore {
  QemuMutex mutex;
  QemuCond cond;
  unsigned int count;
};

struct QemuEvent {

  unsigned value;

# 41 "/home/paulning/study/qemu/include/qemu/thread-posix.h" 3 4
  _Bool
# 41 "/home/paulning/study/qemu/include/qemu/thread-posix.h"
      initialized;
};

struct QemuThread {
  pthread_t thread;
};
# 17 "/home/paulning/study/qemu/include/qemu/thread.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/qsp.h" 1
# 14 "/home/paulning/study/qemu/include/qemu/qsp.h"
enum QSPSortBy {
  QSP_SORT_BY_TOTAL_WAIT_TIME,
  QSP_SORT_BY_AVG_WAIT_TIME,
};

void qsp_report(size_t max, enum QSPSortBy sort_by,

# 20 "/home/paulning/study/qemu/include/qemu/qsp.h" 3 4
                _Bool
# 20 "/home/paulning/study/qemu/include/qemu/qsp.h"
                    callsite_coalesce);

# 22 "/home/paulning/study/qemu/include/qemu/qsp.h" 3 4
_Bool
# 22 "/home/paulning/study/qemu/include/qemu/qsp.h"
    qsp_is_enabled(void);
void qsp_enable(void);
void qsp_disable(void);
void qsp_reset(void);
# 21 "/home/paulning/study/qemu/include/qemu/thread.h" 2

void qemu_mutex_init(QemuMutex *mutex);
void qemu_mutex_destroy(QemuMutex *mutex);
int qemu_mutex_trylock_impl(QemuMutex *mutex, const char *file, const int line);
void qemu_mutex_lock_impl(QemuMutex *mutex, const char *file, const int line);
void qemu_mutex_unlock_impl(QemuMutex *mutex, const char *file, const int line);

void qemu_rec_mutex_init(QemuRecMutex *mutex);
void qemu_rec_mutex_destroy(QemuRecMutex *mutex);
void qemu_rec_mutex_lock_impl(QemuRecMutex *mutex, const char *file, int line);
int qemu_rec_mutex_trylock_impl(QemuRecMutex *mutex, const char *file,
                                int line);
void qemu_rec_mutex_unlock_impl(QemuRecMutex *mutex, const char *file,
                                int line);

typedef void (*QemuMutexLockFunc)(QemuMutex *m, const char *f, int l);
typedef int (*QemuMutexTrylockFunc)(QemuMutex *m, const char *f, int l);
typedef void (*QemuRecMutexLockFunc)(QemuRecMutex *m, const char *f, int l);
typedef int (*QemuRecMutexTrylockFunc)(QemuRecMutex *m, const char *f, int l);
typedef void (*QemuCondWaitFunc)(QemuCond *c, QemuMutex *m, const char *f,
                                 int l);
typedef
# 46 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
    _Bool
# 46 "/home/paulning/study/qemu/include/qemu/thread.h"
    (*QemuCondTimedWaitFunc)(QemuCond *c, QemuMutex *m, int ms, const char *f,
                             int l);

extern QemuMutexLockFunc bql_mutex_lock_func;
extern QemuMutexLockFunc qemu_mutex_lock_func;
extern QemuMutexTrylockFunc qemu_mutex_trylock_func;
extern QemuRecMutexLockFunc qemu_rec_mutex_lock_func;
extern QemuRecMutexTrylockFunc qemu_rec_mutex_trylock_func;
extern QemuCondWaitFunc qemu_cond_wait_func;
extern QemuCondTimedWaitFunc qemu_cond_timedwait_func;
# 119 "/home/paulning/study/qemu/include/qemu/thread.h"
static inline void(qemu_mutex_lock)(QemuMutex *mutex) {
  ({
    QemuMutexLockFunc _f = ({
      while (!(sizeof(*&qemu_mutex_lock_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              121, ((const char *)(__func__)),
# 121 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 121 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_mutex_lock_func, 0);
    });
    _f(mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 121);
  });
}

static inline int(qemu_mutex_trylock)(QemuMutex *mutex) {
  return ({
    QemuMutexTrylockFunc _f = ({
      while (!(sizeof(*&qemu_mutex_trylock_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              126, ((const char *)(__func__)),
# 126 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 126 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_mutex_trylock_func, 0);
    });
    _f(mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 126);
  });
}

static inline void(qemu_mutex_unlock)(QemuMutex *mutex) {
  qemu_mutex_unlock_impl(
      mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 131);
}

static inline void(qemu_rec_mutex_lock)(QemuRecMutex *mutex) {
  ({
    QemuRecMutexLockFunc _f = ({
      while (!(sizeof(*&qemu_rec_mutex_lock_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              136, ((const char *)(__func__)),
# 136 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 136 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_rec_mutex_lock_func, 0);
    });
    _f(mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 136);
  });
}

static inline int(qemu_rec_mutex_trylock)(QemuRecMutex *mutex) {
  return ({
    QemuRecMutexTrylockFunc _f;
    _f = ({
      while (!(sizeof(*&qemu_rec_mutex_trylock_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              141, ((const char *)(__func__)),
# 141 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 141 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_rec_mutex_trylock_func, 0);
    });
    _f(mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 141);
  });
}

static inline void(qemu_rec_mutex_unlock)(QemuRecMutex *mutex) {
  qemu_rec_mutex_unlock_impl(
      mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 146);
}

void qemu_cond_init(QemuCond *cond);
void qemu_cond_destroy(QemuCond *cond);

void qemu_cond_signal(QemuCond *cond);
void qemu_cond_broadcast(QemuCond *cond);
void qemu_cond_wait_impl(QemuCond *cond, QemuMutex *mutex, const char *file,
                         const int line);

# 161 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
_Bool
# 161 "/home/paulning/study/qemu/include/qemu/thread.h"
    qemu_cond_timedwait_impl(QemuCond *cond, QemuMutex *mutex, int ms,
                              const char *file, const int line);

static inline void(qemu_cond_wait)(QemuCond *cond, QemuMutex *mutex) {
  ({
    QemuCondWaitFunc _f = ({
      while (!(sizeof(*&qemu_cond_wait_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              166, ((const char *)(__func__)),
# 166 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 166 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_cond_wait_func, 0);
    });
    _f(cond, mutex, "/home/paulning/study/qemu/include/qemu/thread.h", 166);
  });
}

static inline
# 170 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
    _Bool
# 170 "/home/paulning/study/qemu/include/qemu/thread.h"
    (qemu_cond_timedwait)(QemuCond *cond, QemuMutex *mutex, int ms) {
  return ({
    QemuCondTimedWaitFunc _f = ({
      while (!(sizeof(*&qemu_cond_timedwait_func) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              173, ((const char *)(__func__)),
# 173 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 173 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&qemu_cond_timedwait_func, 0);
    });
    _f(cond, mutex, ms, "/home/paulning/study/qemu/include/qemu/thread.h", 173);
  });
}

void qemu_sem_init(QemuSemaphore *sem, int init);
void qemu_sem_post(QemuSemaphore *sem);
void qemu_sem_wait(QemuSemaphore *sem);
int qemu_sem_timedwait(QemuSemaphore *sem, int ms);
void qemu_sem_destroy(QemuSemaphore *sem);

void qemu_event_init(QemuEvent *ev,
# 182 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
                     _Bool
# 182 "/home/paulning/study/qemu/include/qemu/thread.h"
                         init);
void qemu_event_set(QemuEvent *ev);
void qemu_event_reset(QemuEvent *ev);
void qemu_event_wait(QemuEvent *ev);
void qemu_event_destroy(QemuEvent *ev);

void qemu_thread_create(QemuThread *thread, const char *name,
                        void *(*start_routine)(void *), void *arg, int mode);
int qemu_thread_set_affinity(QemuThread *thread, unsigned long *host_cpus,
                             unsigned long nbits);
int qemu_thread_get_affinity(QemuThread *thread, unsigned long **host_cpus,
                             unsigned long *nbits);
void *qemu_thread_join(QemuThread *thread);
void qemu_thread_get_self(QemuThread *thread);

# 197 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
_Bool
# 197 "/home/paulning/study/qemu/include/qemu/thread.h"
    qemu_thread_is_self(QemuThread *thread);
__attribute__((__noreturn__)) void qemu_thread_exit(void *retval);
void qemu_thread_naming(
# 199 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
    _Bool
# 199 "/home/paulning/study/qemu/include/qemu/thread.h"
        enable);

struct Notifier;
# 216 "/home/paulning/study/qemu/include/qemu/thread.h"
void qemu_thread_atexit_add(struct Notifier *notifier);
# 225 "/home/paulning/study/qemu/include/qemu/thread.h"
void qemu_thread_atexit_remove(struct Notifier *notifier);

struct QemuSpin {
  int value;
};

static inline void qemu_spin_init(QemuSpin *spin) {
  do {
    while (!(sizeof(*&spin->value) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
            237, ((const char *)(__func__)),
# 237 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
            ((void *)0)
# 237 "/home/paulning/study/qemu/include/qemu/thread.h"
        );
      } while (0);
    __atomic_store_n(&spin->value, 0, 0);
  } while (0);
}

static inline void qemu_spin_destroy(QemuSpin *spin) {}

static inline void qemu_spin_lock(QemuSpin *spin) {

  while (__builtin_expect(!!(({
    while (!(sizeof(*&spin->value) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
            255, ((const char *)(__func__)),
# 255 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
            ((void *)0)
# 255 "/home/paulning/study/qemu/include/qemu/thread.h"
        );
      } while (0);
    ({ __atomic_exchange_n(&spin->value, (1), 5); });
  })),
                          0)) {
    while (({
      while (!(sizeof(*&spin->value) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
              256, ((const char *)(__func__)),
# 256 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
              ((void *)0)
# 256 "/home/paulning/study/qemu/include/qemu/thread.h"
          );
        } while (0);
      __atomic_load_n(&spin->value, 0);
    })) {
      asm volatile("rep; nop" ::: "memory");
    }
  }
}

static inline
# 265 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
    _Bool
# 265 "/home/paulning/study/qemu/include/qemu/thread.h"
    qemu_spin_trylock(QemuSpin *spin) {

# 270 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
  _Bool
# 270 "/home/paulning/study/qemu/include/qemu/thread.h"
      busy = ({
        while (!(sizeof(*&spin->value) <= sizeof(void *)))
          do {
            g_assertion_message_expr(
                ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
                270, ((const char *)(__func__)),
# 270 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
                ((void *)0)
# 270 "/home/paulning/study/qemu/include/qemu/thread.h"
            );
          } while (0);
        ({
          __atomic_exchange_n(&spin->value,
                              (
# 270 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
                                  1
# 270 "/home/paulning/study/qemu/include/qemu/thread.h"
                                  ),
                              5);
        });
      });

  return busy;
}

static inline
# 279 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
    _Bool
# 279 "/home/paulning/study/qemu/include/qemu/thread.h"
    qemu_spin_locked(QemuSpin *spin) {
  return ({
    while (!(sizeof(*&spin->value) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
            281, ((const char *)(__func__)),
# 281 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
            ((void *)0)
# 281 "/home/paulning/study/qemu/include/qemu/thread.h"
        );
      } while (0);
    __atomic_load_n(&spin->value, 0);
  });
}

static inline void qemu_spin_unlock(QemuSpin *spin) {

  do {
    while (!(sizeof(*&spin->value) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0), "/home/paulning/study/qemu/include/qemu/thread.h",
            289, ((const char *)(__func__)),
# 289 "/home/paulning/study/qemu/include/qemu/thread.h" 3 4
            ((void *)0)
# 289 "/home/paulning/study/qemu/include/qemu/thread.h"
        );
      } while (0);
    __atomic_store_n(&spin->value, 0, 3);
  } while (0);
}
# 28 "/home/paulning/study/qemu/include/qemu/rcu.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/notify.h" 1
# 19 "/home/paulning/study/qemu/include/qemu/notify.h"
typedef struct Notifier Notifier;

struct Notifier {
  void (*notify)(Notifier *notifier, void *data);
  struct {
    struct Notifier *le_next;
    struct Notifier **le_prev;
  } node;
};

typedef struct NotifierList {
  struct {
    struct Notifier *lh_first;
  } notifiers;
} NotifierList;

void notifier_list_init(NotifierList *list);

void notifier_list_add(NotifierList *list, Notifier *notifier);

void notifier_remove(Notifier *notifier);

void notifier_list_notify(NotifierList *list, void *data);

# 43 "/home/paulning/study/qemu/include/qemu/notify.h" 3 4
_Bool
# 43 "/home/paulning/study/qemu/include/qemu/notify.h"
    notifier_list_empty(NotifierList *list);

typedef struct NotifierWithReturn NotifierWithReturn;

typedef int (*NotifierWithReturnFunc)(NotifierWithReturn *notifier, void *data,
                                      Error **errp);

struct NotifierWithReturn {

  NotifierWithReturnFunc notify;
  struct {
    struct NotifierWithReturn *le_next;
    struct NotifierWithReturn **le_prev;
  } node;
};

typedef struct NotifierWithReturnList {
  struct {
    struct NotifierWithReturn *lh_first;
  } notifiers;
} NotifierWithReturnList;

void notifier_with_return_list_init(NotifierWithReturnList *list);

void notifier_with_return_list_add(NotifierWithReturnList *list,
                                   NotifierWithReturn *notifier);

void notifier_with_return_remove(NotifierWithReturn *notifier);

int notifier_with_return_list_notify(NotifierWithReturnList *list, void *data,
                                     Error **errp);
# 31 "/home/paulning/study/qemu/include/qemu/rcu.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/sys_membarrier.h" 1
# 22 "/home/paulning/study/qemu/include/qemu/sys_membarrier.h"
static inline void smp_mb_global_init(void) {}
# 32 "/home/paulning/study/qemu/include/qemu/rcu.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/coroutine-tls.h" 1
# 33 "/home/paulning/study/qemu/include/qemu/rcu.h" 2
# 53 "/home/paulning/study/qemu/include/qemu/rcu.h"
extern unsigned long rcu_gp_ctr;

extern QemuEvent rcu_gp_event;

struct rcu_reader_data {

  unsigned long ctr;

# 60 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
  _Bool
# 60 "/home/paulning/study/qemu/include/qemu/rcu.h"
      waiting;

  unsigned depth;

  struct {
    struct rcu_reader_data *le_next;
    struct rcu_reader_data **le_prev;
  } node;

  NotifierList force_rcu;
};

__attribute__((noinline)) struct rcu_reader_data get_rcu_reader(void);
__attribute__((noinline)) void set_rcu_reader(struct rcu_reader_data v);
__attribute__((noinline)) struct rcu_reader_data *get_ptr_rcu_reader(void);

static inline void rcu_read_lock(void) {
  struct rcu_reader_data *p_rcu_reader = get_ptr_rcu_reader();
  unsigned ctr;

  if (p_rcu_reader->depth++ > 0) {
    return;
  }

  ctr = ({
    while (!(sizeof(*&rcu_gp_ctr) <= sizeof(void *)))
      do {
        g_assertion_message_expr(((gchar *)0),
                                 "/home/paulning/study/qemu/include/qemu/rcu.h",
                                 87, ((const char *)(__func__)),
# 87 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                                 ((void *)0)
# 87 "/home/paulning/study/qemu/include/qemu/rcu.h"
        );
      } while (0);
    __atomic_load_n(&rcu_gp_ctr, 0);
  });
  do {
    while (!(sizeof(*&p_rcu_reader->ctr) <= sizeof(void *)))
      do {
        g_assertion_message_expr(((gchar *)0),
                                 "/home/paulning/study/qemu/include/qemu/rcu.h",
                                 88, ((const char *)(__func__)),
# 88 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                                 ((void *)0)
# 88 "/home/paulning/study/qemu/include/qemu/rcu.h"
        );
      } while (0);
    __atomic_store_n(&p_rcu_reader->ctr, ctr, 0);
  } while (0);

  ({
    ({
      asm volatile("" ::: "memory");
      (void)0;
    });
    __atomic_thread_fence(5);
  });
}

static inline void rcu_read_unlock(void) {
  struct rcu_reader_data *p_rcu_reader = get_ptr_rcu_reader();

# 101 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
  ((void)sizeof((
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h"
                    p_rcu_reader->depth != 0
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h"
         p_rcu_reader->depth != 0
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
     )
       ;
     else
       __assert_fail(
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h"
           "p_rcu_reader->depth != 0"
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
           ,
           "/home/paulning/study/qemu/include/qemu/rcu.h", 101,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 101 "/home/paulning/study/qemu/include/qemu/rcu.h"
      ;
  if (--p_rcu_reader->depth > 0) {
    return;
  }

  do {
    while (!(sizeof(*&p_rcu_reader->ctr) <= sizeof(void *)))
      do {
        g_assertion_message_expr(((gchar *)0),
                                 "/home/paulning/study/qemu/include/qemu/rcu.h",
                                 111, ((const char *)(__func__)),
# 111 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                                 ((void *)0)
# 111 "/home/paulning/study/qemu/include/qemu/rcu.h"
        );
      } while (0);
    __atomic_store_n(&p_rcu_reader->ctr, 0, 3);
  } while (0);

  ({
    ({
      asm volatile("" ::: "memory");
      (void)0;
    });
    __atomic_thread_fence(5);
  });
  if (__builtin_expect(!!(({
        while (!(sizeof(*&p_rcu_reader->waiting) <= sizeof(void *)))
          do {
            g_assertion_message_expr(
                ((gchar *)0), "/home/paulning/study/qemu/include/qemu/rcu.h",
                115, ((const char *)(__func__)),
# 115 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                ((void *)0)
# 115 "/home/paulning/study/qemu/include/qemu/rcu.h"
            );
          } while (0);
        __atomic_load_n(&p_rcu_reader->waiting, 0);
      })),
                       0)) {
    do {
      while (!(sizeof(*&p_rcu_reader->waiting) <= sizeof(void *)))
        do {
          g_assertion_message_expr(
              ((gchar *)0), "/home/paulning/study/qemu/include/qemu/rcu.h", 116,
              ((const char *)(__func__)),
# 116 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
              ((void *)0)
# 116 "/home/paulning/study/qemu/include/qemu/rcu.h"
          );
        } while (0);
      __atomic_store_n(&p_rcu_reader->waiting,
# 116 "/home/paulning/study/qemu/include/qemu/rcu.h" 3 4
                       0
# 116 "/home/paulning/study/qemu/include/qemu/rcu.h"
                       ,
                       0);
    } while (0);
    qemu_event_set(&rcu_gp_event);
  }
}

void synchronize_rcu(void);

void rcu_register_thread(void);
void rcu_unregister_thread(void);

void rcu_enable_atfork(void);
void rcu_disable_atfork(void);

struct rcu_head;
typedef void RCUCBFunc(struct rcu_head *head);

struct rcu_head {
  struct rcu_head *next;
  RCUCBFunc *func;
};

void call_rcu1(struct rcu_head *head, RCUCBFunc *func);
void drain_call_rcu(void);
# 166 "/home/paulning/study/qemu/include/qemu/rcu.h"
typedef void RCUReadAuto;
static inline RCUReadAuto *rcu_read_auto_lock(void) {
  rcu_read_lock();

  return (void *)(uintptr_t)0x1;
}

static inline void rcu_read_auto_unlock(RCUReadAuto *r) { rcu_read_unlock(); }

typedef RCUReadAuto *RCUReadAuto_autoptr;
typedef GList *RCUReadAuto_listautoptr;
typedef GSList *RCUReadAuto_slistautoptr;
typedef GQueue *RCUReadAuto_queueautoptr;
# 179 "/home/paulning/study/qemu/include/qemu/rcu.h"
#pragma GCC diagnostic push
# 179 "/home/paulning/study/qemu/include/qemu/rcu.h"

# 179 "/home/paulning/study/qemu/include/qemu/rcu.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 179 "/home/paulning/study/qemu/include/qemu/rcu.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_RCUReadAuto(RCUReadAuto *_ptr) {
  if (_ptr)
    (rcu_read_auto_unlock)((RCUReadAuto *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_RCUReadAuto(RCUReadAuto **_ptr) {
  glib_autoptr_clear_RCUReadAuto(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_RCUReadAuto(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))rcu_read_auto_unlock);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_RCUReadAuto(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))rcu_read_auto_unlock);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_RCUReadAuto(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))rcu_read_auto_unlock);
}
# 179 "/home/paulning/study/qemu/include/qemu/rcu.h"
#pragma GCC diagnostic pop
# 195 "/home/paulning/study/qemu/include/qemu/rcu.h"
void rcu_add_force_rcu_notifier(Notifier *n);
void rcu_remove_force_rcu_notifier(Notifier *n);
# 8 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/rcu_queue.h" 1
# 9 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/qom/object.h" 1
# 17 "/home/paulning/study/qemu/include/qom/object.h"
# 1 "./qapi/qapi-builtin-types.h" 1
# 16 "./qapi/qapi-builtin-types.h"
# 1 "/home/paulning/study/qemu/include/qapi/util.h" 1
# 14 "/home/paulning/study/qemu/include/qapi/util.h"
typedef enum {
  QAPI_DEPRECATED,
  QAPI_UNSTABLE,
} QapiSpecialFeature;

typedef struct QEnumLookup {
  const char *const *array;
  const uint64_t *const features;
  const int size;
} QEnumLookup;

const char *qapi_enum_lookup(const QEnumLookup *lookup, int val);
int qapi_enum_parse(const QEnumLookup *lookup, const char *buf, int def,
                    Error **errp);

# 28 "/home/paulning/study/qemu/include/qapi/util.h" 3 4
_Bool
# 28 "/home/paulning/study/qemu/include/qapi/util.h"
    qapi_bool_parse(const char *name, const char *value,
# 28 "/home/paulning/study/qemu/include/qapi/util.h" 3 4
                                                         _Bool
# 28 "/home/paulning/study/qemu/include/qapi/util.h"
                                                              *obj,
                     Error **errp);

int parse_qapi_name(const char *name,
# 31 "/home/paulning/study/qemu/include/qapi/util.h" 3 4
                    _Bool
# 31 "/home/paulning/study/qemu/include/qapi/util.h"
                        complete);
# 17 "./qapi/qapi-builtin-types.h" 2

typedef struct strList strList;

typedef struct numberList numberList;

typedef struct intList intList;

typedef struct int8List int8List;

typedef struct int16List int16List;

typedef struct int32List int32List;

typedef struct int64List int64List;

typedef struct uint8List uint8List;

typedef struct uint16List uint16List;

typedef struct uint32List uint32List;

typedef struct uint64List uint64List;

typedef struct sizeList sizeList;

typedef struct boolList boolList;

typedef struct anyList anyList;

typedef struct nullList nullList;

typedef enum QType {
  QTYPE_NONE,
  QTYPE_QNULL,
  QTYPE_QNUM,
  QTYPE_QSTRING,
  QTYPE_QDICT,
  QTYPE_QLIST,
  QTYPE_QBOOL,
  QTYPE__MAX,
} QType;

extern const QEnumLookup QType_lookup;

struct strList {
  strList *next;
  char *value;
};

void qapi_free_strList(strList *obj);
typedef strList *strList_autoptr;
typedef GList *strList_listautoptr;
typedef GSList *strList_slistautoptr;
typedef GQueue *strList_queueautoptr;
# 70 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 70 "./qapi/qapi-builtin-types.h"

# 70 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 70 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_strList(strList *_ptr) {
  if (_ptr)
    (qapi_free_strList)((strList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_strList(strList **_ptr) {
  glib_autoptr_clear_strList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_strList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_strList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_strList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_strList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_strList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_strList);
}
# 70 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct numberList {
  numberList *next;
  double value;
};

void qapi_free_numberList(numberList *obj);
typedef numberList *numberList_autoptr;
typedef GList *numberList_listautoptr;
typedef GSList *numberList_slistautoptr;
typedef GQueue *numberList_queueautoptr;
# 78 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 78 "./qapi/qapi-builtin-types.h"

# 78 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 78 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_numberList(numberList *_ptr) {
  if (_ptr)
    (qapi_free_numberList)((numberList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_numberList(numberList **_ptr) {
  glib_autoptr_clear_numberList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_numberList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_numberList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_numberList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_numberList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_numberList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_numberList);
}
# 78 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct intList {
  intList *next;
  int64_t value;
};

void qapi_free_intList(intList *obj);
typedef intList *intList_autoptr;
typedef GList *intList_listautoptr;
typedef GSList *intList_slistautoptr;
typedef GQueue *intList_queueautoptr;
# 86 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 86 "./qapi/qapi-builtin-types.h"

# 86 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 86 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_intList(intList *_ptr) {
  if (_ptr)
    (qapi_free_intList)((intList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_intList(intList **_ptr) {
  glib_autoptr_clear_intList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_intList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_intList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_intList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_intList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_intList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_intList);
}
# 86 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct int8List {
  int8List *next;
  int8_t value;
};

void qapi_free_int8List(int8List *obj);
typedef int8List *int8List_autoptr;
typedef GList *int8List_listautoptr;
typedef GSList *int8List_slistautoptr;
typedef GQueue *int8List_queueautoptr;
# 94 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 94 "./qapi/qapi-builtin-types.h"

# 94 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 94 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_int8List(int8List *_ptr) {
  if (_ptr)
    (qapi_free_int8List)((int8List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_int8List(int8List **_ptr) {
  glib_autoptr_clear_int8List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_int8List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int8List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_int8List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int8List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_int8List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_int8List);
}
# 94 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct int16List {
  int16List *next;
  int16_t value;
};

void qapi_free_int16List(int16List *obj);
typedef int16List *int16List_autoptr;
typedef GList *int16List_listautoptr;
typedef GSList *int16List_slistautoptr;
typedef GQueue *int16List_queueautoptr;
# 102 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 102 "./qapi/qapi-builtin-types.h"

# 102 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 102 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_int16List(int16List *_ptr) {
  if (_ptr)
    (qapi_free_int16List)((int16List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_int16List(int16List **_ptr) {
  glib_autoptr_clear_int16List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_int16List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int16List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_int16List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int16List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_int16List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_int16List);
}
# 102 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct int32List {
  int32List *next;
  int32_t value;
};

void qapi_free_int32List(int32List *obj);
typedef int32List *int32List_autoptr;
typedef GList *int32List_listautoptr;
typedef GSList *int32List_slistautoptr;
typedef GQueue *int32List_queueautoptr;
# 110 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 110 "./qapi/qapi-builtin-types.h"

# 110 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 110 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_int32List(int32List *_ptr) {
  if (_ptr)
    (qapi_free_int32List)((int32List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_int32List(int32List **_ptr) {
  glib_autoptr_clear_int32List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_int32List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int32List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_int32List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int32List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_int32List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_int32List);
}
# 110 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct int64List {
  int64List *next;
  int64_t value;
};

void qapi_free_int64List(int64List *obj);
typedef int64List *int64List_autoptr;
typedef GList *int64List_listautoptr;
typedef GSList *int64List_slistautoptr;
typedef GQueue *int64List_queueautoptr;
# 118 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 118 "./qapi/qapi-builtin-types.h"

# 118 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 118 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_int64List(int64List *_ptr) {
  if (_ptr)
    (qapi_free_int64List)((int64List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_int64List(int64List **_ptr) {
  glib_autoptr_clear_int64List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_int64List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int64List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_int64List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_int64List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_int64List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_int64List);
}
# 118 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct uint8List {
  uint8List *next;
  uint8_t value;
};

void qapi_free_uint8List(uint8List *obj);
typedef uint8List *uint8List_autoptr;
typedef GList *uint8List_listautoptr;
typedef GSList *uint8List_slistautoptr;
typedef GQueue *uint8List_queueautoptr;
# 126 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 126 "./qapi/qapi-builtin-types.h"

# 126 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 126 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_uint8List(uint8List *_ptr) {
  if (_ptr)
    (qapi_free_uint8List)((uint8List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_uint8List(uint8List **_ptr) {
  glib_autoptr_clear_uint8List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_uint8List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint8List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_uint8List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint8List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_uint8List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_uint8List);
}
# 126 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct uint16List {
  uint16List *next;
  uint16_t value;
};

void qapi_free_uint16List(uint16List *obj);
typedef uint16List *uint16List_autoptr;
typedef GList *uint16List_listautoptr;
typedef GSList *uint16List_slistautoptr;
typedef GQueue *uint16List_queueautoptr;
# 134 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 134 "./qapi/qapi-builtin-types.h"

# 134 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 134 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_uint16List(uint16List *_ptr) {
  if (_ptr)
    (qapi_free_uint16List)((uint16List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_uint16List(uint16List **_ptr) {
  glib_autoptr_clear_uint16List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_uint16List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint16List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_uint16List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint16List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_uint16List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_uint16List);
}
# 134 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct uint32List {
  uint32List *next;
  uint32_t value;
};

void qapi_free_uint32List(uint32List *obj);
typedef uint32List *uint32List_autoptr;
typedef GList *uint32List_listautoptr;
typedef GSList *uint32List_slistautoptr;
typedef GQueue *uint32List_queueautoptr;
# 142 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 142 "./qapi/qapi-builtin-types.h"

# 142 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 142 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_uint32List(uint32List *_ptr) {
  if (_ptr)
    (qapi_free_uint32List)((uint32List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_uint32List(uint32List **_ptr) {
  glib_autoptr_clear_uint32List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_uint32List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint32List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_uint32List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint32List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_uint32List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_uint32List);
}
# 142 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct uint64List {
  uint64List *next;
  uint64_t value;
};

void qapi_free_uint64List(uint64List *obj);
typedef uint64List *uint64List_autoptr;
typedef GList *uint64List_listautoptr;
typedef GSList *uint64List_slistautoptr;
typedef GQueue *uint64List_queueautoptr;
# 150 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 150 "./qapi/qapi-builtin-types.h"

# 150 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 150 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_uint64List(uint64List *_ptr) {
  if (_ptr)
    (qapi_free_uint64List)((uint64List *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_uint64List(uint64List **_ptr) {
  glib_autoptr_clear_uint64List(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_uint64List(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint64List);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_uint64List(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_uint64List);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_uint64List(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_uint64List);
}
# 150 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct sizeList {
  sizeList *next;
  uint64_t value;
};

void qapi_free_sizeList(sizeList *obj);
typedef sizeList *sizeList_autoptr;
typedef GList *sizeList_listautoptr;
typedef GSList *sizeList_slistautoptr;
typedef GQueue *sizeList_queueautoptr;
# 158 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 158 "./qapi/qapi-builtin-types.h"

# 158 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 158 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_sizeList(sizeList *_ptr) {
  if (_ptr)
    (qapi_free_sizeList)((sizeList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_sizeList(sizeList **_ptr) {
  glib_autoptr_clear_sizeList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_sizeList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_sizeList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_sizeList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_sizeList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_sizeList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_sizeList);
}
# 158 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct boolList {
  boolList *next;

# 162 "./qapi/qapi-builtin-types.h" 3 4
  _Bool
# 162 "./qapi/qapi-builtin-types.h"
      value;
};

void qapi_free_boolList(boolList *obj);
typedef boolList *boolList_autoptr;
typedef GList *boolList_listautoptr;
typedef GSList *boolList_slistautoptr;
typedef GQueue *boolList_queueautoptr;
# 166 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 166 "./qapi/qapi-builtin-types.h"

# 166 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 166 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_boolList(boolList *_ptr) {
  if (_ptr)
    (qapi_free_boolList)((boolList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_boolList(boolList **_ptr) {
  glib_autoptr_clear_boolList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_boolList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_boolList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_boolList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_boolList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_boolList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_boolList);
}
# 166 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct anyList {
  anyList *next;
  QObject *value;
};

void qapi_free_anyList(anyList *obj);
typedef anyList *anyList_autoptr;
typedef GList *anyList_listautoptr;
typedef GSList *anyList_slistautoptr;
typedef GQueue *anyList_queueautoptr;
# 174 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 174 "./qapi/qapi-builtin-types.h"

# 174 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 174 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_anyList(anyList *_ptr) {
  if (_ptr)
    (qapi_free_anyList)((anyList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_anyList(anyList **_ptr) {
  glib_autoptr_clear_anyList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_anyList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_anyList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_anyList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_anyList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_anyList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_anyList);
}
# 174 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop

struct nullList {
  nullList *next;
  QNull *value;
};

void qapi_free_nullList(nullList *obj);
typedef nullList *nullList_autoptr;
typedef GList *nullList_listautoptr;
typedef GSList *nullList_slistautoptr;
typedef GQueue *nullList_queueautoptr;
# 182 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic push
# 182 "./qapi/qapi-builtin-types.h"

# 182 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 182 "./qapi/qapi-builtin-types.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_nullList(nullList *_ptr) {
  if (_ptr)
    (qapi_free_nullList)((nullList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_nullList(nullList **_ptr) {
  glib_autoptr_clear_nullList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_nullList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_nullList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_nullList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_nullList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_nullList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_nullList);
}
# 182 "./qapi/qapi-builtin-types.h"
#pragma GCC diagnostic pop
# 18 "/home/paulning/study/qemu/include/qom/object.h" 2
# 1 "/home/paulning/study/qemu/include/qemu/module.h" 1
# 42 "/home/paulning/study/qemu/include/qemu/module.h"
typedef enum {
  MODULE_INIT_MIGRATION,
  MODULE_INIT_BLOCK,
  MODULE_INIT_OPTS,
  MODULE_INIT_QOM,
  MODULE_INIT_TRACE,
  MODULE_INIT_XEN_BACKEND,
  MODULE_INIT_LIBQOS,
  MODULE_INIT_FUZZ_TARGET,
  MODULE_INIT_MAX
} module_init_type;
# 68 "/home/paulning/study/qemu/include/qemu/module.h"
void register_module_init(void (*fn)(void), module_init_type type);
void register_dso_module_init(void (*fn)(void), module_init_type type);

void module_call_init(module_init_type type);
# 90 "/home/paulning/study/qemu/include/qemu/module.h"
int module_load(const char *prefix, const char *name, Error **errp);
# 100 "/home/paulning/study/qemu/include/qemu/module.h"
int module_load_qom(const char *type, Error **errp);
void module_load_qom_all(void);
void module_allow_arch(const char *arch);
# 181 "/home/paulning/study/qemu/include/qemu/module.h"
typedef struct QemuModinfo QemuModinfo;
struct QemuModinfo {
  const char *name;
  const char *arch;
  const char **objs;
  const char **deps;
  const char **opts;
};
extern const QemuModinfo qemu_modinfo[];
void module_init_info(const QemuModinfo *info);
# 19 "/home/paulning/study/qemu/include/qom/object.h" 2

struct TypeImpl;
typedef struct TypeImpl *Type;

typedef struct TypeInfo TypeInfo;

typedef struct InterfaceClass InterfaceClass;
typedef struct InterfaceInfo InterfaceInfo;

typedef struct ObjectProperty ObjectProperty;
# 43 "/home/paulning/study/qemu/include/qom/object.h"
typedef void(ObjectPropertyAccessor)(Object *obj, Visitor *v, const char *name,
                                     void *opaque, Error **errp);
# 64 "/home/paulning/study/qemu/include/qom/object.h"
typedef Object *(ObjectPropertyResolve)(Object *obj, void *opaque,
                                        const char *part);
# 76 "/home/paulning/study/qemu/include/qom/object.h"
typedef void(ObjectPropertyRelease)(Object *obj, const char *name,
                                    void *opaque);
# 87 "/home/paulning/study/qemu/include/qom/object.h"
typedef void(ObjectPropertyInit)(Object *obj, ObjectProperty *prop);

struct ObjectProperty {
  char *name;
  char *type;
  char *description;
  ObjectPropertyAccessor *get;
  ObjectPropertyAccessor *set;
  ObjectPropertyResolve *resolve;
  ObjectPropertyRelease *release;
  ObjectPropertyInit *init;
  void *opaque;
  QObject *defval;
};
# 110 "/home/paulning/study/qemu/include/qom/object.h"
typedef void(ObjectUnparent)(Object *obj);

typedef void(ObjectFree)(void *obj);
# 128 "/home/paulning/study/qemu/include/qom/object.h"
struct ObjectClass {

  Type type;
  GSList *interfaces;

  const char *object_cast_cache[4];
  const char *class_cast_cache[4];

  ObjectUnparent *unparent;

  GHashTable *properties;
};
# 154 "/home/paulning/study/qemu/include/qom/object.h"
struct Object {

  ObjectClass *class;
  ObjectFree *free;
  GHashTable *properties;
  uint32_t ref;
  Object *parent;
};
# 475 "/home/paulning/study/qemu/include/qom/object.h"
struct TypeInfo {
  const char *name;
  const char *parent;

  size_t instance_size;
  size_t instance_align;
  void (*instance_init)(Object *obj);
  void (*instance_post_init)(Object *obj);
  void (*instance_finalize)(Object *obj);

# 486 "/home/paulning/study/qemu/include/qom/object.h" 3 4
  _Bool
# 486 "/home/paulning/study/qemu/include/qom/object.h"
      abstract;
  size_t class_size;

  void (*class_init)(ObjectClass *klass, void *data);
  void (*class_base_init)(ObjectClass *klass, void *data);
  void *class_data;

  InterfaceInfo *interfaces;
};
# 566 "/home/paulning/study/qemu/include/qom/object.h"
struct InterfaceInfo {
  const char *type;
};
# 581 "/home/paulning/study/qemu/include/qom/object.h"
struct InterfaceClass {
  ObjectClass parent_class;

  Type interface_type;
};
# 620 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_new_with_class(ObjectClass *klass);
# 632 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_new(const char *typename);
# 680 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_new_with_props(const char *typename, Object *parent,
                              const char *id, Error **errp, ...)
    __attribute__((__sentinel__));
# 696 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_new_with_propv(const char *typename, Object *parent,
                              const char *id, Error **errp, va_list vargs);

# 702 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 702 "/home/paulning/study/qemu/include/qom/object.h"
    object_apply_global_props(Object *obj, const GPtrArray *props,
                               Error **errp);
void object_set_machine_compat_props(GPtrArray *compat_props);
void object_set_accelerator_compat_props(GPtrArray *compat_props);
void object_register_sugar_prop(const char *driver, const char *prop,
                                const char *value,
# 707 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                _Bool
# 707 "/home/paulning/study/qemu/include/qom/object.h"
                                    optional);
void object_apply_compat_props(Object *obj);
# 744 "/home/paulning/study/qemu/include/qom/object.h"

# 744 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 744 "/home/paulning/study/qemu/include/qom/object.h"
    object_set_props(Object *obj, Error **errp, ...) __attribute__((__sentinel__));
# 756 "/home/paulning/study/qemu/include/qom/object.h"

# 756 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 756 "/home/paulning/study/qemu/include/qom/object.h"
    object_set_propv(Object *obj, Error **errp, va_list vargs);
# 768 "/home/paulning/study/qemu/include/qom/object.h"
void object_initialize(void *obj, size_t size, const char *typename);
# 793 "/home/paulning/study/qemu/include/qom/object.h"

# 793 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 793 "/home/paulning/study/qemu/include/qom/object.h"
    object_initialize_child_with_props(Object *parentobj,
                             const char *propname,
                             void *childobj, size_t size, const char *type,
                             Error **errp, ...) __attribute__((__sentinel__));
# 812 "/home/paulning/study/qemu/include/qom/object.h"

# 812 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 812 "/home/paulning/study/qemu/include/qom/object.h"
    object_initialize_child_with_propsv(Object *parentobj,
                              const char *propname,
                              void *childobj, size_t size, const char *type,
                              Error **errp, va_list vargs);
# 834 "/home/paulning/study/qemu/include/qom/object.h"
void object_initialize_child_internal(Object *parent, const char *propname,
                                      void *child, size_t size,
                                      const char *type);
# 848 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_dynamic_cast(Object *obj, const char *typename);
# 864 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_dynamic_cast_assert(Object *obj, const char *typename,
                                   const char *file, int line,
                                   const char *func);

ObjectClass *object_get_class(Object *obj);

const char *object_get_typename(const Object *obj);

Type type_register_static(const TypeInfo *info);
# 899 "/home/paulning/study/qemu/include/qom/object.h"
void type_register_static_array(const TypeInfo *infos, int nr_infos);
# 922 "/home/paulning/study/qemu/include/qom/object.h"

# 922 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 922 "/home/paulning/study/qemu/include/qom/object.h"
    type_print_class_properties(const char *type);
# 935 "/home/paulning/study/qemu/include/qom/object.h"
void object_set_properties_from_keyval(Object *obj, const QDict *qdict,

# 936 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                       _Bool
# 936 "/home/paulning/study/qemu/include/qom/object.h"
                                           from_json,
                                       Error **errp);
# 952 "/home/paulning/study/qemu/include/qom/object.h"
ObjectClass *object_class_dynamic_cast_assert(ObjectClass *klass,
                                              const char *typename,
                                              const char *file, int line,
                                              const char *func);
# 971 "/home/paulning/study/qemu/include/qom/object.h"
ObjectClass *object_class_dynamic_cast(ObjectClass *klass,
                                       const char *typename);

ObjectClass *object_class_get_parent(ObjectClass *klass);

const char *object_class_get_name(ObjectClass *klass);

# 996 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 996 "/home/paulning/study/qemu/include/qom/object.h"
    object_class_is_abstract(ObjectClass *klass);

ObjectClass *object_class_by_name(const char *typename);
# 1016 "/home/paulning/study/qemu/include/qom/object.h"
ObjectClass *module_object_class_by_name(const char *typename);

void object_class_foreach(void (*fn)(ObjectClass *klass, void *opaque),
                          const char *implements_type,
# 1019 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                          _Bool
# 1019 "/home/paulning/study/qemu/include/qom/object.h"
                              include_abstract,
                          void *opaque);
# 1029 "/home/paulning/study/qemu/include/qom/object.h"
GSList *object_class_get_list(const char *implements_type,

# 1030 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                              _Bool
# 1030 "/home/paulning/study/qemu/include/qom/object.h"
                                  include_abstract);
# 1040 "/home/paulning/study/qemu/include/qom/object.h"
GSList *object_class_get_list_sorted(const char *implements_type,

# 1041 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                     _Bool
# 1041 "/home/paulning/study/qemu/include/qom/object.h"
                                         include_abstract);
# 1051 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_ref(void *obj);
# 1060 "/home/paulning/study/qemu/include/qom/object.h"
void object_unref(void *obj);
# 1085 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_try_add(Object *obj, const char *name,
                                        const char *type,
                                        ObjectPropertyAccessor *get,
                                        ObjectPropertyAccessor *set,
                                        ObjectPropertyRelease *release,
                                        void *opaque, Error **errp);
# 1114 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *
object_property_add(Object *obj, const char *name, const char *type,
                    ObjectPropertyAccessor *get, ObjectPropertyAccessor *set,
                    ObjectPropertyRelease *release, void *opaque);

void object_property_del(Object *obj, const char *name);

ObjectProperty *object_class_property_add(ObjectClass *klass, const char *name,
                                          const char *type,
                                          ObjectPropertyAccessor *get,
                                          ObjectPropertyAccessor *set,
                                          ObjectPropertyRelease *release,
                                          void *opaque);
# 1137 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_set_default_bool(ObjectProperty *prop,
# 1137 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                      _Bool
# 1137 "/home/paulning/study/qemu/include/qom/object.h"
                                          value);
# 1146 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_set_default_str(ObjectProperty *prop, const char *value);

void object_property_set_default_list(ObjectProperty *prop);
# 1163 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_set_default_int(ObjectProperty *prop, int64_t value);
# 1172 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_set_default_uint(ObjectProperty *prop, uint64_t value);
# 1183 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_find(Object *obj, const char *name);
# 1195 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_find_err(Object *obj, const char *name,
                                         Error **errp);
# 1208 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_class_property_find(ObjectClass *klass,
                                           const char *name);
# 1221 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_class_property_find_err(ObjectClass *klass,
                                               const char *name, Error **errp);

typedef struct ObjectPropertyIterator {
  ObjectClass *nextclass;
  GHashTableIter iter;
} ObjectPropertyIterator;
# 1254 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_iter_init(ObjectPropertyIterator *iter, Object *obj);
# 1271 "/home/paulning/study/qemu/include/qom/object.h"
void object_class_property_iter_init(ObjectPropertyIterator *iter,
                                     ObjectClass *klass);
# 1286 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_iter_next(ObjectPropertyIterator *iter);

void object_unparent(Object *obj);
# 1302 "/home/paulning/study/qemu/include/qom/object.h"

# 1302 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1302 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_get(Object *obj, const char *name, Visitor *v,
                         Error **errp);
# 1316 "/home/paulning/study/qemu/include/qom/object.h"

# 1316 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1316 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set_str(Object *obj, const char *name,
                             const char *value, Error **errp);
# 1329 "/home/paulning/study/qemu/include/qom/object.h"
char *object_property_get_str(Object *obj, const char *name, Error **errp);
# 1347 "/home/paulning/study/qemu/include/qom/object.h"

# 1347 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1347 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set_link(Object *obj, const char *name,
                              Object *value, Error **errp);
# 1360 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_property_get_link(Object *obj, const char *name, Error **errp);
# 1374 "/home/paulning/study/qemu/include/qom/object.h"

# 1374 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1374 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set_bool(Object *obj, const char *name,

# 1375 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                             _Bool
# 1375 "/home/paulning/study/qemu/include/qom/object.h"
                                  value, Error **errp);
# 1386 "/home/paulning/study/qemu/include/qom/object.h"

# 1386 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1386 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_get_bool(Object *obj, const char *name,
                              Error **errp);
# 1400 "/home/paulning/study/qemu/include/qom/object.h"

# 1400 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1400 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set_int(Object *obj, const char *name,
                             int64_t value, Error **errp);
# 1412 "/home/paulning/study/qemu/include/qom/object.h"
int64_t object_property_get_int(Object *obj, const char *name, Error **errp);
# 1426 "/home/paulning/study/qemu/include/qom/object.h"

# 1426 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1426 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set_uint(Object *obj, const char *name,
                              uint64_t value, Error **errp);
# 1438 "/home/paulning/study/qemu/include/qom/object.h"
uint64_t object_property_get_uint(Object *obj, const char *name, Error **errp);
# 1452 "/home/paulning/study/qemu/include/qom/object.h"
int object_property_get_enum(Object *obj, const char *name,
                             const char *typename, Error **errp);
# 1468 "/home/paulning/study/qemu/include/qom/object.h"

# 1468 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1468 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_set(Object *obj, const char *name, Visitor *v,
                         Error **errp);
# 1482 "/home/paulning/study/qemu/include/qom/object.h"

# 1482 "/home/paulning/study/qemu/include/qom/object.h" 3 4
_Bool
# 1482 "/home/paulning/study/qemu/include/qom/object.h"
    object_property_parse(Object *obj, const char *name,
                           const char *string, Error **errp);
# 1495 "/home/paulning/study/qemu/include/qom/object.h"
char *object_property_print(Object *obj, const char *name,
# 1495 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                            _Bool
# 1495 "/home/paulning/study/qemu/include/qom/object.h"
                                human,
                            Error **errp);
# 1506 "/home/paulning/study/qemu/include/qom/object.h"
const char *object_property_get_type(Object *obj, const char *name,
                                     Error **errp);

Object *object_get_root(void);
# 1524 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_get_container(const char *name);
# 1536 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_get_objects_root(void);
# 1547 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_get_internal_root(void);
# 1557 "/home/paulning/study/qemu/include/qom/object.h"
const char *object_get_canonical_path_component(const Object *obj);
# 1567 "/home/paulning/study/qemu/include/qom/object.h"
char *object_get_canonical_path(const Object *obj);
# 1592 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_resolve_path(const char *path,
# 1592 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                            _Bool
# 1592 "/home/paulning/study/qemu/include/qom/object.h"
                                *ambiguous);
# 1612 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_resolve_path_type(const char *path, const char *typename,

# 1613 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                 _Bool
# 1613 "/home/paulning/study/qemu/include/qom/object.h"
                                     *ambiguous);
# 1626 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_resolve_type_unambiguous(const char *typename, Error **errp);
# 1638 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_resolve_path_at(Object *parent, const char *path);
# 1650 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_resolve_path_component(Object *parent, const char *part);
# 1671 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_try_add_child(Object *obj, const char *name,
                                              Object *child, Error **errp);
# 1683 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_child(Object *obj, const char *name,
                                          Object *child);

typedef enum {

  OBJ_PROP_LINK_STRONG = 0x1,

  OBJ_PROP_LINK_DIRECT = 0x2,
  OBJ_PROP_LINK_CLASS = 0x4,
} ObjectPropertyLinkFlags;
# 1706 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_allow_set_link(const Object *obj, const char *name,
                                    Object *child, Error **errp);
# 1739 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *
object_property_add_link(Object *obj, const char *name, const char *type,
                         Object **targetp,
                         void (*check)(const Object *obj, const char *name,
                                       Object *val, Error **errp),
                         ObjectPropertyLinkFlags flags);

ObjectProperty *object_class_property_add_link(
    ObjectClass *oc, const char *name, const char *type, ptrdiff_t offset,
    void (*check)(const Object *obj, const char *name, Object *val,
                  Error **errp),
    ObjectPropertyLinkFlags flags);
# 1765 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_str(Object *obj, const char *name,
                                        char *(*get)(Object *, Error **),
                                        void (*set)(Object *, const char *,
                                                    Error **));

ObjectProperty *
object_class_property_add_str(ObjectClass *klass, const char *name,
                              char *(*get)(Object *, Error **),
                              void (*set)(Object *, const char *, Error **));
# 1787 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_bool(Object *obj, const char *name,

# 1788 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                         _Bool
# 1788 "/home/paulning/study/qemu/include/qom/object.h"
                                         (*get)(Object *, Error **),
                                         void (*set)(Object *,
# 1789 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                                     _Bool
# 1789 "/home/paulning/study/qemu/include/qom/object.h"
                                                     ,
                                                     Error **));

ObjectProperty *object_class_property_add_bool(ObjectClass *klass,
                                               const char *name,

# 1793 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                               _Bool
# 1793 "/home/paulning/study/qemu/include/qom/object.h"
                                               (*get)(Object *, Error **),
                                               void (*set)(Object *,
# 1794 "/home/paulning/study/qemu/include/qom/object.h" 3 4
                                                           _Bool
# 1794 "/home/paulning/study/qemu/include/qom/object.h"
                                                           ,
                                                           Error **));
# 1810 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_enum(Object *obj, const char *name,
                                         const char *typename,
                                         const QEnumLookup *lookup,
                                         int (*get)(Object *, Error **),
                                         void (*set)(Object *, int, Error **));

ObjectProperty *
object_class_property_add_enum(ObjectClass *klass, const char *name,
                               const char *typename, const QEnumLookup *lookup,
                               int (*get)(Object *, Error **),
                               void (*set)(Object *, int, Error **));
# 1834 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_tm(Object *obj, const char *name,
                                       void (*get)(Object *, struct tm *,
                                                   Error **));

ObjectProperty *
object_class_property_add_tm(ObjectClass *klass, const char *name,
                             void (*get)(Object *, struct tm *, Error **));

typedef enum {

  OBJ_PROP_FLAG_READ = 1 << 0,

  OBJ_PROP_FLAG_WRITE = 1 << 1,

  OBJ_PROP_FLAG_READWRITE = (OBJ_PROP_FLAG_READ | OBJ_PROP_FLAG_WRITE),
} ObjectPropertyFlags;
# 1862 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_uint8_ptr(Object *obj, const char *name,
                                              const uint8_t *v,
                                              ObjectPropertyFlags flags);

ObjectProperty *object_class_property_add_uint8_ptr(ObjectClass *klass,
                                                    const char *name,
                                                    const uint8_t *v,
                                                    ObjectPropertyFlags flags);
# 1883 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_uint16_ptr(Object *obj, const char *name,
                                               const uint16_t *v,
                                               ObjectPropertyFlags flags);

ObjectProperty *object_class_property_add_uint16_ptr(ObjectClass *klass,
                                                     const char *name,
                                                     const uint16_t *v,
                                                     ObjectPropertyFlags flags);
# 1904 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_uint32_ptr(Object *obj, const char *name,
                                               const uint32_t *v,
                                               ObjectPropertyFlags flags);

ObjectProperty *object_class_property_add_uint32_ptr(ObjectClass *klass,
                                                     const char *name,
                                                     const uint32_t *v,
                                                     ObjectPropertyFlags flags);
# 1925 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_uint64_ptr(Object *obj, const char *name,
                                               const uint64_t *v,
                                               ObjectPropertyFlags flags);

ObjectProperty *object_class_property_add_uint64_ptr(ObjectClass *klass,
                                                     const char *name,
                                                     const uint64_t *v,
                                                     ObjectPropertyFlags flags);
# 1951 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_alias(Object *obj, const char *name,
                                          Object *target_obj,
                                          const char *target_name);
# 1970 "/home/paulning/study/qemu/include/qom/object.h"
ObjectProperty *object_property_add_const_link(Object *obj, const char *name,
                                               Object *target);
# 1983 "/home/paulning/study/qemu/include/qom/object.h"
void object_property_set_description(Object *obj, const char *name,
                                     const char *description);
void object_class_property_set_description(ObjectClass *klass, const char *name,
                                           const char *description);
# 2002 "/home/paulning/study/qemu/include/qom/object.h"
int object_child_foreach(Object *obj, int (*fn)(Object *child, void *opaque),
                         void *opaque);
# 2020 "/home/paulning/study/qemu/include/qom/object.h"
int object_child_foreach_recursive(Object *obj,
                                   int (*fn)(Object *child, void *opaque),
                                   void *opaque);
# 2034 "/home/paulning/study/qemu/include/qom/object.h"
Object *object_property_add_new_container(Object *obj, const char *name);
# 2046 "/home/paulning/study/qemu/include/qom/object.h"
char *object_property_help(const char *name, const char *type, QObject *defval,
                           const char *description);

typedef Object *Object_autoptr;
typedef GList *Object_listautoptr;
typedef GSList *Object_slistautoptr;
typedef GQueue *Object_queueautoptr;
# 2049 "/home/paulning/study/qemu/include/qom/object.h"
#pragma GCC diagnostic push
# 2049 "/home/paulning/study/qemu/include/qom/object.h"

# 2049 "/home/paulning/study/qemu/include/qom/object.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 2049 "/home/paulning/study/qemu/include/qom/object.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_Object(Object *_ptr) {
  if (_ptr)
    (object_unref)((Object *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_Object(Object **_ptr) {
  glib_autoptr_clear_Object(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_Object(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_Object(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_Object(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 2049 "/home/paulning/study/qemu/include/qom/object.h"
#pragma GCC diagnostic pop
# 10 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/hw/hotplug.h" 1
# 19 "/home/paulning/study/qemu/include/hw/hotplug.h"
typedef struct HotplugHandlerClass HotplugHandlerClass;
static inline __attribute__((__unused__)) HotplugHandlerClass *
HOTPLUG_HANDLER_GET_CLASS(const void *obj) {
  return ((HotplugHandlerClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))),
      ("hotplug-handler"), "/home/paulning/study/qemu/include/hw/hotplug.h", 20,
      __func__));
}
static inline __attribute__((__unused__)) HotplugHandlerClass *
HOTPLUG_HANDLER_CLASS(const void *klass) {
  return ((HotplugHandlerClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("hotplug-handler"),
      "/home/paulning/study/qemu/include/hw/hotplug.h", 20, __func__));
}

typedef struct HotplugHandler HotplugHandler;

typedef void (*hotplug_fn)(HotplugHandler *plug_handler,
                           DeviceState *plugged_dev, Error **errp);
# 53 "/home/paulning/study/qemu/include/hw/hotplug.h"
struct HotplugHandlerClass {

  InterfaceClass parent;

  hotplug_fn pre_plug;
  hotplug_fn plug;
  hotplug_fn unplug_request;
  hotplug_fn unplug;

# 62 "/home/paulning/study/qemu/include/hw/hotplug.h" 3 4
  _Bool
# 62 "/home/paulning/study/qemu/include/hw/hotplug.h"
      (*is_hotpluggable_bus)(HotplugHandler *plug_handler, BusState *bus);
};

void hotplug_handler_plug(HotplugHandler *plug_handler,
                          DeviceState *plugged_dev, Error **errp);

void hotplug_handler_pre_plug(HotplugHandler *plug_handler,
                              DeviceState *plugged_dev, Error **errp);

void hotplug_handler_unplug_request(HotplugHandler *plug_handler,
                                    DeviceState *plugged_dev, Error **errp);

void hotplug_handler_unplug(HotplugHandler *plug_handler,
                            DeviceState *plugged_dev, Error **errp);
# 11 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 1 "/home/paulning/study/qemu/include/hw/resettable.h" 1
# 20 "/home/paulning/study/qemu/include/hw/resettable.h"
typedef struct ResettableClass ResettableClass;
static inline __attribute__((__unused__)) ResettableClass *
RESETTABLE_GET_CLASS(const void *obj) {
  return ((ResettableClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("resettable"),
      "/home/paulning/study/qemu/include/hw/resettable.h", 21, __func__));
}
static inline __attribute__((__unused__)) ResettableClass *
RESETTABLE_CLASS(const void *klass) {
  return ((ResettableClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("resettable"),
      "/home/paulning/study/qemu/include/hw/resettable.h", 21, __func__));
}

typedef struct ResettableState ResettableState;
# 37 "/home/paulning/study/qemu/include/hw/resettable.h"
typedef enum ResetType {
  RESET_TYPE_COLD,
  RESET_TYPE_SNAPSHOT_LOAD,
  RESET_TYPE_WAKEUP,
  RESET_TYPE_S390_CPU_INITIAL,
  RESET_TYPE_S390_CPU_NORMAL,
} ResetType;
# 102 "/home/paulning/study/qemu/include/hw/resettable.h"
typedef void (*ResettableEnterPhase)(Object *obj, ResetType type);
typedef void (*ResettableHoldPhase)(Object *obj, ResetType type);
typedef void (*ResettableExitPhase)(Object *obj, ResetType type);
typedef ResettableState *(*ResettableGetState)(Object *obj);
typedef void (*ResettableChildCallback)(Object *, void *opaque, ResetType type);
typedef void (*ResettableChildForeach)(Object *obj, ResettableChildCallback cb,
                                       void *opaque, ResetType type);
typedef struct ResettablePhases {
  ResettableEnterPhase enter;
  ResettableHoldPhase hold;
  ResettableExitPhase exit;
} ResettablePhases;
struct ResettableClass {
  InterfaceClass parent_class;

  ResettablePhases phases;

  ResettableGetState get_state;

  ResettableChildForeach child_foreach;
};
# 141 "/home/paulning/study/qemu/include/hw/resettable.h"
struct ResettableState {
  unsigned count;

# 143 "/home/paulning/study/qemu/include/hw/resettable.h" 3 4
  _Bool
# 143 "/home/paulning/study/qemu/include/hw/resettable.h"
      hold_phase_pending;

# 144 "/home/paulning/study/qemu/include/hw/resettable.h" 3 4
  _Bool
# 144 "/home/paulning/study/qemu/include/hw/resettable.h"
      exit_phase_in_progress;
};

static inline void resettable_state_clear(ResettableState *state) {
  memset(state, 0, sizeof(ResettableState));
}
# 166 "/home/paulning/study/qemu/include/hw/resettable.h"
void resettable_reset(Object *obj, ResetType type);
# 181 "/home/paulning/study/qemu/include/hw/resettable.h"
void resettable_assert_reset(Object *obj, ResetType type);

void resettable_release_reset(Object *obj, ResetType type);

# 197 "/home/paulning/study/qemu/include/hw/resettable.h" 3 4
_Bool
# 197 "/home/paulning/study/qemu/include/hw/resettable.h"
    resettable_is_in_reset(Object *obj);
# 213 "/home/paulning/study/qemu/include/hw/resettable.h"
void resettable_change_parent(Object *obj, Object *newp, Object *oldp);
# 222 "/home/paulning/study/qemu/include/hw/resettable.h"
void resettable_cold_reset_fn(void *opaque);
# 232 "/home/paulning/study/qemu/include/hw/resettable.h"
void resettable_class_set_parent_phases(ResettableClass *rc,
                                        ResettableEnterPhase enter,
                                        ResettableHoldPhase hold,
                                        ResettableExitPhase exit,
                                        ResettablePhases *parent_phases);
# 12 "/home/paulning/study/qemu/include/hw/qdev-core.h" 2
# 72 "/home/paulning/study/qemu/include/hw/qdev-core.h"
enum {
  DEV_NVECTORS_UNSPECIFIED = -1,
};

typedef struct DeviceState DeviceState;
typedef struct DeviceClass DeviceClass;
typedef DeviceState *DeviceState_autoptr;
typedef GList *DeviceState_listautoptr;
typedef GSList *DeviceState_slistautoptr;
typedef GQueue *DeviceState_queueautoptr;
# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"
#pragma GCC diagnostic push
# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_DeviceState(DeviceState *_ptr) {
  if (_ptr)
    (object_unref)((DeviceState *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_DeviceState(DeviceState **_ptr) {
  glib_autoptr_clear_DeviceState(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_DeviceState(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_DeviceState(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_DeviceState(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"
#pragma GCC diagnostic pop
# 77 "/home/paulning/study/qemu/include/hw/qdev-core.h"
static inline __attribute__((__unused__)) DeviceState *DEVICE(const void *obj) {
  return ((DeviceState *)object_dynamic_cast_assert(
      ((Object *)(obj)), ("device"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 77, __func__));
}
static inline __attribute__((__unused__)) DeviceClass *
DEVICE_GET_CLASS(const void *obj) {
  return ((DeviceClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("device"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 77, __func__));
}
static inline __attribute__((__unused__)) DeviceClass *
DEVICE_CLASS(const void *klass) {
  return ((DeviceClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("device"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 77, __func__));
}

typedef enum DeviceCategory {
  DEVICE_CATEGORY_BRIDGE,
  DEVICE_CATEGORY_USB,
  DEVICE_CATEGORY_STORAGE,
  DEVICE_CATEGORY_NETWORK,
  DEVICE_CATEGORY_INPUT,
  DEVICE_CATEGORY_DISPLAY,
  DEVICE_CATEGORY_SOUND,
  DEVICE_CATEGORY_MISC,
  DEVICE_CATEGORY_CPU,
  DEVICE_CATEGORY_WATCHDOG,
  DEVICE_CATEGORY_MAX
} DeviceCategory;

typedef void (*DeviceRealize)(DeviceState *dev, Error **errp);
typedef void (*DeviceUnrealize)(DeviceState *dev);
typedef void (*DeviceReset)(DeviceState *dev);
typedef void (*BusRealize)(BusState *bus, Error **errp);
typedef void (*BusUnrealize)(BusState *bus);
typedef int (*DeviceSyncConfig)(DeviceState *dev, Error **errp);
# 114 "/home/paulning/study/qemu/include/hw/qdev-core.h"
struct DeviceClass {

  ObjectClass parent_class;

  unsigned long categories[(((DEVICE_CATEGORY_MAX) +
                             (8
# 123 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                              * sizeof(long)) -
                             1) /
                            (8
# 123 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                             * sizeof(long)))];

  const char *fw_name;

  const char *desc;

  const Property *props_;

  uint16_t props_count_;
# 160 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 160 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 160 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      user_creatable;

# 161 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 161 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      hotpluggable;
# 172 "/home/paulning/study/qemu/include/hw/qdev-core.h"
  DeviceReset legacy_reset;
  DeviceRealize realize;
  DeviceUnrealize unrealize;
  DeviceSyncConfig sync_config;

  const VMStateDescription *vmsd;

  const char *bus_type;
};

typedef struct NamedGPIOList NamedGPIOList;

struct NamedGPIOList {
  char *name;
  qemu_irq *in;
  int num_in;
  int num_out;
  struct {
    struct NamedGPIOList *le_next;
    struct NamedGPIOList **le_prev;
  } node;
};

typedef struct Clock Clock;
typedef struct NamedClockList NamedClockList;

struct NamedClockList {
  char *name;
  Clock *clock;

# 206 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 206 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      output;

# 207 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 207 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      alias;
  struct {
    struct NamedClockList *le_next;
    struct NamedClockList **le_prev;
  } node;
};

typedef struct {

# 212 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 212 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      engaged_in_io;
} MemReentrancyGuard;

typedef struct {
  struct NamedGPIOList *lh_first;
} NamedGPIOListHead;
typedef struct {
  struct NamedClockList *lh_first;
} NamedClockListHead;
typedef struct {
  struct BusState *lh_first;
} BusStateHead;

struct DeviceState {

  Object parent_obj;

  char *id;

  char *canonical_path;

# 242 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 242 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      realized;

# 246 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 246 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      pending_deleted_event;

  int64_t pending_deleted_expires_ms;

  int hotplugged;

# 258 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 258 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      allow_unplug_during_migration;

  BusState *parent_bus;

  NamedGPIOListHead gpios;

  NamedClockListHead clocks;

  BusStateHead child_bus;

  int num_child_bus;

  int instance_id_alias;

  int alias_required_for_version;

  ResettableState reset;

  GSList *unplug_blockers;

  MemReentrancyGuard mem_reentrancy_guard;
};

typedef struct DeviceListener DeviceListener;
struct DeviceListener {
  void (*realize)(DeviceListener *listener, DeviceState *dev);
  void (*unrealize)(DeviceListener *listener, DeviceState *dev);
# 317 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 317 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 317 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      (*hide_device)(DeviceListener *listener, const QDict *device_opts,

# 318 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                     _Bool
# 318 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                         from_json,
                     Error **errp);
  union {
    struct DeviceListener *tqe_next;
    QTailQLink tqe_circ;
  } link;
};

static inline __attribute__((__unused__)) BusState *BUS(const void *obj) {
  return ((BusState *)object_dynamic_cast_assert(
      ((Object *)(obj)), ("bus"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 323, __func__));
}
static inline __attribute__((__unused__)) BusClass *
BUS_GET_CLASS(const void *obj) {
  return ((BusClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("bus"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 323, __func__));
}
static inline __attribute__((__unused__)) BusClass *
BUS_CLASS(const void *klass) {
  return ((BusClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("bus"),
      "/home/paulning/study/qemu/include/hw/qdev-core.h", 323, __func__));
}

struct BusClass {
  ObjectClass parent_class;

  void (*print_dev)(Monitor *mon, DeviceState *dev, int indent);
  char *(*get_dev_path)(DeviceState *dev);

  char *(*get_fw_dev_path)(DeviceState *dev);

# 346 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 346 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      (*check_address)(BusState *bus, DeviceState *dev, Error **errp);

  BusRealize realize;
  BusUnrealize unrealize;

  int max_dev;

  int automatic_ids;
};

typedef struct BusChild {
  struct rcu_head rcu;
  DeviceState *child;
  int index;
  union {
    struct BusChild *tqe_next;
    QTailQLink tqe_circ;
  } sibling;
} BusChild;

typedef union {
  struct BusChild *tqh_first;
  QTailQLink tqh_circ;
} BusChildHead;
typedef struct {
  struct BusState *le_next;
  struct BusState **le_prev;
} BusStateEntry;
# 380 "/home/paulning/study/qemu/include/hw/qdev-core.h"
struct BusState {

  Object obj;

  DeviceState *parent;
  char *name;
  HotplugHandler *hotplug_handler;
  int max_index;

# 388 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 388 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      realized;

# 389 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 389 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      full;
  int num_children;

  BusChildHead children;

  BusStateEntry sibling;

  ResettableState reset;
};
# 416 "/home/paulning/study/qemu/include/hw/qdev-core.h"
typedef struct GlobalProperty {
  const char *driver;
  const char *property;
  const char *value;

# 420 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 420 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      used;

# 421 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 421 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      optional;
} GlobalProperty;

static inline void compat_props_add(GPtrArray *arr, GlobalProperty props[],
                                    size_t nelem) {
  int i;
  for (i = 0; i < nelem; i++) {
    g_ptr_array_add(arr, (void *)&props[i]);
  }
}
# 446 "/home/paulning/study/qemu/include/hw/qdev-core.h"
DeviceState *qdev_new(const char *name);
# 458 "/home/paulning/study/qemu/include/hw/qdev-core.h"
DeviceState *qdev_try_new(const char *name);
# 467 "/home/paulning/study/qemu/include/hw/qdev-core.h"
static inline
# 467 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
    _Bool
# 467 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_is_realized(DeviceState *dev) {
  return ({
    while (!(sizeof(*&dev->realized) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0), "/home/paulning/study/qemu/include/hw/qdev-core.h",
            469, ((const char *)(__func__)),
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
            ((void *)0)
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
        );
      } while (0);
    typeof(__builtin_choose_expr(
        __builtin_types_compatible_p(typeof(*&dev->realized),
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                                     _Bool
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                                     ) ||
            __builtin_types_compatible_p(typeof(*&dev->realized), const
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                                         _Bool
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                                         ) ||
            __builtin_types_compatible_p(typeof(*&dev->realized), volatile
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                                         _Bool
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                                         ) ||
            __builtin_types_compatible_p(typeof(*&dev->realized), const volatile
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                                         _Bool
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                                         ),
        (
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
            _Bool
# 469 "/home/paulning/study/qemu/include/hw/qdev-core.h"
            )1,
        __builtin_choose_expr(
            __builtin_types_compatible_p(typeof(*&dev->realized),
                                         signed char) ||
                __builtin_types_compatible_p(typeof(*&dev->realized),
                                             const signed char) ||
                __builtin_types_compatible_p(typeof(*&dev->realized),
                                             volatile signed char) ||
                __builtin_types_compatible_p(typeof(*&dev->realized),
                                             const volatile signed char),
            (signed char)1,
            __builtin_choose_expr(
                __builtin_types_compatible_p(typeof(*&dev->realized),
                                             unsigned char) ||
                    __builtin_types_compatible_p(typeof(*&dev->realized),
                                                 const unsigned char) ||
                    __builtin_types_compatible_p(typeof(*&dev->realized),
                                                 volatile unsigned char) ||
                    __builtin_types_compatible_p(typeof(*&dev->realized),
                                                 const volatile unsigned char),
                (unsigned char)1,
                __builtin_choose_expr(
                    __builtin_types_compatible_p(typeof(*&dev->realized),
                                                 signed short) ||
                        __builtin_types_compatible_p(typeof(*&dev->realized),
                                                     const signed short) ||
                        __builtin_types_compatible_p(typeof(*&dev->realized),
                                                     volatile signed short) ||
                        __builtin_types_compatible_p(
                            typeof(*&dev->realized),
                            const volatile signed short),
                    (signed short)1,
                    __builtin_choose_expr(
                        __builtin_types_compatible_p(typeof(*&dev->realized),
                                                     unsigned short) ||
                            __builtin_types_compatible_p(
                                typeof(*&dev->realized),
                                const unsigned short) ||
                            __builtin_types_compatible_p(
                                typeof(*&dev->realized),
                                volatile unsigned short) ||
                            __builtin_types_compatible_p(
                                typeof(*&dev->realized),
                                const volatile unsigned short),
                        (unsigned short)1, (*&dev->realized) + 0)))))) _val;
    __atomic_load(&dev->realized, &_val, 2);
    _val;
  });
}
# 489 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 489 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 489 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_realize(DeviceState *dev, BusState *bus, Error **errp);
# 517 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 517 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 517 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_realize_and_unref(DeviceState *dev, BusState *bus, Error **errp);
# 538 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_unrealize(DeviceState *dev);
void qdev_set_legacy_instance_id(DeviceState *dev, int alias_id,
                                 int required_for_version);
HotplugHandler *qdev_get_bus_hotplug_handler(DeviceState *dev);
HotplugHandler *qdev_get_machine_hotplug_handler(DeviceState *dev);

# 543 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 543 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_hotplug_allowed(DeviceState *dev, BusState *bus, Error **errp);

# 544 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 544 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_hotunplug_allowed(DeviceState *dev, Error **errp);
# 556 "/home/paulning/study/qemu/include/hw/qdev-core.h"
HotplugHandler *qdev_get_hotplug_handler(DeviceState *dev);
void qdev_unplug(DeviceState *dev, Error **errp);
int qdev_sync_config(DeviceState *dev, Error **errp);
void qdev_simple_device_unplug_cb(HotplugHandler *hotplug_dev, DeviceState *dev,
                                  Error **errp);
void qdev_machine_creation_done(void);

# 562 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 562 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_machine_modified(void);

void qdev_add_unplug_blocker(DeviceState *dev, Error *reason);
# 579 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_del_unplug_blocker(DeviceState *dev, Error *reason);
# 590 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 590 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 590 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_unplug_blocked(DeviceState *dev, Error **errp);
# 603 "/home/paulning/study/qemu/include/hw/qdev-core.h"
typedef enum {
  GPIO_POLARITY_ACTIVE_LOW,
  GPIO_POLARITY_ACTIVE_HIGH
} GpioPolarity;
# 628 "/home/paulning/study/qemu/include/hw/qdev-core.h"
qemu_irq qdev_get_gpio_in(DeviceState *dev, int n);
# 648 "/home/paulning/study/qemu/include/hw/qdev-core.h"
qemu_irq qdev_get_gpio_in_named(DeviceState *dev, const char *name, int n);
# 679 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_connect_gpio_out(DeviceState *dev, int n, qemu_irq pin);
# 707 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_connect_gpio_out_named(DeviceState *dev, const char *name, int n,
                                 qemu_irq input_pin);
# 728 "/home/paulning/study/qemu/include/hw/qdev-core.h"
qemu_irq qdev_get_gpio_out_connector(DeviceState *dev, const char *name, int n);
# 749 "/home/paulning/study/qemu/include/hw/qdev-core.h"
qemu_irq qdev_intercept_gpio_out(DeviceState *dev, qemu_irq icpt,
                                 const char *name, int n);

BusState *qdev_get_child_bus(DeviceState *dev, const char *name);
# 773 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_init_gpio_in(DeviceState *dev, qemu_irq_handler handler, int n);
# 802 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_init_gpio_out(DeviceState *dev, qemu_irq *pins, int n);
# 815 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_init_gpio_out_named(DeviceState *dev, qemu_irq *pins,
                              const char *name, int n);
# 826 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_init_gpio_in_named_with_opaque(DeviceState *dev,
                                         qemu_irq_handler handler, void *opaque,
                                         const char *name, int n);
# 841 "/home/paulning/study/qemu/include/hw/qdev-core.h"
static inline void qdev_init_gpio_in_named(DeviceState *dev,
                                           qemu_irq_handler handler,
                                           const char *name, int n) {
  qdev_init_gpio_in_named_with_opaque(dev, handler, dev, name, n);
}
# 867 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_pass_gpios(DeviceState *dev, DeviceState *container,
                     const char *name);

BusState *qdev_get_parent_bus(const DeviceState *dev);

DeviceState *qdev_find_recursive(BusState *bus, const char *id);

typedef int(qbus_walkerfn)(BusState *bus, void *opaque);
typedef int(qdev_walkerfn)(DeviceState *dev, void *opaque);

void qbus_init(void *bus, size_t size, const char *typename,
               DeviceState *parent, const char *name);
BusState *qbus_new(const char *typename, DeviceState *parent, const char *name);

# 883 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 883 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qbus_realize(BusState *bus, Error **errp);
void qbus_unrealize(BusState *bus);

int qbus_walk_children(BusState *bus, qdev_walkerfn *pre_devfn,
                       qbus_walkerfn *pre_busfn, qdev_walkerfn *post_devfn,
                       qbus_walkerfn *post_busfn, void *opaque);
int qdev_walk_children(DeviceState *dev, qdev_walkerfn *pre_devfn,
                       qbus_walkerfn *pre_busfn, qdev_walkerfn *post_devfn,
                       qbus_walkerfn *post_busfn, void *opaque);
# 905 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void device_cold_reset(DeviceState *dev);
# 914 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void bus_cold_reset(BusState *bus);

# 922 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 922 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    device_is_in_reset(DeviceState *dev);

# 930 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 930 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    bus_is_in_reset(BusState *bus);

BusState *sysbus_get_default(void);

char *qdev_get_fw_dev_path(DeviceState *dev);
char *qdev_get_own_fw_dev_path_from_handler(BusState *bus, DeviceState *dev);
# 972 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void device_class_set_props_n(DeviceClass *dc, const Property *props, size_t n);
# 986 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void device_class_set_parent_realize(DeviceClass *dc, DeviceRealize dev_realize,
                                     DeviceRealize *parent_realize);
# 1001 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void device_class_set_legacy_reset(DeviceClass *dc, DeviceReset dev_reset);
# 1016 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void device_class_set_parent_unrealize(DeviceClass *dc,
                                       DeviceUnrealize dev_unrealize,
                                       DeviceUnrealize *parent_unrealize);

const VMStateDescription *qdev_get_vmsd(DeviceState *dev);

const char *qdev_fw_name(DeviceState *dev);

void qdev_assert_realized_properly(void);
Object *qdev_get_machine(void);
# 1035 "/home/paulning/study/qemu/include/hw/qdev-core.h"
void qdev_create_fake_machine(void);
# 1045 "/home/paulning/study/qemu/include/hw/qdev-core.h"
Object *machine_get_container(const char *name);
# 1059 "/home/paulning/study/qemu/include/hw/qdev-core.h"
char *qdev_get_human_name(DeviceState *dev);

# 1062 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 1062 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_set_parent_bus(DeviceState *dev, BusState *bus, Error **errp);

extern
# 1064 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
    _Bool
# 1064 "/home/paulning/study/qemu/include/hw/qdev-core.h"
        qdev_hot_removed;

char *qdev_get_dev_path(DeviceState *dev);

void qbus_set_hotplug_handler(BusState *bus, Object *handler);
void qbus_set_bus_hotplug_handler(BusState *bus);

static inline
# 1071 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
    _Bool
# 1071 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qbus_is_hotpluggable(BusState *bus) {
  HotplugHandler *plug_handler = bus->hotplug_handler;

# 1074 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
  _Bool
# 1074 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      ret = !!plug_handler;

  if (plug_handler) {
    HotplugHandlerClass *hdc;

    hdc = HOTPLUG_HANDLER_GET_CLASS(plug_handler);
    if (hdc->is_hotpluggable_bus) {
      ret = hdc->is_hotpluggable_bus(plug_handler, bus);
    }
  }
  return ret;
}
# 1105 "/home/paulning/study/qemu/include/hw/qdev-core.h"
static inline void qbus_mark_full(BusState *bus) {
  bus->full =
# 1107 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
      1
# 1107 "/home/paulning/study/qemu/include/hw/qdev-core.h"
      ;
}

void device_listener_register(DeviceListener *listener);
void device_listener_unregister(DeviceListener *listener);
# 1124 "/home/paulning/study/qemu/include/hw/qdev-core.h"

# 1124 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 1124 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    qdev_should_hide_device(const QDict *opts,
# 1124 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
                                               _Bool
# 1124 "/home/paulning/study/qemu/include/hw/qdev-core.h"
                                                    from_json, Error **errp);

typedef enum MachineInitPhase {

  PHASE_NO_MACHINE,

  PHASE_MACHINE_CREATED,

  PHASE_ACCEL_CREATED,

  PHASE_LATE_BACKENDS_CREATED,

  PHASE_MACHINE_INITIALIZED,

  PHASE_MACHINE_READY,
} MachineInitPhase;

# 1159 "/home/paulning/study/qemu/include/hw/qdev-core.h" 3 4
_Bool
# 1159 "/home/paulning/study/qemu/include/hw/qdev-core.h"
    phase_check(MachineInitPhase phase);
void phase_advance(MachineInitPhase phase);
# 24 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/disas/dis-asm.h" 1
# 14 "/home/paulning/study/qemu/include/disas/dis-asm.h"
typedef void *PTR;
typedef uint64_t bfd_vma;
typedef int64_t bfd_signed_vma;
typedef uint8_t bfd_byte;

enum bfd_flavour {
  bfd_target_unknown_flavour,
  bfd_target_aout_flavour,
  bfd_target_coff_flavour,
  bfd_target_ecoff_flavour,
  bfd_target_elf_flavour,
  bfd_target_ieee_flavour,
  bfd_target_nlm_flavour,
  bfd_target_oasys_flavour,
  bfd_target_tekhex_flavour,
  bfd_target_srec_flavour,
  bfd_target_ihex_flavour,
  bfd_target_som_flavour,
  bfd_target_os9k_flavour,
  bfd_target_versados_flavour,
  bfd_target_msdos_flavour,
  bfd_target_evax_flavour
};

enum bfd_endian { BFD_ENDIAN_BIG, BFD_ENDIAN_LITTLE, BFD_ENDIAN_UNKNOWN };

enum bfd_architecture {
  bfd_arch_unknown,
  bfd_arch_obscure,
  bfd_arch_m68k,
# 67 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_vax,
  bfd_arch_i960,
# 86 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_a29k,
  bfd_arch_sparc,
# 103 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_mips,
# 118 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_i386,

  bfd_arch_we32k,
  bfd_arch_tahoe,
  bfd_arch_i860,
  bfd_arch_romp,
  bfd_arch_alliant,
  bfd_arch_convex,
  bfd_arch_m88k,
  bfd_arch_pyramid,
  bfd_arch_h8300,

  bfd_arch_powerpc,
# 156 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_rs6000,
  bfd_arch_hppa,

  bfd_arch_d10v,
  bfd_arch_z8k,

  bfd_arch_h8500,
  bfd_arch_sh,
# 185 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_alpha,

  bfd_arch_arm,
# 205 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_ns32k,
  bfd_arch_w65,
  bfd_arch_tic30,
  bfd_arch_v850,

  bfd_arch_arc,

  bfd_arch_m32r,

  bfd_arch_mn10200,
  bfd_arch_mn10300,
  bfd_arch_avr,
# 235 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  bfd_arch_microblaze,
  bfd_arch_moxie,
  bfd_arch_ia64,

  bfd_arch_rx,

  bfd_arch_loongarch,
  bfd_arch_last
};

typedef struct symbol_cache_entry {
  const char *name;
  union {
    PTR p;
    bfd_vma i;
  } udata;
} asymbol;

typedef int (*fprintf_function)(FILE *f, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

enum dis_insn_type {
  dis_noninsn,
  dis_nonbranch,
  dis_branch,
  dis_condbranch,
  dis_jsr,
  dis_condjsr,
  dis_dref,
  dis_dref2
};
# 284 "/home/paulning/study/qemu/include/disas/dis-asm.h"
typedef struct disassemble_info {
  fprintf_function fprintf_func;
  FILE *stream;
  PTR application_data;

  enum bfd_flavour flavour;

  enum bfd_architecture arch;

  unsigned long mach;

  enum bfd_endian endian;

  asymbol **symbols;

  int num_symbols;

  unsigned long flags;

  PTR private_data;

  int (*read_memory_func)(bfd_vma memaddr, bfd_byte *myaddr, int length,
                          struct disassemble_info *info);

  void (*memory_error_func)(int status, bfd_vma memaddr,
                            struct disassemble_info *info);

  void (*print_address_func)(bfd_vma addr, struct disassemble_info *info);

  int (*print_insn)(bfd_vma addr, struct disassemble_info *info);
# 350 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  int (*symbol_at_address_func)(bfd_vma addr, struct disassemble_info *info);

  const bfd_byte *buffer;
  bfd_vma buffer_vma;
  int buffer_length;

  int bytes_per_line;

  int bytes_per_chunk;
  enum bfd_endian display_endian;
# 379 "/home/paulning/study/qemu/include/disas/dis-asm.h"
  char insn_info_valid;
  char branch_delay_insns;

  char data_size;
  enum dis_insn_type insn_type;
  bfd_vma target;

  bfd_vma target2;

  char *disassembler_options;

# 397 "/home/paulning/study/qemu/include/disas/dis-asm.h" 3 4
  _Bool
# 397 "/home/paulning/study/qemu/include/disas/dis-asm.h"
      show_opcodes;

  void *target_info;

  int cap_arch;
  int cap_mode;
  int cap_insn_unit;
  int cap_insn_split;

} disassemble_info;

typedef int (*disassembler_ftype)(bfd_vma, disassemble_info *);

int print_insn_tci(bfd_vma, disassemble_info *);
int print_insn_big_mips(bfd_vma, disassemble_info *);
int print_insn_little_mips(bfd_vma, disassemble_info *);
int print_insn_nanomips(bfd_vma, disassemble_info *);
int print_insn_m68k(bfd_vma, disassemble_info *);
int print_insn_z8001(bfd_vma, disassemble_info *);
int print_insn_z8002(bfd_vma, disassemble_info *);
int print_insn_h8300(bfd_vma, disassemble_info *);
int print_insn_h8300h(bfd_vma, disassemble_info *);
int print_insn_h8300s(bfd_vma, disassemble_info *);
int print_insn_h8500(bfd_vma, disassemble_info *);
int print_insn_arm_a64(bfd_vma, disassemble_info *);
int print_insn_alpha(bfd_vma, disassemble_info *);
disassembler_ftype arc_get_disassembler(int, int);
int print_insn_sparc(bfd_vma, disassemble_info *);
int print_insn_big_a29k(bfd_vma, disassemble_info *);
int print_insn_little_a29k(bfd_vma, disassemble_info *);
int print_insn_i960(bfd_vma, disassemble_info *);
int print_insn_sh(bfd_vma, disassemble_info *);
int print_insn_shl(bfd_vma, disassemble_info *);
int print_insn_hppa(bfd_vma, disassemble_info *);
int print_insn_m32r(bfd_vma, disassemble_info *);
int print_insn_m88k(bfd_vma, disassemble_info *);
int print_insn_mn10200(bfd_vma, disassemble_info *);
int print_insn_mn10300(bfd_vma, disassemble_info *);
int print_insn_ns32k(bfd_vma, disassemble_info *);
int print_insn_big_powerpc(bfd_vma, disassemble_info *);
int print_insn_little_powerpc(bfd_vma, disassemble_info *);
int print_insn_rs6000(bfd_vma, disassemble_info *);
int print_insn_w65(bfd_vma, disassemble_info *);
int print_insn_d10v(bfd_vma, disassemble_info *);
int print_insn_v850(bfd_vma, disassemble_info *);
int print_insn_tic30(bfd_vma, disassemble_info *);
int print_insn_microblaze(bfd_vma, disassemble_info *);
int print_insn_ia64(bfd_vma, disassemble_info *);
int print_insn_xtensa(bfd_vma, disassemble_info *);
int print_insn_riscv32(bfd_vma, disassemble_info *);
int print_insn_riscv64(bfd_vma, disassemble_info *);
int print_insn_riscv128(bfd_vma, disassemble_info *);
int print_insn_rx(bfd_vma, disassemble_info *);
int print_insn_hexagon(bfd_vma, disassemble_info *);
int print_insn_loongarch(bfd_vma, disassemble_info *);
# 475 "/home/paulning/study/qemu/include/disas/dis-asm.h"
static inline bfd_vma bfd_getl64(const bfd_byte *addr) {
  return ldq_le_p(addr);
}

static inline bfd_vma bfd_getl32(const bfd_byte *addr) {
  return (uint32_t)ldl_le_p(addr);
}

static inline bfd_vma bfd_getl16(const bfd_byte *addr) {
  return lduw_le_p(addr);
}

static inline bfd_vma bfd_getb32(const bfd_byte *addr) {
  return (uint32_t)ldl_be_p(addr);
}

static inline bfd_vma bfd_getb16(const bfd_byte *addr) {
  return lduw_be_p(addr);
}

typedef
# 500 "/home/paulning/study/qemu/include/disas/dis-asm.h" 3 4
    _Bool
# 500 "/home/paulning/study/qemu/include/disas/dis-asm.h"
        bfd_boolean;
# 25 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/breakpoint.h" 1
# 12 "/home/paulning/study/qemu/include/exec/breakpoint.h"
# 1 "/home/paulning/study/qemu/include/exec/vaddr.h" 1
# 12 "/home/paulning/study/qemu/include/exec/vaddr.h"
typedef uintptr_t vaddr;
# 13 "/home/paulning/study/qemu/include/exec/breakpoint.h" 2
# 1 "/home/paulning/study/qemu/include/exec/memattrs.h" 1
# 25 "/home/paulning/study/qemu/include/exec/memattrs.h"
typedef struct MemTxAttrs {

  unsigned int secure : 1;

  unsigned int space : 2;

  unsigned int user : 1;

  unsigned int memory : 1;

  unsigned int debug : 1;

  unsigned int requester_id : 16;

  unsigned int pid : 8;
# 64 "/home/paulning/study/qemu/include/exec/memattrs.h"

# 64 "/home/paulning/study/qemu/include/exec/memattrs.h" 3 4
  _Bool
# 64 "/home/paulning/study/qemu/include/exec/memattrs.h"
      unspecified;

  uint8_t _reserved1;
  uint16_t _reserved2;
} MemTxAttrs;

_Static_assert(!(sizeof(MemTxAttrs) > 8), "not expecting: "
                                          "sizeof(MemTxAttrs) > 8");
# 88 "/home/paulning/study/qemu/include/exec/memattrs.h"
typedef uint32_t MemTxResult;
# 14 "/home/paulning/study/qemu/include/exec/breakpoint.h" 2

typedef struct CPUBreakpoint {
  vaddr pc;
  int flags;
  union {
    struct CPUBreakpoint *tqe_next;
    QTailQLink tqe_circ;
  } entry;
} CPUBreakpoint;

typedef struct CPUWatchpoint {
  vaddr vaddr;
  vaddr len;
  vaddr hitaddr;
  MemTxAttrs hitattrs;
  int flags;
  union {
    struct CPUWatchpoint *tqe_next;
    QTailQLink tqe_circ;
  } entry;
} CPUWatchpoint;
# 26 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/hwaddr.h" 1
# 11 "/home/paulning/study/qemu/include/exec/hwaddr.h"
typedef uint64_t hwaddr;
# 21 "/home/paulning/study/qemu/include/exec/hwaddr.h"
typedef struct MemMapEntry {
  hwaddr base;
  hwaddr size;
} MemMapEntry;
# 27 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2

# 1 "/home/paulning/study/qemu/include/exec/mmu-access-type.h" 1
# 11 "/home/paulning/study/qemu/include/exec/mmu-access-type.h"
typedef enum MMUAccessType {
  MMU_DATA_LOAD = 0,
  MMU_DATA_STORE = 1,
  MMU_INST_FETCH = 2

} MMUAccessType;
# 30 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/tlb-common.h" 1
# 25 "/home/paulning/study/qemu/include/exec/tlb-common.h"
typedef union CPUTLBEntry {
  struct {
    uintptr_t addr_read;
    uintptr_t addr_write;
    uintptr_t addr_code;

    uintptr_t addend;
  };

  uintptr_t addr_idx[(1 << ((8 * 8) == 32 ? 4 : 5)) / sizeof(uintptr_t)];
} CPUTLBEntry;

_Static_assert(!(sizeof(CPUTLBEntry) != (1 << ((8 * 8) == 32 ? 4 : 5))),
               "not expecting: "
               "sizeof(CPUTLBEntry) != (1 << CPU_TLB_ENTRY_BITS)");

typedef struct CPUTLBDescFast {

  uintptr_t mask;

  CPUTLBEntry *table;
} CPUTLBDescFast __attribute__((aligned(2 * sizeof(void *))));
# 31 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "./qapi/qapi-types-machine.h" 1
# 17 "./qapi/qapi-types-machine.h"
# 1 "./qapi/qapi-types-common.h" 1
# 18 "./qapi/qapi-types-common.h"
typedef enum IoOperationType {
  IO_OPERATION_TYPE_READ,
  IO_OPERATION_TYPE_WRITE,
  IO_OPERATION_TYPE__MAX,
} IoOperationType;

extern const QEnumLookup IoOperationType_lookup;

typedef enum OnOffAuto {
  ON_OFF_AUTO_AUTO,
  ON_OFF_AUTO_ON,
  ON_OFF_AUTO_OFF,
  ON_OFF_AUTO__MAX,
} OnOffAuto;

extern const QEnumLookup OnOffAuto_lookup;

typedef enum OnOffSplit {
  ON_OFF_SPLIT_ON,
  ON_OFF_SPLIT_OFF,
  ON_OFF_SPLIT_SPLIT,
  ON_OFF_SPLIT__MAX,
} OnOffSplit;

extern const QEnumLookup OnOffSplit_lookup;

typedef struct StrOrNull StrOrNull;

typedef enum OffAutoPCIBAR {
  OFF_AUTO_PCIBAR_OFF,
  OFF_AUTO_PCIBAR_AUTO,
  OFF_AUTO_PCIBAR_BAR0,
  OFF_AUTO_PCIBAR_BAR1,
  OFF_AUTO_PCIBAR_BAR2,
  OFF_AUTO_PCIBAR_BAR3,
  OFF_AUTO_PCIBAR_BAR4,
  OFF_AUTO_PCIBAR_BAR5,
  OFF_AUTO_PCIBAR__MAX,
} OffAutoPCIBAR;

extern const QEnumLookup OffAutoPCIBAR_lookup;

typedef enum PCIELinkSpeed {
  PCIE_LINK_SPEED_2_5,
  PCIE_LINK_SPEED_5,
  PCIE_LINK_SPEED_8,
  PCIE_LINK_SPEED_16,
  PCIE_LINK_SPEED_32,
  PCIE_LINK_SPEED_64,
  PCIE_LINK_SPEED__MAX,
} PCIELinkSpeed;

extern const QEnumLookup PCIELinkSpeed_lookup;

typedef enum PCIELinkWidth {
  PCIE_LINK_WIDTH_1,
  PCIE_LINK_WIDTH_2,
  PCIE_LINK_WIDTH_4,
  PCIE_LINK_WIDTH_8,
  PCIE_LINK_WIDTH_12,
  PCIE_LINK_WIDTH_16,
  PCIE_LINK_WIDTH_32,
  PCIE_LINK_WIDTH__MAX,
} PCIELinkWidth;

extern const QEnumLookup PCIELinkWidth_lookup;

typedef enum HostMemPolicy {
  HOST_MEM_POLICY_DEFAULT,
  HOST_MEM_POLICY_PREFERRED,
  HOST_MEM_POLICY_BIND,
  HOST_MEM_POLICY_INTERLEAVE,
  HOST_MEM_POLICY__MAX,
} HostMemPolicy;

extern const QEnumLookup HostMemPolicy_lookup;

typedef enum NetFilterDirection {
  NET_FILTER_DIRECTION_ALL,
  NET_FILTER_DIRECTION_RX,
  NET_FILTER_DIRECTION_TX,
  NET_FILTER_DIRECTION__MAX,
} NetFilterDirection;

extern const QEnumLookup NetFilterDirection_lookup;

typedef enum GrabToggleKeys {
  GRAB_TOGGLE_KEYS_CTRL_CTRL,
  GRAB_TOGGLE_KEYS_ALT_ALT,
  GRAB_TOGGLE_KEYS_SHIFT_SHIFT,
  GRAB_TOGGLE_KEYS_META_META,
  GRAB_TOGGLE_KEYS_SCROLLLOCK,
  GRAB_TOGGLE_KEYS_CTRL_SCROLLLOCK,
  GRAB_TOGGLE_KEYS__MAX,
} GrabToggleKeys;

extern const QEnumLookup GrabToggleKeys_lookup;

typedef struct HumanReadableText HumanReadableText;

typedef enum EndianMode {
  ENDIAN_MODE_UNSPECIFIED,
  ENDIAN_MODE_LITTLE,
  ENDIAN_MODE_BIG,
  ENDIAN_MODE__MAX,
} EndianMode;

extern const QEnumLookup EndianMode_lookup;

struct StrOrNull {
  QType type;
  union {
    char *s;
    QNull *n;
  } u;
};

void qapi_free_StrOrNull(StrOrNull *obj);
typedef StrOrNull *StrOrNull_autoptr;
typedef GList *StrOrNull_listautoptr;
typedef GSList *StrOrNull_slistautoptr;
typedef GQueue *StrOrNull_queueautoptr;
# 166 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic push
# 166 "./qapi/qapi-types-common.h"

# 166 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 166 "./qapi/qapi-types-common.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_StrOrNull(StrOrNull *_ptr) {
  if (_ptr)
    (qapi_free_StrOrNull)((StrOrNull *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_StrOrNull(StrOrNull **_ptr) {
  glib_autoptr_clear_StrOrNull(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_StrOrNull(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_StrOrNull);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_StrOrNull(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_StrOrNull);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_StrOrNull(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_StrOrNull);
}
# 166 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic pop

struct HumanReadableText {
  char *human_readable_text;
};

void qapi_free_HumanReadableText(HumanReadableText *obj);
typedef HumanReadableText *HumanReadableText_autoptr;
typedef GList *HumanReadableText_listautoptr;
typedef GSList *HumanReadableText_slistautoptr;
typedef GQueue *HumanReadableText_queueautoptr;
# 173 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic push
# 173 "./qapi/qapi-types-common.h"

# 173 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 173 "./qapi/qapi-types-common.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HumanReadableText(HumanReadableText *_ptr) {
  if (_ptr)
    (qapi_free_HumanReadableText)((HumanReadableText *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HumanReadableText(HumanReadableText **_ptr) {
  glib_autoptr_clear_HumanReadableText(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HumanReadableText(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_HumanReadableText);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HumanReadableText(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_HumanReadableText);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HumanReadableText(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_HumanReadableText);
}
# 173 "./qapi/qapi-types-common.h"
#pragma GCC diagnostic pop
# 18 "./qapi/qapi-types-machine.h" 2
# 1 "./qapi/qapi-types-machine-common.h" 1
# 18 "./qapi/qapi-types-machine-common.h"
typedef enum S390CpuEntitlement {
  S390_CPU_ENTITLEMENT_AUTO,
  S390_CPU_ENTITLEMENT_LOW,
  S390_CPU_ENTITLEMENT_MEDIUM,
  S390_CPU_ENTITLEMENT_HIGH,
  S390_CPU_ENTITLEMENT__MAX,
} S390CpuEntitlement;

extern const QEnumLookup S390CpuEntitlement_lookup;

typedef enum CpuTopologyLevel {
  CPU_TOPOLOGY_LEVEL_THREAD,
  CPU_TOPOLOGY_LEVEL_CORE,
  CPU_TOPOLOGY_LEVEL_MODULE,
  CPU_TOPOLOGY_LEVEL_CLUSTER,
  CPU_TOPOLOGY_LEVEL_DIE,
  CPU_TOPOLOGY_LEVEL_SOCKET,
  CPU_TOPOLOGY_LEVEL_BOOK,
  CPU_TOPOLOGY_LEVEL_DRAWER,
  CPU_TOPOLOGY_LEVEL_DEFAULT,
  CPU_TOPOLOGY_LEVEL__MAX,
} CpuTopologyLevel;

extern const QEnumLookup CpuTopologyLevel_lookup;

typedef enum CacheLevelAndType {
  CACHE_LEVEL_AND_TYPE_L1D,
  CACHE_LEVEL_AND_TYPE_L1I,
  CACHE_LEVEL_AND_TYPE_L2,
  CACHE_LEVEL_AND_TYPE_L3,
  CACHE_LEVEL_AND_TYPE__MAX,
} CacheLevelAndType;

extern const QEnumLookup CacheLevelAndType_lookup;

typedef struct SmpCacheProperties SmpCacheProperties;

typedef struct SmpCachePropertiesList SmpCachePropertiesList;

typedef struct SmpCachePropertiesWrapper SmpCachePropertiesWrapper;

struct SmpCacheProperties {
  CacheLevelAndType cache;
  CpuTopologyLevel topology;
};

void qapi_free_SmpCacheProperties(SmpCacheProperties *obj);
typedef SmpCacheProperties *SmpCacheProperties_autoptr;
typedef GList *SmpCacheProperties_listautoptr;
typedef GSList *SmpCacheProperties_slistautoptr;
typedef GQueue *SmpCacheProperties_queueautoptr;
# 74 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic push
# 74 "./qapi/qapi-types-machine-common.h"

# 74 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 74 "./qapi/qapi-types-machine-common.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SmpCacheProperties(SmpCacheProperties *_ptr) {
  if (_ptr)
    (qapi_free_SmpCacheProperties)((SmpCacheProperties *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SmpCacheProperties(SmpCacheProperties **_ptr) {
  glib_autoptr_clear_SmpCacheProperties(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SmpCacheProperties(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCacheProperties);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SmpCacheProperties(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCacheProperties);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SmpCacheProperties(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SmpCacheProperties);
}
# 74 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic pop

struct SmpCachePropertiesList {
  SmpCachePropertiesList *next;
  SmpCacheProperties *value;
};

void qapi_free_SmpCachePropertiesList(SmpCachePropertiesList *obj);
typedef SmpCachePropertiesList *SmpCachePropertiesList_autoptr;
typedef GList *SmpCachePropertiesList_listautoptr;
typedef GSList *SmpCachePropertiesList_slistautoptr;
typedef GQueue *SmpCachePropertiesList_queueautoptr;
# 82 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic push
# 82 "./qapi/qapi-types-machine-common.h"

# 82 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 82 "./qapi/qapi-types-machine-common.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SmpCachePropertiesList(SmpCachePropertiesList *_ptr) {
  if (_ptr)
    (qapi_free_SmpCachePropertiesList)((SmpCachePropertiesList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SmpCachePropertiesList(SmpCachePropertiesList **_ptr) {
  glib_autoptr_clear_SmpCachePropertiesList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SmpCachePropertiesList(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCachePropertiesList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SmpCachePropertiesList(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCachePropertiesList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SmpCachePropertiesList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SmpCachePropertiesList);
}
# 82 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic pop

struct SmpCachePropertiesWrapper {
  SmpCachePropertiesList *caches;
};

void qapi_free_SmpCachePropertiesWrapper(SmpCachePropertiesWrapper *obj);
typedef SmpCachePropertiesWrapper *SmpCachePropertiesWrapper_autoptr;
typedef GList *SmpCachePropertiesWrapper_listautoptr;
typedef GSList *SmpCachePropertiesWrapper_slistautoptr;
typedef GQueue *SmpCachePropertiesWrapper_queueautoptr;
# 89 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic push
# 89 "./qapi/qapi-types-machine-common.h"

# 89 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 89 "./qapi/qapi-types-machine-common.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SmpCachePropertiesWrapper(SmpCachePropertiesWrapper *_ptr) {
  if (_ptr)
    (qapi_free_SmpCachePropertiesWrapper)((SmpCachePropertiesWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SmpCachePropertiesWrapper(
    SmpCachePropertiesWrapper **_ptr) {
  glib_autoptr_clear_SmpCachePropertiesWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SmpCachePropertiesWrapper(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCachePropertiesWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SmpCachePropertiesWrapper(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SmpCachePropertiesWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SmpCachePropertiesWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_SmpCachePropertiesWrapper);
}
# 89 "./qapi/qapi-types-machine-common.h"
#pragma GCC diagnostic pop
# 19 "./qapi/qapi-types-machine.h" 2

typedef enum SysEmuTarget {
  SYS_EMU_TARGET_AARCH64,
  SYS_EMU_TARGET_ALPHA,
  SYS_EMU_TARGET_ARM,
  SYS_EMU_TARGET_AVR,
  SYS_EMU_TARGET_HPPA,
  SYS_EMU_TARGET_I386,
  SYS_EMU_TARGET_LOONGARCH64,
  SYS_EMU_TARGET_M68K,
  SYS_EMU_TARGET_MICROBLAZE,
  SYS_EMU_TARGET_MICROBLAZEEL,
  SYS_EMU_TARGET_MIPS,
  SYS_EMU_TARGET_MIPS64,
  SYS_EMU_TARGET_MIPS64EL,
  SYS_EMU_TARGET_MIPSEL,
  SYS_EMU_TARGET_OR1K,
  SYS_EMU_TARGET_PPC,
  SYS_EMU_TARGET_PPC64,
  SYS_EMU_TARGET_RISCV32,
  SYS_EMU_TARGET_RISCV64,
  SYS_EMU_TARGET_RX,
  SYS_EMU_TARGET_S390X,
  SYS_EMU_TARGET_SH4,
  SYS_EMU_TARGET_SH4EB,
  SYS_EMU_TARGET_SPARC,
  SYS_EMU_TARGET_SPARC64,
  SYS_EMU_TARGET_TRICORE,
  SYS_EMU_TARGET_X86_64,
  SYS_EMU_TARGET_XTENSA,
  SYS_EMU_TARGET_XTENSAEB,
  SYS_EMU_TARGET__MAX,
} SysEmuTarget;

extern const QEnumLookup SysEmuTarget_lookup;

typedef enum S390CpuState {
  S390_CPU_STATE_UNINITIALIZED,
  S390_CPU_STATE_STOPPED,
  S390_CPU_STATE_CHECK_STOP,
  S390_CPU_STATE_OPERATING,
  S390_CPU_STATE_LOAD,
  S390_CPU_STATE__MAX,
} S390CpuState;

extern const QEnumLookup S390CpuState_lookup;

typedef struct CpuInfoS390 CpuInfoS390;

typedef struct q_obj_CpuInfoFast_base q_obj_CpuInfoFast_base;

typedef struct CpuInfoFast CpuInfoFast;

typedef struct CpuInfoFastList CpuInfoFastList;

typedef struct CompatProperty CompatProperty;

typedef struct CompatPropertyList CompatPropertyList;

typedef struct MachineInfo MachineInfo;

typedef struct q_obj_query_machines_arg q_obj_query_machines_arg;

typedef struct MachineInfoList MachineInfoList;

typedef struct CurrentMachineParams CurrentMachineParams;

typedef struct TargetInfo TargetInfo;

typedef struct UuidInfo UuidInfo;

typedef struct GuidInfo GuidInfo;

typedef enum LostTickPolicy {
  LOST_TICK_POLICY_DISCARD,
  LOST_TICK_POLICY_DELAY,
  LOST_TICK_POLICY_SLEW,
  LOST_TICK_POLICY__MAX,
} LostTickPolicy;

extern const QEnumLookup LostTickPolicy_lookup;

typedef struct KvmInfo KvmInfo;

typedef enum NumaOptionsType {
  NUMA_OPTIONS_TYPE_NODE,
  NUMA_OPTIONS_TYPE_DIST,
  NUMA_OPTIONS_TYPE_CPU,
  NUMA_OPTIONS_TYPE_HMAT_LB,
  NUMA_OPTIONS_TYPE_HMAT_CACHE,
  NUMA_OPTIONS_TYPE__MAX,
} NumaOptionsType;

extern const QEnumLookup NumaOptionsType_lookup;

typedef struct q_obj_NumaOptions_base q_obj_NumaOptions_base;

typedef struct NumaOptions NumaOptions;

typedef struct NumaNodeOptions NumaNodeOptions;

typedef struct NumaDistOptions NumaDistOptions;

typedef struct CXLFixedMemoryWindowOptions CXLFixedMemoryWindowOptions;

typedef struct CXLFixedMemoryWindowOptionsList CXLFixedMemoryWindowOptionsList;

typedef struct CXLFMWProperties CXLFMWProperties;

typedef enum X86CPURegister32 {
  X86_CPU_REGISTER32_EAX,
  X86_CPU_REGISTER32_EBX,
  X86_CPU_REGISTER32_ECX,
  X86_CPU_REGISTER32_EDX,
  X86_CPU_REGISTER32_ESP,
  X86_CPU_REGISTER32_EBP,
  X86_CPU_REGISTER32_ESI,
  X86_CPU_REGISTER32_EDI,
  X86_CPU_REGISTER32__MAX,
} X86CPURegister32;

extern const QEnumLookup X86CPURegister32_lookup;

typedef struct X86CPUFeatureWordInfo X86CPUFeatureWordInfo;

typedef struct X86CPUFeatureWordInfoList X86CPUFeatureWordInfoList;

typedef struct DummyForceArrays DummyForceArrays;

typedef struct NumaCpuOptions NumaCpuOptions;

typedef enum HmatLBMemoryHierarchy {
  HMAT_LB_MEMORY_HIERARCHY_MEMORY,
  HMAT_LB_MEMORY_HIERARCHY_FIRST_LEVEL,
  HMAT_LB_MEMORY_HIERARCHY_SECOND_LEVEL,
  HMAT_LB_MEMORY_HIERARCHY_THIRD_LEVEL,
  HMAT_LB_MEMORY_HIERARCHY__MAX,
} HmatLBMemoryHierarchy;

extern const QEnumLookup HmatLBMemoryHierarchy_lookup;

typedef enum HmatLBDataType {
  HMAT_LB_DATA_TYPE_ACCESS_LATENCY,
  HMAT_LB_DATA_TYPE_READ_LATENCY,
  HMAT_LB_DATA_TYPE_WRITE_LATENCY,
  HMAT_LB_DATA_TYPE_ACCESS_BANDWIDTH,
  HMAT_LB_DATA_TYPE_READ_BANDWIDTH,
  HMAT_LB_DATA_TYPE_WRITE_BANDWIDTH,
  HMAT_LB_DATA_TYPE__MAX,
} HmatLBDataType;

extern const QEnumLookup HmatLBDataType_lookup;

typedef struct NumaHmatLBOptions NumaHmatLBOptions;

typedef enum HmatCacheAssociativity {
  HMAT_CACHE_ASSOCIATIVITY_NONE,
  HMAT_CACHE_ASSOCIATIVITY_DIRECT,
  HMAT_CACHE_ASSOCIATIVITY_COMPLEX,
  HMAT_CACHE_ASSOCIATIVITY__MAX,
} HmatCacheAssociativity;

extern const QEnumLookup HmatCacheAssociativity_lookup;

typedef enum HmatCacheWritePolicy {
  HMAT_CACHE_WRITE_POLICY_NONE,
  HMAT_CACHE_WRITE_POLICY_WRITE_BACK,
  HMAT_CACHE_WRITE_POLICY_WRITE_THROUGH,
  HMAT_CACHE_WRITE_POLICY__MAX,
} HmatCacheWritePolicy;

extern const QEnumLookup HmatCacheWritePolicy_lookup;

typedef struct NumaHmatCacheOptions NumaHmatCacheOptions;

typedef struct q_obj_memsave_arg q_obj_memsave_arg;

typedef struct q_obj_pmemsave_arg q_obj_pmemsave_arg;

typedef struct Memdev Memdev;

typedef struct MemdevList MemdevList;

typedef struct CpuInstanceProperties CpuInstanceProperties;

typedef struct HotpluggableCPU HotpluggableCPU;

typedef struct HotpluggableCPUList HotpluggableCPUList;

typedef struct q_obj_balloon_arg q_obj_balloon_arg;

typedef struct BalloonInfo BalloonInfo;

typedef struct q_obj_BALLOON_CHANGE_arg q_obj_BALLOON_CHANGE_arg;

typedef struct HvBalloonInfo HvBalloonInfo;

typedef struct MemoryInfo MemoryInfo;

typedef struct PCDIMMDeviceInfo PCDIMMDeviceInfo;

typedef struct VirtioPMEMDeviceInfo VirtioPMEMDeviceInfo;

typedef struct VirtioMEMDeviceInfo VirtioMEMDeviceInfo;

typedef struct SgxEPCDeviceInfo SgxEPCDeviceInfo;

typedef struct HvBalloonDeviceInfo HvBalloonDeviceInfo;

typedef enum MemoryDeviceInfoKind {
  MEMORY_DEVICE_INFO_KIND_DIMM,
  MEMORY_DEVICE_INFO_KIND_NVDIMM,
  MEMORY_DEVICE_INFO_KIND_VIRTIO_PMEM,
  MEMORY_DEVICE_INFO_KIND_VIRTIO_MEM,
  MEMORY_DEVICE_INFO_KIND_SGX_EPC,
  MEMORY_DEVICE_INFO_KIND_HV_BALLOON,
  MEMORY_DEVICE_INFO_KIND__MAX,
} MemoryDeviceInfoKind;

extern const QEnumLookup MemoryDeviceInfoKind_lookup;

typedef struct PCDIMMDeviceInfoWrapper PCDIMMDeviceInfoWrapper;

typedef struct VirtioPMEMDeviceInfoWrapper VirtioPMEMDeviceInfoWrapper;

typedef struct VirtioMEMDeviceInfoWrapper VirtioMEMDeviceInfoWrapper;

typedef struct SgxEPCDeviceInfoWrapper SgxEPCDeviceInfoWrapper;

typedef struct HvBalloonDeviceInfoWrapper HvBalloonDeviceInfoWrapper;

typedef struct q_obj_MemoryDeviceInfo_base q_obj_MemoryDeviceInfo_base;

typedef struct MemoryDeviceInfo MemoryDeviceInfo;

typedef struct SgxEPC SgxEPC;

typedef struct SgxEPCList SgxEPCList;

typedef struct SgxEPCProperties SgxEPCProperties;

typedef struct MemoryDeviceInfoList MemoryDeviceInfoList;

typedef struct q_obj_MEMORY_DEVICE_SIZE_CHANGE_arg
    q_obj_MEMORY_DEVICE_SIZE_CHANGE_arg;

typedef struct BootConfiguration BootConfiguration;

typedef struct SMPConfiguration SMPConfiguration;

typedef enum SmbiosEntryPointType {
  SMBIOS_ENTRY_POINT_TYPE_32,
  SMBIOS_ENTRY_POINT_TYPE_64,
  SMBIOS_ENTRY_POINT_TYPE_AUTO,
  SMBIOS_ENTRY_POINT_TYPE__MAX,
} SmbiosEntryPointType;

extern const QEnumLookup SmbiosEntryPointType_lookup;

typedef struct MemorySizeConfiguration MemorySizeConfiguration;

struct CpuInfoS390 {
  S390CpuState cpu_state;

# 318 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 318 "./qapi/qapi-types-machine.h"
      has_dedicated;

# 319 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 319 "./qapi/qapi-types-machine.h"
      dedicated;

# 320 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 320 "./qapi/qapi-types-machine.h"
      has_entitlement;
  S390CpuEntitlement entitlement;
};

void qapi_free_CpuInfoS390(CpuInfoS390 *obj);
typedef CpuInfoS390 *CpuInfoS390_autoptr;
typedef GList *CpuInfoS390_listautoptr;
typedef GSList *CpuInfoS390_slistautoptr;
typedef GQueue *CpuInfoS390_queueautoptr;
# 325 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 325 "./qapi/qapi-types-machine.h"

# 325 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 325 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CpuInfoS390(CpuInfoS390 *_ptr) {
  if (_ptr)
    (qapi_free_CpuInfoS390)((CpuInfoS390 *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CpuInfoS390(CpuInfoS390 **_ptr) {
  glib_autoptr_clear_CpuInfoS390(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CpuInfoS390(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoS390);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CpuInfoS390(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoS390);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CpuInfoS390(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoS390);
}
# 325 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_CpuInfoFast_base {
  int64_t cpu_index;
  char *qom_path;
  int64_t thread_id;
  CpuInstanceProperties *props;
  SysEmuTarget target;
};

struct CpuInfoFast {
  int64_t cpu_index;
  char *qom_path;
  int64_t thread_id;
  CpuInstanceProperties *props;
  SysEmuTarget target;
  union {
    CpuInfoS390 s390x;
  } u;
};

void qapi_free_CpuInfoFast(CpuInfoFast *obj);
typedef CpuInfoFast *CpuInfoFast_autoptr;
typedef GList *CpuInfoFast_listautoptr;
typedef GSList *CpuInfoFast_slistautoptr;
typedef GQueue *CpuInfoFast_queueautoptr;
# 347 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 347 "./qapi/qapi-types-machine.h"

# 347 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 347 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CpuInfoFast(CpuInfoFast *_ptr) {
  if (_ptr)
    (qapi_free_CpuInfoFast)((CpuInfoFast *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CpuInfoFast(CpuInfoFast **_ptr) {
  glib_autoptr_clear_CpuInfoFast(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CpuInfoFast(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFast);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CpuInfoFast(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFast);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CpuInfoFast(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFast);
}
# 347 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CpuInfoFastList {
  CpuInfoFastList *next;
  CpuInfoFast *value;
};

void qapi_free_CpuInfoFastList(CpuInfoFastList *obj);
typedef CpuInfoFastList *CpuInfoFastList_autoptr;
typedef GList *CpuInfoFastList_listautoptr;
typedef GSList *CpuInfoFastList_slistautoptr;
typedef GQueue *CpuInfoFastList_queueautoptr;
# 355 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 355 "./qapi/qapi-types-machine.h"

# 355 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 355 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CpuInfoFastList(CpuInfoFastList *_ptr) {
  if (_ptr)
    (qapi_free_CpuInfoFastList)((CpuInfoFastList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CpuInfoFastList(CpuInfoFastList **_ptr) {
  glib_autoptr_clear_CpuInfoFastList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CpuInfoFastList(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFastList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CpuInfoFastList(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFastList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CpuInfoFastList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_CpuInfoFastList);
}
# 355 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CompatProperty {
  char *qom_type;
  char *property;
  char *value;
};

void qapi_free_CompatProperty(CompatProperty *obj);
typedef CompatProperty *CompatProperty_autoptr;
typedef GList *CompatProperty_listautoptr;
typedef GSList *CompatProperty_slistautoptr;
typedef GQueue *CompatProperty_queueautoptr;
# 364 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 364 "./qapi/qapi-types-machine.h"

# 364 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 364 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CompatProperty(CompatProperty *_ptr) {
  if (_ptr)
    (qapi_free_CompatProperty)((CompatProperty *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CompatProperty(CompatProperty **_ptr) {
  glib_autoptr_clear_CompatProperty(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CompatProperty(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_CompatProperty);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CompatProperty(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_CompatProperty);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CompatProperty(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_CompatProperty);
}
# 364 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CompatPropertyList {
  CompatPropertyList *next;
  CompatProperty *value;
};

void qapi_free_CompatPropertyList(CompatPropertyList *obj);
typedef CompatPropertyList *CompatPropertyList_autoptr;
typedef GList *CompatPropertyList_listautoptr;
typedef GSList *CompatPropertyList_slistautoptr;
typedef GQueue *CompatPropertyList_queueautoptr;
# 372 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 372 "./qapi/qapi-types-machine.h"

# 372 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 372 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CompatPropertyList(CompatPropertyList *_ptr) {
  if (_ptr)
    (qapi_free_CompatPropertyList)((CompatPropertyList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CompatPropertyList(CompatPropertyList **_ptr) {
  glib_autoptr_clear_CompatPropertyList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CompatPropertyList(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CompatPropertyList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CompatPropertyList(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CompatPropertyList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CompatPropertyList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_CompatPropertyList);
}
# 372 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct MachineInfo {
  char *name;
  char *alias;

# 377 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 377 "./qapi/qapi-types-machine.h"
      has_is_default;

# 378 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 378 "./qapi/qapi-types-machine.h"
      is_default;
  int64_t cpu_max;

# 380 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 380 "./qapi/qapi-types-machine.h"
      hotpluggable_cpus;

# 381 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 381 "./qapi/qapi-types-machine.h"
      numa_mem_supported;

# 382 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 382 "./qapi/qapi-types-machine.h"
      deprecated;
  char *default_cpu_type;
  char *default_ram_id;

# 385 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 385 "./qapi/qapi-types-machine.h"
      acpi;

# 386 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 386 "./qapi/qapi-types-machine.h"
      has_compat_props;
  CompatPropertyList *compat_props;
};

void qapi_free_MachineInfo(MachineInfo *obj);
typedef MachineInfo *MachineInfo_autoptr;
typedef GList *MachineInfo_listautoptr;
typedef GSList *MachineInfo_slistautoptr;
typedef GQueue *MachineInfo_queueautoptr;
# 391 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 391 "./qapi/qapi-types-machine.h"

# 391 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 391 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MachineInfo(MachineInfo *_ptr) {
  if (_ptr)
    (qapi_free_MachineInfo)((MachineInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MachineInfo(MachineInfo **_ptr) {
  glib_autoptr_clear_MachineInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MachineInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MachineInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MachineInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MachineInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MachineInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_MachineInfo);
}
# 391 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_query_machines_arg {

# 394 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 394 "./qapi/qapi-types-machine.h"
      has_compat_props;

# 395 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 395 "./qapi/qapi-types-machine.h"
      compat_props;
};

struct MachineInfoList {
  MachineInfoList *next;
  MachineInfo *value;
};

void qapi_free_MachineInfoList(MachineInfoList *obj);
typedef MachineInfoList *MachineInfoList_autoptr;
typedef GList *MachineInfoList_listautoptr;
typedef GSList *MachineInfoList_slistautoptr;
typedef GQueue *MachineInfoList_queueautoptr;
# 404 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 404 "./qapi/qapi-types-machine.h"

# 404 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 404 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MachineInfoList(MachineInfoList *_ptr) {
  if (_ptr)
    (qapi_free_MachineInfoList)((MachineInfoList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MachineInfoList(MachineInfoList **_ptr) {
  glib_autoptr_clear_MachineInfoList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MachineInfoList(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_MachineInfoList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MachineInfoList(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_MachineInfoList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MachineInfoList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_MachineInfoList);
}
# 404 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CurrentMachineParams {

# 407 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 407 "./qapi/qapi-types-machine.h"
      wakeup_suspend_support;
};

void qapi_free_CurrentMachineParams(CurrentMachineParams *obj);
typedef CurrentMachineParams *CurrentMachineParams_autoptr;
typedef GList *CurrentMachineParams_listautoptr;
typedef GSList *CurrentMachineParams_slistautoptr;
typedef GQueue *CurrentMachineParams_queueautoptr;
# 411 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 411 "./qapi/qapi-types-machine.h"

# 411 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 411 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CurrentMachineParams(CurrentMachineParams *_ptr) {
  if (_ptr)
    (qapi_free_CurrentMachineParams)((CurrentMachineParams *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CurrentMachineParams(CurrentMachineParams **_ptr) {
  glib_autoptr_clear_CurrentMachineParams(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CurrentMachineParams(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CurrentMachineParams);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CurrentMachineParams(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CurrentMachineParams);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CurrentMachineParams(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_CurrentMachineParams);
}
# 411 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct TargetInfo {
  SysEmuTarget arch;
};

void qapi_free_TargetInfo(TargetInfo *obj);
typedef TargetInfo *TargetInfo_autoptr;
typedef GList *TargetInfo_listautoptr;
typedef GSList *TargetInfo_slistautoptr;
typedef GQueue *TargetInfo_queueautoptr;
# 418 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 418 "./qapi/qapi-types-machine.h"

# 418 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 418 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_TargetInfo(TargetInfo *_ptr) {
  if (_ptr)
    (qapi_free_TargetInfo)((TargetInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_TargetInfo(TargetInfo **_ptr) {
  glib_autoptr_clear_TargetInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_TargetInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_TargetInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_TargetInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_TargetInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_TargetInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_TargetInfo);
}
# 418 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct UuidInfo {
  char *UUID;
};

void qapi_free_UuidInfo(UuidInfo *obj);
typedef UuidInfo *UuidInfo_autoptr;
typedef GList *UuidInfo_listautoptr;
typedef GSList *UuidInfo_slistautoptr;
typedef GQueue *UuidInfo_queueautoptr;
# 425 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 425 "./qapi/qapi-types-machine.h"

# 425 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 425 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_UuidInfo(UuidInfo *_ptr) {
  if (_ptr)
    (qapi_free_UuidInfo)((UuidInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_UuidInfo(UuidInfo **_ptr) {
  glib_autoptr_clear_UuidInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_UuidInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_UuidInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_UuidInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_UuidInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_UuidInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_UuidInfo);
}
# 425 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct GuidInfo {
  char *guid;
};

void qapi_free_GuidInfo(GuidInfo *obj);
typedef GuidInfo *GuidInfo_autoptr;
typedef GList *GuidInfo_listautoptr;
typedef GSList *GuidInfo_slistautoptr;
typedef GQueue *GuidInfo_queueautoptr;
# 432 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 432 "./qapi/qapi-types-machine.h"

# 432 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 432 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GuidInfo(GuidInfo *_ptr) {
  if (_ptr)
    (qapi_free_GuidInfo)((GuidInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GuidInfo(GuidInfo **_ptr) {
  glib_autoptr_clear_GuidInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GuidInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_GuidInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GuidInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_GuidInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GuidInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_GuidInfo);
}
# 432 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct KvmInfo {

# 435 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 435 "./qapi/qapi-types-machine.h"
      enabled;

# 436 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 436 "./qapi/qapi-types-machine.h"
      present;
};

void qapi_free_KvmInfo(KvmInfo *obj);
typedef KvmInfo *KvmInfo_autoptr;
typedef GList *KvmInfo_listautoptr;
typedef GSList *KvmInfo_slistautoptr;
typedef GQueue *KvmInfo_queueautoptr;
# 440 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 440 "./qapi/qapi-types-machine.h"

# 440 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 440 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_KvmInfo(KvmInfo *_ptr) {
  if (_ptr)
    (qapi_free_KvmInfo)((KvmInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_KvmInfo(KvmInfo **_ptr) {
  glib_autoptr_clear_KvmInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_KvmInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_KvmInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_KvmInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_KvmInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_KvmInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_KvmInfo);
}
# 440 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_NumaOptions_base {
  NumaOptionsType type;
};

struct NumaNodeOptions {

# 447 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 447 "./qapi/qapi-types-machine.h"
      has_nodeid;
  uint16_t nodeid;

# 449 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 449 "./qapi/qapi-types-machine.h"
      has_cpus;
  uint16List *cpus;

# 451 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 451 "./qapi/qapi-types-machine.h"
      has_mem;
  uint64_t mem;
  char *memdev;

# 454 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 454 "./qapi/qapi-types-machine.h"
      has_initiator;
  uint16_t initiator;
};

struct NumaDistOptions {
  uint16_t src;
  uint16_t dst;
  uint8_t val;
};

struct NumaCpuOptions {

# 466 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 466 "./qapi/qapi-types-machine.h"
      has_node_id;
  int64_t node_id;

# 468 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 468 "./qapi/qapi-types-machine.h"
      has_drawer_id;
  int64_t drawer_id;

# 470 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 470 "./qapi/qapi-types-machine.h"
      has_book_id;
  int64_t book_id;

# 472 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 472 "./qapi/qapi-types-machine.h"
      has_socket_id;
  int64_t socket_id;

# 474 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 474 "./qapi/qapi-types-machine.h"
      has_die_id;
  int64_t die_id;

# 476 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 476 "./qapi/qapi-types-machine.h"
      has_cluster_id;
  int64_t cluster_id;

# 478 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 478 "./qapi/qapi-types-machine.h"
      has_module_id;
  int64_t module_id;

# 480 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 480 "./qapi/qapi-types-machine.h"
      has_core_id;
  int64_t core_id;

# 482 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 482 "./qapi/qapi-types-machine.h"
      has_thread_id;
  int64_t thread_id;
};

struct NumaHmatLBOptions {
  uint16_t initiator;
  uint16_t target;
  HmatLBMemoryHierarchy hierarchy;
  HmatLBDataType data_type;

# 492 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 492 "./qapi/qapi-types-machine.h"
      has_latency;
  uint64_t latency;

# 494 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 494 "./qapi/qapi-types-machine.h"
      has_bandwidth;
  uint64_t bandwidth;
};

struct NumaHmatCacheOptions {
  uint32_t node_id;
  uint64_t size;
  uint8_t level;
  HmatCacheAssociativity associativity;
  HmatCacheWritePolicy policy;
  uint16_t line;
};

struct NumaOptions {
  NumaOptionsType type;
  union {
    NumaNodeOptions node;
    NumaDistOptions dist;
    NumaCpuOptions cpu;
    NumaHmatLBOptions hmat_lb;
    NumaHmatCacheOptions hmat_cache;
  } u;
};

void qapi_free_NumaOptions(NumaOptions *obj);
typedef NumaOptions *NumaOptions_autoptr;
typedef GList *NumaOptions_listautoptr;
typedef GSList *NumaOptions_slistautoptr;
typedef GQueue *NumaOptions_queueautoptr;
# 519 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 519 "./qapi/qapi-types-machine.h"

# 519 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 519 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaOptions(NumaOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaOptions)((NumaOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaOptions(NumaOptions **_ptr) {
  glib_autoptr_clear_NumaOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaOptions(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_NumaOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaOptions(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_NumaOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_NumaOptions);
}
# 519 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

void qapi_free_NumaNodeOptions(NumaNodeOptions *obj);
typedef NumaNodeOptions *NumaNodeOptions_autoptr;
typedef GList *NumaNodeOptions_listautoptr;
typedef GSList *NumaNodeOptions_slistautoptr;
typedef GQueue *NumaNodeOptions_queueautoptr;
# 522 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 522 "./qapi/qapi-types-machine.h"

# 522 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 522 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaNodeOptions(NumaNodeOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaNodeOptions)((NumaNodeOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaNodeOptions(NumaNodeOptions **_ptr) {
  glib_autoptr_clear_NumaNodeOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaNodeOptions(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_NumaNodeOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaNodeOptions(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_NumaNodeOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaNodeOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_NumaNodeOptions);
}
# 522 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

void qapi_free_NumaDistOptions(NumaDistOptions *obj);
typedef NumaDistOptions *NumaDistOptions_autoptr;
typedef GList *NumaDistOptions_listautoptr;
typedef GSList *NumaDistOptions_slistautoptr;
typedef GQueue *NumaDistOptions_queueautoptr;
# 525 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 525 "./qapi/qapi-types-machine.h"

# 525 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 525 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaDistOptions(NumaDistOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaDistOptions)((NumaDistOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaDistOptions(NumaDistOptions **_ptr) {
  glib_autoptr_clear_NumaDistOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaDistOptions(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_NumaDistOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaDistOptions(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_NumaDistOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaDistOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_NumaDistOptions);
}
# 525 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CXLFixedMemoryWindowOptions {
  uint64_t size;

# 529 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 529 "./qapi/qapi-types-machine.h"
      has_interleave_granularity;
  uint64_t interleave_granularity;
  strList *targets;
};

void qapi_free_CXLFixedMemoryWindowOptions(CXLFixedMemoryWindowOptions *obj);
typedef CXLFixedMemoryWindowOptions *CXLFixedMemoryWindowOptions_autoptr;
typedef GList *CXLFixedMemoryWindowOptions_listautoptr;
typedef GSList *CXLFixedMemoryWindowOptions_slistautoptr;
typedef GQueue *CXLFixedMemoryWindowOptions_queueautoptr;
# 535 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 535 "./qapi/qapi-types-machine.h"

# 535 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 535 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CXLFixedMemoryWindowOptions(
    CXLFixedMemoryWindowOptions *_ptr) {
  if (_ptr)
    (qapi_free_CXLFixedMemoryWindowOptions)(
        (CXLFixedMemoryWindowOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CXLFixedMemoryWindowOptions(
    CXLFixedMemoryWindowOptions **_ptr) {
  glib_autoptr_clear_CXLFixedMemoryWindowOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CXLFixedMemoryWindowOptions(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_CXLFixedMemoryWindowOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CXLFixedMemoryWindowOptions(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_CXLFixedMemoryWindowOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CXLFixedMemoryWindowOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_CXLFixedMemoryWindowOptions);
}
# 535 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CXLFixedMemoryWindowOptionsList {
  CXLFixedMemoryWindowOptionsList *next;
  CXLFixedMemoryWindowOptions *value;
};

void qapi_free_CXLFixedMemoryWindowOptionsList(
    CXLFixedMemoryWindowOptionsList *obj);
typedef CXLFixedMemoryWindowOptionsList
    *CXLFixedMemoryWindowOptionsList_autoptr;
typedef GList *CXLFixedMemoryWindowOptionsList_listautoptr;
typedef GSList *CXLFixedMemoryWindowOptionsList_slistautoptr;
typedef GQueue *CXLFixedMemoryWindowOptionsList_queueautoptr;
# 543 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 543 "./qapi/qapi-types-machine.h"

# 543 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 543 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CXLFixedMemoryWindowOptionsList(
    CXLFixedMemoryWindowOptionsList *_ptr) {
  if (_ptr)
    (qapi_free_CXLFixedMemoryWindowOptionsList)(
        (CXLFixedMemoryWindowOptionsList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CXLFixedMemoryWindowOptionsList(
    CXLFixedMemoryWindowOptionsList **_ptr) {
  glib_autoptr_clear_CXLFixedMemoryWindowOptionsList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CXLFixedMemoryWindowOptionsList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_CXLFixedMemoryWindowOptionsList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CXLFixedMemoryWindowOptionsList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_CXLFixedMemoryWindowOptionsList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CXLFixedMemoryWindowOptionsList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_CXLFixedMemoryWindowOptionsList);
}
# 543 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CXLFMWProperties {
  CXLFixedMemoryWindowOptionsList *cxl_fmw;
};

void qapi_free_CXLFMWProperties(CXLFMWProperties *obj);
typedef CXLFMWProperties *CXLFMWProperties_autoptr;
typedef GList *CXLFMWProperties_listautoptr;
typedef GSList *CXLFMWProperties_slistautoptr;
typedef GQueue *CXLFMWProperties_queueautoptr;
# 550 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 550 "./qapi/qapi-types-machine.h"

# 550 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 550 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CXLFMWProperties(CXLFMWProperties *_ptr) {
  if (_ptr)
    (qapi_free_CXLFMWProperties)((CXLFMWProperties *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CXLFMWProperties(CXLFMWProperties **_ptr) {
  glib_autoptr_clear_CXLFMWProperties(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CXLFMWProperties(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_CXLFMWProperties);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CXLFMWProperties(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_CXLFMWProperties);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CXLFMWProperties(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_CXLFMWProperties);
}
# 550 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct X86CPUFeatureWordInfo {
  int64_t cpuid_input_eax;

# 554 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 554 "./qapi/qapi-types-machine.h"
      has_cpuid_input_ecx;
  int64_t cpuid_input_ecx;
  X86CPURegister32 cpuid_register;
  int64_t features;
};

void qapi_free_X86CPUFeatureWordInfo(X86CPUFeatureWordInfo *obj);
typedef X86CPUFeatureWordInfo *X86CPUFeatureWordInfo_autoptr;
typedef GList *X86CPUFeatureWordInfo_listautoptr;
typedef GSList *X86CPUFeatureWordInfo_slistautoptr;
typedef GQueue *X86CPUFeatureWordInfo_queueautoptr;
# 561 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 561 "./qapi/qapi-types-machine.h"

# 561 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 561 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_X86CPUFeatureWordInfo(X86CPUFeatureWordInfo *_ptr) {
  if (_ptr)
    (qapi_free_X86CPUFeatureWordInfo)((X86CPUFeatureWordInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_X86CPUFeatureWordInfo(X86CPUFeatureWordInfo **_ptr) {
  glib_autoptr_clear_X86CPUFeatureWordInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_X86CPUFeatureWordInfo(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_X86CPUFeatureWordInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_X86CPUFeatureWordInfo(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_X86CPUFeatureWordInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_X86CPUFeatureWordInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_X86CPUFeatureWordInfo);
}
# 561 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct X86CPUFeatureWordInfoList {
  X86CPUFeatureWordInfoList *next;
  X86CPUFeatureWordInfo *value;
};

void qapi_free_X86CPUFeatureWordInfoList(X86CPUFeatureWordInfoList *obj);
typedef X86CPUFeatureWordInfoList *X86CPUFeatureWordInfoList_autoptr;
typedef GList *X86CPUFeatureWordInfoList_listautoptr;
typedef GSList *X86CPUFeatureWordInfoList_slistautoptr;
typedef GQueue *X86CPUFeatureWordInfoList_queueautoptr;
# 569 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 569 "./qapi/qapi-types-machine.h"

# 569 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 569 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_X86CPUFeatureWordInfoList(X86CPUFeatureWordInfoList *_ptr) {
  if (_ptr)
    (qapi_free_X86CPUFeatureWordInfoList)((X86CPUFeatureWordInfoList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_X86CPUFeatureWordInfoList(
    X86CPUFeatureWordInfoList **_ptr) {
  glib_autoptr_clear_X86CPUFeatureWordInfoList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_X86CPUFeatureWordInfoList(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_X86CPUFeatureWordInfoList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_X86CPUFeatureWordInfoList(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_X86CPUFeatureWordInfoList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_X86CPUFeatureWordInfoList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_X86CPUFeatureWordInfoList);
}
# 569 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct DummyForceArrays {
  X86CPUFeatureWordInfoList *unused;
};

void qapi_free_DummyForceArrays(DummyForceArrays *obj);
typedef DummyForceArrays *DummyForceArrays_autoptr;
typedef GList *DummyForceArrays_listautoptr;
typedef GSList *DummyForceArrays_slistautoptr;
typedef GQueue *DummyForceArrays_queueautoptr;
# 576 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 576 "./qapi/qapi-types-machine.h"

# 576 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 576 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_DummyForceArrays(DummyForceArrays *_ptr) {
  if (_ptr)
    (qapi_free_DummyForceArrays)((DummyForceArrays *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_DummyForceArrays(DummyForceArrays **_ptr) {
  glib_autoptr_clear_DummyForceArrays(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_DummyForceArrays(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_DummyForceArrays);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_DummyForceArrays(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_DummyForceArrays);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_DummyForceArrays(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_DummyForceArrays);
}
# 576 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

static inline CpuInstanceProperties *
qapi_NumaCpuOptions_base(const NumaCpuOptions *obj) {
  return (CpuInstanceProperties *)obj;
}

void qapi_free_NumaCpuOptions(NumaCpuOptions *obj);
typedef NumaCpuOptions *NumaCpuOptions_autoptr;
typedef GList *NumaCpuOptions_listautoptr;
typedef GSList *NumaCpuOptions_slistautoptr;
typedef GQueue *NumaCpuOptions_queueautoptr;
# 584 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 584 "./qapi/qapi-types-machine.h"

# 584 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 584 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaCpuOptions(NumaCpuOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaCpuOptions)((NumaCpuOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaCpuOptions(NumaCpuOptions **_ptr) {
  glib_autoptr_clear_NumaCpuOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaCpuOptions(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_NumaCpuOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaCpuOptions(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_NumaCpuOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaCpuOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_NumaCpuOptions);
}
# 584 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

void qapi_free_NumaHmatLBOptions(NumaHmatLBOptions *obj);
typedef NumaHmatLBOptions *NumaHmatLBOptions_autoptr;
typedef GList *NumaHmatLBOptions_listautoptr;
typedef GSList *NumaHmatLBOptions_slistautoptr;
typedef GQueue *NumaHmatLBOptions_queueautoptr;
# 587 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 587 "./qapi/qapi-types-machine.h"

# 587 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 587 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaHmatLBOptions(NumaHmatLBOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaHmatLBOptions)((NumaHmatLBOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaHmatLBOptions(NumaHmatLBOptions **_ptr) {
  glib_autoptr_clear_NumaHmatLBOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaHmatLBOptions(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatLBOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaHmatLBOptions(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatLBOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaHmatLBOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatLBOptions);
}
# 587 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

void qapi_free_NumaHmatCacheOptions(NumaHmatCacheOptions *obj);
typedef NumaHmatCacheOptions *NumaHmatCacheOptions_autoptr;
typedef GList *NumaHmatCacheOptions_listautoptr;
typedef GSList *NumaHmatCacheOptions_slistautoptr;
typedef GQueue *NumaHmatCacheOptions_queueautoptr;
# 590 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 590 "./qapi/qapi-types-machine.h"

# 590 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 590 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_NumaHmatCacheOptions(NumaHmatCacheOptions *_ptr) {
  if (_ptr)
    (qapi_free_NumaHmatCacheOptions)((NumaHmatCacheOptions *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_NumaHmatCacheOptions(NumaHmatCacheOptions **_ptr) {
  glib_autoptr_clear_NumaHmatCacheOptions(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_NumaHmatCacheOptions(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatCacheOptions);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_NumaHmatCacheOptions(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatCacheOptions);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_NumaHmatCacheOptions(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_NumaHmatCacheOptions);
}
# 590 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_memsave_arg {
  uint64_t val;
  uint64_t size;
  char *filename;

# 596 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 596 "./qapi/qapi-types-machine.h"
      has_cpu_index;
  int64_t cpu_index;
};

struct q_obj_pmemsave_arg {
  uint64_t val;
  uint64_t size;
  char *filename;
};

struct Memdev {
  char *id;
  uint64_t size;

# 609 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 609 "./qapi/qapi-types-machine.h"
      merge;

# 610 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 610 "./qapi/qapi-types-machine.h"
      dump;

# 611 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 611 "./qapi/qapi-types-machine.h"
      prealloc;

# 612 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 612 "./qapi/qapi-types-machine.h"
      share;

# 613 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 613 "./qapi/qapi-types-machine.h"
      has_reserve;

# 614 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 614 "./qapi/qapi-types-machine.h"
      reserve;
  uint16List *host_nodes;
  HostMemPolicy policy;
};

void qapi_free_Memdev(Memdev *obj);
typedef Memdev *Memdev_autoptr;
typedef GList *Memdev_listautoptr;
typedef GSList *Memdev_slistautoptr;
typedef GQueue *Memdev_queueautoptr;
# 620 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 620 "./qapi/qapi-types-machine.h"

# 620 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 620 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_Memdev(Memdev *_ptr) {
  if (_ptr)
    (qapi_free_Memdev)((Memdev *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_Memdev(Memdev **_ptr) {
  glib_autoptr_clear_Memdev(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_Memdev(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_Memdev);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_Memdev(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_Memdev);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_Memdev(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_Memdev);
}
# 620 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct MemdevList {
  MemdevList *next;
  Memdev *value;
};

void qapi_free_MemdevList(MemdevList *obj);
typedef MemdevList *MemdevList_autoptr;
typedef GList *MemdevList_listautoptr;
typedef GSList *MemdevList_slistautoptr;
typedef GQueue *MemdevList_queueautoptr;
# 628 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 628 "./qapi/qapi-types-machine.h"

# 628 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 628 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemdevList(MemdevList *_ptr) {
  if (_ptr)
    (qapi_free_MemdevList)((MemdevList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemdevList(MemdevList **_ptr) {
  glib_autoptr_clear_MemdevList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemdevList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MemdevList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemdevList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MemdevList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemdevList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_MemdevList);
}
# 628 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct CpuInstanceProperties {

# 631 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 631 "./qapi/qapi-types-machine.h"
      has_node_id;
  int64_t node_id;

# 633 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 633 "./qapi/qapi-types-machine.h"
      has_drawer_id;
  int64_t drawer_id;

# 635 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 635 "./qapi/qapi-types-machine.h"
      has_book_id;
  int64_t book_id;

# 637 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 637 "./qapi/qapi-types-machine.h"
      has_socket_id;
  int64_t socket_id;

# 639 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 639 "./qapi/qapi-types-machine.h"
      has_die_id;
  int64_t die_id;

# 641 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 641 "./qapi/qapi-types-machine.h"
      has_cluster_id;
  int64_t cluster_id;

# 643 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 643 "./qapi/qapi-types-machine.h"
      has_module_id;
  int64_t module_id;

# 645 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 645 "./qapi/qapi-types-machine.h"
      has_core_id;
  int64_t core_id;

# 647 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 647 "./qapi/qapi-types-machine.h"
      has_thread_id;
  int64_t thread_id;
};

void qapi_free_CpuInstanceProperties(CpuInstanceProperties *obj);
typedef CpuInstanceProperties *CpuInstanceProperties_autoptr;
typedef GList *CpuInstanceProperties_listautoptr;
typedef GSList *CpuInstanceProperties_slistautoptr;
typedef GQueue *CpuInstanceProperties_queueautoptr;
# 652 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 652 "./qapi/qapi-types-machine.h"

# 652 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 652 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_CpuInstanceProperties(CpuInstanceProperties *_ptr) {
  if (_ptr)
    (qapi_free_CpuInstanceProperties)((CpuInstanceProperties *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_CpuInstanceProperties(CpuInstanceProperties **_ptr) {
  glib_autoptr_clear_CpuInstanceProperties(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_CpuInstanceProperties(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInstanceProperties);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_CpuInstanceProperties(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_CpuInstanceProperties);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_CpuInstanceProperties(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_CpuInstanceProperties);
}
# 652 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct HotpluggableCPU {
  char *type;
  int64_t vcpus_count;
  CpuInstanceProperties *props;
  char *qom_path;
};

void qapi_free_HotpluggableCPU(HotpluggableCPU *obj);
typedef HotpluggableCPU *HotpluggableCPU_autoptr;
typedef GList *HotpluggableCPU_listautoptr;
typedef GSList *HotpluggableCPU_slistautoptr;
typedef GQueue *HotpluggableCPU_queueautoptr;
# 662 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 662 "./qapi/qapi-types-machine.h"

# 662 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 662 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HotpluggableCPU(HotpluggableCPU *_ptr) {
  if (_ptr)
    (qapi_free_HotpluggableCPU)((HotpluggableCPU *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HotpluggableCPU(HotpluggableCPU **_ptr) {
  glib_autoptr_clear_HotpluggableCPU(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HotpluggableCPU(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPU);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HotpluggableCPU(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPU);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HotpluggableCPU(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPU);
}
# 662 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct HotpluggableCPUList {
  HotpluggableCPUList *next;
  HotpluggableCPU *value;
};

void qapi_free_HotpluggableCPUList(HotpluggableCPUList *obj);
typedef HotpluggableCPUList *HotpluggableCPUList_autoptr;
typedef GList *HotpluggableCPUList_listautoptr;
typedef GSList *HotpluggableCPUList_slistautoptr;
typedef GQueue *HotpluggableCPUList_queueautoptr;
# 670 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 670 "./qapi/qapi-types-machine.h"

# 670 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 670 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HotpluggableCPUList(HotpluggableCPUList *_ptr) {
  if (_ptr)
    (qapi_free_HotpluggableCPUList)((HotpluggableCPUList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HotpluggableCPUList(HotpluggableCPUList **_ptr) {
  glib_autoptr_clear_HotpluggableCPUList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HotpluggableCPUList(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPUList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HotpluggableCPUList(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPUList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HotpluggableCPUList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_HotpluggableCPUList);
}
# 670 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_balloon_arg {
  int64_t value;
};

struct BalloonInfo {
  int64_t actual;
};

void qapi_free_BalloonInfo(BalloonInfo *obj);
typedef BalloonInfo *BalloonInfo_autoptr;
typedef GList *BalloonInfo_listautoptr;
typedef GSList *BalloonInfo_slistautoptr;
typedef GQueue *BalloonInfo_queueautoptr;
# 681 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 681 "./qapi/qapi-types-machine.h"

# 681 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 681 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_BalloonInfo(BalloonInfo *_ptr) {
  if (_ptr)
    (qapi_free_BalloonInfo)((BalloonInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_BalloonInfo(BalloonInfo **_ptr) {
  glib_autoptr_clear_BalloonInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_BalloonInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_BalloonInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_BalloonInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_BalloonInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_BalloonInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_BalloonInfo);
}
# 681 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_BALLOON_CHANGE_arg {
  int64_t actual;
};

struct HvBalloonInfo {
  uint64_t committed;
  uint64_t available;
};

void qapi_free_HvBalloonInfo(HvBalloonInfo *obj);
typedef HvBalloonInfo *HvBalloonInfo_autoptr;
typedef GList *HvBalloonInfo_listautoptr;
typedef GSList *HvBalloonInfo_slistautoptr;
typedef GQueue *HvBalloonInfo_queueautoptr;
# 693 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 693 "./qapi/qapi-types-machine.h"

# 693 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 693 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HvBalloonInfo(HvBalloonInfo *_ptr) {
  if (_ptr)
    (qapi_free_HvBalloonInfo)((HvBalloonInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HvBalloonInfo(HvBalloonInfo **_ptr) {
  glib_autoptr_clear_HvBalloonInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HvBalloonInfo(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HvBalloonInfo(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HvBalloonInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonInfo);
}
# 693 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct MemoryInfo {
  uint64_t base_memory;

# 697 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 697 "./qapi/qapi-types-machine.h"
      has_plugged_memory;
  uint64_t plugged_memory;
};

void qapi_free_MemoryInfo(MemoryInfo *obj);
typedef MemoryInfo *MemoryInfo_autoptr;
typedef GList *MemoryInfo_listautoptr;
typedef GSList *MemoryInfo_slistautoptr;
typedef GQueue *MemoryInfo_queueautoptr;
# 702 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 702 "./qapi/qapi-types-machine.h"

# 702 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 702 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemoryInfo(MemoryInfo *_ptr) {
  if (_ptr)
    (qapi_free_MemoryInfo)((MemoryInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemoryInfo(MemoryInfo **_ptr) {
  glib_autoptr_clear_MemoryInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemoryInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemoryInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemoryInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_MemoryInfo);
}
# 702 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct PCDIMMDeviceInfo {
  char *id;
  int64_t addr;
  int64_t size;
  int64_t slot;
  int64_t node;
  char *memdev;

# 711 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 711 "./qapi/qapi-types-machine.h"
      hotplugged;

# 712 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 712 "./qapi/qapi-types-machine.h"
      hotpluggable;
};

void qapi_free_PCDIMMDeviceInfo(PCDIMMDeviceInfo *obj);
typedef PCDIMMDeviceInfo *PCDIMMDeviceInfo_autoptr;
typedef GList *PCDIMMDeviceInfo_listautoptr;
typedef GSList *PCDIMMDeviceInfo_slistautoptr;
typedef GQueue *PCDIMMDeviceInfo_queueautoptr;
# 716 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 716 "./qapi/qapi-types-machine.h"

# 716 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 716 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_PCDIMMDeviceInfo(PCDIMMDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_PCDIMMDeviceInfo)((PCDIMMDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_PCDIMMDeviceInfo(PCDIMMDeviceInfo **_ptr) {
  glib_autoptr_clear_PCDIMMDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_PCDIMMDeviceInfo(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_PCDIMMDeviceInfo(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_PCDIMMDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfo);
}
# 716 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct VirtioPMEMDeviceInfo {
  char *id;
  uint64_t memaddr;
  uint64_t size;
  char *memdev;
};

void qapi_free_VirtioPMEMDeviceInfo(VirtioPMEMDeviceInfo *obj);
typedef VirtioPMEMDeviceInfo *VirtioPMEMDeviceInfo_autoptr;
typedef GList *VirtioPMEMDeviceInfo_listautoptr;
typedef GSList *VirtioPMEMDeviceInfo_slistautoptr;
typedef GQueue *VirtioPMEMDeviceInfo_queueautoptr;
# 726 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 726 "./qapi/qapi-types-machine.h"

# 726 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 726 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_VirtioPMEMDeviceInfo(VirtioPMEMDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_VirtioPMEMDeviceInfo)((VirtioPMEMDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_VirtioPMEMDeviceInfo(VirtioPMEMDeviceInfo **_ptr) {
  glib_autoptr_clear_VirtioPMEMDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_VirtioPMEMDeviceInfo(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_VirtioPMEMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_VirtioPMEMDeviceInfo(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_VirtioPMEMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_VirtioPMEMDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_VirtioPMEMDeviceInfo);
}
# 726 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct VirtioMEMDeviceInfo {
  char *id;
  uint64_t memaddr;
  uint64_t requested_size;
  uint64_t size;
  uint64_t max_size;
  uint64_t block_size;
  int64_t node;
  char *memdev;
};

void qapi_free_VirtioMEMDeviceInfo(VirtioMEMDeviceInfo *obj);
typedef VirtioMEMDeviceInfo *VirtioMEMDeviceInfo_autoptr;
typedef GList *VirtioMEMDeviceInfo_listautoptr;
typedef GSList *VirtioMEMDeviceInfo_slistautoptr;
typedef GQueue *VirtioMEMDeviceInfo_queueautoptr;
# 740 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 740 "./qapi/qapi-types-machine.h"

# 740 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 740 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_VirtioMEMDeviceInfo(VirtioMEMDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_VirtioMEMDeviceInfo)((VirtioMEMDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_VirtioMEMDeviceInfo(VirtioMEMDeviceInfo **_ptr) {
  glib_autoptr_clear_VirtioMEMDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_VirtioMEMDeviceInfo(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_VirtioMEMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_VirtioMEMDeviceInfo(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_VirtioMEMDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_VirtioMEMDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_VirtioMEMDeviceInfo);
}
# 740 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SgxEPCDeviceInfo {
  char *id;
  uint64_t memaddr;
  uint64_t size;
  int64_t node;
  char *memdev;
};

void qapi_free_SgxEPCDeviceInfo(SgxEPCDeviceInfo *obj);
typedef SgxEPCDeviceInfo *SgxEPCDeviceInfo_autoptr;
typedef GList *SgxEPCDeviceInfo_listautoptr;
typedef GSList *SgxEPCDeviceInfo_slistautoptr;
typedef GQueue *SgxEPCDeviceInfo_queueautoptr;
# 751 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 751 "./qapi/qapi-types-machine.h"

# 751 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 751 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SgxEPCDeviceInfo(SgxEPCDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_SgxEPCDeviceInfo)((SgxEPCDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SgxEPCDeviceInfo(SgxEPCDeviceInfo **_ptr) {
  glib_autoptr_clear_SgxEPCDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SgxEPCDeviceInfo(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SgxEPCDeviceInfo(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SgxEPCDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfo);
}
# 751 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct HvBalloonDeviceInfo {
  char *id;

# 755 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 755 "./qapi/qapi-types-machine.h"
      has_memaddr;
  uint64_t memaddr;
  uint64_t max_size;
  char *memdev;
};

void qapi_free_HvBalloonDeviceInfo(HvBalloonDeviceInfo *obj);
typedef HvBalloonDeviceInfo *HvBalloonDeviceInfo_autoptr;
typedef GList *HvBalloonDeviceInfo_listautoptr;
typedef GSList *HvBalloonDeviceInfo_slistautoptr;
typedef GQueue *HvBalloonDeviceInfo_queueautoptr;
# 762 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 762 "./qapi/qapi-types-machine.h"

# 762 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 762 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HvBalloonDeviceInfo(HvBalloonDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_HvBalloonDeviceInfo)((HvBalloonDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HvBalloonDeviceInfo(HvBalloonDeviceInfo **_ptr) {
  glib_autoptr_clear_HvBalloonDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HvBalloonDeviceInfo(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HvBalloonDeviceInfo(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HvBalloonDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_HvBalloonDeviceInfo);
}
# 762 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct PCDIMMDeviceInfoWrapper {
  PCDIMMDeviceInfo *data;
};

void qapi_free_PCDIMMDeviceInfoWrapper(PCDIMMDeviceInfoWrapper *obj);
typedef PCDIMMDeviceInfoWrapper *PCDIMMDeviceInfoWrapper_autoptr;
typedef GList *PCDIMMDeviceInfoWrapper_listautoptr;
typedef GSList *PCDIMMDeviceInfoWrapper_slistautoptr;
typedef GQueue *PCDIMMDeviceInfoWrapper_queueautoptr;
# 769 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 769 "./qapi/qapi-types-machine.h"

# 769 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 769 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_PCDIMMDeviceInfoWrapper(PCDIMMDeviceInfoWrapper *_ptr) {
  if (_ptr)
    (qapi_free_PCDIMMDeviceInfoWrapper)((PCDIMMDeviceInfoWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_PCDIMMDeviceInfoWrapper(PCDIMMDeviceInfoWrapper **_ptr) {
  glib_autoptr_clear_PCDIMMDeviceInfoWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_PCDIMMDeviceInfoWrapper(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_PCDIMMDeviceInfoWrapper(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_PCDIMMDeviceInfoWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_PCDIMMDeviceInfoWrapper);
}
# 769 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct VirtioPMEMDeviceInfoWrapper {
  VirtioPMEMDeviceInfo *data;
};

void qapi_free_VirtioPMEMDeviceInfoWrapper(VirtioPMEMDeviceInfoWrapper *obj);
typedef VirtioPMEMDeviceInfoWrapper *VirtioPMEMDeviceInfoWrapper_autoptr;
typedef GList *VirtioPMEMDeviceInfoWrapper_listautoptr;
typedef GSList *VirtioPMEMDeviceInfoWrapper_slistautoptr;
typedef GQueue *VirtioPMEMDeviceInfoWrapper_queueautoptr;
# 776 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 776 "./qapi/qapi-types-machine.h"

# 776 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 776 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_VirtioPMEMDeviceInfoWrapper(
    VirtioPMEMDeviceInfoWrapper *_ptr) {
  if (_ptr)
    (qapi_free_VirtioPMEMDeviceInfoWrapper)(
        (VirtioPMEMDeviceInfoWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_VirtioPMEMDeviceInfoWrapper(
    VirtioPMEMDeviceInfoWrapper **_ptr) {
  glib_autoptr_clear_VirtioPMEMDeviceInfoWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_VirtioPMEMDeviceInfoWrapper(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_VirtioPMEMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_VirtioPMEMDeviceInfoWrapper(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_VirtioPMEMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_VirtioPMEMDeviceInfoWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_VirtioPMEMDeviceInfoWrapper);
}
# 776 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct VirtioMEMDeviceInfoWrapper {
  VirtioMEMDeviceInfo *data;
};

void qapi_free_VirtioMEMDeviceInfoWrapper(VirtioMEMDeviceInfoWrapper *obj);
typedef VirtioMEMDeviceInfoWrapper *VirtioMEMDeviceInfoWrapper_autoptr;
typedef GList *VirtioMEMDeviceInfoWrapper_listautoptr;
typedef GSList *VirtioMEMDeviceInfoWrapper_slistautoptr;
typedef GQueue *VirtioMEMDeviceInfoWrapper_queueautoptr;
# 783 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 783 "./qapi/qapi-types-machine.h"

# 783 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 783 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_VirtioMEMDeviceInfoWrapper(
    VirtioMEMDeviceInfoWrapper *_ptr) {
  if (_ptr)
    (qapi_free_VirtioMEMDeviceInfoWrapper)((VirtioMEMDeviceInfoWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_VirtioMEMDeviceInfoWrapper(
    VirtioMEMDeviceInfoWrapper **_ptr) {
  glib_autoptr_clear_VirtioMEMDeviceInfoWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_VirtioMEMDeviceInfoWrapper(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_VirtioMEMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_VirtioMEMDeviceInfoWrapper(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_VirtioMEMDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_VirtioMEMDeviceInfoWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_VirtioMEMDeviceInfoWrapper);
}
# 783 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SgxEPCDeviceInfoWrapper {
  SgxEPCDeviceInfo *data;
};

void qapi_free_SgxEPCDeviceInfoWrapper(SgxEPCDeviceInfoWrapper *obj);
typedef SgxEPCDeviceInfoWrapper *SgxEPCDeviceInfoWrapper_autoptr;
typedef GList *SgxEPCDeviceInfoWrapper_listautoptr;
typedef GSList *SgxEPCDeviceInfoWrapper_slistautoptr;
typedef GQueue *SgxEPCDeviceInfoWrapper_queueautoptr;
# 790 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 790 "./qapi/qapi-types-machine.h"

# 790 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 790 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SgxEPCDeviceInfoWrapper(SgxEPCDeviceInfoWrapper *_ptr) {
  if (_ptr)
    (qapi_free_SgxEPCDeviceInfoWrapper)((SgxEPCDeviceInfoWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SgxEPCDeviceInfoWrapper(SgxEPCDeviceInfoWrapper **_ptr) {
  glib_autoptr_clear_SgxEPCDeviceInfoWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SgxEPCDeviceInfoWrapper(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SgxEPCDeviceInfoWrapper(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SgxEPCDeviceInfoWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCDeviceInfoWrapper);
}
# 790 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct HvBalloonDeviceInfoWrapper {
  HvBalloonDeviceInfo *data;
};

void qapi_free_HvBalloonDeviceInfoWrapper(HvBalloonDeviceInfoWrapper *obj);
typedef HvBalloonDeviceInfoWrapper *HvBalloonDeviceInfoWrapper_autoptr;
typedef GList *HvBalloonDeviceInfoWrapper_listautoptr;
typedef GSList *HvBalloonDeviceInfoWrapper_slistautoptr;
typedef GQueue *HvBalloonDeviceInfoWrapper_queueautoptr;
# 797 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 797 "./qapi/qapi-types-machine.h"

# 797 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 797 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_HvBalloonDeviceInfoWrapper(
    HvBalloonDeviceInfoWrapper *_ptr) {
  if (_ptr)
    (qapi_free_HvBalloonDeviceInfoWrapper)((HvBalloonDeviceInfoWrapper *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_HvBalloonDeviceInfoWrapper(
    HvBalloonDeviceInfoWrapper **_ptr) {
  glib_autoptr_clear_HvBalloonDeviceInfoWrapper(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_HvBalloonDeviceInfoWrapper(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_HvBalloonDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_HvBalloonDeviceInfoWrapper(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_HvBalloonDeviceInfoWrapper);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_HvBalloonDeviceInfoWrapper(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_HvBalloonDeviceInfoWrapper);
}
# 797 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_MemoryDeviceInfo_base {
  MemoryDeviceInfoKind type;
};

struct MemoryDeviceInfo {
  MemoryDeviceInfoKind type;
  union {
    PCDIMMDeviceInfoWrapper dimm;
    PCDIMMDeviceInfoWrapper nvdimm;
    VirtioPMEMDeviceInfoWrapper virtio_pmem;
    VirtioMEMDeviceInfoWrapper virtio_mem;
    SgxEPCDeviceInfoWrapper sgx_epc;
    HvBalloonDeviceInfoWrapper hv_balloon;
  } u;
};

void qapi_free_MemoryDeviceInfo(MemoryDeviceInfo *obj);
typedef MemoryDeviceInfo *MemoryDeviceInfo_autoptr;
typedef GList *MemoryDeviceInfo_listautoptr;
typedef GSList *MemoryDeviceInfo_slistautoptr;
typedef GQueue *MemoryDeviceInfo_queueautoptr;
# 816 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 816 "./qapi/qapi-types-machine.h"

# 816 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 816 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemoryDeviceInfo(MemoryDeviceInfo *_ptr) {
  if (_ptr)
    (qapi_free_MemoryDeviceInfo)((MemoryDeviceInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemoryDeviceInfo(MemoryDeviceInfo **_ptr) {
  glib_autoptr_clear_MemoryDeviceInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemoryDeviceInfo(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemoryDeviceInfo(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemoryDeviceInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfo);
}
# 816 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SgxEPC {
  char *memdev;
  int64_t node;
};

void qapi_free_SgxEPC(SgxEPC *obj);
typedef SgxEPC *SgxEPC_autoptr;
typedef GList *SgxEPC_listautoptr;
typedef GSList *SgxEPC_slistautoptr;
typedef GQueue *SgxEPC_queueautoptr;
# 824 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 824 "./qapi/qapi-types-machine.h"

# 824 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 824 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SgxEPC(SgxEPC *_ptr) {
  if (_ptr)
    (qapi_free_SgxEPC)((SgxEPC *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SgxEPC(SgxEPC **_ptr) {
  glib_autoptr_clear_SgxEPC(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SgxEPC(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPC);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SgxEPC(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPC);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SgxEPC(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPC);
}
# 824 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SgxEPCList {
  SgxEPCList *next;
  SgxEPC *value;
};

void qapi_free_SgxEPCList(SgxEPCList *obj);
typedef SgxEPCList *SgxEPCList_autoptr;
typedef GList *SgxEPCList_listautoptr;
typedef GSList *SgxEPCList_slistautoptr;
typedef GQueue *SgxEPCList_queueautoptr;
# 832 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 832 "./qapi/qapi-types-machine.h"

# 832 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 832 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SgxEPCList(SgxEPCList *_ptr) {
  if (_ptr)
    (qapi_free_SgxEPCList)((SgxEPCList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SgxEPCList(SgxEPCList **_ptr) {
  glib_autoptr_clear_SgxEPCList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SgxEPCList(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SgxEPCList(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SgxEPCList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCList);
}
# 832 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SgxEPCProperties {
  SgxEPCList *sgx_epc;
};

void qapi_free_SgxEPCProperties(SgxEPCProperties *obj);
typedef SgxEPCProperties *SgxEPCProperties_autoptr;
typedef GList *SgxEPCProperties_listautoptr;
typedef GSList *SgxEPCProperties_slistautoptr;
typedef GQueue *SgxEPCProperties_queueautoptr;
# 839 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 839 "./qapi/qapi-types-machine.h"

# 839 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 839 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SgxEPCProperties(SgxEPCProperties *_ptr) {
  if (_ptr)
    (qapi_free_SgxEPCProperties)((SgxEPCProperties *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SgxEPCProperties(SgxEPCProperties **_ptr) {
  glib_autoptr_clear_SgxEPCProperties(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SgxEPCProperties(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCProperties);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SgxEPCProperties(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCProperties);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SgxEPCProperties(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SgxEPCProperties);
}
# 839 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct MemoryDeviceInfoList {
  MemoryDeviceInfoList *next;
  MemoryDeviceInfo *value;
};

void qapi_free_MemoryDeviceInfoList(MemoryDeviceInfoList *obj);
typedef MemoryDeviceInfoList *MemoryDeviceInfoList_autoptr;
typedef GList *MemoryDeviceInfoList_listautoptr;
typedef GSList *MemoryDeviceInfoList_slistautoptr;
typedef GQueue *MemoryDeviceInfoList_queueautoptr;
# 847 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 847 "./qapi/qapi-types-machine.h"

# 847 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 847 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemoryDeviceInfoList(MemoryDeviceInfoList *_ptr) {
  if (_ptr)
    (qapi_free_MemoryDeviceInfoList)((MemoryDeviceInfoList *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemoryDeviceInfoList(MemoryDeviceInfoList **_ptr) {
  glib_autoptr_clear_MemoryDeviceInfoList(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemoryDeviceInfoList(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfoList);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemoryDeviceInfoList(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfoList);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemoryDeviceInfoList(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_MemoryDeviceInfoList);
}
# 847 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct q_obj_MEMORY_DEVICE_SIZE_CHANGE_arg {
  char *id;
  uint64_t size;
  char *qom_path;
};

struct BootConfiguration {
  char *order;
  char *once;

# 858 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 858 "./qapi/qapi-types-machine.h"
      has_menu;

# 859 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 859 "./qapi/qapi-types-machine.h"
      menu;
  char *splash;

# 861 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 861 "./qapi/qapi-types-machine.h"
      has_splash_time;
  int64_t splash_time;

# 863 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 863 "./qapi/qapi-types-machine.h"
      has_reboot_timeout;
  int64_t reboot_timeout;

# 865 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 865 "./qapi/qapi-types-machine.h"
      has_strict;

# 866 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 866 "./qapi/qapi-types-machine.h"
      strict;
};

void qapi_free_BootConfiguration(BootConfiguration *obj);
typedef BootConfiguration *BootConfiguration_autoptr;
typedef GList *BootConfiguration_listautoptr;
typedef GSList *BootConfiguration_slistautoptr;
typedef GQueue *BootConfiguration_queueautoptr;
# 870 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 870 "./qapi/qapi-types-machine.h"

# 870 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 870 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_BootConfiguration(BootConfiguration *_ptr) {
  if (_ptr)
    (qapi_free_BootConfiguration)((BootConfiguration *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_BootConfiguration(BootConfiguration **_ptr) {
  glib_autoptr_clear_BootConfiguration(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_BootConfiguration(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_BootConfiguration);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_BootConfiguration(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_BootConfiguration);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_BootConfiguration(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_BootConfiguration);
}
# 870 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct SMPConfiguration {

# 873 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 873 "./qapi/qapi-types-machine.h"
      has_cpus;
  int64_t cpus;

# 875 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 875 "./qapi/qapi-types-machine.h"
      has_drawers;
  int64_t drawers;

# 877 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 877 "./qapi/qapi-types-machine.h"
      has_books;
  int64_t books;

# 879 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 879 "./qapi/qapi-types-machine.h"
      has_sockets;
  int64_t sockets;

# 881 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 881 "./qapi/qapi-types-machine.h"
      has_dies;
  int64_t dies;

# 883 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 883 "./qapi/qapi-types-machine.h"
      has_clusters;
  int64_t clusters;

# 885 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 885 "./qapi/qapi-types-machine.h"
      has_modules;
  int64_t modules;

# 887 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 887 "./qapi/qapi-types-machine.h"
      has_cores;
  int64_t cores;

# 889 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 889 "./qapi/qapi-types-machine.h"
      has_threads;
  int64_t threads;

# 891 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 891 "./qapi/qapi-types-machine.h"
      has_maxcpus;
  int64_t maxcpus;
};

void qapi_free_SMPConfiguration(SMPConfiguration *obj);
typedef SMPConfiguration *SMPConfiguration_autoptr;
typedef GList *SMPConfiguration_listautoptr;
typedef GSList *SMPConfiguration_slistautoptr;
typedef GQueue *SMPConfiguration_queueautoptr;
# 896 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 896 "./qapi/qapi-types-machine.h"

# 896 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 896 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_SMPConfiguration(SMPConfiguration *_ptr) {
  if (_ptr)
    (qapi_free_SMPConfiguration)((SMPConfiguration *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_SMPConfiguration(SMPConfiguration **_ptr) {
  glib_autoptr_clear_SMPConfiguration(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_SMPConfiguration(GList **_l) {
  g_list_free_full(*_l,
                   (GDestroyNotify)(void (*)(void))qapi_free_SMPConfiguration);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_SMPConfiguration(GSList **_l) {
  g_slist_free_full(*_l,
                    (GDestroyNotify)(void (*)(void))qapi_free_SMPConfiguration);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_SMPConfiguration(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_SMPConfiguration);
}
# 896 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop

struct MemorySizeConfiguration {

# 899 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 899 "./qapi/qapi-types-machine.h"
      has_size;
  uint64_t size;

# 901 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 901 "./qapi/qapi-types-machine.h"
      has_max_size;
  uint64_t max_size;

# 903 "./qapi/qapi-types-machine.h" 3 4
  _Bool
# 903 "./qapi/qapi-types-machine.h"
      has_slots;
  uint64_t slots;
};

void qapi_free_MemorySizeConfiguration(MemorySizeConfiguration *obj);
typedef MemorySizeConfiguration *MemorySizeConfiguration_autoptr;
typedef GList *MemorySizeConfiguration_listautoptr;
typedef GSList *MemorySizeConfiguration_slistautoptr;
typedef GQueue *MemorySizeConfiguration_queueautoptr;
# 908 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic push
# 908 "./qapi/qapi-types-machine.h"

# 908 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 908 "./qapi/qapi-types-machine.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemorySizeConfiguration(MemorySizeConfiguration *_ptr) {
  if (_ptr)
    (qapi_free_MemorySizeConfiguration)((MemorySizeConfiguration *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemorySizeConfiguration(MemorySizeConfiguration **_ptr) {
  glib_autoptr_clear_MemorySizeConfiguration(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemorySizeConfiguration(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemorySizeConfiguration);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemorySizeConfiguration(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemorySizeConfiguration);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemorySizeConfiguration(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_MemorySizeConfiguration);
}
# 908 "./qapi/qapi-types-machine.h"
#pragma GCC diagnostic pop
# 32 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2
# 1 "./qapi/qapi-types-run-state.h" 1
# 18 "./qapi/qapi-types-run-state.h"
typedef enum RunState {
  RUN_STATE_DEBUG,
  RUN_STATE_INMIGRATE,
  RUN_STATE_INTERNAL_ERROR,
  RUN_STATE_IO_ERROR,
  RUN_STATE_PAUSED,
  RUN_STATE_POSTMIGRATE,
  RUN_STATE_PRELAUNCH,
  RUN_STATE_FINISH_MIGRATE,
  RUN_STATE_RESTORE_VM,
  RUN_STATE_RUNNING,
  RUN_STATE_SAVE_VM,
  RUN_STATE_SHUTDOWN,
  RUN_STATE_SUSPENDED,
  RUN_STATE_WATCHDOG,
  RUN_STATE_GUEST_PANICKED,
  RUN_STATE_COLO,
  RUN_STATE__MAX,
} RunState;

extern const QEnumLookup RunState_lookup;

typedef enum ShutdownCause {
  SHUTDOWN_CAUSE_NONE,
  SHUTDOWN_CAUSE_HOST_ERROR,
  SHUTDOWN_CAUSE_HOST_QMP_QUIT,
  SHUTDOWN_CAUSE_HOST_QMP_SYSTEM_RESET,
  SHUTDOWN_CAUSE_HOST_SIGNAL,
  SHUTDOWN_CAUSE_HOST_UI,
  SHUTDOWN_CAUSE_GUEST_SHUTDOWN,
  SHUTDOWN_CAUSE_GUEST_RESET,
  SHUTDOWN_CAUSE_GUEST_PANIC,
  SHUTDOWN_CAUSE_SUBSYSTEM_RESET,
  SHUTDOWN_CAUSE_SNAPSHOT_LOAD,
  SHUTDOWN_CAUSE__MAX,
} ShutdownCause;

extern const QEnumLookup ShutdownCause_lookup;

typedef struct StatusInfo StatusInfo;

typedef struct q_obj_SHUTDOWN_arg q_obj_SHUTDOWN_arg;

typedef struct q_obj_RESET_arg q_obj_RESET_arg;

typedef struct q_obj_WATCHDOG_arg q_obj_WATCHDOG_arg;

typedef enum WatchdogAction {
  WATCHDOG_ACTION_RESET,
  WATCHDOG_ACTION_SHUTDOWN,
  WATCHDOG_ACTION_POWEROFF,
  WATCHDOG_ACTION_PAUSE,
  WATCHDOG_ACTION_DEBUG,
  WATCHDOG_ACTION_NONE,
  WATCHDOG_ACTION_INJECT_NMI,
  WATCHDOG_ACTION__MAX,
} WatchdogAction;

extern const QEnumLookup WatchdogAction_lookup;

typedef enum RebootAction {
  REBOOT_ACTION_RESET,
  REBOOT_ACTION_SHUTDOWN,
  REBOOT_ACTION__MAX,
} RebootAction;

extern const QEnumLookup RebootAction_lookup;

typedef enum ShutdownAction {
  SHUTDOWN_ACTION_POWEROFF,
  SHUTDOWN_ACTION_PAUSE,
  SHUTDOWN_ACTION__MAX,
} ShutdownAction;

extern const QEnumLookup ShutdownAction_lookup;

typedef enum PanicAction {
  PANIC_ACTION_PAUSE,
  PANIC_ACTION_SHUTDOWN,
  PANIC_ACTION_EXIT_FAILURE,
  PANIC_ACTION_NONE,
  PANIC_ACTION__MAX,
} PanicAction;

extern const QEnumLookup PanicAction_lookup;

typedef struct q_obj_watchdog_set_action_arg q_obj_watchdog_set_action_arg;

typedef struct q_obj_set_action_arg q_obj_set_action_arg;

typedef struct q_obj_GUEST_PANICKED_arg q_obj_GUEST_PANICKED_arg;

typedef struct q_obj_GUEST_CRASHLOADED_arg q_obj_GUEST_CRASHLOADED_arg;

typedef enum GuestPanicAction {
  GUEST_PANIC_ACTION_PAUSE,
  GUEST_PANIC_ACTION_POWEROFF,
  GUEST_PANIC_ACTION_RUN,
  GUEST_PANIC_ACTION__MAX,
} GuestPanicAction;

extern const QEnumLookup GuestPanicAction_lookup;

typedef enum GuestPanicInformationType {
  GUEST_PANIC_INFORMATION_TYPE_HYPER_V,
  GUEST_PANIC_INFORMATION_TYPE_S390,
  GUEST_PANIC_INFORMATION_TYPE__MAX,
} GuestPanicInformationType;

extern const QEnumLookup GuestPanicInformationType_lookup;

typedef struct q_obj_GuestPanicInformation_base
    q_obj_GuestPanicInformation_base;

typedef struct GuestPanicInformation GuestPanicInformation;

typedef struct GuestPanicInformationHyperV GuestPanicInformationHyperV;

typedef enum S390CrashReason {
  S390_CRASH_REASON_UNKNOWN,
  S390_CRASH_REASON_DISABLED_WAIT,
  S390_CRASH_REASON_EXTINT_LOOP,
  S390_CRASH_REASON_PGMINT_LOOP,
  S390_CRASH_REASON_OPINT_LOOP,
  S390_CRASH_REASON__MAX,
} S390CrashReason;

extern const QEnumLookup S390CrashReason_lookup;

typedef struct GuestPanicInformationS390 GuestPanicInformationS390;

typedef struct q_obj_MEMORY_FAILURE_arg q_obj_MEMORY_FAILURE_arg;

typedef enum MemoryFailureRecipient {
  MEMORY_FAILURE_RECIPIENT_HYPERVISOR,
  MEMORY_FAILURE_RECIPIENT_GUEST,
  MEMORY_FAILURE_RECIPIENT__MAX,
} MemoryFailureRecipient;

extern const QEnumLookup MemoryFailureRecipient_lookup;

typedef enum MemoryFailureAction {
  MEMORY_FAILURE_ACTION_IGNORE,
  MEMORY_FAILURE_ACTION_INJECT,
  MEMORY_FAILURE_ACTION_FATAL,
  MEMORY_FAILURE_ACTION_RESET,
  MEMORY_FAILURE_ACTION__MAX,
} MemoryFailureAction;

extern const QEnumLookup MemoryFailureAction_lookup;

typedef struct MemoryFailureFlags MemoryFailureFlags;

typedef enum NotifyVmexitOption {
  NOTIFY_VMEXIT_OPTION_RUN,
  NOTIFY_VMEXIT_OPTION_INTERNAL_ERROR,
  NOTIFY_VMEXIT_OPTION_DISABLE,
  NOTIFY_VMEXIT_OPTION__MAX,
} NotifyVmexitOption;

extern const QEnumLookup NotifyVmexitOption_lookup;

struct StatusInfo {

# 216 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 216 "./qapi/qapi-types-run-state.h"
      running;
  RunState status;
};

void qapi_free_StatusInfo(StatusInfo *obj);
typedef StatusInfo *StatusInfo_autoptr;
typedef GList *StatusInfo_listautoptr;
typedef GSList *StatusInfo_slistautoptr;
typedef GQueue *StatusInfo_queueautoptr;
# 221 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic push
# 221 "./qapi/qapi-types-run-state.h"

# 221 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 221 "./qapi/qapi-types-run-state.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_StatusInfo(StatusInfo *_ptr) {
  if (_ptr)
    (qapi_free_StatusInfo)((StatusInfo *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_StatusInfo(StatusInfo **_ptr) {
  glib_autoptr_clear_StatusInfo(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_StatusInfo(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_StatusInfo);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_StatusInfo(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))qapi_free_StatusInfo);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_StatusInfo(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q,
                      (GDestroyNotify)(void (*)(void))qapi_free_StatusInfo);
}
# 221 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic pop

struct q_obj_SHUTDOWN_arg {

# 224 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 224 "./qapi/qapi-types-run-state.h"
      guest;
  ShutdownCause reason;
};

struct q_obj_RESET_arg {

# 229 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 229 "./qapi/qapi-types-run-state.h"
      guest;
  ShutdownCause reason;
};

struct q_obj_WATCHDOG_arg {
  WatchdogAction action;
};

struct q_obj_watchdog_set_action_arg {
  WatchdogAction action;
};

struct q_obj_set_action_arg {

# 242 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 242 "./qapi/qapi-types-run-state.h"
      has_reboot;
  RebootAction reboot;

# 244 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 244 "./qapi/qapi-types-run-state.h"
      has_shutdown;
  ShutdownAction shutdown;

# 246 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 246 "./qapi/qapi-types-run-state.h"
      has_panic;
  PanicAction panic;

# 248 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 248 "./qapi/qapi-types-run-state.h"
      has_watchdog;
  WatchdogAction watchdog;
};

struct q_obj_GUEST_PANICKED_arg {
  GuestPanicAction action;
  GuestPanicInformation *info;
};

struct q_obj_GUEST_CRASHLOADED_arg {
  GuestPanicAction action;
  GuestPanicInformation *info;
};

struct q_obj_GuestPanicInformation_base {
  GuestPanicInformationType type;
};

struct GuestPanicInformationHyperV {
  uint64_t arg1;
  uint64_t arg2;
  uint64_t arg3;
  uint64_t arg4;
  uint64_t arg5;
};

struct GuestPanicInformationS390 {
  uint32_t core;
  uint64_t psw_mask;
  uint64_t psw_addr;
  S390CrashReason reason;
};

struct GuestPanicInformation {
  GuestPanicInformationType type;
  union {
    GuestPanicInformationHyperV hyper_v;
    GuestPanicInformationS390 s390;
  } u;
};

void qapi_free_GuestPanicInformation(GuestPanicInformation *obj);
typedef GuestPanicInformation *GuestPanicInformation_autoptr;
typedef GList *GuestPanicInformation_listautoptr;
typedef GSList *GuestPanicInformation_slistautoptr;
typedef GQueue *GuestPanicInformation_queueautoptr;
# 290 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic push
# 290 "./qapi/qapi-types-run-state.h"

# 290 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 290 "./qapi/qapi-types-run-state.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GuestPanicInformation(GuestPanicInformation *_ptr) {
  if (_ptr)
    (qapi_free_GuestPanicInformation)((GuestPanicInformation *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GuestPanicInformation(GuestPanicInformation **_ptr) {
  glib_autoptr_clear_GuestPanicInformation(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GuestPanicInformation(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_GuestPanicInformation);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GuestPanicInformation(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_GuestPanicInformation);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GuestPanicInformation(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_GuestPanicInformation);
}
# 290 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic pop

void qapi_free_GuestPanicInformationHyperV(GuestPanicInformationHyperV *obj);
typedef GuestPanicInformationHyperV *GuestPanicInformationHyperV_autoptr;
typedef GList *GuestPanicInformationHyperV_listautoptr;
typedef GSList *GuestPanicInformationHyperV_slistautoptr;
typedef GQueue *GuestPanicInformationHyperV_queueautoptr;
# 293 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic push
# 293 "./qapi/qapi-types-run-state.h"

# 293 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 293 "./qapi/qapi-types-run-state.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GuestPanicInformationHyperV(
    GuestPanicInformationHyperV *_ptr) {
  if (_ptr)
    (qapi_free_GuestPanicInformationHyperV)(
        (GuestPanicInformationHyperV *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GuestPanicInformationHyperV(
    GuestPanicInformationHyperV **_ptr) {
  glib_autoptr_clear_GuestPanicInformationHyperV(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GuestPanicInformationHyperV(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(
                            void))qapi_free_GuestPanicInformationHyperV);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GuestPanicInformationHyperV(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(
                             void))qapi_free_GuestPanicInformationHyperV);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GuestPanicInformationHyperV(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_GuestPanicInformationHyperV);
}
# 293 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic pop

void qapi_free_GuestPanicInformationS390(GuestPanicInformationS390 *obj);
typedef GuestPanicInformationS390 *GuestPanicInformationS390_autoptr;
typedef GList *GuestPanicInformationS390_listautoptr;
typedef GSList *GuestPanicInformationS390_slistautoptr;
typedef GQueue *GuestPanicInformationS390_queueautoptr;
# 296 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic push
# 296 "./qapi/qapi-types-run-state.h"

# 296 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 296 "./qapi/qapi-types-run-state.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GuestPanicInformationS390(GuestPanicInformationS390 *_ptr) {
  if (_ptr)
    (qapi_free_GuestPanicInformationS390)((GuestPanicInformationS390 *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GuestPanicInformationS390(
    GuestPanicInformationS390 **_ptr) {
  glib_autoptr_clear_GuestPanicInformationS390(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GuestPanicInformationS390(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_GuestPanicInformationS390);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GuestPanicInformationS390(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_GuestPanicInformationS390);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GuestPanicInformationS390(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))qapi_free_GuestPanicInformationS390);
}
# 296 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic pop

struct q_obj_MEMORY_FAILURE_arg {
  MemoryFailureRecipient recipient;
  MemoryFailureAction action;
  MemoryFailureFlags *flags;
};

struct MemoryFailureFlags {

# 305 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 305 "./qapi/qapi-types-run-state.h"
      action_required;

# 306 "./qapi/qapi-types-run-state.h" 3 4
  _Bool
# 306 "./qapi/qapi-types-run-state.h"
      recursive;
};

void qapi_free_MemoryFailureFlags(MemoryFailureFlags *obj);
typedef MemoryFailureFlags *MemoryFailureFlags_autoptr;
typedef GList *MemoryFailureFlags_listautoptr;
typedef GSList *MemoryFailureFlags_slistautoptr;
typedef GQueue *MemoryFailureFlags_queueautoptr;
# 310 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic push
# 310 "./qapi/qapi-types-run-state.h"

# 310 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 310 "./qapi/qapi-types-run-state.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MemoryFailureFlags(MemoryFailureFlags *_ptr) {
  if (_ptr)
    (qapi_free_MemoryFailureFlags)((MemoryFailureFlags *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MemoryFailureFlags(MemoryFailureFlags **_ptr) {
  glib_autoptr_clear_MemoryFailureFlags(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MemoryFailureFlags(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryFailureFlags);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MemoryFailureFlags(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))qapi_free_MemoryFailureFlags);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MemoryFailureFlags(GQueue **_q) {
  if (*_q)
    g_queue_free_full(
        *_q, (GDestroyNotify)(void (*)(void))qapi_free_MemoryFailureFlags);
}
# 310 "./qapi/qapi-types-run-state.h"
#pragma GCC diagnostic pop
# 33 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/lockcnt.h" 1
# 17 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
typedef struct QemuLockCnt QemuLockCnt;

struct QemuLockCnt {

  unsigned count;
};
# 33 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
void qemu_lockcnt_init(QemuLockCnt *lockcnt);

void qemu_lockcnt_destroy(QemuLockCnt *lockcnt);
# 63 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
void qemu_lockcnt_inc(QemuLockCnt *lockcnt);

void qemu_lockcnt_dec(QemuLockCnt *lockcnt);
# 79 "/home/paulning/study/qemu/include/qemu/lockcnt.h"

# 79 "/home/paulning/study/qemu/include/qemu/lockcnt.h" 3 4
_Bool
# 79 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
    qemu_lockcnt_dec_and_lock(QemuLockCnt *lockcnt);
# 89 "/home/paulning/study/qemu/include/qemu/lockcnt.h"

# 89 "/home/paulning/study/qemu/include/qemu/lockcnt.h" 3 4
_Bool
# 89 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
    qemu_lockcnt_dec_if_lock(QemuLockCnt *lockcnt);
# 99 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
void qemu_lockcnt_lock(QemuLockCnt *lockcnt);

void qemu_lockcnt_unlock(QemuLockCnt *lockcnt);
# 118 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
void qemu_lockcnt_inc_and_unlock(QemuLockCnt *lockcnt);
# 128 "/home/paulning/study/qemu/include/qemu/lockcnt.h"
unsigned qemu_lockcnt_count(QemuLockCnt *lockcnt);
# 37 "/home/paulning/study/qemu/include/hw/core/cpu.h" 2

typedef int (*WriteCoreDumpFunction)(const void *buf, size_t size,
                                     void *opaque);
# 65 "/home/paulning/study/qemu/include/hw/core/cpu.h"
typedef struct CPUClass CPUClass;
static inline __attribute__((__unused__)) CPUClass *
CPU_GET_CLASS(const void *obj) {
  return ((CPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("cpu"),
      "/home/paulning/study/qemu/include/hw/core/cpu.h", 66, __func__));
}
static inline __attribute__((__unused__)) CPUClass *
CPU_CLASS(const void *klass) {
  return ((CPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("cpu"),
      "/home/paulning/study/qemu/include/hw/core/cpu.h", 66, __func__));
}
# 87 "/home/paulning/study/qemu/include/hw/core/cpu.h"
typedef struct CPUWatchpoint CPUWatchpoint;

struct CPUAddressSpace;

struct CPUJumpCache;

struct AccelCPUClass;

struct SysemuCPUOps;
# 147 "/home/paulning/study/qemu/include/hw/core/cpu.h"
struct CPUClass {

  DeviceClass parent_class;

  ObjectClass *(*class_by_name)(const char *cpu_model);
  void (*parse_features)(const char *typename, char *str, Error **errp);

  int (*mmu_index)(CPUState *cpu,
# 155 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                   _Bool
# 155 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                       ifetch);
  int (*memory_rw_debug)(CPUState *cpu, vaddr addr, uint8_t *buf, size_t len,
# 157 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                         _Bool
# 157 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                             is_write);
  void (*dump_state)(CPUState *cpu, FILE *, int flags);
  void (*query_cpu_fast)(CPUState *cpu, CpuInfoFast *value);
  int64_t (*get_arch_id)(CPUState *cpu);
  void (*set_pc)(CPUState *cpu, vaddr value);
  vaddr (*get_pc)(CPUState *cpu);
  int (*gdb_read_register)(CPUState *cpu, GByteArray *buf, int reg);
  int (*gdb_write_register)(CPUState *cpu, uint8_t *buf, int reg);
  vaddr (*gdb_adjust_breakpoint)(CPUState *cpu, vaddr addr);

  const char *gdb_core_xml_file;
  const gchar *(*gdb_arch_name)(CPUState *cpu);

  void (*disas_set_info)(CPUState *cpu, disassemble_info *info);

  const char *deprecation_note;
  struct AccelCPUClass *accel_cpu;

  const struct SysemuCPUOps *sysemu_ops;

  const TCGCPUOps *tcg_ops;

  void (*init_accel_cpu)(struct AccelCPUClass *accel_cpu, CPUClass *cc);

  int reset_dump_flags;
  int gdb_num_core_regs;

# 192 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 192 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      gdb_stop_before_watchpoint;
};
# 209 "/home/paulning/study/qemu/include/hw/core/cpu.h"
struct CPUTLBEntryFull {
# 219 "/home/paulning/study/qemu/include/hw/core/cpu.h"
  hwaddr xlat_section;

  hwaddr phys_addr;

  MemTxAttrs attrs;

  uint8_t prot;

  uint8_t lg_page_size;

  uint8_t tlb_fill_flags;

  uint8_t slow_flags[3];

  union {
# 259 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    struct {
      uint8_t pte_attrs;
      uint8_t shareability;

# 262 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
      _Bool
# 262 "/home/paulning/study/qemu/include/hw/core/cpu.h"
          guarded;
    } arm;
  } extra;
};

typedef struct CPUTLBDesc {

  vaddr large_page_addr;
  vaddr large_page_mask;

  int64_t window_begin_ns;

  size_t window_max_entries;
  size_t n_used_entries;

  size_t vindex;

  CPUTLBEntry vtable[8];
  CPUTLBEntryFull vfulltlb[8];
  CPUTLBEntryFull *fulltlb;
} CPUTLBDesc;

typedef struct CPUTLBCommon {

  QemuSpin lock;

  uint16_t dirty;

  size_t full_flush_count;
  size_t part_flush_count;
  size_t elide_flush_count;
} CPUTLBCommon;

typedef struct CPUTLB {

  CPUTLBCommon c;
  CPUTLBDesc d[16];
  CPUTLBDescFast f[16];

} CPUTLB;
# 336 "/home/paulning/study/qemu/include/hw/core/cpu.h"
typedef union IcountDecr {
  uint32_t u32;
  struct {

    uint16_t low;
    uint16_t high;

  } u16;
} IcountDecr;
# 357 "/home/paulning/study/qemu/include/hw/core/cpu.h"
typedef struct CPUNegativeOffsetState {
  CPUTLB tlb;
# 367 "/home/paulning/study/qemu/include/hw/core/cpu.h"
  IcountDecr icount_decr;

# 368 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 368 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      can_do_io;
} CPUNegativeOffsetState;

struct KVMState;
struct kvm_run;

typedef union {
  int host_int;
  unsigned long host_ulong;
  void *host_ptr;
  vaddr target_ptr;
} run_on_cpu_data;

typedef void (*run_on_cpu_func)(CPUState *cpu, run_on_cpu_data data);

struct qemu_work_item;
# 461 "/home/paulning/study/qemu/include/hw/core/cpu.h"
struct CPUState {

  DeviceState parent_obj;

  CPUClass *cc;

  int nr_threads;

  struct QemuThread *thread;

  int thread_id;

# 475 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 475 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      running,
      has_waiter;
  struct QemuCond *halt_cond;

# 477 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 477 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      thread_kicked;

# 478 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 478 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      created;

# 479 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 479 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      stop;

# 480 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 480 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      stopped;

# 483 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 483 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      start_powered_off;

# 485 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 485 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      unplug;

# 486 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 486 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      crash_occurred;

# 487 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 487 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      exit_request;
  int exclusive_context_count;
  uint32_t cflags_next_tb;

  uint32_t interrupt_request;
  int singlestep_enabled;
  int64_t icount_budget;
  int64_t icount_extra;
  uint64_t random_seed;
  sigjmp_buf jmp_env;

  QemuMutex work_mutex;
  struct {
    struct qemu_work_item *sqh_first;
    struct qemu_work_item **sqh_last;
  } work_list;

  struct CPUAddressSpace *cpu_ases;
  int cpu_ases_count;
  int num_ases;
  AddressSpace *as;
  MemoryRegion *memory;

  struct CPUJumpCache *tb_jmp_cache;

  GArray *gdb_regs;
  int gdb_num_regs;
  int gdb_num_g_regs;
  union {
    struct CPUState *tqe_next;
    QTailQLink tqe_circ;
  } node;

  union {
    struct CPUBreakpoint *tqh_first;
    QTailQLink tqh_circ;
  } breakpoints;

  union {
    struct CPUWatchpoint *tqh_first;
    QTailQLink tqh_circ;
  } watchpoints;
  CPUWatchpoint *watchpoint_hit;

  void *opaque;

  uintptr_t mem_io_pc;

  int kvm_fd;
  struct KVMState *kvm_state;
  struct kvm_run *kvm_run;
  struct kvm_dirty_gfn *kvm_dirty_gfns;
  uint32_t kvm_fetch_index;
  uint64_t dirty_pages;
  int kvm_vcpu_stats_fd;

# 535 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 535 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      vcpu_dirty;

  QemuLockCnt in_ioctl_lock;

  int cpu_index;
  int cluster_index;
  uint32_t tcg_cflags;
  uint32_t halted;
  int32_t exception_index;

  AccelCPUState *accel;

# 556 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 556 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      throttle_thread_scheduled;

  int64_t throttle_us_per_full;

# 564 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 564 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      ignore_memory_transaction_failures;

# 567 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
  _Bool
# 567 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      prctl_unalign_sigbus;

  GArray *iommu_notifiers;

  char neg_align[-sizeof(CPUNegativeOffsetState) % 16]
      __attribute__((aligned(16)));
  CPUNegativeOffsetState neg;
};

_Static_assert(!(
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                   __builtin_offsetof(
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                       CPUState
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                       ,
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                       neg
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                       )
# 580 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                   != sizeof(CPUState) - sizeof(CPUNegativeOffsetState)),
               "not expecting: "
               "offsetof(CPUState, neg) != sizeof(CPUState) - "
               "sizeof(CPUNegativeOffsetState)");

static inline CPUArchState *cpu_env(CPUState *cpu) {

  return (CPUArchState *)(cpu + 1);
}

typedef union CPUTailQ {
  struct CPUState *tqh_first;
  QTailQLink tqh_circ;
} CPUTailQ;
extern CPUTailQ cpus_queue;

extern __thread CPUState *current_cpu;

extern
# 606 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
    _Bool
# 606 "/home/paulning/study/qemu/include/hw/core/cpu.h"
        mttcg_enabled;
# 615 "/home/paulning/study/qemu/include/hw/core/cpu.h"

# 615 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
_Bool
# 615 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_paging_enabled(const CPUState *cpu);
# 688 "/home/paulning/study/qemu/include/hw/core/cpu.h"
enum CPUDumpFlags {
  CPU_DUMP_CODE = 0x00010000,
  CPU_DUMP_FPU = 0x00020000,
  CPU_DUMP_CCOP = 0x00040000,
  CPU_DUMP_VPU = 0x00080000,
};
# 702 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_dump_state(CPUState *cpu, FILE *f, int flags);
# 767 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_list_add(CPUState *cpu);

void cpu_list_remove(CPUState *cpu);

void cpu_reset(CPUState *cpu);
# 791 "/home/paulning/study/qemu/include/hw/core/cpu.h"
ObjectClass *cpu_class_by_name(const char *typename, const char *cpu_model);
# 804 "/home/paulning/study/qemu/include/hw/core/cpu.h"
char *cpu_model_from_type(const char *typename);
# 814 "/home/paulning/study/qemu/include/hw/core/cpu.h"
CPUState *cpu_create(const char *typename);
# 825 "/home/paulning/study/qemu/include/hw/core/cpu.h"
const char *parse_cpu_option(const char *cpu_option);
# 835 "/home/paulning/study/qemu/include/hw/core/cpu.h"

# 835 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
_Bool
# 835 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    qemu_cpu_is_self(CPUState *cpu);

void qemu_cpu_kick(CPUState *cpu);
# 854 "/home/paulning/study/qemu/include/hw/core/cpu.h"

# 854 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
_Bool
# 854 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_is_stopped(CPUState *cpu);
# 865 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void do_run_on_cpu(CPUState *cpu, run_on_cpu_func func, run_on_cpu_data data,
                   QemuMutex *mutex);
# 876 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void run_on_cpu(CPUState *cpu, run_on_cpu_func func, run_on_cpu_data data);
# 886 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void async_run_on_cpu(CPUState *cpu, run_on_cpu_func func,
                      run_on_cpu_data data);
# 900 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void async_safe_run_on_cpu(CPUState *cpu, run_on_cpu_func func,
                           run_on_cpu_data data);
# 909 "/home/paulning/study/qemu/include/hw/core/cpu.h"
static inline
# 909 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
    _Bool
# 909 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_in_exclusive_context(const CPUState *cpu) {
  return cpu->exclusive_context_count;
}
# 922 "/home/paulning/study/qemu/include/hw/core/cpu.h"
CPUState *qemu_get_cpu(int index);
# 932 "/home/paulning/study/qemu/include/hw/core/cpu.h"

# 932 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
_Bool
# 932 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_exists(int64_t id);
# 942 "/home/paulning/study/qemu/include/hw/core/cpu.h"
CPUState *cpu_by_arch_id(int64_t id);
# 952 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_interrupt(CPUState *cpu, int mask);
# 961 "/home/paulning/study/qemu/include/hw/core/cpu.h"
static inline void cpu_set_pc(CPUState *cpu, vaddr addr) {
  cpu->cc->set_pc(cpu, addr);
}
# 973 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_reset_interrupt(CPUState *cpu, int mask);

void cpu_exit(CPUState *cpu);

void cpu_pause(CPUState *cpu);

void cpu_resume(CPUState *cpu);

void cpu_remove_sync(CPUState *cpu);

void free_queued_cpu_work(CPUState *cpu);

void process_queued_cpu_work(CPUState *cpu);
# 1026 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_exec_start(CPUState *cpu);
# 1035 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_exec_end(CPUState *cpu);
# 1047 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void start_exclusive(void);

void end_exclusive(void);

void qemu_init_vcpu(CPUState *cpu);
# 1075 "/home/paulning/study/qemu/include/hw/core/cpu.h"
void cpu_single_step(CPUState *cpu, int enabled);
# 1091 "/home/paulning/study/qemu/include/hw/core/cpu.h"
int cpu_breakpoint_insert(CPUState *cpu, vaddr pc, int flags,
                          CPUBreakpoint **breakpoint);
int cpu_breakpoint_remove(CPUState *cpu, vaddr pc, int flags);
void cpu_breakpoint_remove_by_ref(CPUState *cpu, CPUBreakpoint *breakpoint);
void cpu_breakpoint_remove_all(CPUState *cpu, int mask);

static inline
# 1098 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
    _Bool
# 1098 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_breakpoint_test(CPUState *cpu, vaddr pc, int mask) {
  CPUBreakpoint *bp;

  if (__builtin_expect(!!(!((&cpu->breakpoints)->tqh_first ==
# 1102 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
                            ((void *)0)
# 1102 "/home/paulning/study/qemu/include/hw/core/cpu.h"
                                )),
                       0)) {
    for ((bp) = ((&cpu->breakpoints)->tqh_first); (bp);
         (bp) = ((bp)->entry.tqe_next)) {
      if (bp->pc == pc && (bp->flags & mask)) {
        return
# 1105 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
            1
# 1105 "/home/paulning/study/qemu/include/hw/core/cpu.h"
            ;
      }
    }
  }
  return
# 1109 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
      0
# 1109 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      ;
}

static inline int cpu_watchpoint_insert(CPUState *cpu, vaddr addr, vaddr len,
                                        int flags, CPUWatchpoint **watchpoint) {
  return -
# 1116 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
      38
# 1116 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      ;
}

static inline int cpu_watchpoint_remove(CPUState *cpu, vaddr addr, vaddr len,
                                        int flags) {
  return -
# 1122 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
      38
# 1122 "/home/paulning/study/qemu/include/hw/core/cpu.h"
      ;
}

static inline void cpu_watchpoint_remove_by_ref(CPUState *cpu,
                                                CPUWatchpoint *wp) {}

static inline void cpu_watchpoint_remove_all(CPUState *cpu, int mask) {}
# 1150 "/home/paulning/study/qemu/include/hw/core/cpu.h"
AddressSpace *cpu_get_address_space(CPUState *cpu, int asidx);

__attribute__((__noreturn__)) void cpu_abort(CPUState *cpu, const char *fmt,
                                             ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

void cpu_class_init_props(DeviceClass *dc);
void cpu_exec_class_post_init(CPUClass *cc);
void cpu_exec_initfn(CPUState *cpu);
void cpu_vmstate_register(CPUState *cpu);
void cpu_vmstate_unregister(CPUState *cpu);

# 1161 "/home/paulning/study/qemu/include/hw/core/cpu.h" 3 4
_Bool
# 1161 "/home/paulning/study/qemu/include/hw/core/cpu.h"
    cpu_exec_realizefn(CPUState *cpu, Error **errp);
void cpu_exec_unrealizefn(CPUState *cpu);
void cpu_exec_reset_hold(CPUState *cpu);

const char *target_name(void);
# 24 "../../../target/arm/cpu-qom.h" 2

typedef struct ArchCPU ARMCPU;
typedef struct ArchCPU ArchCPU;
typedef struct ARMCPUClass ARMCPUClass;
typedef ArchCPU *ArchCPU_autoptr;
typedef GList *ArchCPU_listautoptr;
typedef GSList *ArchCPU_slistautoptr;
typedef GQueue *ArchCPU_queueautoptr;
# 27 "../../../target/arm/cpu-qom.h"
#pragma GCC diagnostic push
# 27 "../../../target/arm/cpu-qom.h"

# 27 "../../../target/arm/cpu-qom.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 27 "../../../target/arm/cpu-qom.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_ArchCPU(ArchCPU *_ptr) {
  if (_ptr)
    (object_unref)((ArchCPU *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_ArchCPU(ArchCPU **_ptr) {
  glib_autoptr_clear_ArchCPU(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_ArchCPU(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_ArchCPU(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_ArchCPU(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 27 "../../../target/arm/cpu-qom.h"
#pragma GCC diagnostic pop
# 27 "../../../target/arm/cpu-qom.h"
static inline __attribute__((__unused__)) ArchCPU *ARM_CPU(const void *obj) {
  return ((ArchCPU *)object_dynamic_cast_assert(((Object *)(obj)), ("arm-cpu"),
                                                "../../../target/arm/cpu-qom.h",
                                                27, __func__));
}
static inline __attribute__((__unused__)) ARMCPUClass *
ARM_CPU_GET_CLASS(const void *obj) {
  return ((ARMCPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("arm-cpu"),
      "../../../target/arm/cpu-qom.h", 27, __func__));
}
static inline __attribute__((__unused__)) ARMCPUClass *
ARM_CPU_CLASS(const void *klass) {
  return ((ARMCPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("arm-cpu"), "../../../target/arm/cpu-qom.h",
      27, __func__));
};

typedef struct AArch64CPUClass AArch64CPUClass;
static inline __attribute__((__unused__)) AArch64CPUClass *
AARCH64_CPU_GET_CLASS(const void *obj) {
  return ((AArch64CPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("aarch64-cpu"),
      "../../../target/arm/cpu-qom.h", 33, __func__));
}
static inline __attribute__((__unused__)) AArch64CPUClass *
AARCH64_CPU_CLASS(const void *klass) {
  return ((AArch64CPUClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("aarch64-cpu"),
      "../../../target/arm/cpu-qom.h", 33, __func__));
}
# 57 "../../../target/arm/cpu-qom.h"
enum {
  M_REG_NS = 0,
  M_REG_S = 1,
  M_REG_NUM_BANKS = 2,
};
# 27 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/cpu-defs.h" 1
# 26 "/home/paulning/study/qemu/include/exec/cpu-defs.h"
# 1 "../../../target/arm/cpu-param.h" 1
# 27 "/home/paulning/study/qemu/include/exec/cpu-defs.h" 2
# 47 "/home/paulning/study/qemu/include/exec/cpu-defs.h"
# 1 "/home/paulning/study/qemu/include/exec/target_long.h" 1
# 27 "/home/paulning/study/qemu/include/exec/target_long.h"
typedef int32_t target_long;
typedef uint32_t target_ulong;
# 48 "/home/paulning/study/qemu/include/exec/cpu-defs.h" 2
# 28 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/gdbstub.h" 1

typedef struct GDBFeature {
  const char *xmlname;
  const char *xml;
  const char *name;
  const char *const *regs;
  int num_regs;
} GDBFeature;

typedef struct GDBFeatureBuilder {
  GDBFeature *feature;
  GPtrArray *xml;
  GPtrArray *regs;
  int base_reg;
} GDBFeatureBuilder;

typedef int (*gdb_get_reg_cb)(CPUState *cpu, GByteArray *buf, int reg);
typedef int (*gdb_set_reg_cb)(CPUState *cpu, uint8_t *buf, int reg);

void gdb_init_cpu(CPUState *cpu);
# 39 "/home/paulning/study/qemu/include/exec/gdbstub.h"
void gdb_register_coprocessor(CPUState *cpu, gdb_get_reg_cb get_reg,
                              gdb_set_reg_cb set_reg, const GDBFeature *feature,
                              int g_pos);

void gdb_unregister_coprocessor_all(CPUState *cpu);
# 63 "/home/paulning/study/qemu/include/exec/gdbstub.h"

# 63 "/home/paulning/study/qemu/include/exec/gdbstub.h" 3 4
_Bool
# 63 "/home/paulning/study/qemu/include/exec/gdbstub.h"
    gdbserver_start(const char *port_or_device, Error **errp);
# 73 "/home/paulning/study/qemu/include/exec/gdbstub.h"
void gdb_feature_builder_init(GDBFeatureBuilder *builder, GDBFeature *feature,
                              const char *name, const char *xmlname,
                              int base_reg);

void __attribute__((__format__(gnu_printf, 2, 3)))
gdb_feature_builder_append_tag(const GDBFeatureBuilder *builder,
                               const char *format, ...);
# 96 "/home/paulning/study/qemu/include/exec/gdbstub.h"
void gdb_feature_builder_append_reg(const GDBFeatureBuilder *builder,
                                    const char *name, int bitsize, int regnum,
                                    const char *type, const char *group);

void gdb_feature_builder_end(const GDBFeatureBuilder *builder);

const GDBFeature *gdb_find_static_feature(const char *xmlname);
# 125 "/home/paulning/study/qemu/include/exec/gdbstub.h"
int gdb_read_register(CPUState *cpu, GByteArray *buf, int reg);

typedef struct {
  int gdb_reg;
  const char *name;
  const char *feature_name;
} GDBRegDesc;
# 143 "/home/paulning/study/qemu/include/exec/gdbstub.h"
GArray *gdb_get_register_list(CPUState *cpu);

void gdb_set_stop_cpu(CPUState *cpu);

extern const GDBFeature gdb_static_features[];
# 29 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/include/exec/page-protection.h" 1
# 43 "/home/paulning/study/qemu/include/exec/page-protection.h"
void mmap_lock(void);
void mmap_unlock(void);

# 45 "/home/paulning/study/qemu/include/exec/page-protection.h" 3 4
_Bool
# 45 "/home/paulning/study/qemu/include/exec/page-protection.h"
    have_mmap_lock(void);

static inline void mmap_unlock_guard(void *unused) { mmap_unlock(); }
# 30 "../../../target/arm/cpu.h" 2
# 1 "./qapi/qapi-types-common.h" 1
# 31 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/target/arm/multiprocessing.h" 1
# 12 "/home/paulning/study/qemu/target/arm/multiprocessing.h"
# 1 "/home/paulning/study/qemu/target/arm/cpu-qom.h" 1
# 13 "/home/paulning/study/qemu/target/arm/multiprocessing.h" 2

uint64_t arm_cpu_mp_affinity(ARMCPU *cpu);
# 32 "../../../target/arm/cpu.h" 2
# 1 "/home/paulning/study/qemu/target/arm/gtimer.h" 1
# 12 "/home/paulning/study/qemu/target/arm/gtimer.h"
enum {
  GTIMER_PHYS = 0,
  GTIMER_VIRT = 1,
  GTIMER_HYP = 2,
  GTIMER_SEC = 3,
  GTIMER_HYPVIRT = 4,
  GTIMER_S_EL2_PHYS = 5,
  GTIMER_S_EL2_VIRT = 6,

};
# 33 "../../../target/arm/cpu.h" 2
# 133 "../../../target/arm/cpu.h"
typedef struct DynamicGDBFeatureInfo {
  GDBFeature desc;
  union {
    struct {
      uint32_t *keys;
    } cpregs;
  } data;
} DynamicGDBFeatureInfo;

typedef struct ARMGenericTimer {
  uint64_t cval;
  uint64_t ctl;
} ARMGenericTimer;
# 180 "../../../target/arm/cpu.h"
typedef struct ARMVectorReg {
  uint64_t d[2 * 1] __attribute__((aligned(16)));
} ARMVectorReg;
# 197 "../../../target/arm/cpu.h"
typedef struct CPUARMTBFlags {
  uint32_t flags;
  target_ulong flags2;
} CPUARMTBFlags;

typedef struct ARMMMUFaultInfo ARMMMUFaultInfo;

typedef struct NVICState NVICState;
# 249 "../../../target/arm/cpu.h"
typedef enum ARMFPStatusFlavour {
  FPST_A32,
  FPST_A64,
  FPST_A32_F16,
  FPST_A64_F16,
  FPST_AH,
  FPST_AH_F16,
  FPST_STD,
  FPST_STD_F16,
} ARMFPStatusFlavour;

typedef struct CPUArchState {

  uint32_t regs[16];

  uint64_t xregs[32];
  uint64_t pc;
# 285 "../../../target/arm/cpu.h"
  uint32_t pstate;

# 286 "../../../target/arm/cpu.h" 3 4
  _Bool
# 286 "../../../target/arm/cpu.h"
      aarch64;

# 287 "../../../target/arm/cpu.h" 3 4
  _Bool
# 287 "../../../target/arm/cpu.h"
      thumb;

  CPUARMTBFlags hflags;

  uint32_t uncached_cpsr;
  uint32_t spsr;

  uint64_t banked_spsr[8];
  uint32_t banked_r13[8];
  uint32_t banked_r14[8];

  uint32_t usr_regs[5];
  uint32_t fiq_regs[5];

  uint32_t CF;
  uint32_t VF;
  uint32_t NF;
  uint32_t ZF;
  uint32_t QF;
  uint32_t GE;
  uint32_t condexec_bits;
  uint32_t btype;
  uint64_t daif;
  uint64_t svcr;

  uint64_t elr_el[4];
  uint64_t sp_el[4];

  struct {
    uint32_t c0_cpuid;
    union {
      struct {
        uint64_t _unused_csselr0;
        uint64_t csselr_ns;
        uint64_t _unused_csselr1;
        uint64_t csselr_s;
      };
      uint64_t csselr_el[4];
    };
    union {
      struct {
        uint64_t _unused_sctlr;
        uint64_t sctlr_ns;
        uint64_t hsctlr;
        uint64_t sctlr_s;
      };
      uint64_t sctlr_el[4];
    };
    uint64_t vsctlr;
    uint64_t cpacr_el1;
    uint64_t cptr_el[4];
    uint32_t c1_xscaleauxcr;
    uint64_t sder;
    uint32_t nsacr;
    union {
      struct {
        uint64_t _unused_ttbr0_0;
        uint64_t ttbr0_ns;
        uint64_t _unused_ttbr0_1;
        uint64_t ttbr0_s;
      };
      uint64_t ttbr0_el[4];
    };
    union {
      struct {
        uint64_t _unused_ttbr1_0;
        uint64_t ttbr1_ns;
        uint64_t _unused_ttbr1_1;
        uint64_t ttbr1_s;
      };
      uint64_t ttbr1_el[4];
    };
    uint64_t vttbr_el2;
    uint64_t vsttbr_el2;

    uint64_t tcr_el[4];
    uint64_t vtcr_el2;
    uint64_t vstcr_el2;
    uint32_t c2_data;
    uint32_t c2_insn;
    union {

      struct {
        uint64_t dacr_ns;
        uint64_t dacr_s;
      };
      struct {
        uint64_t dacr32_el2;
      };
    };
    uint32_t pmsav5_data_ap;
    uint32_t pmsav5_insn_ap;
    uint64_t hcr_el2;
    uint64_t hcrx_el2;
    uint64_t scr_el3;
    union {
      struct {
        uint64_t ifsr_ns;
        uint64_t ifsr_s;
      };
      struct {
        uint64_t ifsr32_el2;
      };
    };
    union {
      struct {
        uint64_t _unused_dfsr;
        uint64_t dfsr_ns;
        uint64_t hsr;
        uint64_t dfsr_s;
      };
      uint64_t esr_el[4];
    };
    uint32_t c6_region[8];
    union {
      struct {
        uint64_t _unused_far0;

        uint32_t dfar_ns;
        uint32_t ifar_ns;
        uint32_t dfar_s;
        uint32_t ifar_s;

        uint64_t _unused_far3;
      };
      uint64_t far_el[4];
    };
    uint64_t hpfar_el2;
    uint64_t hstr_el2;
    union {
      struct {
        uint64_t _unused_par_0;
        uint64_t par_ns;
        uint64_t _unused_par_1;
        uint64_t par_s;
      };
      uint64_t par_el[4];
    };

    uint32_t c9_insn;
    uint32_t c9_data;
    uint64_t c9_pmcr;
    uint64_t c9_pmcnten;
    uint64_t c9_pmovsr;
    uint64_t c9_pmuserenr;
    uint64_t c9_pmselr;
    uint64_t c9_pminten;
    union {
      struct {
# 458 "../../../target/arm/cpu.h"
        uint64_t _unused_mair_0;
        uint32_t mair0_ns;
        uint32_t mair1_ns;
        uint64_t _unused_mair_1;
        uint32_t mair0_s;
        uint32_t mair1_s;
      };
      uint64_t mair_el[4];
    };
    union {
      struct {
        uint64_t _unused_vbar;
        uint64_t vbar_ns;
        uint64_t hvbar;
        uint64_t vbar_s;
      };
      uint64_t vbar_el[4];
    };
    uint32_t mvbar;
    uint64_t rvbar;
    struct {
      uint32_t fcseidr_ns;
      uint32_t fcseidr_s;
    };
    union {
      struct {
        uint64_t _unused_contextidr_0;
        uint64_t contextidr_ns;
        uint64_t _unused_contextidr_1;
        uint64_t contextidr_s;
      };
      uint64_t contextidr_el[4];
    };
    union {
      struct {
        uint64_t tpidrurw_ns;
        uint64_t tpidrprw_ns;
        uint64_t htpidr;
        uint64_t _tpidr_el3;
      };
      uint64_t tpidr_el[4];
    };
    uint64_t tpidr2_el0;

    uint64_t tpidrurw_s;
    uint64_t tpidrprw_s;
    uint64_t tpidruro_s;

    union {
      uint64_t tpidruro_ns;
      uint64_t tpidrro_el[1];
    };
    uint64_t c14_cntfrq;
    uint64_t c14_cntkctl;
    uint64_t cnthctl_el2;
    uint64_t cntvoff_el2;
    uint64_t cntpoff_el2;
    ARMGenericTimer c14_timer[7];
    uint32_t c15_cpar;
    uint32_t c15_ticonfig;
    uint32_t c15_i_max;
    uint32_t c15_i_min;
    uint32_t c15_threadid;
    uint32_t c15_config_base_address;
    uint32_t c15_diagnostic;
    uint32_t c15_power_diagnostic;
    uint32_t c15_power_control;
    uint64_t dbgbvr[16];
    uint64_t dbgbcr[16];
    uint64_t dbgwvr[16];
    uint64_t dbgwcr[16];
    uint64_t dbgclaim;
    uint64_t mdscr_el1;
    uint64_t oslsr_el1;
    uint64_t osdlr_el1;
    uint64_t mdcr_el2;
    uint64_t mdcr_el3;

    uint64_t c15_ccnt;

    uint64_t c15_ccnt_delta;
    uint64_t c14_pmevcntr[31];
    uint64_t c14_pmevcntr_delta[31];
    uint64_t c14_pmevtyper[31];
    uint64_t pmccfiltr_el0;
    uint64_t vpidr_el2;
    uint64_t vmpidr_el2;
    uint64_t tfsr_el[4];
    uint64_t gcr_el1;
    uint64_t rgsr_el1;

    uint64_t disr_el1;
    uint64_t vdisr_el2;
    uint64_t vsesr_el2;

    uint64_t fgt_read[2];
    uint64_t fgt_write[2];
    uint64_t fgt_exec[1];

    uint64_t gpccr_el3;
    uint64_t gptbr_el3;
    uint64_t mfar_el3;

    uint64_t vncr_el2;
  } cp15;

  struct {
# 596 "../../../target/arm/cpu.h"
    uint32_t other_sp;
    uint32_t other_ss_msp;
    uint32_t other_ss_psp;
    uint32_t vecbase[M_REG_NUM_BANKS];
    uint32_t basepri[M_REG_NUM_BANKS];
    uint32_t control[M_REG_NUM_BANKS];
    uint32_t ccr[M_REG_NUM_BANKS];
    uint32_t cfsr[M_REG_NUM_BANKS];
    uint32_t hfsr;
    uint32_t dfsr;
    uint32_t sfsr;
    uint32_t mmfar[M_REG_NUM_BANKS];
    uint32_t bfar;
    uint32_t sfar;
    unsigned mpu_ctrl[M_REG_NUM_BANKS];
    int exception;
    uint32_t primask[M_REG_NUM_BANKS];
    uint32_t faultmask[M_REG_NUM_BANKS];
    uint32_t aircr;
    uint32_t secure;
    uint32_t csselr[M_REG_NUM_BANKS];
    uint32_t scr[M_REG_NUM_BANKS];
    uint32_t msplim[M_REG_NUM_BANKS];
    uint32_t psplim[M_REG_NUM_BANKS];
    uint32_t fpcar[M_REG_NUM_BANKS];
    uint32_t fpccr[M_REG_NUM_BANKS];
    uint32_t fpdscr[M_REG_NUM_BANKS];
    uint32_t cpacr[M_REG_NUM_BANKS];
    uint32_t nsacr;
    uint32_t ltpsize;
    uint32_t vpr;
  } v7m;

  struct {
    uint32_t syndrome;
    uint32_t fsr;
    uint64_t vaddress;
    uint32_t target_el;

  } exception;

  struct {
    uint8_t pending;
    uint8_t has_esr;
    uint64_t esr;
  } serror;

  uint8_t ext_dabt_raised;

  uint32_t irq_line_state;

  uint32_t teecr;
  uint32_t teehbr;

  struct {
    ARMVectorReg zregs[32];
# 674 "../../../target/arm/cpu.h"
    uint32_t qc[4] __attribute__((aligned(16)));
    int vec_len;
    int vec_stride;

    uint64_t fpsr;
    uint64_t fpcr;

    uint32_t xregs[16];

    uint32_t scratch[8];

    float_status fp_status[8];

    uint64_t zcr_el[4];
    uint64_t smcr_el[4];
  } vfp;

  uint64_t exclusive_addr;
  uint64_t exclusive_val;

  uint64_t exclusive_high;

  struct {
    uint64_t regs[16];
    uint64_t val;

    uint32_t cregs[16];
  } iwmmxt;
# 750 "../../../target/arm/cpu.h"
  struct CPUBreakpoint *cpu_breakpoint[16];
  struct CPUWatchpoint *cpu_watchpoint[16];

  ARMMMUFaultInfo *tlb_fi;

  struct {
  } end_reset_fields;

  uint64_t features;

  struct {
    uint32_t *drbar;
    uint32_t *drsr;
    uint32_t *dracr;
    uint32_t rnr[M_REG_NUM_BANKS];
  } pmsav7;

  struct {

    uint32_t *rbar[M_REG_NUM_BANKS];
    uint32_t *rlar[M_REG_NUM_BANKS];
    uint32_t *hprbar;
    uint32_t *hprlar;
    uint32_t mair0[M_REG_NUM_BANKS];
    uint32_t mair1[M_REG_NUM_BANKS];
    uint32_t hprselr;
  } pmsav8;

  struct {
    uint32_t *rbar;
    uint32_t *rlar;
    uint32_t rnr;
    uint32_t ctrl;
  } sau;
# 803 "../../../target/arm/cpu.h"

# 803 "../../../target/arm/cpu.h" 3 4
  _Bool
# 803 "../../../target/arm/cpu.h"
      eabi;

} CPUARMState;

static inline void set_feature(CPUARMState *env, int feature) {
  env->features |= 1ULL << feature;
}

static inline void unset_feature(CPUARMState *env, int feature) {
  env->features &= ~(1ULL << feature);
}

typedef void ARMELChangeHookFn(ARMCPU *cpu, void *opaque);
typedef struct ARMELChangeHook ARMELChangeHook;
struct ARMELChangeHook {
  ARMELChangeHookFn *hook;
  void *opaque;
  struct {
    struct ARMELChangeHook *le_next;
    struct ARMELChangeHook **le_prev;
  } node;
};

typedef enum ARMPSCIState {
  PSCI_ON = 0,
  PSCI_OFF = 1,
  PSCI_ON_PENDING = 2
} ARMPSCIState;

typedef struct ARMISARegisters ARMISARegisters;
# 854 "../../../target/arm/cpu.h"
typedef struct {
  uint32_t map, init, supported;
} ARMVQMap;

struct ArchCPU {
  CPUState parent_obj;

  CPUARMState env;

  GHashTable *cp_regs;

  uint64_t *cpreg_indexes;

  uint64_t *cpreg_values;

  int32_t cpreg_array_len;

  uint64_t *cpreg_vmstate_indexes;
  uint64_t *cpreg_vmstate_values;
  int32_t cpreg_vmstate_array_len;

  DynamicGDBFeatureInfo dyn_sysreg_feature;
  DynamicGDBFeatureInfo dyn_svereg_feature;
  DynamicGDBFeatureInfo dyn_m_systemreg_feature;
  DynamicGDBFeatureInfo dyn_m_secextreg_feature;

  QEMUTimer *gt_timer[7];

  QEMUTimer *pmu_timer;

  QEMUTimer *wfxt_timer;

  qemu_irq gt_timer_outputs[7];

  qemu_irq gicv3_maintenance_interrupt;

  qemu_irq pmu_interrupt;

  MemoryRegion *secure_memory;

  MemoryRegion *tag_memory;
  MemoryRegion *secure_tag_memory;

  Object *idau;

  const char *dtb_compatible;

  uint32_t psci_version;

  ARMPSCIState power_state;

# 936 "../../../target/arm/cpu.h" 3 4
  _Bool
# 936 "../../../target/arm/cpu.h"
      has_el2;

# 938 "../../../target/arm/cpu.h" 3 4
  _Bool
# 938 "../../../target/arm/cpu.h"
      has_el3;

# 940 "../../../target/arm/cpu.h" 3 4
  _Bool
# 940 "../../../target/arm/cpu.h"
      has_pmu;

# 942 "../../../target/arm/cpu.h" 3 4
  _Bool
# 942 "../../../target/arm/cpu.h"
      has_vfp;

# 944 "../../../target/arm/cpu.h" 3 4
  _Bool
# 944 "../../../target/arm/cpu.h"
      has_vfp_d32;

# 946 "../../../target/arm/cpu.h" 3 4
  _Bool
# 946 "../../../target/arm/cpu.h"
      has_neon;

# 948 "../../../target/arm/cpu.h" 3 4
  _Bool
# 948 "../../../target/arm/cpu.h"
      has_dsp;

# 951 "../../../target/arm/cpu.h" 3 4
  _Bool
# 951 "../../../target/arm/cpu.h"
      has_mpu;

# 953 "../../../target/arm/cpu.h" 3 4
  _Bool
# 953 "../../../target/arm/cpu.h"
      kvm_mte;

  uint32_t pmsav7_dregion;

  uint32_t pmsav8r_hdregion;

  uint32_t sau_sregion;

  uint32_t psci_conduit;

  uint32_t init_svtor;

  uint32_t init_nsvtor;

  uint32_t kvm_target;
# 992 "../../../target/arm/cpu.h"

# 992 "../../../target/arm/cpu.h" 3 4
  _Bool
# 992 "../../../target/arm/cpu.h"
      mp_is_up;

# 997 "../../../target/arm/cpu.h" 3 4
  _Bool
# 997 "../../../target/arm/cpu.h"
      host_cpu_probe_failed;

# 1000 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1000 "../../../target/arm/cpu.h"
      backcompat_cntfrq;

# 1003 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1003 "../../../target/arm/cpu.h"
      backcompat_pauth_default_use_qarma5;

  int32_t core_count;
# 1027 "../../../target/arm/cpu.h"
  struct ARMISARegisters {
    uint32_t id_isar0;
    uint32_t id_isar1;
    uint32_t id_isar2;
    uint32_t id_isar3;
    uint32_t id_isar4;
    uint32_t id_isar5;
    uint32_t id_isar6;
    uint32_t id_mmfr0;
    uint32_t id_mmfr1;
    uint32_t id_mmfr2;
    uint32_t id_mmfr3;
    uint32_t id_mmfr4;
    uint32_t id_mmfr5;
    uint32_t id_pfr0;
    uint32_t id_pfr1;
    uint32_t id_pfr2;
    uint32_t mvfr0;
    uint32_t mvfr1;
    uint32_t mvfr2;
    uint32_t id_dfr0;
    uint32_t id_dfr1;
    uint32_t dbgdidr;
    uint32_t dbgdevid;
    uint32_t dbgdevid1;
    uint64_t id_aa64isar0;
    uint64_t id_aa64isar1;
    uint64_t id_aa64isar2;
    uint64_t id_aa64pfr0;
    uint64_t id_aa64pfr1;
    uint64_t id_aa64mmfr0;
    uint64_t id_aa64mmfr1;
    uint64_t id_aa64mmfr2;
    uint64_t id_aa64mmfr3;
    uint64_t id_aa64dfr0;
    uint64_t id_aa64dfr1;
    uint64_t id_aa64zfr0;
    uint64_t id_aa64smfr0;
    uint64_t reset_pmcr_el0;
  } isar;
  uint64_t midr;
  uint32_t revidr;
  uint32_t reset_fpsid;
  uint64_t ctr;
  uint32_t reset_sctlr;
  uint64_t pmceid0;
  uint64_t pmceid1;
  uint32_t id_afr0;
  uint64_t id_aa64afr0;
  uint64_t id_aa64afr1;
  uint64_t clidr;
  uint64_t mp_affinity;

  uint64_t ccsidr[16];
  uint64_t reset_cbar;
  uint32_t reset_auxcr;

# 1085 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1085 "../../../target/arm/cpu.h"
      reset_hivecs;
  uint8_t reset_l0gptsz;

# 1092 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1092 "../../../target/arm/cpu.h"
      prop_pauth;

# 1093 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1093 "../../../target/arm/cpu.h"
      prop_pauth_impdef;

# 1094 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1094 "../../../target/arm/cpu.h"
      prop_pauth_qarma3;

# 1095 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1095 "../../../target/arm/cpu.h"
      prop_pauth_qarma5;

# 1096 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1096 "../../../target/arm/cpu.h"
      prop_lpa2;

  uint8_t dcz_blocksize;

  uint8_t gm_blocksize;

  uint64_t rvbar_prop;

  int gic_num_lrs;
  int gic_vpribits;
  int gic_vprebits;
  int gic_pribits;

# 1116 "../../../target/arm/cpu.h" 3 4
  _Bool
# 1116 "../../../target/arm/cpu.h"
      cfgend;

  struct {
    struct ARMELChangeHook *lh_first;
  } pre_el_change_hooks;
  struct {
    struct ARMELChangeHook *lh_first;
  } el_change_hooks;

  int32_t node_id;

  uint8_t device_irq_level;

  uint32_t sve_max_vq;

  uint32_t sve_default_vq;
  uint32_t sme_default_vq;

  ARMVQMap sve_vq;
  ARMVQMap sme_vq;

  uint64_t gt_cntfrq_hz;
};

typedef struct ARMCPUInfo {
  const char *name;
  const char *deprecation_note;
  void (*initfn)(Object *obj);
  void (*class_init)(ObjectClass *oc, void *data);
} ARMCPUInfo;
# 1156 "../../../target/arm/cpu.h"
struct ARMCPUClass {
  CPUClass parent_class;

  const ARMCPUInfo *info;
  DeviceRealize parent_realize;
  ResettablePhases parent_phases;
};

struct AArch64CPUClass {
  ARMCPUClass parent_class;
};

void arm_gt_ptimer_cb(void *opaque);
void arm_gt_vtimer_cb(void *opaque);
void arm_gt_htimer_cb(void *opaque);
void arm_gt_stimer_cb(void *opaque);
void arm_gt_hvtimer_cb(void *opaque);
void arm_gt_sel2timer_cb(void *opaque);
void arm_gt_sel2vtimer_cb(void *opaque);

unsigned int gt_cntfrq_period_ns(ARMCPU *cpu);
void gt_rme_post_el_change(ARMCPU *cpu, void *opaque);

void arm_cpu_post_init(Object *obj);
# 1197 "../../../target/arm/cpu.h"
uint64_t arm_build_mp_affinity(int idx, uint8_t clustersz);
# 1209 "../../../target/arm/cpu.h"
int arm_cpu_gdb_read_register(CPUState *cpu, GByteArray *buf, int reg);
int arm_cpu_gdb_write_register(CPUState *cpu, uint8_t *buf, int reg);

int arm_cpu_write_elf64_note(WriteCoreDumpFunction f, CPUState *cs, int cpuid,
                             DumpState *s);
int arm_cpu_write_elf32_note(WriteCoreDumpFunction f, CPUState *cs, int cpuid,
                             DumpState *s);
# 1237 "../../../target/arm/cpu.h"
void arm_emulate_firmware_reset(CPUState *cpustate, int target_el);
# 1272 "../../../target/arm/cpu.h"
static inline void aarch64_sve_narrow_vq(CPUARMState *env, unsigned vq) {}
static inline void aarch64_sve_change_el(CPUARMState *env, int o, int n,
# 1274 "../../../target/arm/cpu.h" 3 4
                                         _Bool
# 1274 "../../../target/arm/cpu.h"
                                             a) {
}

void aarch64_sync_32_to_64(CPUARMState *env);
void aarch64_sync_64_to_32(CPUARMState *env);

int fp_exception_el(CPUARMState *env, int cur_el);
int sve_exception_el(CPUARMState *env, int cur_el);
int sme_exception_el(CPUARMState *env, int cur_el);
# 1295 "../../../target/arm/cpu.h"
uint32_t sve_vqm1_for_el_sm(CPUARMState *env, int el,
# 1295 "../../../target/arm/cpu.h" 3 4
                            _Bool
# 1295 "../../../target/arm/cpu.h"
                                sm);

uint32_t sve_vqm1_for_el(CPUARMState *env, int el);

static inline
# 1300 "../../../target/arm/cpu.h" 3 4
    _Bool
# 1300 "../../../target/arm/cpu.h"
    is_a64(CPUARMState *env) {
  return env->aarch64;
}
# 1313 "../../../target/arm/cpu.h"
void pmu_op_start(CPUARMState *env);
void pmu_op_finish(CPUARMState *env);

void arm_pmu_timer_cb(void *opaque);

void pmu_pre_el_change(ARMCPU *cpu, void *ignored);
void pmu_post_el_change(ARMCPU *cpu, void *ignored);
# 1334 "../../../target/arm/cpu.h"
void pmu_init(ARMCPU *cpu);
# 1514 "../../../target/arm/cpu.h"
enum { R_SVCR_SM_SHIFT = (0) };
enum { R_SVCR_SM_LENGTH = (1) };
enum { R_SVCR_SM_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_SVCR_ZA_SHIFT = (1) };
enum { R_SVCR_ZA_LENGTH = (1) };
enum { R_SVCR_ZA_MASK = (((~0ULL) >> (64 - (1))) << (1)) };

enum { R_SMCR_LEN_SHIFT = (0) };
enum { R_SMCR_LEN_LENGTH = (4) };
enum { R_SMCR_LEN_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_SMCR_FA64_SHIFT = (31) };
enum { R_SMCR_FA64_LENGTH = (1) };
enum { R_SMCR_FA64_MASK = (((~0ULL) >> (64 - (1))) << (31)) };

void write_v7m_exception(CPUARMState *env, uint32_t new_exc);

static inline unsigned int aarch64_pstate_mode(unsigned int el,
# 1527 "../../../target/arm/cpu.h" 3 4
                                               _Bool
# 1527 "../../../target/arm/cpu.h"
                                                   handler) {
  return (el << 2) | handler;
}

static inline uint32_t pstate_read(CPUARMState *env) {
  int ZF;

  ZF = (env->ZF == 0);
  return (env->NF & 0x80000000) | (ZF << 30) | (env->CF << 29) |
         ((env->VF & 0x80000000) >> 3) | env->pstate | env->daif |
         (env->btype << 10);
}

static inline void pstate_write(CPUARMState *env, uint32_t val) {
  env->ZF = (~val) & (1U << 30);
  env->NF = val;
  env->CF = (val >> 29) & 1;
  env->VF = (val << 3) & 0x80000000;
  env->daif = val & ((1U << 9) | (1U << 8) | (1U << 7) | (1U << 6));
  env->btype = (val >> 10) & 3;
  env->pstate =
      val & ~(((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28)) |
              ((1U << 9) | (1U << 8) | (1U << 7) | (1U << 6)) | (3U << 10));
}

uint32_t cpsr_read(CPUARMState *env);

typedef enum CPSRWriteType {
  CPSRWriteByInstr = 0,
  CPSRWriteExceptionReturn = 1,
  CPSRWriteRaw = 2,

  CPSRWriteByGDBStub = 3,
} CPSRWriteType;

void cpsr_write(CPUARMState *env, uint32_t val, uint32_t mask,
                CPSRWriteType write_type);

static inline uint32_t xpsr_read(CPUARMState *env) {
  int ZF;
  ZF = (env->ZF == 0);
  return (env->NF & 0x80000000) | (ZF << 30) | (env->CF << 29) |
         ((env->VF & 0x80000000) >> 3) | (env->QF << 27) | (env->thumb << 24) |
         ((env->condexec_bits & 3) << 25) | ((env->condexec_bits & 0xfc) << 8) |
         (env->GE << 16) | env->v7m.exception;
}

static inline void xpsr_write(CPUARMState *env, uint32_t val, uint32_t mask) {
  if (mask & ((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28))) {
    env->ZF = (~val) & (1U << 30);
    env->NF = val;
    env->CF = (val >> 29) & 1;
    env->VF = (val << 3) & 0x80000000;
  }
  if (mask & (1U << 27)) {
    env->QF = ((val & (1U << 27)) != 0);
  }
  if (mask & (0xfU << 16)) {
    env->GE = (val & (0xfU << 16)) >> 16;
  }
# 1622 "../../../target/arm/cpu.h"
}
# 1724 "../../../target/arm/cpu.h"
uint32_t vfp_get_fpscr(CPUARMState *env);
void vfp_set_fpscr(CPUARMState *env, uint32_t val);
# 1793 "../../../target/arm/cpu.h"
_Static_assert(
    !(((((1 << 31) | (1 << 30) | (1 << 29) | (1 << 28)) | (1 << 27)) |
       ((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 7))) &
      (((1 << 8) | (1 << 9) | (1 << 10) | (1 << 11) | (1 << 12) | (1 << 15)) |
       (7 << 16) | (1 << 19) | (3 << 20) | (3 << 22) | (1 << 24) | (1 << 25) |
       (1 << 26))),
    "not expecting: "
    "FPSCR_FPSR_MASK & FPSCR_FPCR_MASK");

uint32_t vfp_get_fpsr(CPUARMState *env);

uint32_t vfp_get_fpcr(CPUARMState *env);

void vfp_set_fpsr(CPUARMState *env, uint32_t value);

void vfp_set_fpcr(CPUARMState *env, uint32_t value);

enum arm_cpu_mode {
  ARM_CPU_MODE_USR = 0x10,
  ARM_CPU_MODE_FIQ = 0x11,
  ARM_CPU_MODE_IRQ = 0x12,
  ARM_CPU_MODE_SVC = 0x13,
  ARM_CPU_MODE_MON = 0x16,
  ARM_CPU_MODE_ABT = 0x17,
  ARM_CPU_MODE_HYP = 0x1a,
  ARM_CPU_MODE_UND = 0x1b,
  ARM_CPU_MODE_SYS = 0x1f
};
# 1867 "../../../target/arm/cpu.h"
enum { R_V7M_CCR_NONBASETHRDENA_SHIFT = (0) };
enum { R_V7M_CCR_NONBASETHRDENA_LENGTH = (1) };
enum { R_V7M_CCR_NONBASETHRDENA_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_CCR_USERSETMPEND_SHIFT = (1) };
enum { R_V7M_CCR_USERSETMPEND_LENGTH = (1) };
enum { R_V7M_CCR_USERSETMPEND_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_CCR_UNALIGN_TRP_SHIFT = (3) };
enum { R_V7M_CCR_UNALIGN_TRP_LENGTH = (1) };
enum { R_V7M_CCR_UNALIGN_TRP_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_CCR_DIV_0_TRP_SHIFT = (4) };
enum { R_V7M_CCR_DIV_0_TRP_LENGTH = (1) };
enum { R_V7M_CCR_DIV_0_TRP_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_V7M_CCR_BFHFNMIGN_SHIFT = (8) };
enum { R_V7M_CCR_BFHFNMIGN_LENGTH = (1) };
enum { R_V7M_CCR_BFHFNMIGN_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_V7M_CCR_STKALIGN_SHIFT = (9) };
enum { R_V7M_CCR_STKALIGN_LENGTH = (1) };
enum { R_V7M_CCR_STKALIGN_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_V7M_CCR_STKOFHFNMIGN_SHIFT = (10) };
enum { R_V7M_CCR_STKOFHFNMIGN_LENGTH = (1) };
enum { R_V7M_CCR_STKOFHFNMIGN_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_V7M_CCR_DC_SHIFT = (16) };
enum { R_V7M_CCR_DC_LENGTH = (1) };
enum { R_V7M_CCR_DC_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_V7M_CCR_IC_SHIFT = (17) };
enum { R_V7M_CCR_IC_LENGTH = (1) };
enum { R_V7M_CCR_IC_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_V7M_CCR_BP_SHIFT = (18) };
enum { R_V7M_CCR_BP_LENGTH = (1) };
enum { R_V7M_CCR_BP_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_V7M_CCR_LOB_SHIFT = (19) };
enum { R_V7M_CCR_LOB_LENGTH = (1) };
enum { R_V7M_CCR_LOB_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_V7M_CCR_TRD_SHIFT = (20) };
enum { R_V7M_CCR_TRD_LENGTH = (1) };
enum { R_V7M_CCR_TRD_MASK = (((~0ULL) >> (64 - (1))) << (20)) };

enum { R_V7M_SCR_SLEEPONEXIT_SHIFT = (1) };
enum { R_V7M_SCR_SLEEPONEXIT_LENGTH = (1) };
enum { R_V7M_SCR_SLEEPONEXIT_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_SCR_SLEEPDEEP_SHIFT = (2) };
enum { R_V7M_SCR_SLEEPDEEP_LENGTH = (1) };
enum { R_V7M_SCR_SLEEPDEEP_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_SCR_SLEEPDEEPS_SHIFT = (3) };
enum { R_V7M_SCR_SLEEPDEEPS_LENGTH = (1) };
enum { R_V7M_SCR_SLEEPDEEPS_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_SCR_SEVONPEND_SHIFT = (4) };
enum { R_V7M_SCR_SEVONPEND_LENGTH = (1) };
enum { R_V7M_SCR_SEVONPEND_MASK = (((~0ULL) >> (64 - (1))) << (4)) };

enum { R_V7M_AIRCR_VECTRESET_SHIFT = (0) };
enum { R_V7M_AIRCR_VECTRESET_LENGTH = (1) };
enum { R_V7M_AIRCR_VECTRESET_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_AIRCR_VECTCLRACTIVE_SHIFT = (1) };
enum { R_V7M_AIRCR_VECTCLRACTIVE_LENGTH = (1) };
enum { R_V7M_AIRCR_VECTCLRACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_AIRCR_SYSRESETREQ_SHIFT = (2) };
enum { R_V7M_AIRCR_SYSRESETREQ_LENGTH = (1) };
enum { R_V7M_AIRCR_SYSRESETREQ_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_AIRCR_SYSRESETREQS_SHIFT = (3) };
enum { R_V7M_AIRCR_SYSRESETREQS_LENGTH = (1) };
enum { R_V7M_AIRCR_SYSRESETREQS_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_AIRCR_PRIGROUP_SHIFT = (8) };
enum { R_V7M_AIRCR_PRIGROUP_LENGTH = (3) };
enum { R_V7M_AIRCR_PRIGROUP_MASK = (((~0ULL) >> (64 - (3))) << (8)) };
enum { R_V7M_AIRCR_BFHFNMINS_SHIFT = (13) };
enum { R_V7M_AIRCR_BFHFNMINS_LENGTH = (1) };
enum { R_V7M_AIRCR_BFHFNMINS_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_V7M_AIRCR_PRIS_SHIFT = (14) };
enum { R_V7M_AIRCR_PRIS_LENGTH = (1) };
enum { R_V7M_AIRCR_PRIS_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_V7M_AIRCR_ENDIANNESS_SHIFT = (15) };
enum { R_V7M_AIRCR_ENDIANNESS_LENGTH = (1) };
enum { R_V7M_AIRCR_ENDIANNESS_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_V7M_AIRCR_VECTKEY_SHIFT = (16) };
enum { R_V7M_AIRCR_VECTKEY_LENGTH = (16) };
enum { R_V7M_AIRCR_VECTKEY_MASK = (((~0ULL) >> (64 - (16))) << (16)) };

enum { R_V7M_CFSR_IACCVIOL_SHIFT = (0) };
enum { R_V7M_CFSR_IACCVIOL_LENGTH = (1) };
enum { R_V7M_CFSR_IACCVIOL_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_CFSR_DACCVIOL_SHIFT = (1) };
enum { R_V7M_CFSR_DACCVIOL_LENGTH = (1) };
enum { R_V7M_CFSR_DACCVIOL_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_CFSR_MUNSTKERR_SHIFT = (3) };
enum { R_V7M_CFSR_MUNSTKERR_LENGTH = (1) };
enum { R_V7M_CFSR_MUNSTKERR_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_CFSR_MSTKERR_SHIFT = (4) };
enum { R_V7M_CFSR_MSTKERR_LENGTH = (1) };
enum { R_V7M_CFSR_MSTKERR_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_V7M_CFSR_MLSPERR_SHIFT = (5) };
enum { R_V7M_CFSR_MLSPERR_LENGTH = (1) };
enum { R_V7M_CFSR_MLSPERR_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_V7M_CFSR_MMARVALID_SHIFT = (7) };
enum { R_V7M_CFSR_MMARVALID_LENGTH = (1) };
enum { R_V7M_CFSR_MMARVALID_MASK = (((~0ULL) >> (64 - (1))) << (7)) };

enum { R_V7M_CFSR_IBUSERR_SHIFT = (8 + 0) };
enum { R_V7M_CFSR_IBUSERR_LENGTH = (1) };
enum { R_V7M_CFSR_IBUSERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 0)) };
enum { R_V7M_CFSR_PRECISERR_SHIFT = (8 + 1) };
enum { R_V7M_CFSR_PRECISERR_LENGTH = (1) };
enum { R_V7M_CFSR_PRECISERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 1)) };
enum { R_V7M_CFSR_IMPRECISERR_SHIFT = (8 + 2) };
enum { R_V7M_CFSR_IMPRECISERR_LENGTH = (1) };
enum { R_V7M_CFSR_IMPRECISERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 2)) };
enum { R_V7M_CFSR_UNSTKERR_SHIFT = (8 + 3) };
enum { R_V7M_CFSR_UNSTKERR_LENGTH = (1) };
enum { R_V7M_CFSR_UNSTKERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 3)) };
enum { R_V7M_CFSR_STKERR_SHIFT = (8 + 4) };
enum { R_V7M_CFSR_STKERR_LENGTH = (1) };
enum { R_V7M_CFSR_STKERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 4)) };
enum { R_V7M_CFSR_LSPERR_SHIFT = (8 + 5) };
enum { R_V7M_CFSR_LSPERR_LENGTH = (1) };
enum { R_V7M_CFSR_LSPERR_MASK = (((~0ULL) >> (64 - (1))) << (8 + 5)) };
enum { R_V7M_CFSR_BFARVALID_SHIFT = (8 + 7) };
enum { R_V7M_CFSR_BFARVALID_LENGTH = (1) };
enum { R_V7M_CFSR_BFARVALID_MASK = (((~0ULL) >> (64 - (1))) << (8 + 7)) };

enum { R_V7M_CFSR_UNDEFINSTR_SHIFT = (16 + 0) };
enum { R_V7M_CFSR_UNDEFINSTR_LENGTH = (1) };
enum { R_V7M_CFSR_UNDEFINSTR_MASK = (((~0ULL) >> (64 - (1))) << (16 + 0)) };
enum { R_V7M_CFSR_INVSTATE_SHIFT = (16 + 1) };
enum { R_V7M_CFSR_INVSTATE_LENGTH = (1) };
enum { R_V7M_CFSR_INVSTATE_MASK = (((~0ULL) >> (64 - (1))) << (16 + 1)) };
enum { R_V7M_CFSR_INVPC_SHIFT = (16 + 2) };
enum { R_V7M_CFSR_INVPC_LENGTH = (1) };
enum { R_V7M_CFSR_INVPC_MASK = (((~0ULL) >> (64 - (1))) << (16 + 2)) };
enum { R_V7M_CFSR_NOCP_SHIFT = (16 + 3) };
enum { R_V7M_CFSR_NOCP_LENGTH = (1) };
enum { R_V7M_CFSR_NOCP_MASK = (((~0ULL) >> (64 - (1))) << (16 + 3)) };
enum { R_V7M_CFSR_STKOF_SHIFT = (16 + 4) };
enum { R_V7M_CFSR_STKOF_LENGTH = (1) };
enum { R_V7M_CFSR_STKOF_MASK = (((~0ULL) >> (64 - (1))) << (16 + 4)) };
enum { R_V7M_CFSR_UNALIGNED_SHIFT = (16 + 8) };
enum { R_V7M_CFSR_UNALIGNED_LENGTH = (1) };
enum { R_V7M_CFSR_UNALIGNED_MASK = (((~0ULL) >> (64 - (1))) << (16 + 8)) };
enum { R_V7M_CFSR_DIVBYZERO_SHIFT = (16 + 9) };
enum { R_V7M_CFSR_DIVBYZERO_LENGTH = (1) };
enum { R_V7M_CFSR_DIVBYZERO_MASK = (((~0ULL) >> (64 - (1))) << (16 + 9)) };

enum { R_V7M_CFSR_MMFSR_SHIFT = (0) };
enum { R_V7M_CFSR_MMFSR_LENGTH = (8) };
enum { R_V7M_CFSR_MMFSR_MASK = (((~0ULL) >> (64 - (8))) << (0)) };
enum { R_V7M_CFSR_BFSR_SHIFT = (8) };
enum { R_V7M_CFSR_BFSR_LENGTH = (8) };
enum { R_V7M_CFSR_BFSR_MASK = (((~0ULL) >> (64 - (8))) << (8)) };
enum { R_V7M_CFSR_UFSR_SHIFT = (16) };
enum { R_V7M_CFSR_UFSR_LENGTH = (16) };
enum { R_V7M_CFSR_UFSR_MASK = (((~0ULL) >> (64 - (16))) << (16)) };

enum { R_V7M_HFSR_VECTTBL_SHIFT = (1) };
enum { R_V7M_HFSR_VECTTBL_LENGTH = (1) };
enum { R_V7M_HFSR_VECTTBL_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_HFSR_FORCED_SHIFT = (30) };
enum { R_V7M_HFSR_FORCED_LENGTH = (1) };
enum { R_V7M_HFSR_FORCED_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_V7M_HFSR_DEBUGEVT_SHIFT = (31) };
enum { R_V7M_HFSR_DEBUGEVT_LENGTH = (1) };
enum { R_V7M_HFSR_DEBUGEVT_MASK = (((~0ULL) >> (64 - (1))) << (31)) };

enum { R_V7M_DFSR_HALTED_SHIFT = (0) };
enum { R_V7M_DFSR_HALTED_LENGTH = (1) };
enum { R_V7M_DFSR_HALTED_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_DFSR_BKPT_SHIFT = (1) };
enum { R_V7M_DFSR_BKPT_LENGTH = (1) };
enum { R_V7M_DFSR_BKPT_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_DFSR_DWTTRAP_SHIFT = (2) };
enum { R_V7M_DFSR_DWTTRAP_LENGTH = (1) };
enum { R_V7M_DFSR_DWTTRAP_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_DFSR_VCATCH_SHIFT = (3) };
enum { R_V7M_DFSR_VCATCH_LENGTH = (1) };
enum { R_V7M_DFSR_VCATCH_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_DFSR_EXTERNAL_SHIFT = (4) };
enum { R_V7M_DFSR_EXTERNAL_LENGTH = (1) };
enum { R_V7M_DFSR_EXTERNAL_MASK = (((~0ULL) >> (64 - (1))) << (4)) };

enum { R_V7M_SFSR_INVEP_SHIFT = (0) };
enum { R_V7M_SFSR_INVEP_LENGTH = (1) };
enum { R_V7M_SFSR_INVEP_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_SFSR_INVIS_SHIFT = (1) };
enum { R_V7M_SFSR_INVIS_LENGTH = (1) };
enum { R_V7M_SFSR_INVIS_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_SFSR_INVER_SHIFT = (2) };
enum { R_V7M_SFSR_INVER_LENGTH = (1) };
enum { R_V7M_SFSR_INVER_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_SFSR_AUVIOL_SHIFT = (3) };
enum { R_V7M_SFSR_AUVIOL_LENGTH = (1) };
enum { R_V7M_SFSR_AUVIOL_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_SFSR_INVTRAN_SHIFT = (4) };
enum { R_V7M_SFSR_INVTRAN_LENGTH = (1) };
enum { R_V7M_SFSR_INVTRAN_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_V7M_SFSR_LSPERR_SHIFT = (5) };
enum { R_V7M_SFSR_LSPERR_LENGTH = (1) };
enum { R_V7M_SFSR_LSPERR_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_V7M_SFSR_SFARVALID_SHIFT = (6) };
enum { R_V7M_SFSR_SFARVALID_LENGTH = (1) };
enum { R_V7M_SFSR_SFARVALID_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_V7M_SFSR_LSERR_SHIFT = (7) };
enum { R_V7M_SFSR_LSERR_LENGTH = (1) };
enum { R_V7M_SFSR_LSERR_MASK = (((~0ULL) >> (64 - (1))) << (7)) };

enum { R_V7M_MPU_CTRL_ENABLE_SHIFT = (0) };
enum { R_V7M_MPU_CTRL_ENABLE_LENGTH = (1) };
enum { R_V7M_MPU_CTRL_ENABLE_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_MPU_CTRL_HFNMIENA_SHIFT = (1) };
enum { R_V7M_MPU_CTRL_HFNMIENA_LENGTH = (1) };
enum { R_V7M_MPU_CTRL_HFNMIENA_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_MPU_CTRL_PRIVDEFENA_SHIFT = (2) };
enum { R_V7M_MPU_CTRL_PRIVDEFENA_LENGTH = (1) };
enum { R_V7M_MPU_CTRL_PRIVDEFENA_MASK = (((~0ULL) >> (64 - (1))) << (2)) };

enum { R_V7M_CLIDR_CTYPE_ALL_SHIFT = (0) };
enum { R_V7M_CLIDR_CTYPE_ALL_LENGTH = (21) };
enum { R_V7M_CLIDR_CTYPE_ALL_MASK = (((~0ULL) >> (64 - (21))) << (0)) };
enum { R_V7M_CLIDR_LOUIS_SHIFT = (21) };
enum { R_V7M_CLIDR_LOUIS_LENGTH = (3) };
enum { R_V7M_CLIDR_LOUIS_MASK = (((~0ULL) >> (64 - (3))) << (21)) };
enum { R_V7M_CLIDR_LOC_SHIFT = (24) };
enum { R_V7M_CLIDR_LOC_LENGTH = (3) };
enum { R_V7M_CLIDR_LOC_MASK = (((~0ULL) >> (64 - (3))) << (24)) };
enum { R_V7M_CLIDR_LOUU_SHIFT = (27) };
enum { R_V7M_CLIDR_LOUU_LENGTH = (3) };
enum { R_V7M_CLIDR_LOUU_MASK = (((~0ULL) >> (64 - (3))) << (27)) };
enum { R_V7M_CLIDR_ICB_SHIFT = (30) };
enum { R_V7M_CLIDR_ICB_LENGTH = (2) };
enum { R_V7M_CLIDR_ICB_MASK = (((~0ULL) >> (64 - (2))) << (30)) };

enum { R_V7M_CSSELR_IND_SHIFT = (0) };
enum { R_V7M_CSSELR_IND_LENGTH = (1) };
enum { R_V7M_CSSELR_IND_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_CSSELR_LEVEL_SHIFT = (1) };
enum { R_V7M_CSSELR_LEVEL_LENGTH = (3) };
enum { R_V7M_CSSELR_LEVEL_MASK = (((~0ULL) >> (64 - (3))) << (1)) };

enum { R_V7M_CSSELR_INDEX_SHIFT = (0) };
enum { R_V7M_CSSELR_INDEX_LENGTH = (4) };
enum { R_V7M_CSSELR_INDEX_MASK = (((~0ULL) >> (64 - (4))) << (0)) };

enum { R_V7M_FPCCR_LSPACT_SHIFT = (0) };
enum { R_V7M_FPCCR_LSPACT_LENGTH = (1) };
enum { R_V7M_FPCCR_LSPACT_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_FPCCR_USER_SHIFT = (1) };
enum { R_V7M_FPCCR_USER_LENGTH = (1) };
enum { R_V7M_FPCCR_USER_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_FPCCR_S_SHIFT = (2) };
enum { R_V7M_FPCCR_S_LENGTH = (1) };
enum { R_V7M_FPCCR_S_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_FPCCR_THREAD_SHIFT = (3) };
enum { R_V7M_FPCCR_THREAD_LENGTH = (1) };
enum { R_V7M_FPCCR_THREAD_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_FPCCR_HFRDY_SHIFT = (4) };
enum { R_V7M_FPCCR_HFRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_HFRDY_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_V7M_FPCCR_MMRDY_SHIFT = (5) };
enum { R_V7M_FPCCR_MMRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_MMRDY_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_V7M_FPCCR_BFRDY_SHIFT = (6) };
enum { R_V7M_FPCCR_BFRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_BFRDY_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_V7M_FPCCR_SFRDY_SHIFT = (7) };
enum { R_V7M_FPCCR_SFRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_SFRDY_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_V7M_FPCCR_MONRDY_SHIFT = (8) };
enum { R_V7M_FPCCR_MONRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_MONRDY_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_V7M_FPCCR_SPLIMVIOL_SHIFT = (9) };
enum { R_V7M_FPCCR_SPLIMVIOL_LENGTH = (1) };
enum { R_V7M_FPCCR_SPLIMVIOL_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_V7M_FPCCR_UFRDY_SHIFT = (10) };
enum { R_V7M_FPCCR_UFRDY_LENGTH = (1) };
enum { R_V7M_FPCCR_UFRDY_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_V7M_FPCCR_RES0_SHIFT = (11) };
enum { R_V7M_FPCCR_RES0_LENGTH = (15) };
enum { R_V7M_FPCCR_RES0_MASK = (((~0ULL) >> (64 - (15))) << (11)) };
enum { R_V7M_FPCCR_TS_SHIFT = (26) };
enum { R_V7M_FPCCR_TS_LENGTH = (1) };
enum { R_V7M_FPCCR_TS_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_V7M_FPCCR_CLRONRETS_SHIFT = (27) };
enum { R_V7M_FPCCR_CLRONRETS_LENGTH = (1) };
enum { R_V7M_FPCCR_CLRONRETS_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_V7M_FPCCR_CLRONRET_SHIFT = (28) };
enum { R_V7M_FPCCR_CLRONRET_LENGTH = (1) };
enum { R_V7M_FPCCR_CLRONRET_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_V7M_FPCCR_LSPENS_SHIFT = (29) };
enum { R_V7M_FPCCR_LSPENS_LENGTH = (1) };
enum { R_V7M_FPCCR_LSPENS_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_V7M_FPCCR_LSPEN_SHIFT = (30) };
enum { R_V7M_FPCCR_LSPEN_LENGTH = (1) };
enum { R_V7M_FPCCR_LSPEN_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_V7M_FPCCR_ASPEN_SHIFT = (31) };
enum { R_V7M_FPCCR_ASPEN_LENGTH = (1) };
enum { R_V7M_FPCCR_ASPEN_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
# 2000 "../../../target/arm/cpu.h"
enum { R_V7M_VPR_P0_SHIFT = (0) };
enum { R_V7M_VPR_P0_LENGTH = (16) };
enum { R_V7M_VPR_P0_MASK = (((~0ULL) >> (64 - (16))) << (0)) };
enum { R_V7M_VPR_MASK01_SHIFT = (16) };
enum { R_V7M_VPR_MASK01_LENGTH = (4) };
enum { R_V7M_VPR_MASK01_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_V7M_VPR_MASK23_SHIFT = (20) };
enum { R_V7M_VPR_MASK23_LENGTH = (4) };
enum { R_V7M_VPR_MASK23_MASK = (((~0ULL) >> (64 - (4))) << (20)) };

enum { R_CLIDR_EL1_CTYPE1_SHIFT = (0) };
enum { R_CLIDR_EL1_CTYPE1_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE1_MASK = (((~0ULL) >> (64 - (3))) << (0)) };
enum { R_CLIDR_EL1_CTYPE2_SHIFT = (3) };
enum { R_CLIDR_EL1_CTYPE2_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE2_MASK = (((~0ULL) >> (64 - (3))) << (3)) };
enum { R_CLIDR_EL1_CTYPE3_SHIFT = (6) };
enum { R_CLIDR_EL1_CTYPE3_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE3_MASK = (((~0ULL) >> (64 - (3))) << (6)) };
enum { R_CLIDR_EL1_CTYPE4_SHIFT = (9) };
enum { R_CLIDR_EL1_CTYPE4_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE4_MASK = (((~0ULL) >> (64 - (3))) << (9)) };
enum { R_CLIDR_EL1_CTYPE5_SHIFT = (12) };
enum { R_CLIDR_EL1_CTYPE5_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE5_MASK = (((~0ULL) >> (64 - (3))) << (12)) };
enum { R_CLIDR_EL1_CTYPE6_SHIFT = (15) };
enum { R_CLIDR_EL1_CTYPE6_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE6_MASK = (((~0ULL) >> (64 - (3))) << (15)) };
enum { R_CLIDR_EL1_CTYPE7_SHIFT = (18) };
enum { R_CLIDR_EL1_CTYPE7_LENGTH = (3) };
enum { R_CLIDR_EL1_CTYPE7_MASK = (((~0ULL) >> (64 - (3))) << (18)) };
enum { R_CLIDR_EL1_LOUIS_SHIFT = (21) };
enum { R_CLIDR_EL1_LOUIS_LENGTH = (3) };
enum { R_CLIDR_EL1_LOUIS_MASK = (((~0ULL) >> (64 - (3))) << (21)) };
enum { R_CLIDR_EL1_LOC_SHIFT = (24) };
enum { R_CLIDR_EL1_LOC_LENGTH = (3) };
enum { R_CLIDR_EL1_LOC_MASK = (((~0ULL) >> (64 - (3))) << (24)) };
enum { R_CLIDR_EL1_LOUU_SHIFT = (27) };
enum { R_CLIDR_EL1_LOUU_LENGTH = (3) };
enum { R_CLIDR_EL1_LOUU_MASK = (((~0ULL) >> (64 - (3))) << (27)) };
enum { R_CLIDR_EL1_ICB_SHIFT = (30) };
enum { R_CLIDR_EL1_ICB_LENGTH = (3) };
enum { R_CLIDR_EL1_ICB_MASK = (((~0ULL) >> (64 - (3))) << (30)) };

enum { R_CCSIDR_EL1_CCIDX_LINESIZE_SHIFT = (0) };
enum { R_CCSIDR_EL1_CCIDX_LINESIZE_LENGTH = (3) };
enum { R_CCSIDR_EL1_CCIDX_LINESIZE_MASK = (((~0ULL) >> (64 - (3))) << (0)) };
enum { R_CCSIDR_EL1_CCIDX_ASSOCIATIVITY_SHIFT = (3) };
enum { R_CCSIDR_EL1_CCIDX_ASSOCIATIVITY_LENGTH = (21) };
enum {
  R_CCSIDR_EL1_CCIDX_ASSOCIATIVITY_MASK = (((~0ULL) >> (64 - (21))) << (3))
};
enum { R_CCSIDR_EL1_CCIDX_NUMSETS_SHIFT = (32) };
enum { R_CCSIDR_EL1_CCIDX_NUMSETS_LENGTH = (24) };
enum { R_CCSIDR_EL1_CCIDX_NUMSETS_MASK = (((~0ULL) >> (64 - (24))) << (32)) };

enum { R_CCSIDR_EL1_LINESIZE_SHIFT = (0) };
enum { R_CCSIDR_EL1_LINESIZE_LENGTH = (3) };
enum { R_CCSIDR_EL1_LINESIZE_MASK = (((~0ULL) >> (64 - (3))) << (0)) };
enum { R_CCSIDR_EL1_ASSOCIATIVITY_SHIFT = (3) };
enum { R_CCSIDR_EL1_ASSOCIATIVITY_LENGTH = (10) };
enum { R_CCSIDR_EL1_ASSOCIATIVITY_MASK = (((~0ULL) >> (64 - (10))) << (3)) };
enum { R_CCSIDR_EL1_NUMSETS_SHIFT = (13) };
enum { R_CCSIDR_EL1_NUMSETS_LENGTH = (15) };
enum { R_CCSIDR_EL1_NUMSETS_MASK = (((~0ULL) >> (64 - (15))) << (13)) };

enum { R_CTR_EL0_IMINLINE_SHIFT = (0) };
enum { R_CTR_EL0_IMINLINE_LENGTH = (4) };
enum { R_CTR_EL0_IMINLINE_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_CTR_EL0_L1IP_SHIFT = (14) };
enum { R_CTR_EL0_L1IP_LENGTH = (2) };
enum { R_CTR_EL0_L1IP_MASK = (((~0ULL) >> (64 - (2))) << (14)) };
enum { R_CTR_EL0_DMINLINE_SHIFT = (16) };
enum { R_CTR_EL0_DMINLINE_LENGTH = (4) };
enum { R_CTR_EL0_DMINLINE_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_CTR_EL0_ERG_SHIFT = (20) };
enum { R_CTR_EL0_ERG_LENGTH = (4) };
enum { R_CTR_EL0_ERG_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_CTR_EL0_CWG_SHIFT = (24) };
enum { R_CTR_EL0_CWG_LENGTH = (4) };
enum { R_CTR_EL0_CWG_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_CTR_EL0_IDC_SHIFT = (28) };
enum { R_CTR_EL0_IDC_LENGTH = (1) };
enum { R_CTR_EL0_IDC_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_CTR_EL0_DIC_SHIFT = (29) };
enum { R_CTR_EL0_DIC_LENGTH = (1) };
enum { R_CTR_EL0_DIC_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_CTR_EL0_TMINLINE_SHIFT = (32) };
enum { R_CTR_EL0_TMINLINE_LENGTH = (6) };
enum { R_CTR_EL0_TMINLINE_MASK = (((~0ULL) >> (64 - (6))) << (32)) };

enum { R_MIDR_EL1_REVISION_SHIFT = (0) };
enum { R_MIDR_EL1_REVISION_LENGTH = (4) };
enum { R_MIDR_EL1_REVISION_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_MIDR_EL1_PARTNUM_SHIFT = (4) };
enum { R_MIDR_EL1_PARTNUM_LENGTH = (12) };
enum { R_MIDR_EL1_PARTNUM_MASK = (((~0ULL) >> (64 - (12))) << (4)) };
enum { R_MIDR_EL1_ARCHITECTURE_SHIFT = (16) };
enum { R_MIDR_EL1_ARCHITECTURE_LENGTH = (4) };
enum { R_MIDR_EL1_ARCHITECTURE_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_MIDR_EL1_VARIANT_SHIFT = (20) };
enum { R_MIDR_EL1_VARIANT_LENGTH = (4) };
enum { R_MIDR_EL1_VARIANT_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_MIDR_EL1_IMPLEMENTER_SHIFT = (24) };
enum { R_MIDR_EL1_IMPLEMENTER_LENGTH = (8) };
enum { R_MIDR_EL1_IMPLEMENTER_MASK = (((~0ULL) >> (64 - (8))) << (24)) };

enum { R_ID_ISAR0_SWAP_SHIFT = (0) };
enum { R_ID_ISAR0_SWAP_LENGTH = (4) };
enum { R_ID_ISAR0_SWAP_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR0_BITCOUNT_SHIFT = (4) };
enum { R_ID_ISAR0_BITCOUNT_LENGTH = (4) };
enum { R_ID_ISAR0_BITCOUNT_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR0_BITFIELD_SHIFT = (8) };
enum { R_ID_ISAR0_BITFIELD_LENGTH = (4) };
enum { R_ID_ISAR0_BITFIELD_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR0_CMPBRANCH_SHIFT = (12) };
enum { R_ID_ISAR0_CMPBRANCH_LENGTH = (4) };
enum { R_ID_ISAR0_CMPBRANCH_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR0_COPROC_SHIFT = (16) };
enum { R_ID_ISAR0_COPROC_LENGTH = (4) };
enum { R_ID_ISAR0_COPROC_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR0_DEBUG_SHIFT = (20) };
enum { R_ID_ISAR0_DEBUG_LENGTH = (4) };
enum { R_ID_ISAR0_DEBUG_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR0_DIVIDE_SHIFT = (24) };
enum { R_ID_ISAR0_DIVIDE_LENGTH = (4) };
enum { R_ID_ISAR0_DIVIDE_MASK = (((~0ULL) >> (64 - (4))) << (24)) };

enum { R_ID_ISAR1_ENDIAN_SHIFT = (0) };
enum { R_ID_ISAR1_ENDIAN_LENGTH = (4) };
enum { R_ID_ISAR1_ENDIAN_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR1_EXCEPT_SHIFT = (4) };
enum { R_ID_ISAR1_EXCEPT_LENGTH = (4) };
enum { R_ID_ISAR1_EXCEPT_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR1_EXCEPT_AR_SHIFT = (8) };
enum { R_ID_ISAR1_EXCEPT_AR_LENGTH = (4) };
enum { R_ID_ISAR1_EXCEPT_AR_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR1_EXTEND_SHIFT = (12) };
enum { R_ID_ISAR1_EXTEND_LENGTH = (4) };
enum { R_ID_ISAR1_EXTEND_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR1_IFTHEN_SHIFT = (16) };
enum { R_ID_ISAR1_IFTHEN_LENGTH = (4) };
enum { R_ID_ISAR1_IFTHEN_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR1_IMMEDIATE_SHIFT = (20) };
enum { R_ID_ISAR1_IMMEDIATE_LENGTH = (4) };
enum { R_ID_ISAR1_IMMEDIATE_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR1_INTERWORK_SHIFT = (24) };
enum { R_ID_ISAR1_INTERWORK_LENGTH = (4) };
enum { R_ID_ISAR1_INTERWORK_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_ISAR1_JAZELLE_SHIFT = (28) };
enum { R_ID_ISAR1_JAZELLE_LENGTH = (4) };
enum { R_ID_ISAR1_JAZELLE_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_ISAR2_LOADSTORE_SHIFT = (0) };
enum { R_ID_ISAR2_LOADSTORE_LENGTH = (4) };
enum { R_ID_ISAR2_LOADSTORE_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR2_MEMHINT_SHIFT = (4) };
enum { R_ID_ISAR2_MEMHINT_LENGTH = (4) };
enum { R_ID_ISAR2_MEMHINT_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR2_MULTIACCESSINT_SHIFT = (8) };
enum { R_ID_ISAR2_MULTIACCESSINT_LENGTH = (4) };
enum { R_ID_ISAR2_MULTIACCESSINT_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR2_MULT_SHIFT = (12) };
enum { R_ID_ISAR2_MULT_LENGTH = (4) };
enum { R_ID_ISAR2_MULT_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR2_MULTS_SHIFT = (16) };
enum { R_ID_ISAR2_MULTS_LENGTH = (4) };
enum { R_ID_ISAR2_MULTS_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR2_MULTU_SHIFT = (20) };
enum { R_ID_ISAR2_MULTU_LENGTH = (4) };
enum { R_ID_ISAR2_MULTU_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR2_PSR_AR_SHIFT = (24) };
enum { R_ID_ISAR2_PSR_AR_LENGTH = (4) };
enum { R_ID_ISAR2_PSR_AR_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_ISAR2_REVERSAL_SHIFT = (28) };
enum { R_ID_ISAR2_REVERSAL_LENGTH = (4) };
enum { R_ID_ISAR2_REVERSAL_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_ISAR3_SATURATE_SHIFT = (0) };
enum { R_ID_ISAR3_SATURATE_LENGTH = (4) };
enum { R_ID_ISAR3_SATURATE_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR3_SIMD_SHIFT = (4) };
enum { R_ID_ISAR3_SIMD_LENGTH = (4) };
enum { R_ID_ISAR3_SIMD_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR3_SVC_SHIFT = (8) };
enum { R_ID_ISAR3_SVC_LENGTH = (4) };
enum { R_ID_ISAR3_SVC_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR3_SYNCHPRIM_SHIFT = (12) };
enum { R_ID_ISAR3_SYNCHPRIM_LENGTH = (4) };
enum { R_ID_ISAR3_SYNCHPRIM_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR3_TABBRANCH_SHIFT = (16) };
enum { R_ID_ISAR3_TABBRANCH_LENGTH = (4) };
enum { R_ID_ISAR3_TABBRANCH_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR3_T32COPY_SHIFT = (20) };
enum { R_ID_ISAR3_T32COPY_LENGTH = (4) };
enum { R_ID_ISAR3_T32COPY_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR3_TRUENOP_SHIFT = (24) };
enum { R_ID_ISAR3_TRUENOP_LENGTH = (4) };
enum { R_ID_ISAR3_TRUENOP_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_ISAR3_T32EE_SHIFT = (28) };
enum { R_ID_ISAR3_T32EE_LENGTH = (4) };
enum { R_ID_ISAR3_T32EE_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_ISAR4_UNPRIV_SHIFT = (0) };
enum { R_ID_ISAR4_UNPRIV_LENGTH = (4) };
enum { R_ID_ISAR4_UNPRIV_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR4_WITHSHIFTS_SHIFT = (4) };
enum { R_ID_ISAR4_WITHSHIFTS_LENGTH = (4) };
enum { R_ID_ISAR4_WITHSHIFTS_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR4_WRITEBACK_SHIFT = (8) };
enum { R_ID_ISAR4_WRITEBACK_LENGTH = (4) };
enum { R_ID_ISAR4_WRITEBACK_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR4_SMC_SHIFT = (12) };
enum { R_ID_ISAR4_SMC_LENGTH = (4) };
enum { R_ID_ISAR4_SMC_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR4_BARRIER_SHIFT = (16) };
enum { R_ID_ISAR4_BARRIER_LENGTH = (4) };
enum { R_ID_ISAR4_BARRIER_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR4_SYNCHPRIM_FRAC_SHIFT = (20) };
enum { R_ID_ISAR4_SYNCHPRIM_FRAC_LENGTH = (4) };
enum { R_ID_ISAR4_SYNCHPRIM_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR4_PSR_M_SHIFT = (24) };
enum { R_ID_ISAR4_PSR_M_LENGTH = (4) };
enum { R_ID_ISAR4_PSR_M_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_ISAR4_SWP_FRAC_SHIFT = (28) };
enum { R_ID_ISAR4_SWP_FRAC_LENGTH = (4) };
enum { R_ID_ISAR4_SWP_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_ISAR5_SEVL_SHIFT = (0) };
enum { R_ID_ISAR5_SEVL_LENGTH = (4) };
enum { R_ID_ISAR5_SEVL_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR5_AES_SHIFT = (4) };
enum { R_ID_ISAR5_AES_LENGTH = (4) };
enum { R_ID_ISAR5_AES_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR5_SHA1_SHIFT = (8) };
enum { R_ID_ISAR5_SHA1_LENGTH = (4) };
enum { R_ID_ISAR5_SHA1_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR5_SHA2_SHIFT = (12) };
enum { R_ID_ISAR5_SHA2_LENGTH = (4) };
enum { R_ID_ISAR5_SHA2_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR5_CRC32_SHIFT = (16) };
enum { R_ID_ISAR5_CRC32_LENGTH = (4) };
enum { R_ID_ISAR5_CRC32_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR5_RDM_SHIFT = (24) };
enum { R_ID_ISAR5_RDM_LENGTH = (4) };
enum { R_ID_ISAR5_RDM_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_ISAR5_VCMA_SHIFT = (28) };
enum { R_ID_ISAR5_VCMA_LENGTH = (4) };
enum { R_ID_ISAR5_VCMA_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_ISAR6_JSCVT_SHIFT = (0) };
enum { R_ID_ISAR6_JSCVT_LENGTH = (4) };
enum { R_ID_ISAR6_JSCVT_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_ISAR6_DP_SHIFT = (4) };
enum { R_ID_ISAR6_DP_LENGTH = (4) };
enum { R_ID_ISAR6_DP_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_ISAR6_FHM_SHIFT = (8) };
enum { R_ID_ISAR6_FHM_LENGTH = (4) };
enum { R_ID_ISAR6_FHM_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_ISAR6_SB_SHIFT = (12) };
enum { R_ID_ISAR6_SB_LENGTH = (4) };
enum { R_ID_ISAR6_SB_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_ISAR6_SPECRES_SHIFT = (16) };
enum { R_ID_ISAR6_SPECRES_LENGTH = (4) };
enum { R_ID_ISAR6_SPECRES_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_ISAR6_BF16_SHIFT = (20) };
enum { R_ID_ISAR6_BF16_LENGTH = (4) };
enum { R_ID_ISAR6_BF16_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_ISAR6_I8MM_SHIFT = (24) };
enum { R_ID_ISAR6_I8MM_LENGTH = (4) };
enum { R_ID_ISAR6_I8MM_MASK = (((~0ULL) >> (64 - (4))) << (24)) };

enum { R_ID_MMFR0_VMSA_SHIFT = (0) };
enum { R_ID_MMFR0_VMSA_LENGTH = (4) };
enum { R_ID_MMFR0_VMSA_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR0_PMSA_SHIFT = (4) };
enum { R_ID_MMFR0_PMSA_LENGTH = (4) };
enum { R_ID_MMFR0_PMSA_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_MMFR0_OUTERSHR_SHIFT = (8) };
enum { R_ID_MMFR0_OUTERSHR_LENGTH = (4) };
enum { R_ID_MMFR0_OUTERSHR_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_MMFR0_SHARELVL_SHIFT = (12) };
enum { R_ID_MMFR0_SHARELVL_LENGTH = (4) };
enum { R_ID_MMFR0_SHARELVL_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_MMFR0_TCM_SHIFT = (16) };
enum { R_ID_MMFR0_TCM_LENGTH = (4) };
enum { R_ID_MMFR0_TCM_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_MMFR0_AUXREG_SHIFT = (20) };
enum { R_ID_MMFR0_AUXREG_LENGTH = (4) };
enum { R_ID_MMFR0_AUXREG_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_MMFR0_FCSE_SHIFT = (24) };
enum { R_ID_MMFR0_FCSE_LENGTH = (4) };
enum { R_ID_MMFR0_FCSE_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_MMFR0_INNERSHR_SHIFT = (28) };
enum { R_ID_MMFR0_INNERSHR_LENGTH = (4) };
enum { R_ID_MMFR0_INNERSHR_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_MMFR1_L1HVDVA_SHIFT = (0) };
enum { R_ID_MMFR1_L1HVDVA_LENGTH = (4) };
enum { R_ID_MMFR1_L1HVDVA_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR1_L1UNIVA_SHIFT = (4) };
enum { R_ID_MMFR1_L1UNIVA_LENGTH = (4) };
enum { R_ID_MMFR1_L1UNIVA_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_MMFR1_L1HVDSW_SHIFT = (8) };
enum { R_ID_MMFR1_L1HVDSW_LENGTH = (4) };
enum { R_ID_MMFR1_L1HVDSW_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_MMFR1_L1UNISW_SHIFT = (12) };
enum { R_ID_MMFR1_L1UNISW_LENGTH = (4) };
enum { R_ID_MMFR1_L1UNISW_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_MMFR1_L1HVD_SHIFT = (16) };
enum { R_ID_MMFR1_L1HVD_LENGTH = (4) };
enum { R_ID_MMFR1_L1HVD_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_MMFR1_L1UNI_SHIFT = (20) };
enum { R_ID_MMFR1_L1UNI_LENGTH = (4) };
enum { R_ID_MMFR1_L1UNI_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_MMFR1_L1TSTCLN_SHIFT = (24) };
enum { R_ID_MMFR1_L1TSTCLN_LENGTH = (4) };
enum { R_ID_MMFR1_L1TSTCLN_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_MMFR1_BPRED_SHIFT = (28) };
enum { R_ID_MMFR1_BPRED_LENGTH = (4) };
enum { R_ID_MMFR1_BPRED_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_MMFR2_L1HVDFG_SHIFT = (0) };
enum { R_ID_MMFR2_L1HVDFG_LENGTH = (4) };
enum { R_ID_MMFR2_L1HVDFG_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR2_L1HVDBG_SHIFT = (4) };
enum { R_ID_MMFR2_L1HVDBG_LENGTH = (4) };
enum { R_ID_MMFR2_L1HVDBG_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_MMFR2_L1HVDRNG_SHIFT = (8) };
enum { R_ID_MMFR2_L1HVDRNG_LENGTH = (4) };
enum { R_ID_MMFR2_L1HVDRNG_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_MMFR2_HVDTLB_SHIFT = (12) };
enum { R_ID_MMFR2_HVDTLB_LENGTH = (4) };
enum { R_ID_MMFR2_HVDTLB_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_MMFR2_UNITLB_SHIFT = (16) };
enum { R_ID_MMFR2_UNITLB_LENGTH = (4) };
enum { R_ID_MMFR2_UNITLB_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_MMFR2_MEMBARR_SHIFT = (20) };
enum { R_ID_MMFR2_MEMBARR_LENGTH = (4) };
enum { R_ID_MMFR2_MEMBARR_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_MMFR2_WFISTALL_SHIFT = (24) };
enum { R_ID_MMFR2_WFISTALL_LENGTH = (4) };
enum { R_ID_MMFR2_WFISTALL_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_MMFR2_HWACCFLG_SHIFT = (28) };
enum { R_ID_MMFR2_HWACCFLG_LENGTH = (4) };
enum { R_ID_MMFR2_HWACCFLG_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_MMFR3_CMAINTVA_SHIFT = (0) };
enum { R_ID_MMFR3_CMAINTVA_LENGTH = (4) };
enum { R_ID_MMFR3_CMAINTVA_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR3_CMAINTSW_SHIFT = (4) };
enum { R_ID_MMFR3_CMAINTSW_LENGTH = (4) };
enum { R_ID_MMFR3_CMAINTSW_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_MMFR3_BPMAINT_SHIFT = (8) };
enum { R_ID_MMFR3_BPMAINT_LENGTH = (4) };
enum { R_ID_MMFR3_BPMAINT_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_MMFR3_MAINTBCST_SHIFT = (12) };
enum { R_ID_MMFR3_MAINTBCST_LENGTH = (4) };
enum { R_ID_MMFR3_MAINTBCST_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_MMFR3_PAN_SHIFT = (16) };
enum { R_ID_MMFR3_PAN_LENGTH = (4) };
enum { R_ID_MMFR3_PAN_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_MMFR3_COHWALK_SHIFT = (20) };
enum { R_ID_MMFR3_COHWALK_LENGTH = (4) };
enum { R_ID_MMFR3_COHWALK_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_MMFR3_CMEMSZ_SHIFT = (24) };
enum { R_ID_MMFR3_CMEMSZ_LENGTH = (4) };
enum { R_ID_MMFR3_CMEMSZ_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_MMFR3_SUPERSEC_SHIFT = (28) };
enum { R_ID_MMFR3_SUPERSEC_LENGTH = (4) };
enum { R_ID_MMFR3_SUPERSEC_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_MMFR4_SPECSEI_SHIFT = (0) };
enum { R_ID_MMFR4_SPECSEI_LENGTH = (4) };
enum { R_ID_MMFR4_SPECSEI_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR4_AC2_SHIFT = (4) };
enum { R_ID_MMFR4_AC2_LENGTH = (4) };
enum { R_ID_MMFR4_AC2_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_MMFR4_XNX_SHIFT = (8) };
enum { R_ID_MMFR4_XNX_LENGTH = (4) };
enum { R_ID_MMFR4_XNX_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_MMFR4_CNP_SHIFT = (12) };
enum { R_ID_MMFR4_CNP_LENGTH = (4) };
enum { R_ID_MMFR4_CNP_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_MMFR4_HPDS_SHIFT = (16) };
enum { R_ID_MMFR4_HPDS_LENGTH = (4) };
enum { R_ID_MMFR4_HPDS_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_MMFR4_LSM_SHIFT = (20) };
enum { R_ID_MMFR4_LSM_LENGTH = (4) };
enum { R_ID_MMFR4_LSM_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_MMFR4_CCIDX_SHIFT = (24) };
enum { R_ID_MMFR4_CCIDX_LENGTH = (4) };
enum { R_ID_MMFR4_CCIDX_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_MMFR4_EVT_SHIFT = (28) };
enum { R_ID_MMFR4_EVT_LENGTH = (4) };
enum { R_ID_MMFR4_EVT_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_MMFR5_ETS_SHIFT = (0) };
enum { R_ID_MMFR5_ETS_LENGTH = (4) };
enum { R_ID_MMFR5_ETS_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_MMFR5_NTLBPA_SHIFT = (4) };
enum { R_ID_MMFR5_NTLBPA_LENGTH = (4) };
enum { R_ID_MMFR5_NTLBPA_MASK = (((~0ULL) >> (64 - (4))) << (4)) };

enum { R_ID_PFR0_STATE0_SHIFT = (0) };
enum { R_ID_PFR0_STATE0_LENGTH = (4) };
enum { R_ID_PFR0_STATE0_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_PFR0_STATE1_SHIFT = (4) };
enum { R_ID_PFR0_STATE1_LENGTH = (4) };
enum { R_ID_PFR0_STATE1_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_PFR0_STATE2_SHIFT = (8) };
enum { R_ID_PFR0_STATE2_LENGTH = (4) };
enum { R_ID_PFR0_STATE2_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_PFR0_STATE3_SHIFT = (12) };
enum { R_ID_PFR0_STATE3_LENGTH = (4) };
enum { R_ID_PFR0_STATE3_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_PFR0_CSV2_SHIFT = (16) };
enum { R_ID_PFR0_CSV2_LENGTH = (4) };
enum { R_ID_PFR0_CSV2_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_PFR0_AMU_SHIFT = (20) };
enum { R_ID_PFR0_AMU_LENGTH = (4) };
enum { R_ID_PFR0_AMU_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_PFR0_DIT_SHIFT = (24) };
enum { R_ID_PFR0_DIT_LENGTH = (4) };
enum { R_ID_PFR0_DIT_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_PFR0_RAS_SHIFT = (28) };
enum { R_ID_PFR0_RAS_LENGTH = (4) };
enum { R_ID_PFR0_RAS_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_PFR1_PROGMOD_SHIFT = (0) };
enum { R_ID_PFR1_PROGMOD_LENGTH = (4) };
enum { R_ID_PFR1_PROGMOD_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_PFR1_SECURITY_SHIFT = (4) };
enum { R_ID_PFR1_SECURITY_LENGTH = (4) };
enum { R_ID_PFR1_SECURITY_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_PFR1_MPROGMOD_SHIFT = (8) };
enum { R_ID_PFR1_MPROGMOD_LENGTH = (4) };
enum { R_ID_PFR1_MPROGMOD_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_PFR1_VIRTUALIZATION_SHIFT = (12) };
enum { R_ID_PFR1_VIRTUALIZATION_LENGTH = (4) };
enum { R_ID_PFR1_VIRTUALIZATION_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_PFR1_GENTIMER_SHIFT = (16) };
enum { R_ID_PFR1_GENTIMER_LENGTH = (4) };
enum { R_ID_PFR1_GENTIMER_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_PFR1_SEC_FRAC_SHIFT = (20) };
enum { R_ID_PFR1_SEC_FRAC_LENGTH = (4) };
enum { R_ID_PFR1_SEC_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_PFR1_VIRT_FRAC_SHIFT = (24) };
enum { R_ID_PFR1_VIRT_FRAC_LENGTH = (4) };
enum { R_ID_PFR1_VIRT_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_PFR1_GIC_SHIFT = (28) };
enum { R_ID_PFR1_GIC_LENGTH = (4) };
enum { R_ID_PFR1_GIC_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_PFR2_CSV3_SHIFT = (0) };
enum { R_ID_PFR2_CSV3_LENGTH = (4) };
enum { R_ID_PFR2_CSV3_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_PFR2_SSBS_SHIFT = (4) };
enum { R_ID_PFR2_SSBS_LENGTH = (4) };
enum { R_ID_PFR2_SSBS_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_PFR2_RAS_FRAC_SHIFT = (8) };
enum { R_ID_PFR2_RAS_FRAC_LENGTH = (4) };
enum { R_ID_PFR2_RAS_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (8)) };

enum { R_ID_AA64ISAR0_AES_SHIFT = (4) };
enum { R_ID_AA64ISAR0_AES_LENGTH = (4) };
enum { R_ID_AA64ISAR0_AES_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64ISAR0_SHA1_SHIFT = (8) };
enum { R_ID_AA64ISAR0_SHA1_LENGTH = (4) };
enum { R_ID_AA64ISAR0_SHA1_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64ISAR0_SHA2_SHIFT = (12) };
enum { R_ID_AA64ISAR0_SHA2_LENGTH = (4) };
enum { R_ID_AA64ISAR0_SHA2_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64ISAR0_CRC32_SHIFT = (16) };
enum { R_ID_AA64ISAR0_CRC32_LENGTH = (4) };
enum { R_ID_AA64ISAR0_CRC32_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64ISAR0_ATOMIC_SHIFT = (20) };
enum { R_ID_AA64ISAR0_ATOMIC_LENGTH = (4) };
enum { R_ID_AA64ISAR0_ATOMIC_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64ISAR0_TME_SHIFT = (24) };
enum { R_ID_AA64ISAR0_TME_LENGTH = (4) };
enum { R_ID_AA64ISAR0_TME_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64ISAR0_RDM_SHIFT = (28) };
enum { R_ID_AA64ISAR0_RDM_LENGTH = (4) };
enum { R_ID_AA64ISAR0_RDM_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64ISAR0_SHA3_SHIFT = (32) };
enum { R_ID_AA64ISAR0_SHA3_LENGTH = (4) };
enum { R_ID_AA64ISAR0_SHA3_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64ISAR0_SM3_SHIFT = (36) };
enum { R_ID_AA64ISAR0_SM3_LENGTH = (4) };
enum { R_ID_AA64ISAR0_SM3_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64ISAR0_SM4_SHIFT = (40) };
enum { R_ID_AA64ISAR0_SM4_LENGTH = (4) };
enum { R_ID_AA64ISAR0_SM4_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64ISAR0_DP_SHIFT = (44) };
enum { R_ID_AA64ISAR0_DP_LENGTH = (4) };
enum { R_ID_AA64ISAR0_DP_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64ISAR0_FHM_SHIFT = (48) };
enum { R_ID_AA64ISAR0_FHM_LENGTH = (4) };
enum { R_ID_AA64ISAR0_FHM_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64ISAR0_TS_SHIFT = (52) };
enum { R_ID_AA64ISAR0_TS_LENGTH = (4) };
enum { R_ID_AA64ISAR0_TS_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64ISAR0_TLB_SHIFT = (56) };
enum { R_ID_AA64ISAR0_TLB_LENGTH = (4) };
enum { R_ID_AA64ISAR0_TLB_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64ISAR0_RNDR_SHIFT = (60) };
enum { R_ID_AA64ISAR0_RNDR_LENGTH = (4) };
enum { R_ID_AA64ISAR0_RNDR_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64ISAR1_DPB_SHIFT = (0) };
enum { R_ID_AA64ISAR1_DPB_LENGTH = (4) };
enum { R_ID_AA64ISAR1_DPB_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64ISAR1_APA_SHIFT = (4) };
enum { R_ID_AA64ISAR1_APA_LENGTH = (4) };
enum { R_ID_AA64ISAR1_APA_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64ISAR1_API_SHIFT = (8) };
enum { R_ID_AA64ISAR1_API_LENGTH = (4) };
enum { R_ID_AA64ISAR1_API_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64ISAR1_JSCVT_SHIFT = (12) };
enum { R_ID_AA64ISAR1_JSCVT_LENGTH = (4) };
enum { R_ID_AA64ISAR1_JSCVT_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64ISAR1_FCMA_SHIFT = (16) };
enum { R_ID_AA64ISAR1_FCMA_LENGTH = (4) };
enum { R_ID_AA64ISAR1_FCMA_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64ISAR1_LRCPC_SHIFT = (20) };
enum { R_ID_AA64ISAR1_LRCPC_LENGTH = (4) };
enum { R_ID_AA64ISAR1_LRCPC_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64ISAR1_GPA_SHIFT = (24) };
enum { R_ID_AA64ISAR1_GPA_LENGTH = (4) };
enum { R_ID_AA64ISAR1_GPA_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64ISAR1_GPI_SHIFT = (28) };
enum { R_ID_AA64ISAR1_GPI_LENGTH = (4) };
enum { R_ID_AA64ISAR1_GPI_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64ISAR1_FRINTTS_SHIFT = (32) };
enum { R_ID_AA64ISAR1_FRINTTS_LENGTH = (4) };
enum { R_ID_AA64ISAR1_FRINTTS_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64ISAR1_SB_SHIFT = (36) };
enum { R_ID_AA64ISAR1_SB_LENGTH = (4) };
enum { R_ID_AA64ISAR1_SB_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64ISAR1_SPECRES_SHIFT = (40) };
enum { R_ID_AA64ISAR1_SPECRES_LENGTH = (4) };
enum { R_ID_AA64ISAR1_SPECRES_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64ISAR1_BF16_SHIFT = (44) };
enum { R_ID_AA64ISAR1_BF16_LENGTH = (4) };
enum { R_ID_AA64ISAR1_BF16_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64ISAR1_DGH_SHIFT = (48) };
enum { R_ID_AA64ISAR1_DGH_LENGTH = (4) };
enum { R_ID_AA64ISAR1_DGH_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64ISAR1_I8MM_SHIFT = (52) };
enum { R_ID_AA64ISAR1_I8MM_LENGTH = (4) };
enum { R_ID_AA64ISAR1_I8MM_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64ISAR1_XS_SHIFT = (56) };
enum { R_ID_AA64ISAR1_XS_LENGTH = (4) };
enum { R_ID_AA64ISAR1_XS_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64ISAR1_LS64_SHIFT = (60) };
enum { R_ID_AA64ISAR1_LS64_LENGTH = (4) };
enum { R_ID_AA64ISAR1_LS64_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64ISAR2_WFXT_SHIFT = (0) };
enum { R_ID_AA64ISAR2_WFXT_LENGTH = (4) };
enum { R_ID_AA64ISAR2_WFXT_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64ISAR2_RPRES_SHIFT = (4) };
enum { R_ID_AA64ISAR2_RPRES_LENGTH = (4) };
enum { R_ID_AA64ISAR2_RPRES_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64ISAR2_GPA3_SHIFT = (8) };
enum { R_ID_AA64ISAR2_GPA3_LENGTH = (4) };
enum { R_ID_AA64ISAR2_GPA3_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64ISAR2_APA3_SHIFT = (12) };
enum { R_ID_AA64ISAR2_APA3_LENGTH = (4) };
enum { R_ID_AA64ISAR2_APA3_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64ISAR2_MOPS_SHIFT = (16) };
enum { R_ID_AA64ISAR2_MOPS_LENGTH = (4) };
enum { R_ID_AA64ISAR2_MOPS_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64ISAR2_BC_SHIFT = (20) };
enum { R_ID_AA64ISAR2_BC_LENGTH = (4) };
enum { R_ID_AA64ISAR2_BC_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64ISAR2_PAC_FRAC_SHIFT = (24) };
enum { R_ID_AA64ISAR2_PAC_FRAC_LENGTH = (4) };
enum { R_ID_AA64ISAR2_PAC_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64ISAR2_CLRBHB_SHIFT = (28) };
enum { R_ID_AA64ISAR2_CLRBHB_LENGTH = (4) };
enum { R_ID_AA64ISAR2_CLRBHB_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64ISAR2_SYSREG_128_SHIFT = (32) };
enum { R_ID_AA64ISAR2_SYSREG_128_LENGTH = (4) };
enum { R_ID_AA64ISAR2_SYSREG_128_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64ISAR2_SYSINSTR_128_SHIFT = (36) };
enum { R_ID_AA64ISAR2_SYSINSTR_128_LENGTH = (4) };
enum { R_ID_AA64ISAR2_SYSINSTR_128_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64ISAR2_PRFMSLC_SHIFT = (40) };
enum { R_ID_AA64ISAR2_PRFMSLC_LENGTH = (4) };
enum { R_ID_AA64ISAR2_PRFMSLC_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64ISAR2_RPRFM_SHIFT = (48) };
enum { R_ID_AA64ISAR2_RPRFM_LENGTH = (4) };
enum { R_ID_AA64ISAR2_RPRFM_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64ISAR2_CSSC_SHIFT = (52) };
enum { R_ID_AA64ISAR2_CSSC_LENGTH = (4) };
enum { R_ID_AA64ISAR2_CSSC_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64ISAR2_ATS1A_SHIFT = (60) };
enum { R_ID_AA64ISAR2_ATS1A_LENGTH = (4) };
enum { R_ID_AA64ISAR2_ATS1A_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64PFR0_EL0_SHIFT = (0) };
enum { R_ID_AA64PFR0_EL0_LENGTH = (4) };
enum { R_ID_AA64PFR0_EL0_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64PFR0_EL1_SHIFT = (4) };
enum { R_ID_AA64PFR0_EL1_LENGTH = (4) };
enum { R_ID_AA64PFR0_EL1_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64PFR0_EL2_SHIFT = (8) };
enum { R_ID_AA64PFR0_EL2_LENGTH = (4) };
enum { R_ID_AA64PFR0_EL2_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64PFR0_EL3_SHIFT = (12) };
enum { R_ID_AA64PFR0_EL3_LENGTH = (4) };
enum { R_ID_AA64PFR0_EL3_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64PFR0_FP_SHIFT = (16) };
enum { R_ID_AA64PFR0_FP_LENGTH = (4) };
enum { R_ID_AA64PFR0_FP_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64PFR0_ADVSIMD_SHIFT = (20) };
enum { R_ID_AA64PFR0_ADVSIMD_LENGTH = (4) };
enum { R_ID_AA64PFR0_ADVSIMD_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64PFR0_GIC_SHIFT = (24) };
enum { R_ID_AA64PFR0_GIC_LENGTH = (4) };
enum { R_ID_AA64PFR0_GIC_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64PFR0_RAS_SHIFT = (28) };
enum { R_ID_AA64PFR0_RAS_LENGTH = (4) };
enum { R_ID_AA64PFR0_RAS_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64PFR0_SVE_SHIFT = (32) };
enum { R_ID_AA64PFR0_SVE_LENGTH = (4) };
enum { R_ID_AA64PFR0_SVE_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64PFR0_SEL2_SHIFT = (36) };
enum { R_ID_AA64PFR0_SEL2_LENGTH = (4) };
enum { R_ID_AA64PFR0_SEL2_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64PFR0_MPAM_SHIFT = (40) };
enum { R_ID_AA64PFR0_MPAM_LENGTH = (4) };
enum { R_ID_AA64PFR0_MPAM_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64PFR0_AMU_SHIFT = (44) };
enum { R_ID_AA64PFR0_AMU_LENGTH = (4) };
enum { R_ID_AA64PFR0_AMU_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64PFR0_DIT_SHIFT = (48) };
enum { R_ID_AA64PFR0_DIT_LENGTH = (4) };
enum { R_ID_AA64PFR0_DIT_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64PFR0_RME_SHIFT = (52) };
enum { R_ID_AA64PFR0_RME_LENGTH = (4) };
enum { R_ID_AA64PFR0_RME_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64PFR0_CSV2_SHIFT = (56) };
enum { R_ID_AA64PFR0_CSV2_LENGTH = (4) };
enum { R_ID_AA64PFR0_CSV2_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64PFR0_CSV3_SHIFT = (60) };
enum { R_ID_AA64PFR0_CSV3_LENGTH = (4) };
enum { R_ID_AA64PFR0_CSV3_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64PFR1_BT_SHIFT = (0) };
enum { R_ID_AA64PFR1_BT_LENGTH = (4) };
enum { R_ID_AA64PFR1_BT_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64PFR1_SSBS_SHIFT = (4) };
enum { R_ID_AA64PFR1_SSBS_LENGTH = (4) };
enum { R_ID_AA64PFR1_SSBS_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64PFR1_MTE_SHIFT = (8) };
enum { R_ID_AA64PFR1_MTE_LENGTH = (4) };
enum { R_ID_AA64PFR1_MTE_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64PFR1_RAS_FRAC_SHIFT = (12) };
enum { R_ID_AA64PFR1_RAS_FRAC_LENGTH = (4) };
enum { R_ID_AA64PFR1_RAS_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64PFR1_MPAM_FRAC_SHIFT = (16) };
enum { R_ID_AA64PFR1_MPAM_FRAC_LENGTH = (4) };
enum { R_ID_AA64PFR1_MPAM_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64PFR1_SME_SHIFT = (24) };
enum { R_ID_AA64PFR1_SME_LENGTH = (4) };
enum { R_ID_AA64PFR1_SME_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64PFR1_RNDR_TRAP_SHIFT = (28) };
enum { R_ID_AA64PFR1_RNDR_TRAP_LENGTH = (4) };
enum { R_ID_AA64PFR1_RNDR_TRAP_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64PFR1_CSV2_FRAC_SHIFT = (32) };
enum { R_ID_AA64PFR1_CSV2_FRAC_LENGTH = (4) };
enum { R_ID_AA64PFR1_CSV2_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64PFR1_NMI_SHIFT = (36) };
enum { R_ID_AA64PFR1_NMI_LENGTH = (4) };
enum { R_ID_AA64PFR1_NMI_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64PFR1_MTE_FRAC_SHIFT = (40) };
enum { R_ID_AA64PFR1_MTE_FRAC_LENGTH = (4) };
enum { R_ID_AA64PFR1_MTE_FRAC_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64PFR1_GCS_SHIFT = (44) };
enum { R_ID_AA64PFR1_GCS_LENGTH = (4) };
enum { R_ID_AA64PFR1_GCS_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64PFR1_THE_SHIFT = (48) };
enum { R_ID_AA64PFR1_THE_LENGTH = (4) };
enum { R_ID_AA64PFR1_THE_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64PFR1_MTEX_SHIFT = (52) };
enum { R_ID_AA64PFR1_MTEX_LENGTH = (4) };
enum { R_ID_AA64PFR1_MTEX_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64PFR1_DF2_SHIFT = (56) };
enum { R_ID_AA64PFR1_DF2_LENGTH = (4) };
enum { R_ID_AA64PFR1_DF2_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64PFR1_PFAR_SHIFT = (60) };
enum { R_ID_AA64PFR1_PFAR_LENGTH = (4) };
enum { R_ID_AA64PFR1_PFAR_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64MMFR0_PARANGE_SHIFT = (0) };
enum { R_ID_AA64MMFR0_PARANGE_LENGTH = (4) };
enum { R_ID_AA64MMFR0_PARANGE_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64MMFR0_ASIDBITS_SHIFT = (4) };
enum { R_ID_AA64MMFR0_ASIDBITS_LENGTH = (4) };
enum { R_ID_AA64MMFR0_ASIDBITS_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64MMFR0_BIGEND_SHIFT = (8) };
enum { R_ID_AA64MMFR0_BIGEND_LENGTH = (4) };
enum { R_ID_AA64MMFR0_BIGEND_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64MMFR0_SNSMEM_SHIFT = (12) };
enum { R_ID_AA64MMFR0_SNSMEM_LENGTH = (4) };
enum { R_ID_AA64MMFR0_SNSMEM_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64MMFR0_BIGENDEL0_SHIFT = (16) };
enum { R_ID_AA64MMFR0_BIGENDEL0_LENGTH = (4) };
enum { R_ID_AA64MMFR0_BIGENDEL0_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64MMFR0_TGRAN16_SHIFT = (20) };
enum { R_ID_AA64MMFR0_TGRAN16_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN16_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64MMFR0_TGRAN64_SHIFT = (24) };
enum { R_ID_AA64MMFR0_TGRAN64_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN64_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64MMFR0_TGRAN4_SHIFT = (28) };
enum { R_ID_AA64MMFR0_TGRAN4_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN4_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64MMFR0_TGRAN16_2_SHIFT = (32) };
enum { R_ID_AA64MMFR0_TGRAN16_2_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN16_2_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64MMFR0_TGRAN64_2_SHIFT = (36) };
enum { R_ID_AA64MMFR0_TGRAN64_2_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN64_2_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64MMFR0_TGRAN4_2_SHIFT = (40) };
enum { R_ID_AA64MMFR0_TGRAN4_2_LENGTH = (4) };
enum { R_ID_AA64MMFR0_TGRAN4_2_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64MMFR0_EXS_SHIFT = (44) };
enum { R_ID_AA64MMFR0_EXS_LENGTH = (4) };
enum { R_ID_AA64MMFR0_EXS_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64MMFR0_FGT_SHIFT = (56) };
enum { R_ID_AA64MMFR0_FGT_LENGTH = (4) };
enum { R_ID_AA64MMFR0_FGT_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64MMFR0_ECV_SHIFT = (60) };
enum { R_ID_AA64MMFR0_ECV_LENGTH = (4) };
enum { R_ID_AA64MMFR0_ECV_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64MMFR1_HAFDBS_SHIFT = (0) };
enum { R_ID_AA64MMFR1_HAFDBS_LENGTH = (4) };
enum { R_ID_AA64MMFR1_HAFDBS_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64MMFR1_VMIDBITS_SHIFT = (4) };
enum { R_ID_AA64MMFR1_VMIDBITS_LENGTH = (4) };
enum { R_ID_AA64MMFR1_VMIDBITS_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64MMFR1_VH_SHIFT = (8) };
enum { R_ID_AA64MMFR1_VH_LENGTH = (4) };
enum { R_ID_AA64MMFR1_VH_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64MMFR1_HPDS_SHIFT = (12) };
enum { R_ID_AA64MMFR1_HPDS_LENGTH = (4) };
enum { R_ID_AA64MMFR1_HPDS_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64MMFR1_LO_SHIFT = (16) };
enum { R_ID_AA64MMFR1_LO_LENGTH = (4) };
enum { R_ID_AA64MMFR1_LO_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64MMFR1_PAN_SHIFT = (20) };
enum { R_ID_AA64MMFR1_PAN_LENGTH = (4) };
enum { R_ID_AA64MMFR1_PAN_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64MMFR1_SPECSEI_SHIFT = (24) };
enum { R_ID_AA64MMFR1_SPECSEI_LENGTH = (4) };
enum { R_ID_AA64MMFR1_SPECSEI_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64MMFR1_XNX_SHIFT = (28) };
enum { R_ID_AA64MMFR1_XNX_LENGTH = (4) };
enum { R_ID_AA64MMFR1_XNX_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64MMFR1_TWED_SHIFT = (32) };
enum { R_ID_AA64MMFR1_TWED_LENGTH = (4) };
enum { R_ID_AA64MMFR1_TWED_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64MMFR1_ETS_SHIFT = (36) };
enum { R_ID_AA64MMFR1_ETS_LENGTH = (4) };
enum { R_ID_AA64MMFR1_ETS_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64MMFR1_HCX_SHIFT = (40) };
enum { R_ID_AA64MMFR1_HCX_LENGTH = (4) };
enum { R_ID_AA64MMFR1_HCX_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64MMFR1_AFP_SHIFT = (44) };
enum { R_ID_AA64MMFR1_AFP_LENGTH = (4) };
enum { R_ID_AA64MMFR1_AFP_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64MMFR1_NTLBPA_SHIFT = (48) };
enum { R_ID_AA64MMFR1_NTLBPA_LENGTH = (4) };
enum { R_ID_AA64MMFR1_NTLBPA_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64MMFR1_TIDCP1_SHIFT = (52) };
enum { R_ID_AA64MMFR1_TIDCP1_LENGTH = (4) };
enum { R_ID_AA64MMFR1_TIDCP1_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64MMFR1_CMOW_SHIFT = (56) };
enum { R_ID_AA64MMFR1_CMOW_LENGTH = (4) };
enum { R_ID_AA64MMFR1_CMOW_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64MMFR1_ECBHB_SHIFT = (60) };
enum { R_ID_AA64MMFR1_ECBHB_LENGTH = (4) };
enum { R_ID_AA64MMFR1_ECBHB_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64MMFR2_CNP_SHIFT = (0) };
enum { R_ID_AA64MMFR2_CNP_LENGTH = (4) };
enum { R_ID_AA64MMFR2_CNP_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64MMFR2_UAO_SHIFT = (4) };
enum { R_ID_AA64MMFR2_UAO_LENGTH = (4) };
enum { R_ID_AA64MMFR2_UAO_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64MMFR2_LSM_SHIFT = (8) };
enum { R_ID_AA64MMFR2_LSM_LENGTH = (4) };
enum { R_ID_AA64MMFR2_LSM_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64MMFR2_IESB_SHIFT = (12) };
enum { R_ID_AA64MMFR2_IESB_LENGTH = (4) };
enum { R_ID_AA64MMFR2_IESB_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64MMFR2_VARANGE_SHIFT = (16) };
enum { R_ID_AA64MMFR2_VARANGE_LENGTH = (4) };
enum { R_ID_AA64MMFR2_VARANGE_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64MMFR2_CCIDX_SHIFT = (20) };
enum { R_ID_AA64MMFR2_CCIDX_LENGTH = (4) };
enum { R_ID_AA64MMFR2_CCIDX_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64MMFR2_NV_SHIFT = (24) };
enum { R_ID_AA64MMFR2_NV_LENGTH = (4) };
enum { R_ID_AA64MMFR2_NV_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64MMFR2_ST_SHIFT = (28) };
enum { R_ID_AA64MMFR2_ST_LENGTH = (4) };
enum { R_ID_AA64MMFR2_ST_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64MMFR2_AT_SHIFT = (32) };
enum { R_ID_AA64MMFR2_AT_LENGTH = (4) };
enum { R_ID_AA64MMFR2_AT_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64MMFR2_IDS_SHIFT = (36) };
enum { R_ID_AA64MMFR2_IDS_LENGTH = (4) };
enum { R_ID_AA64MMFR2_IDS_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64MMFR2_FWB_SHIFT = (40) };
enum { R_ID_AA64MMFR2_FWB_LENGTH = (4) };
enum { R_ID_AA64MMFR2_FWB_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64MMFR2_TTL_SHIFT = (48) };
enum { R_ID_AA64MMFR2_TTL_LENGTH = (4) };
enum { R_ID_AA64MMFR2_TTL_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64MMFR2_BBM_SHIFT = (52) };
enum { R_ID_AA64MMFR2_BBM_LENGTH = (4) };
enum { R_ID_AA64MMFR2_BBM_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64MMFR2_EVT_SHIFT = (56) };
enum { R_ID_AA64MMFR2_EVT_LENGTH = (4) };
enum { R_ID_AA64MMFR2_EVT_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64MMFR2_E0PD_SHIFT = (60) };
enum { R_ID_AA64MMFR2_E0PD_LENGTH = (4) };
enum { R_ID_AA64MMFR2_E0PD_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64MMFR3_TCRX_SHIFT = (0) };
enum { R_ID_AA64MMFR3_TCRX_LENGTH = (4) };
enum { R_ID_AA64MMFR3_TCRX_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64MMFR3_SCTLRX_SHIFT = (4) };
enum { R_ID_AA64MMFR3_SCTLRX_LENGTH = (4) };
enum { R_ID_AA64MMFR3_SCTLRX_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64MMFR3_S1PIE_SHIFT = (8) };
enum { R_ID_AA64MMFR3_S1PIE_LENGTH = (4) };
enum { R_ID_AA64MMFR3_S1PIE_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64MMFR3_S2PIE_SHIFT = (12) };
enum { R_ID_AA64MMFR3_S2PIE_LENGTH = (4) };
enum { R_ID_AA64MMFR3_S2PIE_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64MMFR3_S1POE_SHIFT = (16) };
enum { R_ID_AA64MMFR3_S1POE_LENGTH = (4) };
enum { R_ID_AA64MMFR3_S1POE_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64MMFR3_S2POE_SHIFT = (20) };
enum { R_ID_AA64MMFR3_S2POE_LENGTH = (4) };
enum { R_ID_AA64MMFR3_S2POE_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64MMFR3_AIE_SHIFT = (24) };
enum { R_ID_AA64MMFR3_AIE_LENGTH = (4) };
enum { R_ID_AA64MMFR3_AIE_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64MMFR3_MEC_SHIFT = (28) };
enum { R_ID_AA64MMFR3_MEC_LENGTH = (4) };
enum { R_ID_AA64MMFR3_MEC_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64MMFR3_D128_SHIFT = (32) };
enum { R_ID_AA64MMFR3_D128_LENGTH = (4) };
enum { R_ID_AA64MMFR3_D128_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64MMFR3_D128_2_SHIFT = (36) };
enum { R_ID_AA64MMFR3_D128_2_LENGTH = (4) };
enum { R_ID_AA64MMFR3_D128_2_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64MMFR3_SNERR_SHIFT = (40) };
enum { R_ID_AA64MMFR3_SNERR_LENGTH = (4) };
enum { R_ID_AA64MMFR3_SNERR_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64MMFR3_ANERR_SHIFT = (44) };
enum { R_ID_AA64MMFR3_ANERR_LENGTH = (4) };
enum { R_ID_AA64MMFR3_ANERR_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64MMFR3_SDERR_SHIFT = (52) };
enum { R_ID_AA64MMFR3_SDERR_LENGTH = (4) };
enum { R_ID_AA64MMFR3_SDERR_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64MMFR3_ADERR_SHIFT = (56) };
enum { R_ID_AA64MMFR3_ADERR_LENGTH = (4) };
enum { R_ID_AA64MMFR3_ADERR_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64MMFR3_SPEC_FPACC_SHIFT = (60) };
enum { R_ID_AA64MMFR3_SPEC_FPACC_LENGTH = (4) };
enum { R_ID_AA64MMFR3_SPEC_FPACC_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64DFR0_DEBUGVER_SHIFT = (0) };
enum { R_ID_AA64DFR0_DEBUGVER_LENGTH = (4) };
enum { R_ID_AA64DFR0_DEBUGVER_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64DFR0_TRACEVER_SHIFT = (4) };
enum { R_ID_AA64DFR0_TRACEVER_LENGTH = (4) };
enum { R_ID_AA64DFR0_TRACEVER_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64DFR0_PMUVER_SHIFT = (8) };
enum { R_ID_AA64DFR0_PMUVER_LENGTH = (4) };
enum { R_ID_AA64DFR0_PMUVER_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_AA64DFR0_BRPS_SHIFT = (12) };
enum { R_ID_AA64DFR0_BRPS_LENGTH = (4) };
enum { R_ID_AA64DFR0_BRPS_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_AA64DFR0_PMSS_SHIFT = (16) };
enum { R_ID_AA64DFR0_PMSS_LENGTH = (4) };
enum { R_ID_AA64DFR0_PMSS_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64DFR0_WRPS_SHIFT = (20) };
enum { R_ID_AA64DFR0_WRPS_LENGTH = (4) };
enum { R_ID_AA64DFR0_WRPS_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64DFR0_SEBEP_SHIFT = (24) };
enum { R_ID_AA64DFR0_SEBEP_LENGTH = (4) };
enum { R_ID_AA64DFR0_SEBEP_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64DFR0_CTX_CMPS_SHIFT = (28) };
enum { R_ID_AA64DFR0_CTX_CMPS_LENGTH = (4) };
enum { R_ID_AA64DFR0_CTX_CMPS_MASK = (((~0ULL) >> (64 - (4))) << (28)) };
enum { R_ID_AA64DFR0_PMSVER_SHIFT = (32) };
enum { R_ID_AA64DFR0_PMSVER_LENGTH = (4) };
enum { R_ID_AA64DFR0_PMSVER_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64DFR0_DOUBLELOCK_SHIFT = (36) };
enum { R_ID_AA64DFR0_DOUBLELOCK_LENGTH = (4) };
enum { R_ID_AA64DFR0_DOUBLELOCK_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64DFR0_TRACEFILT_SHIFT = (40) };
enum { R_ID_AA64DFR0_TRACEFILT_LENGTH = (4) };
enum { R_ID_AA64DFR0_TRACEFILT_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64DFR0_TRACEBUFFER_SHIFT = (44) };
enum { R_ID_AA64DFR0_TRACEBUFFER_LENGTH = (4) };
enum { R_ID_AA64DFR0_TRACEBUFFER_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64DFR0_MTPMU_SHIFT = (48) };
enum { R_ID_AA64DFR0_MTPMU_LENGTH = (4) };
enum { R_ID_AA64DFR0_MTPMU_MASK = (((~0ULL) >> (64 - (4))) << (48)) };
enum { R_ID_AA64DFR0_BRBE_SHIFT = (52) };
enum { R_ID_AA64DFR0_BRBE_LENGTH = (4) };
enum { R_ID_AA64DFR0_BRBE_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64DFR0_EXTTRCBUFF_SHIFT = (56) };
enum { R_ID_AA64DFR0_EXTTRCBUFF_LENGTH = (4) };
enum { R_ID_AA64DFR0_EXTTRCBUFF_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64DFR0_HPMN0_SHIFT = (60) };
enum { R_ID_AA64DFR0_HPMN0_LENGTH = (4) };
enum { R_ID_AA64DFR0_HPMN0_MASK = (((~0ULL) >> (64 - (4))) << (60)) };

enum { R_ID_AA64ZFR0_SVEVER_SHIFT = (0) };
enum { R_ID_AA64ZFR0_SVEVER_LENGTH = (4) };
enum { R_ID_AA64ZFR0_SVEVER_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_AA64ZFR0_AES_SHIFT = (4) };
enum { R_ID_AA64ZFR0_AES_LENGTH = (4) };
enum { R_ID_AA64ZFR0_AES_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_AA64ZFR0_BITPERM_SHIFT = (16) };
enum { R_ID_AA64ZFR0_BITPERM_LENGTH = (4) };
enum { R_ID_AA64ZFR0_BITPERM_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_AA64ZFR0_BFLOAT16_SHIFT = (20) };
enum { R_ID_AA64ZFR0_BFLOAT16_LENGTH = (4) };
enum { R_ID_AA64ZFR0_BFLOAT16_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_AA64ZFR0_B16B16_SHIFT = (24) };
enum { R_ID_AA64ZFR0_B16B16_LENGTH = (4) };
enum { R_ID_AA64ZFR0_B16B16_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_AA64ZFR0_SHA3_SHIFT = (32) };
enum { R_ID_AA64ZFR0_SHA3_LENGTH = (4) };
enum { R_ID_AA64ZFR0_SHA3_MASK = (((~0ULL) >> (64 - (4))) << (32)) };
enum { R_ID_AA64ZFR0_SM4_SHIFT = (40) };
enum { R_ID_AA64ZFR0_SM4_LENGTH = (4) };
enum { R_ID_AA64ZFR0_SM4_MASK = (((~0ULL) >> (64 - (4))) << (40)) };
enum { R_ID_AA64ZFR0_I8MM_SHIFT = (44) };
enum { R_ID_AA64ZFR0_I8MM_LENGTH = (4) };
enum { R_ID_AA64ZFR0_I8MM_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64ZFR0_F32MM_SHIFT = (52) };
enum { R_ID_AA64ZFR0_F32MM_LENGTH = (4) };
enum { R_ID_AA64ZFR0_F32MM_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64ZFR0_F64MM_SHIFT = (56) };
enum { R_ID_AA64ZFR0_F64MM_LENGTH = (4) };
enum { R_ID_AA64ZFR0_F64MM_MASK = (((~0ULL) >> (64 - (4))) << (56)) };

enum { R_ID_AA64SMFR0_F32F32_SHIFT = (32) };
enum { R_ID_AA64SMFR0_F32F32_LENGTH = (1) };
enum { R_ID_AA64SMFR0_F32F32_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_ID_AA64SMFR0_BI32I32_SHIFT = (33) };
enum { R_ID_AA64SMFR0_BI32I32_LENGTH = (1) };
enum { R_ID_AA64SMFR0_BI32I32_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_ID_AA64SMFR0_B16F32_SHIFT = (34) };
enum { R_ID_AA64SMFR0_B16F32_LENGTH = (1) };
enum { R_ID_AA64SMFR0_B16F32_MASK = (((~0ULL) >> (64 - (1))) << (34)) };
enum { R_ID_AA64SMFR0_F16F32_SHIFT = (35) };
enum { R_ID_AA64SMFR0_F16F32_LENGTH = (1) };
enum { R_ID_AA64SMFR0_F16F32_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_ID_AA64SMFR0_I8I32_SHIFT = (36) };
enum { R_ID_AA64SMFR0_I8I32_LENGTH = (4) };
enum { R_ID_AA64SMFR0_I8I32_MASK = (((~0ULL) >> (64 - (4))) << (36)) };
enum { R_ID_AA64SMFR0_F16F16_SHIFT = (42) };
enum { R_ID_AA64SMFR0_F16F16_LENGTH = (1) };
enum { R_ID_AA64SMFR0_F16F16_MASK = (((~0ULL) >> (64 - (1))) << (42)) };
enum { R_ID_AA64SMFR0_B16B16_SHIFT = (43) };
enum { R_ID_AA64SMFR0_B16B16_LENGTH = (1) };
enum { R_ID_AA64SMFR0_B16B16_MASK = (((~0ULL) >> (64 - (1))) << (43)) };
enum { R_ID_AA64SMFR0_I16I32_SHIFT = (44) };
enum { R_ID_AA64SMFR0_I16I32_LENGTH = (4) };
enum { R_ID_AA64SMFR0_I16I32_MASK = (((~0ULL) >> (64 - (4))) << (44)) };
enum { R_ID_AA64SMFR0_F64F64_SHIFT = (48) };
enum { R_ID_AA64SMFR0_F64F64_LENGTH = (1) };
enum { R_ID_AA64SMFR0_F64F64_MASK = (((~0ULL) >> (64 - (1))) << (48)) };
enum { R_ID_AA64SMFR0_I16I64_SHIFT = (52) };
enum { R_ID_AA64SMFR0_I16I64_LENGTH = (4) };
enum { R_ID_AA64SMFR0_I16I64_MASK = (((~0ULL) >> (64 - (4))) << (52)) };
enum { R_ID_AA64SMFR0_SMEVER_SHIFT = (56) };
enum { R_ID_AA64SMFR0_SMEVER_LENGTH = (4) };
enum { R_ID_AA64SMFR0_SMEVER_MASK = (((~0ULL) >> (64 - (4))) << (56)) };
enum { R_ID_AA64SMFR0_FA64_SHIFT = (63) };
enum { R_ID_AA64SMFR0_FA64_LENGTH = (1) };
enum { R_ID_AA64SMFR0_FA64_MASK = (((~0ULL) >> (64 - (1))) << (63)) };

enum { R_ID_DFR0_COPDBG_SHIFT = (0) };
enum { R_ID_DFR0_COPDBG_LENGTH = (4) };
enum { R_ID_DFR0_COPDBG_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_DFR0_COPSDBG_SHIFT = (4) };
enum { R_ID_DFR0_COPSDBG_LENGTH = (4) };
enum { R_ID_DFR0_COPSDBG_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_ID_DFR0_MMAPDBG_SHIFT = (8) };
enum { R_ID_DFR0_MMAPDBG_LENGTH = (4) };
enum { R_ID_DFR0_MMAPDBG_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_ID_DFR0_COPTRC_SHIFT = (12) };
enum { R_ID_DFR0_COPTRC_LENGTH = (4) };
enum { R_ID_DFR0_COPTRC_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_ID_DFR0_MMAPTRC_SHIFT = (16) };
enum { R_ID_DFR0_MMAPTRC_LENGTH = (4) };
enum { R_ID_DFR0_MMAPTRC_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_ID_DFR0_MPROFDBG_SHIFT = (20) };
enum { R_ID_DFR0_MPROFDBG_LENGTH = (4) };
enum { R_ID_DFR0_MPROFDBG_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_ID_DFR0_PERFMON_SHIFT = (24) };
enum { R_ID_DFR0_PERFMON_LENGTH = (4) };
enum { R_ID_DFR0_PERFMON_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_ID_DFR0_TRACEFILT_SHIFT = (28) };
enum { R_ID_DFR0_TRACEFILT_LENGTH = (4) };
enum { R_ID_DFR0_TRACEFILT_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_ID_DFR1_MTPMU_SHIFT = (0) };
enum { R_ID_DFR1_MTPMU_LENGTH = (4) };
enum { R_ID_DFR1_MTPMU_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_ID_DFR1_HPMN0_SHIFT = (4) };
enum { R_ID_DFR1_HPMN0_LENGTH = (4) };
enum { R_ID_DFR1_HPMN0_MASK = (((~0ULL) >> (64 - (4))) << (4)) };

enum { R_DBGDIDR_SE_IMP_SHIFT = (12) };
enum { R_DBGDIDR_SE_IMP_LENGTH = (1) };
enum { R_DBGDIDR_SE_IMP_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_DBGDIDR_NSUHD_IMP_SHIFT = (14) };
enum { R_DBGDIDR_NSUHD_IMP_LENGTH = (1) };
enum { R_DBGDIDR_NSUHD_IMP_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_DBGDIDR_VERSION_SHIFT = (16) };
enum { R_DBGDIDR_VERSION_LENGTH = (4) };
enum { R_DBGDIDR_VERSION_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_DBGDIDR_CTX_CMPS_SHIFT = (20) };
enum { R_DBGDIDR_CTX_CMPS_LENGTH = (4) };
enum { R_DBGDIDR_CTX_CMPS_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_DBGDIDR_BRPS_SHIFT = (24) };
enum { R_DBGDIDR_BRPS_LENGTH = (4) };
enum { R_DBGDIDR_BRPS_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_DBGDIDR_WRPS_SHIFT = (28) };
enum { R_DBGDIDR_WRPS_LENGTH = (4) };
enum { R_DBGDIDR_WRPS_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_DBGDEVID_PCSAMPLE_SHIFT = (0) };
enum { R_DBGDEVID_PCSAMPLE_LENGTH = (4) };
enum { R_DBGDEVID_PCSAMPLE_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_DBGDEVID_WPADDRMASK_SHIFT = (4) };
enum { R_DBGDEVID_WPADDRMASK_LENGTH = (4) };
enum { R_DBGDEVID_WPADDRMASK_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_DBGDEVID_BPADDRMASK_SHIFT = (8) };
enum { R_DBGDEVID_BPADDRMASK_LENGTH = (4) };
enum { R_DBGDEVID_BPADDRMASK_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_DBGDEVID_VECTORCATCH_SHIFT = (12) };
enum { R_DBGDEVID_VECTORCATCH_LENGTH = (4) };
enum { R_DBGDEVID_VECTORCATCH_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_DBGDEVID_VIRTEXTNS_SHIFT = (16) };
enum { R_DBGDEVID_VIRTEXTNS_LENGTH = (4) };
enum { R_DBGDEVID_VIRTEXTNS_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_DBGDEVID_DOUBLELOCK_SHIFT = (20) };
enum { R_DBGDEVID_DOUBLELOCK_LENGTH = (4) };
enum { R_DBGDEVID_DOUBLELOCK_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_DBGDEVID_AUXREGS_SHIFT = (24) };
enum { R_DBGDEVID_AUXREGS_LENGTH = (4) };
enum { R_DBGDEVID_AUXREGS_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_DBGDEVID_CIDMASK_SHIFT = (28) };
enum { R_DBGDEVID_CIDMASK_LENGTH = (4) };
enum { R_DBGDEVID_CIDMASK_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_DBGDEVID1_PCSROFFSET_SHIFT = (0) };
enum { R_DBGDEVID1_PCSROFFSET_LENGTH = (4) };
enum { R_DBGDEVID1_PCSROFFSET_MASK = (((~0ULL) >> (64 - (4))) << (0)) };

enum { R_MVFR0_SIMDREG_SHIFT = (0) };
enum { R_MVFR0_SIMDREG_LENGTH = (4) };
enum { R_MVFR0_SIMDREG_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_MVFR0_FPSP_SHIFT = (4) };
enum { R_MVFR0_FPSP_LENGTH = (4) };
enum { R_MVFR0_FPSP_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_MVFR0_FPDP_SHIFT = (8) };
enum { R_MVFR0_FPDP_LENGTH = (4) };
enum { R_MVFR0_FPDP_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_MVFR0_FPTRAP_SHIFT = (12) };
enum { R_MVFR0_FPTRAP_LENGTH = (4) };
enum { R_MVFR0_FPTRAP_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_MVFR0_FPDIVIDE_SHIFT = (16) };
enum { R_MVFR0_FPDIVIDE_LENGTH = (4) };
enum { R_MVFR0_FPDIVIDE_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_MVFR0_FPSQRT_SHIFT = (20) };
enum { R_MVFR0_FPSQRT_LENGTH = (4) };
enum { R_MVFR0_FPSQRT_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_MVFR0_FPSHVEC_SHIFT = (24) };
enum { R_MVFR0_FPSHVEC_LENGTH = (4) };
enum { R_MVFR0_FPSHVEC_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_MVFR0_FPROUND_SHIFT = (28) };
enum { R_MVFR0_FPROUND_LENGTH = (4) };
enum { R_MVFR0_FPROUND_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_MVFR1_FPFTZ_SHIFT = (0) };
enum { R_MVFR1_FPFTZ_LENGTH = (4) };
enum { R_MVFR1_FPFTZ_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_MVFR1_FPDNAN_SHIFT = (4) };
enum { R_MVFR1_FPDNAN_LENGTH = (4) };
enum { R_MVFR1_FPDNAN_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_MVFR1_SIMDLS_SHIFT = (8) };
enum { R_MVFR1_SIMDLS_LENGTH = (4) };
enum { R_MVFR1_SIMDLS_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_MVFR1_SIMDINT_SHIFT = (12) };
enum { R_MVFR1_SIMDINT_LENGTH = (4) };
enum { R_MVFR1_SIMDINT_MASK = (((~0ULL) >> (64 - (4))) << (12)) };
enum { R_MVFR1_SIMDSP_SHIFT = (16) };
enum { R_MVFR1_SIMDSP_LENGTH = (4) };
enum { R_MVFR1_SIMDSP_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_MVFR1_SIMDHP_SHIFT = (20) };
enum { R_MVFR1_SIMDHP_LENGTH = (4) };
enum { R_MVFR1_SIMDHP_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_MVFR1_MVE_SHIFT = (8) };
enum { R_MVFR1_MVE_LENGTH = (4) };
enum { R_MVFR1_MVE_MASK = (((~0ULL) >> (64 - (4))) << (8)) };
enum { R_MVFR1_FP16_SHIFT = (20) };
enum { R_MVFR1_FP16_LENGTH = (4) };
enum { R_MVFR1_FP16_MASK = (((~0ULL) >> (64 - (4))) << (20)) };
enum { R_MVFR1_FPHP_SHIFT = (24) };
enum { R_MVFR1_FPHP_LENGTH = (4) };
enum { R_MVFR1_FPHP_MASK = (((~0ULL) >> (64 - (4))) << (24)) };
enum { R_MVFR1_SIMDFMAC_SHIFT = (28) };
enum { R_MVFR1_SIMDFMAC_LENGTH = (4) };
enum { R_MVFR1_SIMDFMAC_MASK = (((~0ULL) >> (64 - (4))) << (28)) };

enum { R_MVFR2_SIMDMISC_SHIFT = (0) };
enum { R_MVFR2_SIMDMISC_LENGTH = (4) };
enum { R_MVFR2_SIMDMISC_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_MVFR2_FPMISC_SHIFT = (4) };
enum { R_MVFR2_FPMISC_LENGTH = (4) };
enum { R_MVFR2_FPMISC_MASK = (((~0ULL) >> (64 - (4))) << (4)) };

enum { R_GPCCR_PPS_SHIFT = (0) };
enum { R_GPCCR_PPS_LENGTH = (3) };
enum { R_GPCCR_PPS_MASK = (((~0ULL) >> (64 - (3))) << (0)) };
enum { R_GPCCR_IRGN_SHIFT = (8) };
enum { R_GPCCR_IRGN_LENGTH = (2) };
enum { R_GPCCR_IRGN_MASK = (((~0ULL) >> (64 - (2))) << (8)) };
enum { R_GPCCR_ORGN_SHIFT = (10) };
enum { R_GPCCR_ORGN_LENGTH = (2) };
enum { R_GPCCR_ORGN_MASK = (((~0ULL) >> (64 - (2))) << (10)) };
enum { R_GPCCR_SH_SHIFT = (12) };
enum { R_GPCCR_SH_LENGTH = (2) };
enum { R_GPCCR_SH_MASK = (((~0ULL) >> (64 - (2))) << (12)) };
enum { R_GPCCR_PGS_SHIFT = (14) };
enum { R_GPCCR_PGS_LENGTH = (2) };
enum { R_GPCCR_PGS_MASK = (((~0ULL) >> (64 - (2))) << (14)) };
enum { R_GPCCR_GPC_SHIFT = (16) };
enum { R_GPCCR_GPC_LENGTH = (1) };
enum { R_GPCCR_GPC_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_GPCCR_GPCP_SHIFT = (17) };
enum { R_GPCCR_GPCP_LENGTH = (1) };
enum { R_GPCCR_GPCP_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_GPCCR_L0GPTSZ_SHIFT = (20) };
enum { R_GPCCR_L0GPTSZ_LENGTH = (4) };
enum { R_GPCCR_L0GPTSZ_MASK = (((~0ULL) >> (64 - (4))) << (20)) };

enum { R_MFAR_FPA_SHIFT = (12) };
enum { R_MFAR_FPA_LENGTH = (40) };
enum { R_MFAR_FPA_MASK = (((~0ULL) >> (64 - (40))) << (12)) };
enum { R_MFAR_NSE_SHIFT = (62) };
enum { R_MFAR_NSE_LENGTH = (1) };
enum { R_MFAR_NSE_MASK = (((~0ULL) >> (64 - (1))) << (62)) };
enum { R_MFAR_NS_SHIFT = (63) };
enum { R_MFAR_NS_LENGTH = (1) };
enum { R_MFAR_NS_MASK = (((~0ULL) >> (64 - (1))) << (63)) };

_Static_assert(!(((sizeof(((ARMCPU *)0)->ccsidr) /
                   sizeof((((ARMCPU *)0)->ccsidr)[0])) +
                  (sizeof(struct {
                     int : (!(!__builtin_types_compatible_p(
                               typeof(((ARMCPU *)0)->ccsidr),
                               typeof(&(((ARMCPU *)0)->ccsidr)[0]))))
                           ? -1
                           : 1;
                   }) -
                   sizeof(struct {
                     int : (!(!__builtin_types_compatible_p(
                               typeof(((ARMCPU *)0)->ccsidr),
                               typeof(&(((ARMCPU *)0)->ccsidr)[0]))))
                           ? -1
                           : 1;
                   }))) <= R_V7M_CSSELR_INDEX_MASK),
               "not expecting: "
               "ARRAY_SIZE(((ARMCPU *)0)->ccsidr) <= R_V7M_CSSELR_INDEX_MASK");

enum arm_features {
  ARM_FEATURE_AUXCR,
  ARM_FEATURE_XSCALE,
  ARM_FEATURE_IWMMXT,
  ARM_FEATURE_V6,
  ARM_FEATURE_V6K,
  ARM_FEATURE_V7,
  ARM_FEATURE_THUMB2,
  ARM_FEATURE_PMSA,
  ARM_FEATURE_NEON,
  ARM_FEATURE_M,
  ARM_FEATURE_OMAPCP,
  ARM_FEATURE_THUMB2EE,
  ARM_FEATURE_V7MP,
  ARM_FEATURE_V7VE,
  ARM_FEATURE_V4T,
  ARM_FEATURE_V5,
  ARM_FEATURE_STRONGARM,
  ARM_FEATURE_VAPA,
  ARM_FEATURE_GENERIC_TIMER,
  ARM_FEATURE_MVFR,
  ARM_FEATURE_DUMMY_C15_REGS,
  ARM_FEATURE_CACHE_TEST_CLEAN,
  ARM_FEATURE_CACHE_DIRTY_REG,
  ARM_FEATURE_CACHE_BLOCK_OPS,
  ARM_FEATURE_MPIDR,
  ARM_FEATURE_LPAE,
  ARM_FEATURE_V8,
  ARM_FEATURE_AARCH64,
  ARM_FEATURE_CBAR,
  ARM_FEATURE_CBAR_RO,
  ARM_FEATURE_EL2,
  ARM_FEATURE_EL3,
  ARM_FEATURE_THUMB_DSP,
  ARM_FEATURE_PMU,
  ARM_FEATURE_VBAR,
  ARM_FEATURE_M_SECURITY,
  ARM_FEATURE_M_MAIN,
  ARM_FEATURE_V8_1M,

  ARM_FEATURE_BACKCOMPAT_CNTFRQ,
};

static inline int arm_feature(CPUARMState *env, int feature) {
  return (env->features & (1ULL << feature)) != 0;
}

void arm_cpu_finalize_features(ARMCPU *cpu, Error **errp);

typedef enum ARMSecuritySpace {
  ARMSS_Secure = 0,
  ARMSS_NonSecure = 1,
  ARMSS_Root = 2,
  ARMSS_Realm = 3,
} ARMSecuritySpace;

static inline
# 2502 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2502 "../../../target/arm/cpu.h"
    arm_space_is_secure(ARMSecuritySpace space) {
  return space == ARMSS_Secure || space == ARMSS_Root;
}

static inline ARMSecuritySpace arm_secure_to_space(
# 2508 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2508 "../../../target/arm/cpu.h"
        secure) {
  return secure ? ARMSS_Secure : ARMSS_NonSecure;
}
# 2591 "../../../target/arm/cpu.h"
static inline ARMSecuritySpace arm_security_space_below_el3(CPUARMState *env) {
  return ARMSS_NonSecure;
}

static inline
# 2596 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2596 "../../../target/arm/cpu.h"
    arm_is_secure_below_el3(CPUARMState *env) {
  return
# 2598 "../../../target/arm/cpu.h" 3 4
      0
# 2598 "../../../target/arm/cpu.h"
      ;
}

static inline
# 2601 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2601 "../../../target/arm/cpu.h"
    arm_is_el3_or_mon(CPUARMState *env) {
  return
# 2603 "../../../target/arm/cpu.h" 3 4
      0
# 2603 "../../../target/arm/cpu.h"
      ;
}

static inline ARMSecuritySpace arm_security_space(CPUARMState *env) {
  return ARMSS_NonSecure;
}

static inline
# 2611 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2611 "../../../target/arm/cpu.h"
    arm_is_secure(CPUARMState *env) {
  return
# 2613 "../../../target/arm/cpu.h" 3 4
      0
# 2613 "../../../target/arm/cpu.h"
      ;
}

static inline
# 2616 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2616 "../../../target/arm/cpu.h"
    arm_is_el2_enabled_secstate(CPUARMState *env, ARMSecuritySpace space) {
  return
# 2619 "../../../target/arm/cpu.h" 3 4
      0
# 2619 "../../../target/arm/cpu.h"
      ;
}

static inline
# 2622 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2622 "../../../target/arm/cpu.h"
    arm_is_el2_enabled(CPUARMState *env) {
  return
# 2624 "../../../target/arm/cpu.h" 3 4
      0
# 2624 "../../../target/arm/cpu.h"
      ;
}
# 2634 "../../../target/arm/cpu.h"
uint64_t arm_hcr_el2_eff_secstate(CPUARMState *env, ARMSecuritySpace space);
uint64_t arm_hcr_el2_eff(CPUARMState *env);
uint64_t arm_hcrx_el2_eff(CPUARMState *env);
# 2646 "../../../target/arm/cpu.h"

# 2646 "../../../target/arm/cpu.h" 3 4
_Bool
# 2646 "../../../target/arm/cpu.h"
    access_secure_reg(CPUARMState *env);

uint32_t arm_phys_excp_target_el(CPUState *cs, uint32_t excp_idx,
                                 uint32_t cur_el,
# 2649 "../../../target/arm/cpu.h" 3 4
                                 _Bool
# 2649 "../../../target/arm/cpu.h"
                                     secure);

static inline int arm_highest_el(CPUARMState *env) {
  if (arm_feature(env, ARM_FEATURE_EL3)) {
    return 3;
  }
  if (arm_feature(env, ARM_FEATURE_EL2)) {
    return 2;
  }
  return 1;
}

static inline
# 2664 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2664 "../../../target/arm/cpu.h"
    arm_v7m_is_handler_mode(CPUARMState *env) {
  return env->v7m.exception != 0;
}
# 2683 "../../../target/arm/cpu.h"

# 2683 "../../../target/arm/cpu.h" 3 4
_Bool
# 2683 "../../../target/arm/cpu.h"
    write_list_to_cpustate(ARMCPU *cpu);
# 2706 "../../../target/arm/cpu.h"

# 2706 "../../../target/arm/cpu.h" 3 4
_Bool
# 2706 "../../../target/arm/cpu.h"
    write_cpustate_to_list(ARMCPU *cpu,
# 2706 "../../../target/arm/cpu.h" 3 4
                                        _Bool
# 2706 "../../../target/arm/cpu.h"
                                             kvm_sync);
# 2835 "../../../target/arm/cpu.h"
typedef enum ARMMMUIdx {

  ARMMMUIdx_E10_0 = 0 | 0x10,
  ARMMMUIdx_E20_0 = 1 | 0x10,
  ARMMMUIdx_E10_1 = 2 | 0x10,
  ARMMMUIdx_E20_2 = 3 | 0x10,
  ARMMMUIdx_E10_1_PAN = 4 | 0x10,
  ARMMMUIdx_E20_2_PAN = 5 | 0x10,
  ARMMMUIdx_E2 = 6 | 0x10,
  ARMMMUIdx_E3 = 7 | 0x10,
  ARMMMUIdx_E30_0 = 8 | 0x10,
  ARMMMUIdx_E30_3_PAN = 9 | 0x10,

  ARMMMUIdx_Stage2_S = 10 | 0x10,
  ARMMMUIdx_Stage2 = 11 | 0x10,

  ARMMMUIdx_Phys_S = 12 | 0x10,
  ARMMMUIdx_Phys_NS = 13 | 0x10,
  ARMMMUIdx_Phys_Root = 14 | 0x10,
  ARMMMUIdx_Phys_Realm = 15 | 0x10,

  ARMMMUIdx_Stage1_E0 = 0 | 0x20,
  ARMMMUIdx_Stage1_E1 = 1 | 0x20,
  ARMMMUIdx_Stage1_E1_PAN = 2 | 0x20,

  ARMMMUIdx_MUser = 0x40,
  ARMMMUIdx_MPriv = 0x40 | 0x1,
  ARMMMUIdx_MUserNegPri = ARMMMUIdx_MUser | 0x2,
  ARMMMUIdx_MPrivNegPri = ARMMMUIdx_MPriv | 0x2,
  ARMMMUIdx_MSUser = ARMMMUIdx_MUser | 0x4,
  ARMMMUIdx_MSPriv = ARMMMUIdx_MPriv | 0x4,
  ARMMMUIdx_MSUserNegPri = ARMMMUIdx_MUserNegPri | 0x4,
  ARMMMUIdx_MSPrivNegPri = ARMMMUIdx_MPrivNegPri | 0x4,
} ARMMMUIdx;
# 2893 "../../../target/arm/cpu.h"
typedef enum ARMMMUIdxBit {
  ARMMMUIdxBit_E10_0 = 1 << (ARMMMUIdx_E10_0 & 0xf),
  ARMMMUIdxBit_E20_0 = 1 << (ARMMMUIdx_E20_0 & 0xf),
  ARMMMUIdxBit_E10_1 = 1 << (ARMMMUIdx_E10_1 & 0xf),
  ARMMMUIdxBit_E10_1_PAN = 1 << (ARMMMUIdx_E10_1_PAN & 0xf),
  ARMMMUIdxBit_E2 = 1 << (ARMMMUIdx_E2 & 0xf),
  ARMMMUIdxBit_E20_2 = 1 << (ARMMMUIdx_E20_2 & 0xf),
  ARMMMUIdxBit_E20_2_PAN = 1 << (ARMMMUIdx_E20_2_PAN & 0xf),
  ARMMMUIdxBit_E3 = 1 << (ARMMMUIdx_E3 & 0xf),
  ARMMMUIdxBit_E30_0 = 1 << (ARMMMUIdx_E30_0 & 0xf),
  ARMMMUIdxBit_E30_3_PAN = 1 << (ARMMMUIdx_E30_3_PAN & 0xf),
  ARMMMUIdxBit_Stage2 = 1 << (ARMMMUIdx_Stage2 & 0xf),
  ARMMMUIdxBit_Stage2_S = 1 << (ARMMMUIdx_Stage2_S & 0xf),

  ARMMMUIdxBit_MUser = 1 << (ARMMMUIdx_MUser & 0xf),
  ARMMMUIdxBit_MPriv = 1 << (ARMMMUIdx_MPriv & 0xf),
  ARMMMUIdxBit_MUserNegPri = 1 << (ARMMMUIdx_MUserNegPri & 0xf),
  ARMMMUIdxBit_MPrivNegPri = 1 << (ARMMMUIdx_MPrivNegPri & 0xf),
  ARMMMUIdxBit_MSUser = 1 << (ARMMMUIdx_MSUser & 0xf),
  ARMMMUIdxBit_MSPriv = 1 << (ARMMMUIdx_MSPriv & 0xf),
  ARMMMUIdxBit_MSUserNegPri = 1 << (ARMMMUIdx_MSUserNegPri & 0xf),
  ARMMMUIdxBit_MSPrivNegPri = 1 << (ARMMMUIdx_MSPrivNegPri & 0xf),
} ARMMMUIdxBit;

typedef enum ARMASIdx {
  ARMASIdx_NS = 0,
  ARMASIdx_S = 1,
  ARMASIdx_TagNS = 2,
  ARMASIdx_TagS = 3,
} ARMASIdx;

static inline ARMMMUIdx arm_space_to_phys(ARMSecuritySpace space) {

  _Static_assert(!(ARMSS_Secure != 0), "not expecting: "
                                       "ARMSS_Secure != 0");
  _Static_assert(!(ARMMMUIdx_Phys_NS != ARMMMUIdx_Phys_S + ARMSS_NonSecure),
                 "not expecting: "
                 "ARMMMUIdx_Phys_NS != ARMMMUIdx_Phys_S + ARMSS_NonSecure");
  _Static_assert(!(ARMMMUIdx_Phys_Root != ARMMMUIdx_Phys_S + ARMSS_Root),
                 "not expecting: "
                 "ARMMMUIdx_Phys_Root != ARMMMUIdx_Phys_S + ARMSS_Root");
  _Static_assert(!(ARMMMUIdx_Phys_Realm != ARMMMUIdx_Phys_S + ARMSS_Realm),
                 "not expecting: "
                 "ARMMMUIdx_Phys_Realm != ARMMMUIdx_Phys_S + ARMSS_Realm");

  return ARMMMUIdx_Phys_S + space;
}

static inline ARMSecuritySpace arm_phys_to_space(ARMMMUIdx idx) {

# 2942 "../../../target/arm/cpu.h" 3 4
  ((void)sizeof((
# 2942 "../../../target/arm/cpu.h"
                    idx >= ARMMMUIdx_Phys_S && idx <= ARMMMUIdx_Phys_Realm
# 2942 "../../../target/arm/cpu.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 2942 "../../../target/arm/cpu.h"
         idx >= ARMMMUIdx_Phys_S && idx <= ARMMMUIdx_Phys_Realm
# 2942 "../../../target/arm/cpu.h" 3 4
     )
       ;
     else
       __assert_fail(
# 2942 "../../../target/arm/cpu.h"
           "idx >= ARMMMUIdx_Phys_S && idx <= ARMMMUIdx_Phys_Realm"
# 2942 "../../../target/arm/cpu.h" 3 4
           ,
           "../../../target/arm/cpu.h", 2942,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 2942 "../../../target/arm/cpu.h"
      ;
  return idx - ARMMMUIdx_Phys_S;
}

static inline
# 2946 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2946 "../../../target/arm/cpu.h"
    arm_v7m_csselr_razwi(ARMCPU *cpu) {

  return (cpu->clidr & R_V7M_CLIDR_CTYPE_ALL_MASK) != 0;
}

static inline
# 2954 "../../../target/arm/cpu.h" 3 4
    _Bool
# 2954 "../../../target/arm/cpu.h"
    arm_sctlr_b(CPUARMState *env) {
  return

      (env->cp15.sctlr_el[1] & (1U << 7)) != 0;
}

uint64_t arm_sctlr(CPUARMState *env, int el);

# 1 "/home/paulning/study/qemu/include/exec/cpu-all.h" 1
# 23 "/home/paulning/study/qemu/include/exec/cpu-all.h"
# 1 "/home/paulning/study/qemu/include/exec/cpu-common.h" 1
# 16 "/home/paulning/study/qemu/include/exec/cpu-common.h"
# 1 "/home/paulning/study/qemu/include/tcg/debug-assert.h" 1
# 17 "/home/paulning/study/qemu/include/exec/cpu-common.h" 2
# 26 "/home/paulning/study/qemu/include/exec/cpu-common.h"
void cpu_exec_init_all(void);
void cpu_exec_step_atomic(CPUState *cpu);

extern QemuMutex qemu_cpu_list_lock;
void qemu_init_cpu_list(void);
void cpu_list_lock(void);
void cpu_list_unlock(void);
unsigned int cpu_list_generation_id_get(void);

int cpu_get_free_index(void);

void tcg_iommu_init_notifier_list(CPUState *cpu);
void tcg_iommu_free_notifier_list(CPUState *cpu);
# 182 "/home/paulning/study/qemu/include/exec/cpu-common.h"
int cpu_memory_rw_debug(CPUState *cpu, vaddr addr, void *ptr, size_t len,
# 183 "/home/paulning/study/qemu/include/exec/cpu-common.h" 3 4
                        _Bool
# 183 "/home/paulning/study/qemu/include/exec/cpu-common.h"
                            is_write);

void list_cpus(void);
# 202 "/home/paulning/study/qemu/include/exec/cpu-common.h"

# 202 "/home/paulning/study/qemu/include/exec/cpu-common.h" 3 4
_Bool
# 202 "/home/paulning/study/qemu/include/exec/cpu-common.h"
    cpu_unwind_state_data(CPUState *cpu, uintptr_t host_pc, uint64_t *data);
# 214 "/home/paulning/study/qemu/include/exec/cpu-common.h"

# 214 "/home/paulning/study/qemu/include/exec/cpu-common.h" 3 4
_Bool
# 214 "/home/paulning/study/qemu/include/exec/cpu-common.h"
    cpu_restore_state(CPUState *cpu, uintptr_t host_pc);
# 228 "/home/paulning/study/qemu/include/exec/cpu-common.h"
static inline
# 228 "/home/paulning/study/qemu/include/exec/cpu-common.h" 3 4
    _Bool
# 228 "/home/paulning/study/qemu/include/exec/cpu-common.h"
    cpu_loop_exit_requested(CPUState *cpu) {
  return (int32_t)({
           while (!(sizeof(*&cpu->neg.icount_decr.u32) <= sizeof(void *)))
             do {
               g_assertion_message_expr(
                   ((gchar *)0),
                   "/home/paulning/study/qemu/include/exec/cpu-common.h", 230,
                   ((const char *)(__func__)),
# 230 "/home/paulning/study/qemu/include/exec/cpu-common.h" 3 4
                   ((void *)0)
# 230 "/home/paulning/study/qemu/include/exec/cpu-common.h"
               );
             } while (0);
           __atomic_load_n(&cpu->neg.icount_decr.u32, 0);
         }) < 0;
}

__attribute__((__noreturn__)) void cpu_loop_exit_noexc(CPUState *cpu);
__attribute__((__noreturn__)) void cpu_loop_exit_atomic(CPUState *cpu,
                                                        uintptr_t pc);

__attribute__((__noreturn__)) void cpu_loop_exit(CPUState *cpu);
__attribute__((__noreturn__)) void cpu_loop_exit_restore(CPUState *cpu,
                                                         uintptr_t pc);

int cpu_exec(CPUState *cpu);

static inline ArchCPU *env_archcpu(CPUArchState *env) {
  return (void *)env - sizeof(CPUState);
}

static inline const CPUState *env_cpu_const(const CPUArchState *env) {
  return (void *)env - sizeof(CPUState);
}

static inline CPUState *env_cpu(CPUArchState *env) {
  return (CPUState *)env_cpu_const(env);
}
# 24 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2
# 1 "/home/paulning/study/qemu/include/exec/cpu-interrupt.h" 1
# 25 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2
# 1 "/home/paulning/study/qemu/include/exec/memory.h" 1
# 26 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2
# 1 "/home/paulning/study/qemu/include/exec/tswap.h" 1
# 22 "/home/paulning/study/qemu/include/exec/tswap.h"

# 22 "/home/paulning/study/qemu/include/exec/tswap.h" 3 4
_Bool
# 22 "/home/paulning/study/qemu/include/exec/tswap.h"
    target_words_bigendian(void);
# 34 "/home/paulning/study/qemu/include/exec/tswap.h"
static inline uint16_t tswap16(uint16_t s) {
  if (((1234 == 4321) != 0)) {
    return __builtin_bswap16(s);
  } else {
    return s;
  }
}

static inline uint32_t tswap32(uint32_t s) {
  if (((1234 == 4321) != 0)) {
    return __builtin_bswap32(s);
  } else {
    return s;
  }
}

static inline uint64_t tswap64(uint64_t s) {
  if (((1234 == 4321) != 0)) {
    return __builtin_bswap64(s);
  } else {
    return s;
  }
}

static inline void tswap16s(uint16_t *s) {
  if (((1234 == 4321) != 0)) {
    *s = __builtin_bswap16(*s);
  }
}

static inline void tswap32s(uint32_t *s) {
  if (((1234 == 4321) != 0)) {
    *s = __builtin_bswap32(*s);
  }
}

static inline void tswap64s(uint64_t *s) {
  if (((1234 == 4321) != 0)) {
    *s = __builtin_bswap64(*s);
  }
}
# 27 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2
# 97 "/home/paulning/study/qemu/include/exec/cpu-all.h"
# 1 "/home/paulning/study/qemu/include/exec/target_page.h" 1
# 51 "/home/paulning/study/qemu/include/exec/target_page.h"
static inline size_t qemu_target_page_size(void) { return (1 << 12); }

static inline int qemu_target_page_mask(void) {
  return ((target_long)-1 << 12);
}

static inline int qemu_target_page_bits(void) { return 12; }

int qemu_target_page_bits_min(void);
size_t qemu_target_pages_to_MiB(size_t pages);
# 98 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2

CPUArchState *cpu_copy(CPUArchState *env);

# 1 "../../../target/arm/cpu.h" 1
# 102 "/home/paulning/study/qemu/include/exec/cpu-all.h" 2

static inline int cpu_mmu_index(CPUState *cs,
# 105 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                                _Bool
# 105 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                                    ifetch);
# 116 "/home/paulning/study/qemu/include/exec/cpu-all.h"
static inline int cpu_mmu_index(CPUState *cs,
# 116 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                                _Bool
# 116 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                                    ifetch) {
  return 0;
}
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h"
_Static_assert(!(
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                   __builtin_offsetof(
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                       ArchCPU
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                       ,
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                       parent_obj
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                       )
# 173 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                   != 0),
               "not expecting: "
               "offsetof(ArchCPU, parent_obj) != 0");
_Static_assert(!(
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                   __builtin_offsetof(
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                       ArchCPU
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                       ,
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                       env
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h" 3 4
                       )
# 174 "/home/paulning/study/qemu/include/exec/cpu-all.h"
                   != sizeof(CPUState)),
               "not expecting: "
               "offsetof(ArchCPU, env) != sizeof(CPUState)");
# 2970 "../../../target/arm/cpu.h" 2
# 2995 "../../../target/arm/cpu.h"
enum { R_TBFLAG_ANY_AARCH64_STATE_SHIFT = (0) };
enum { R_TBFLAG_ANY_AARCH64_STATE_LENGTH = (1) };
enum { R_TBFLAG_ANY_AARCH64_STATE_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_TBFLAG_ANY_SS_ACTIVE_SHIFT = (1) };
enum { R_TBFLAG_ANY_SS_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_ANY_SS_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_TBFLAG_ANY_PSTATE__SS_SHIFT = (2) };
enum { R_TBFLAG_ANY_PSTATE__SS_LENGTH = (1) };
enum { R_TBFLAG_ANY_PSTATE__SS_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_TBFLAG_ANY_BE_DATA_SHIFT = (3) };
enum { R_TBFLAG_ANY_BE_DATA_LENGTH = (1) };
enum { R_TBFLAG_ANY_BE_DATA_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_TBFLAG_ANY_MMUIDX_SHIFT = (4) };
enum { R_TBFLAG_ANY_MMUIDX_LENGTH = (4) };
enum { R_TBFLAG_ANY_MMUIDX_MASK = (((~0ULL) >> (64 - (4))) << (4)) };

enum { R_TBFLAG_ANY_FPEXC_EL_SHIFT = (8) };
enum { R_TBFLAG_ANY_FPEXC_EL_LENGTH = (2) };
enum { R_TBFLAG_ANY_FPEXC_EL_MASK = (((~0ULL) >> (64 - (2))) << (8)) };

enum { R_TBFLAG_ANY_ALIGN_MEM_SHIFT = (10) };
enum { R_TBFLAG_ANY_ALIGN_MEM_LENGTH = (1) };
enum { R_TBFLAG_ANY_ALIGN_MEM_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_TBFLAG_ANY_PSTATE__IL_SHIFT = (11) };
enum { R_TBFLAG_ANY_PSTATE__IL_LENGTH = (1) };
enum { R_TBFLAG_ANY_PSTATE__IL_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_TBFLAG_ANY_FGT_ACTIVE_SHIFT = (12) };
enum { R_TBFLAG_ANY_FGT_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_ANY_FGT_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_TBFLAG_ANY_FGT_SVC_SHIFT = (13) };
enum { R_TBFLAG_ANY_FGT_SVC_LENGTH = (1) };
enum { R_TBFLAG_ANY_FGT_SVC_MASK = (((~0ULL) >> (64 - (1))) << (13)) };

enum { R_TBFLAG_AM32_CONDEXEC_SHIFT = (24) };
enum { R_TBFLAG_AM32_CONDEXEC_LENGTH = (8) };
enum { R_TBFLAG_AM32_CONDEXEC_MASK = (((~0ULL) >> (64 - (8))) << (24)) };
enum { R_TBFLAG_AM32_THUMB_SHIFT = (23) };
enum { R_TBFLAG_AM32_THUMB_LENGTH = (1) };
enum { R_TBFLAG_AM32_THUMB_MASK = (((~0ULL) >> (64 - (1))) << (23)) };

enum { R_TBFLAG_A32_VECLEN_SHIFT = (0) };
enum { R_TBFLAG_A32_VECLEN_LENGTH = (3) };
enum { R_TBFLAG_A32_VECLEN_MASK = (((~0ULL) >> (64 - (3))) << (0)) };
enum { R_TBFLAG_A32_VECSTRIDE_SHIFT = (3) };
enum { R_TBFLAG_A32_VECSTRIDE_LENGTH = (2) };
enum { R_TBFLAG_A32_VECSTRIDE_MASK = (((~0ULL) >> (64 - (2))) << (3)) };

enum { R_TBFLAG_A32_XSCALE_CPAR_SHIFT = (5) };
enum { R_TBFLAG_A32_XSCALE_CPAR_LENGTH = (2) };
enum { R_TBFLAG_A32_XSCALE_CPAR_MASK = (((~0ULL) >> (64 - (2))) << (5)) };
enum { R_TBFLAG_A32_VFPEN_SHIFT = (7) };
enum { R_TBFLAG_A32_VFPEN_LENGTH = (1) };
enum { R_TBFLAG_A32_VFPEN_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_TBFLAG_A32_SCTLR__B_SHIFT = (8) };
enum { R_TBFLAG_A32_SCTLR__B_LENGTH = (1) };
enum { R_TBFLAG_A32_SCTLR__B_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_TBFLAG_A32_HSTR_ACTIVE_SHIFT = (9) };
enum { R_TBFLAG_A32_HSTR_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_A32_HSTR_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (9)) };

enum { R_TBFLAG_A32_NS_SHIFT = (10) };
enum { R_TBFLAG_A32_NS_LENGTH = (1) };
enum { R_TBFLAG_A32_NS_MASK = (((~0ULL) >> (64 - (1))) << (10)) };

enum { R_TBFLAG_A32_SME_TRAP_NONSTREAMING_SHIFT = (11) };
enum { R_TBFLAG_A32_SME_TRAP_NONSTREAMING_LENGTH = (1) };
enum {
  R_TBFLAG_A32_SME_TRAP_NONSTREAMING_MASK = (((~0ULL) >> (64 - (1))) << (11))
};

enum { R_TBFLAG_M32_HANDLER_SHIFT = (0) };
enum { R_TBFLAG_M32_HANDLER_LENGTH = (1) };
enum { R_TBFLAG_M32_HANDLER_MASK = (((~0ULL) >> (64 - (1))) << (0)) };

enum { R_TBFLAG_M32_STACKCHECK_SHIFT = (1) };
enum { R_TBFLAG_M32_STACKCHECK_LENGTH = (1) };
enum { R_TBFLAG_M32_STACKCHECK_MASK = (((~0ULL) >> (64 - (1))) << (1)) };

enum { R_TBFLAG_M32_LSPACT_SHIFT = (2) };
enum { R_TBFLAG_M32_LSPACT_LENGTH = (1) };
enum { R_TBFLAG_M32_LSPACT_MASK = (((~0ULL) >> (64 - (1))) << (2)) };

enum { R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_SHIFT = (3) };
enum { R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_LENGTH = (1) };
enum {
  R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_MASK = (((~0ULL) >> (64 - (1))) << (3))
};

enum { R_TBFLAG_M32_FPCCR_S_WRONG_SHIFT = (4) };
enum { R_TBFLAG_M32_FPCCR_S_WRONG_LENGTH = (1) };
enum { R_TBFLAG_M32_FPCCR_S_WRONG_MASK = (((~0ULL) >> (64 - (1))) << (4)) };

enum { R_TBFLAG_M32_MVE_NO_PRED_SHIFT = (5) };
enum { R_TBFLAG_M32_MVE_NO_PRED_LENGTH = (1) };
enum { R_TBFLAG_M32_MVE_NO_PRED_MASK = (((~0ULL) >> (64 - (1))) << (5)) };

enum { R_TBFLAG_M32_SECURE_SHIFT = (6) };
enum { R_TBFLAG_M32_SECURE_LENGTH = (1) };
enum { R_TBFLAG_M32_SECURE_MASK = (((~0ULL) >> (64 - (1))) << (6)) };

enum { R_TBFLAG_A64_TBII_SHIFT = (0) };
enum { R_TBFLAG_A64_TBII_LENGTH = (2) };
enum { R_TBFLAG_A64_TBII_MASK = (((~0ULL) >> (64 - (2))) << (0)) };
enum { R_TBFLAG_A64_SVEEXC_EL_SHIFT = (2) };
enum { R_TBFLAG_A64_SVEEXC_EL_LENGTH = (2) };
enum { R_TBFLAG_A64_SVEEXC_EL_MASK = (((~0ULL) >> (64 - (2))) << (2)) };

enum { R_TBFLAG_A64_VL_SHIFT = (4) };
enum { R_TBFLAG_A64_VL_LENGTH = (4) };
enum { R_TBFLAG_A64_VL_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_TBFLAG_A64_PAUTH_ACTIVE_SHIFT = (8) };
enum { R_TBFLAG_A64_PAUTH_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_A64_PAUTH_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_TBFLAG_A64_BT_SHIFT = (9) };
enum { R_TBFLAG_A64_BT_LENGTH = (1) };
enum { R_TBFLAG_A64_BT_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_TBFLAG_A64_BTYPE_SHIFT = (10) };
enum { R_TBFLAG_A64_BTYPE_LENGTH = (2) };
enum { R_TBFLAG_A64_BTYPE_MASK = (((~0ULL) >> (64 - (2))) << (10)) };
enum { R_TBFLAG_A64_TBID_SHIFT = (12) };
enum { R_TBFLAG_A64_TBID_LENGTH = (2) };
enum { R_TBFLAG_A64_TBID_MASK = (((~0ULL) >> (64 - (2))) << (12)) };
enum { R_TBFLAG_A64_UNPRIV_SHIFT = (14) };
enum { R_TBFLAG_A64_UNPRIV_LENGTH = (1) };
enum { R_TBFLAG_A64_UNPRIV_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_TBFLAG_A64_ATA_SHIFT = (15) };
enum { R_TBFLAG_A64_ATA_LENGTH = (1) };
enum { R_TBFLAG_A64_ATA_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_TBFLAG_A64_TCMA_SHIFT = (16) };
enum { R_TBFLAG_A64_TCMA_LENGTH = (2) };
enum { R_TBFLAG_A64_TCMA_MASK = (((~0ULL) >> (64 - (2))) << (16)) };
enum { R_TBFLAG_A64_MTE_ACTIVE_SHIFT = (18) };
enum { R_TBFLAG_A64_MTE_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_A64_MTE_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_TBFLAG_A64_MTE0_ACTIVE_SHIFT = (19) };
enum { R_TBFLAG_A64_MTE0_ACTIVE_LENGTH = (1) };
enum { R_TBFLAG_A64_MTE0_ACTIVE_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_TBFLAG_A64_SMEEXC_EL_SHIFT = (20) };
enum { R_TBFLAG_A64_SMEEXC_EL_LENGTH = (2) };
enum { R_TBFLAG_A64_SMEEXC_EL_MASK = (((~0ULL) >> (64 - (2))) << (20)) };
enum { R_TBFLAG_A64_PSTATE_SM_SHIFT = (22) };
enum { R_TBFLAG_A64_PSTATE_SM_LENGTH = (1) };
enum { R_TBFLAG_A64_PSTATE_SM_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_TBFLAG_A64_PSTATE_ZA_SHIFT = (23) };
enum { R_TBFLAG_A64_PSTATE_ZA_LENGTH = (1) };
enum { R_TBFLAG_A64_PSTATE_ZA_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_TBFLAG_A64_SVL_SHIFT = (24) };
enum { R_TBFLAG_A64_SVL_LENGTH = (4) };
enum { R_TBFLAG_A64_SVL_MASK = (((~0ULL) >> (64 - (4))) << (24)) };

enum { R_TBFLAG_A64_SME_TRAP_NONSTREAMING_SHIFT = (28) };
enum { R_TBFLAG_A64_SME_TRAP_NONSTREAMING_LENGTH = (1) };
enum {
  R_TBFLAG_A64_SME_TRAP_NONSTREAMING_MASK = (((~0ULL) >> (64 - (1))) << (28))
};
enum { R_TBFLAG_A64_TRAP_ERET_SHIFT = (29) };
enum { R_TBFLAG_A64_TRAP_ERET_LENGTH = (1) };
enum { R_TBFLAG_A64_TRAP_ERET_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_TBFLAG_A64_NAA_SHIFT = (30) };
enum { R_TBFLAG_A64_NAA_LENGTH = (1) };
enum { R_TBFLAG_A64_NAA_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_TBFLAG_A64_ATA0_SHIFT = (31) };
enum { R_TBFLAG_A64_ATA0_LENGTH = (1) };
enum { R_TBFLAG_A64_ATA0_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_TBFLAG_A64_NV_SHIFT = (32) };
enum { R_TBFLAG_A64_NV_LENGTH = (1) };
enum { R_TBFLAG_A64_NV_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_TBFLAG_A64_NV1_SHIFT = (33) };
enum { R_TBFLAG_A64_NV1_LENGTH = (1) };
enum { R_TBFLAG_A64_NV1_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_TBFLAG_A64_NV2_SHIFT = (34) };
enum { R_TBFLAG_A64_NV2_LENGTH = (1) };
enum { R_TBFLAG_A64_NV2_MASK = (((~0ULL) >> (64 - (1))) << (34)) };

enum { R_TBFLAG_A64_NV2_MEM_E20_SHIFT = (35) };
enum { R_TBFLAG_A64_NV2_MEM_E20_LENGTH = (1) };
enum { R_TBFLAG_A64_NV2_MEM_E20_MASK = (((~0ULL) >> (64 - (1))) << (35)) };

enum { R_TBFLAG_A64_NV2_MEM_BE_SHIFT = (36) };
enum { R_TBFLAG_A64_NV2_MEM_BE_LENGTH = (1) };
enum { R_TBFLAG_A64_NV2_MEM_BE_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_TBFLAG_A64_AH_SHIFT = (37) };
enum { R_TBFLAG_A64_AH_LENGTH = (1) };
enum { R_TBFLAG_A64_AH_MASK = (((~0ULL) >> (64 - (1))) << (37)) };
enum { R_TBFLAG_A64_NEP_SHIFT = (38) };
enum { R_TBFLAG_A64_NEP_LENGTH = (1) };
enum { R_TBFLAG_A64_NEP_MASK = (((~0ULL) >> (64 - (1))) << (38)) };
# 3122 "../../../target/arm/cpu.h"
static inline int sve_vq(CPUARMState *env) {
  return extract64((env->hflags.flags2), R_TBFLAG_A64_VL_SHIFT,
                   R_TBFLAG_A64_VL_LENGTH) +
         1;
}

static inline int sme_vq(CPUARMState *env) {
  return extract64((env->hflags.flags2), R_TBFLAG_A64_SVL_SHIFT,
                   R_TBFLAG_A64_SVL_LENGTH) +
         1;
}

static inline
# 3138 "../../../target/arm/cpu.h" 3 4
    _Bool
# 3138 "../../../target/arm/cpu.h"
    bswap_code(
# 3138 "../../../target/arm/cpu.h" 3 4
        _Bool
# 3138 "../../../target/arm/cpu.h"
            sctlr_b) {

  return 0 ^ sctlr_b;
}

void cpu_get_tb_cpu_state(CPUARMState *env, vaddr *pc, uint64_t *cs_base,
                          uint32_t *flags);

enum {
  QEMU_PSCI_CONDUIT_DISABLED = 0,
  QEMU_PSCI_CONDUIT_SMC = 1,
  QEMU_PSCI_CONDUIT_HVC = 2,
};
# 3190 "../../../target/arm/cpu.h"
void arm_register_pre_el_change_hook(ARMCPU *cpu, ARMELChangeHookFn *hook,
                                     void *opaque);
# 3202 "../../../target/arm/cpu.h"
void arm_register_el_change_hook(ARMCPU *cpu, ARMELChangeHookFn *hook,
                                 void *opaque);

void arm_rebuild_hflags(CPUARMState *env);

static inline uint64_t *aa32_vfp_dreg(CPUARMState *env, unsigned regno) {
  return &env->vfp.zregs[regno >> 1].d[regno & 1];
}

static inline uint64_t *aa32_vfp_qreg(CPUARMState *env, unsigned regno) {
  return &env->vfp.zregs[regno].d[0];
}

static inline uint64_t *aa64_vfp_qreg(CPUARMState *env, unsigned regno) {
  return &env->vfp.zregs[regno].d[0];
}

extern const uint64_t pred_esz_masks[5];
# 13 "../../../target/arm/helper.c" 2
# 1 "../../../target/arm/internals.h" 1
# 30 "../../../target/arm/internals.h"
# 1 "/home/paulning/study/qemu/include/tcg/tcg-gvec-desc.h" 1
# 43 "/home/paulning/study/qemu/include/tcg/tcg-gvec-desc.h"
uint32_t simd_desc(uint32_t oprsz, uint32_t maxsz, int32_t data);

static inline intptr_t simd_maxsz(uint32_t desc) {
  return extract32(desc, 0, 8) * 8 + 8;
}

static inline intptr_t simd_oprsz(uint32_t desc) {
  uint32_t f = extract32(desc, (0 + 8), 2);
  intptr_t o = f * 8 + 8;
  intptr_t m = simd_maxsz(desc);
  return f == 2 ? m : o;
}

static inline int32_t simd_data(uint32_t desc) {
  return sextract32(desc, ((0 + 8) + 2), (32 - ((0 + 8) + 2)));
}
# 31 "../../../target/arm/internals.h" 2
# 1 "../../../target/arm/syndrome.h" 1
# 31 "../../../target/arm/syndrome.h"
enum arm_exception_class {
  EC_UNCATEGORIZED = 0x00,
  EC_WFX_TRAP = 0x01,
  EC_CP15RTTRAP = 0x03,
  EC_CP15RRTTRAP = 0x04,
  EC_CP14RTTRAP = 0x05,
  EC_CP14DTTRAP = 0x06,
  EC_ADVSIMDFPACCESSTRAP = 0x07,
  EC_FPIDTRAP = 0x08,
  EC_PACTRAP = 0x09,
  EC_BXJTRAP = 0x0a,
  EC_CP14RRTTRAP = 0x0c,
  EC_BTITRAP = 0x0d,
  EC_ILLEGALSTATE = 0x0e,
  EC_AA32_SVC = 0x11,
  EC_AA32_HVC = 0x12,
  EC_AA32_SMC = 0x13,
  EC_AA64_SVC = 0x15,
  EC_AA64_HVC = 0x16,
  EC_AA64_SMC = 0x17,
  EC_SYSTEMREGISTERTRAP = 0x18,
  EC_SVEACCESSTRAP = 0x19,
  EC_ERETTRAP = 0x1a,
  EC_PACFAIL = 0x1c,
  EC_SMETRAP = 0x1d,
  EC_GPC = 0x1e,
  EC_INSNABORT = 0x20,
  EC_INSNABORT_SAME_EL = 0x21,
  EC_PCALIGNMENT = 0x22,
  EC_DATAABORT = 0x24,
  EC_DATAABORT_SAME_EL = 0x25,
  EC_SPALIGNMENT = 0x26,
  EC_MOP = 0x27,
  EC_AA32_FPTRAP = 0x28,
  EC_AA64_FPTRAP = 0x2c,
  EC_SERROR = 0x2f,
  EC_BREAKPOINT = 0x30,
  EC_BREAKPOINT_SAME_EL = 0x31,
  EC_SOFTWARESTEP = 0x32,
  EC_SOFTWARESTEP_SAME_EL = 0x33,
  EC_WATCHPOINT = 0x34,
  EC_WATCHPOINT_SAME_EL = 0x35,
  EC_AA32_BKPT = 0x38,
  EC_VECTORCATCH = 0x3a,
  EC_AA64_BKPT = 0x3c,
};

typedef enum {
  SME_ET_AccessTrap,
  SME_ET_Streaming,
  SME_ET_NotStreaming,
  SME_ET_InactiveZA,
} SMEExceptionType;
# 95 "../../../target/arm/syndrome.h"
static inline uint32_t syn_get_ec(uint32_t syn) { return syn >> 26; }

static inline uint32_t syn_set_ec(uint32_t syn, uint32_t ec) {
  return deposit32(syn, 26, 6, ec);
}
# 115 "../../../target/arm/syndrome.h"
static inline uint32_t syn_uncategorized(void) {
  return (EC_UNCATEGORIZED << 26) | (1 << 25);
}

static inline uint32_t syn_aa64_svc(uint32_t imm16) {
  return (EC_AA64_SVC << 26) | (1 << 25) | (imm16 & 0xffff);
}

static inline uint32_t syn_aa64_hvc(uint32_t imm16) {
  return (EC_AA64_HVC << 26) | (1 << 25) | (imm16 & 0xffff);
}

static inline uint32_t syn_aa64_smc(uint32_t imm16) {
  return (EC_AA64_SMC << 26) | (1 << 25) | (imm16 & 0xffff);
}

static inline uint32_t syn_aa32_svc(uint32_t imm16,
# 135 "../../../target/arm/syndrome.h" 3 4
                                    _Bool
# 135 "../../../target/arm/syndrome.h"
                                        is_16bit) {
  return (EC_AA32_SVC << 26) | (imm16 & 0xffff) | (is_16bit ? 0 : (1 << 25));
}

static inline uint32_t syn_aa32_hvc(uint32_t imm16) {
  return (EC_AA32_HVC << 26) | (1 << 25) | (imm16 & 0xffff);
}

static inline uint32_t syn_aa32_smc(void) {
  return (EC_AA32_SMC << 26) | (1 << 25);
}

static inline uint32_t syn_aa64_bkpt(uint32_t imm16) {
  return (EC_AA64_BKPT << 26) | (1 << 25) | (imm16 & 0xffff);
}

static inline uint32_t syn_aa32_bkpt(uint32_t imm16,
# 156 "../../../target/arm/syndrome.h" 3 4
                                     _Bool
# 156 "../../../target/arm/syndrome.h"
                                         is_16bit) {
  return (EC_AA32_BKPT << 26) | (imm16 & 0xffff) | (is_16bit ? 0 : (1 << 25));
}

static inline uint32_t syn_aa64_sysregtrap(int op0, int op1, int op2, int crn,
                                           int crm, int rt, int isread) {
  return (EC_SYSTEMREGISTERTRAP << 26) | (1 << 25) | (op0 << 20) | (op2 << 17) |
         (op1 << 14) | (crn << 10) | (rt << 5) | (crm << 1) | isread;
}

static inline uint32_t syn_cp14_rt_trap(int cv, int cond, int opc1, int opc2,
                                        int crn, int crm, int rt, int isread,

# 173 "../../../target/arm/syndrome.h" 3 4
                                        _Bool
# 173 "../../../target/arm/syndrome.h"
                                            is_16bit) {
  return (EC_CP14RTTRAP << 26) | (is_16bit ? 0 : (1 << 25)) | (cv << 24) |
         (cond << 20) | (opc2 << 17) | (opc1 << 14) | (crn << 10) | (rt << 5) |
         (crm << 1) | isread;
}

static inline uint32_t syn_cp15_rt_trap(int cv, int cond, int opc1, int opc2,
                                        int crn, int crm, int rt, int isread,

# 183 "../../../target/arm/syndrome.h" 3 4
                                        _Bool
# 183 "../../../target/arm/syndrome.h"
                                            is_16bit) {
  return (EC_CP15RTTRAP << 26) | (is_16bit ? 0 : (1 << 25)) | (cv << 24) |
         (cond << 20) | (opc2 << 17) | (opc1 << 14) | (crn << 10) | (rt << 5) |
         (crm << 1) | isread;
}

static inline uint32_t syn_cp14_rrt_trap(int cv, int cond, int opc1, int crm,
                                         int rt, int rt2, int isread,

# 193 "../../../target/arm/syndrome.h" 3 4
                                         _Bool
# 193 "../../../target/arm/syndrome.h"
                                             is_16bit) {
  return (EC_CP14RRTTRAP << 26) | (is_16bit ? 0 : (1 << 25)) | (cv << 24) |
         (cond << 20) | (opc1 << 16) | (rt2 << 10) | (rt << 5) | (crm << 1) |
         isread;
}

static inline uint32_t syn_cp15_rrt_trap(int cv, int cond, int opc1, int crm,
                                         int rt, int rt2, int isread,

# 203 "../../../target/arm/syndrome.h" 3 4
                                         _Bool
# 203 "../../../target/arm/syndrome.h"
                                             is_16bit) {
  return (EC_CP15RRTTRAP << 26) | (is_16bit ? 0 : (1 << 25)) | (cv << 24) |
         (cond << 20) | (opc1 << 16) | (rt2 << 10) | (rt << 5) | (crm << 1) |
         isread;
}

static inline uint32_t syn_fp_access_trap(int cv, int cond,
# 211 "../../../target/arm/syndrome.h" 3 4
                                          _Bool
# 211 "../../../target/arm/syndrome.h"
                                              is_16bit,
                                          int coproc) {

  return (EC_ADVSIMDFPACCESSTRAP << 26) | (is_16bit ? 0 : (1 << 25)) |
         (cv << 24) | (cond << 20) | coproc;
}

static inline uint32_t syn_simd_access_trap(int cv, int cond,
# 220 "../../../target/arm/syndrome.h" 3 4
                                            _Bool
# 220 "../../../target/arm/syndrome.h"
                                                is_16bit) {

  return (EC_ADVSIMDFPACCESSTRAP << 26) | (is_16bit ? 0 : (1 << 25)) |
         (cv << 24) | (cond << 20) | (1 << 5);
}

static inline uint32_t syn_sve_access_trap(void) {
  return (EC_SVEACCESSTRAP << 26) | (1 << 25);
}

static inline uint32_t syn_erettrap(int eret_op) {
  return (EC_ERETTRAP << 26) | (1 << 25) | eret_op;
}

static inline uint32_t syn_smetrap(SMEExceptionType etype,
# 242 "../../../target/arm/syndrome.h" 3 4
                                   _Bool
# 242 "../../../target/arm/syndrome.h"
                                       is_16bit) {
  return (EC_SMETRAP << 26) | (is_16bit ? 0 : (1 << 25)) | etype;
}

static inline uint32_t syn_pacfail(
# 248 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 248 "../../../target/arm/syndrome.h"
        data,
    int keynumber) {
  int error_code = (data << 1) | keynumber;
  return (EC_PACFAIL << 26) | (1 << 25) | error_code;
}

static inline uint32_t syn_pactrap(void) {
  return (EC_PACTRAP << 26) | (1 << 25);
}

static inline uint32_t syn_btitrap(int btype) {
  return (EC_BTITRAP << 26) | (1 << 25) | btype;
}

static inline uint32_t syn_bxjtrap(int cv, int cond, int rm) {
  return (EC_BXJTRAP << 26) | (1 << 25) | (cv << 24) | (cond << 20) | rm;
}

static inline uint32_t syn_gpc(int s2ptw, int ind, int gpcsc, int vncr, int cm,
                               int s1ptw, int wnr, int fsc) {
  return (EC_GPC << 26) | (1 << 25) | (s2ptw << 21) | (ind << 20) |
         (gpcsc << 14) | (vncr << 13) | (cm << 8) | (s1ptw << 7) | (wnr << 6) |
         fsc;
}

static inline uint32_t syn_insn_abort(int same_el, int ea, int s1ptw, int fsc) {
  return (EC_INSNABORT << 26) | (same_el << 26) | (1 << 25) | (ea << 9) |
         (s1ptw << 7) | fsc;
}

static inline uint32_t syn_data_abort_no_iss(int same_el, int fnv, int ea,
                                             int cm, int s1ptw, int wnr,
                                             int fsc) {
  return (EC_DATAABORT << 26) | (same_el << 26) | (1 << 25) | (fnv << 10) |
         (ea << 9) | (cm << 8) | (s1ptw << 7) | (wnr << 6) | fsc;
}

static inline uint32_t syn_data_abort_with_iss(int same_el, int sas, int sse,
                                               int srt, int sf, int ar, int ea,
                                               int cm, int s1ptw, int wnr,
                                               int fsc,

# 299 "../../../target/arm/syndrome.h" 3 4
                                               _Bool
# 299 "../../../target/arm/syndrome.h"
                                                   is_16bit) {
  return (EC_DATAABORT << 26) | (same_el << 26) | (is_16bit ? 0 : (1 << 25)) |
         (1 << 24) | (sas << 22) | (sse << 21) | (srt << 16) | (sf << 15) |
         (ar << 14) | (ea << 9) | (cm << 8) | (s1ptw << 7) | (wnr << 6) | fsc;
}

static inline uint32_t syn_data_abort_vncr(int ea, int wnr, int fsc) {
  return (EC_DATAABORT << 26) | (1 << 26) | (1 << 25) | (1 << 13) | (wnr << 6) |
         fsc;
}

static inline uint32_t syn_swstep(int same_el, int isv, int ex) {
  return (EC_SOFTWARESTEP << 26) | (same_el << 26) | (1 << 25) | (isv << 24) |
         (ex << 6) | 0x22;
}

static inline uint32_t syn_watchpoint(int same_el, int cm, int wnr) {
  return (EC_WATCHPOINT << 26) | (same_el << 26) | (1 << 25) | (cm << 8) |
         (wnr << 6) | 0x22;
}

static inline uint32_t syn_breakpoint(int same_el) {
  return (EC_BREAKPOINT << 26) | (same_el << 26) | (1 << 25) | 0x22;
}

static inline uint32_t syn_wfx(int cv, int cond, int ti,
# 336 "../../../target/arm/syndrome.h" 3 4
                               _Bool
# 336 "../../../target/arm/syndrome.h"
                                   is_16bit) {
  return (EC_WFX_TRAP << 26) | (is_16bit ? 0 : (1 << 25)) | (cv << 24) |
         (cond << 20) | ti;
}

static inline uint32_t syn_illegalstate(void) {
  return (EC_ILLEGALSTATE << 26) | (1 << 25);
}

static inline uint32_t syn_pcalignment(void) {
  return (EC_PCALIGNMENT << 26) | (1 << 25);
}

static inline uint32_t syn_serror(uint32_t extra) {
  return (EC_SERROR << 26) | (1 << 25) | extra;
}

static inline uint32_t syn_mop(
# 358 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 358 "../../../target/arm/syndrome.h"
        is_set,
# 358 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 358 "../../../target/arm/syndrome.h"
        is_setg,
    int options,

# 359 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 359 "../../../target/arm/syndrome.h"
        epilogue,
# 359 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 359 "../../../target/arm/syndrome.h"
        wrong_option,
# 359 "../../../target/arm/syndrome.h" 3 4
    _Bool
# 359 "../../../target/arm/syndrome.h"
        option_a,
    int destreg, int srcreg, int sizereg) {
  return (EC_MOP << 26) | (1 << 25) | (is_set << 24) | (is_setg << 23) |
         (options << 19) | (epilogue << 18) | (wrong_option << 17) |
         (option_a << 16) | (destreg << 10) | (srcreg << 5) | sizereg;
}
# 32 "../../../target/arm/internals.h" 2
# 1 "../../../target/arm/cpu-features.h" 1
# 24 "../../../target/arm/cpu-features.h"
# 1 "/home/paulning/study/qemu/include/qemu/host-utils.h" 1
# 25 "../../../target/arm/cpu-features.h" 2
# 45 "../../../target/arm/cpu-features.h"
static inline
# 45 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 45 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_thumb_div(const ARMISARegisters *id) {
  return extract32((id->id_isar0), R_ID_ISAR0_DIVIDE_SHIFT,
                   R_ID_ISAR0_DIVIDE_LENGTH) != 0;
}

static inline
# 50 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 50 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_arm_div(const ARMISARegisters *id) {
  return extract32((id->id_isar0), R_ID_ISAR0_DIVIDE_SHIFT,
                   R_ID_ISAR0_DIVIDE_LENGTH) > 1;
}

static inline
# 55 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 55 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_lob(const ARMISARegisters *id) {

  return extract32((id->id_isar0), R_ID_ISAR0_CMPBRANCH_SHIFT,
                   R_ID_ISAR0_CMPBRANCH_LENGTH) >= 3;
}

static inline
# 61 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 61 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_jazelle(const ARMISARegisters *id) {
  return extract32((id->id_isar1), R_ID_ISAR1_JAZELLE_SHIFT,
                   R_ID_ISAR1_JAZELLE_LENGTH) != 0;
}

static inline
# 66 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 66 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_aes(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_AES_SHIFT,
                   R_ID_ISAR5_AES_LENGTH) != 0;
}

static inline
# 71 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 71 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pmull(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_AES_SHIFT,
                   R_ID_ISAR5_AES_LENGTH) > 1;
}

static inline
# 76 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 76 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_sha1(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_SHA1_SHIFT,
                   R_ID_ISAR5_SHA1_LENGTH) != 0;
}

static inline
# 81 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 81 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_sha2(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_SHA2_SHIFT,
                   R_ID_ISAR5_SHA2_LENGTH) != 0;
}

static inline
# 86 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 86 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_crc32(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_CRC32_SHIFT,
                   R_ID_ISAR5_CRC32_LENGTH) != 0;
}

static inline
# 91 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 91 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_rdm(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_RDM_SHIFT,
                   R_ID_ISAR5_RDM_LENGTH) != 0;
}

static inline
# 96 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 96 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vcma(const ARMISARegisters *id) {
  return extract32((id->id_isar5), R_ID_ISAR5_VCMA_SHIFT,
                   R_ID_ISAR5_VCMA_LENGTH) != 0;
}

static inline
# 101 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 101 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_jscvt(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_JSCVT_SHIFT,
                   R_ID_ISAR6_JSCVT_LENGTH) != 0;
}

static inline
# 106 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 106 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_dp(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_DP_SHIFT, R_ID_ISAR6_DP_LENGTH) !=
         0;
}

static inline
# 111 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 111 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fhm(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_FHM_SHIFT,
                   R_ID_ISAR6_FHM_LENGTH) != 0;
}

static inline
# 116 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 116 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_sb(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_SB_SHIFT, R_ID_ISAR6_SB_LENGTH) !=
         0;
}

static inline
# 121 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 121 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_predinv(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_SPECRES_SHIFT,
                   R_ID_ISAR6_SPECRES_LENGTH) != 0;
}

static inline
# 126 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 126 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_bf16(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_BF16_SHIFT,
                   R_ID_ISAR6_BF16_LENGTH) != 0;
}

static inline
# 131 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 131 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_i8mm(const ARMISARegisters *id) {
  return extract32((id->id_isar6), R_ID_ISAR6_I8MM_SHIFT,
                   R_ID_ISAR6_I8MM_LENGTH) != 0;
}

static inline
# 136 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 136 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_ras(const ARMISARegisters *id) {
  return extract32((id->id_pfr0), R_ID_PFR0_RAS_SHIFT, R_ID_PFR0_RAS_LENGTH) !=
         0;
}

static inline
# 141 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 141 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_mprofile(const ARMISARegisters *id) {
  return extract32((id->id_pfr1), R_ID_PFR1_MPROGMOD_SHIFT,
                   R_ID_PFR1_MPROGMOD_LENGTH) != 0;
}

static inline
# 146 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 146 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_m_sec_state(const ARMISARegisters *id) {

  return extract32((id->id_pfr1), R_ID_PFR1_SECURITY_SHIFT,
                   R_ID_PFR1_SECURITY_LENGTH) >= 3;
}

static inline
# 155 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 155 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fp16_arith(const ARMISARegisters *id) {

  if (isar_feature_aa32_mprofile(id)) {
    return extract32((id->mvfr1), R_MVFR1_FP16_SHIFT, R_MVFR1_FP16_LENGTH) > 0;
  } else {
    return extract32((id->mvfr1), R_MVFR1_FPHP_SHIFT, R_MVFR1_FPHP_LENGTH) >= 3;
  }
}

static inline
# 165 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 165 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_mve(const ARMISARegisters *id) {

  return isar_feature_aa32_mprofile(id) &&
         extract32((id->mvfr1), R_MVFR1_MVE_SHIFT, R_MVFR1_MVE_LENGTH) > 0;
}

static inline
# 176 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 176 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_mve_fp(const ARMISARegisters *id) {

  return isar_feature_aa32_mprofile(id) &&
         extract32((id->mvfr1), R_MVFR1_MVE_SHIFT, R_MVFR1_MVE_LENGTH) >= 2;
}

static inline
# 187 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 187 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vfp_simd(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_SIMDREG_SHIFT, R_MVFR0_SIMDREG_LENGTH) >
         0;
}

static inline
# 196 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 196 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_simd_r32(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_SIMDREG_SHIFT,
                   R_MVFR0_SIMDREG_LENGTH) >= 2;
}

static inline
# 202 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 202 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fpshvec(const ARMISARegisters *id) {
  return extract32((id->mvfr0), R_MVFR0_FPSHVEC_SHIFT, R_MVFR0_FPSHVEC_LENGTH) >
         0;
}

static inline
# 207 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 207 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fpsp_v2(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_FPSP_SHIFT, R_MVFR0_FPSP_LENGTH) > 0;
}

static inline
# 213 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 213 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fpsp_v3(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_FPSP_SHIFT, R_MVFR0_FPSP_LENGTH) >= 2;
}

static inline
# 219 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 219 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fpdp_v2(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_FPDP_SHIFT, R_MVFR0_FPDP_LENGTH) > 0;
}

static inline
# 225 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 225 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fpdp_v3(const ARMISARegisters *id) {

  return extract32((id->mvfr0), R_MVFR0_FPDP_SHIFT, R_MVFR0_FPDP_LENGTH) >= 2;
}

static inline
# 231 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 231 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vfp(const ARMISARegisters *id) {
  return isar_feature_aa32_fpsp_v2(id) || isar_feature_aa32_fpdp_v2(id);
}

static inline
# 241 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 241 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fp16_spconv(const ARMISARegisters *id) {
  return extract32((id->mvfr1), R_MVFR1_FPHP_SHIFT, R_MVFR1_FPHP_LENGTH) > 0;
}

static inline
# 246 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 246 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_fp16_dpconv(const ARMISARegisters *id) {
  return extract32((id->mvfr1), R_MVFR1_FPHP_SHIFT, R_MVFR1_FPHP_LENGTH) > 1;
}
# 258 "../../../target/arm/cpu-features.h"
static inline
# 258 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 258 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_simdfmac(const ARMISARegisters *id) {
  return extract32((id->mvfr1), R_MVFR1_SIMDFMAC_SHIFT,
                   R_MVFR1_SIMDFMAC_LENGTH) != 0;
}

static inline
# 263 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 263 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vsel(const ARMISARegisters *id) {
  return extract32((id->mvfr2), R_MVFR2_FPMISC_SHIFT, R_MVFR2_FPMISC_LENGTH) >=
         1;
}

static inline
# 268 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 268 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vcvt_dr(const ARMISARegisters *id) {
  return extract32((id->mvfr2), R_MVFR2_FPMISC_SHIFT, R_MVFR2_FPMISC_LENGTH) >=
         2;
}

static inline
# 273 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 273 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vrint(const ARMISARegisters *id) {
  return extract32((id->mvfr2), R_MVFR2_FPMISC_SHIFT, R_MVFR2_FPMISC_LENGTH) >=
         3;
}

static inline
# 278 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 278 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_vminmaxnm(const ARMISARegisters *id) {
  return extract32((id->mvfr2), R_MVFR2_FPMISC_SHIFT, R_MVFR2_FPMISC_LENGTH) >=
         4;
}

static inline
# 283 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 283 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pxn(const ARMISARegisters *id) {
  return extract32((id->id_mmfr0), R_ID_MMFR0_VMSA_SHIFT,
                   R_ID_MMFR0_VMSA_LENGTH) >= 4;
}

static inline
# 288 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 288 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pan(const ARMISARegisters *id) {
  return extract32((id->id_mmfr3), R_ID_MMFR3_PAN_SHIFT,
                   R_ID_MMFR3_PAN_LENGTH) != 0;
}

static inline
# 293 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 293 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_ats1e1(const ARMISARegisters *id) {
  return extract32((id->id_mmfr3), R_ID_MMFR3_PAN_SHIFT,
                   R_ID_MMFR3_PAN_LENGTH) >= 2;
}

static inline
# 298 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 298 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pmuv3p1(const ARMISARegisters *id) {

  return extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) >= 4 &&
         extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) != 0xf;
}

static inline
# 305 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 305 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pmuv3p4(const ARMISARegisters *id) {

  return extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) >= 5 &&
         extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) != 0xf;
}

static inline
# 312 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 312 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_pmuv3p5(const ARMISARegisters *id) {

  return extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) >= 6 &&
         extract32((id->id_dfr0), R_ID_DFR0_PERFMON_SHIFT,
                   R_ID_DFR0_PERFMON_LENGTH) != 0xf;
}

static inline
# 319 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 319 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_hpd(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_HPDS_SHIFT,
                   R_ID_MMFR4_HPDS_LENGTH) != 0;
}

static inline
# 324 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 324 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_ac2(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_AC2_SHIFT,
                   R_ID_MMFR4_AC2_LENGTH) != 0;
}

static inline
# 329 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 329 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_ccidx(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_CCIDX_SHIFT,
                   R_ID_MMFR4_CCIDX_LENGTH) != 0;
}

static inline
# 334 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 334 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_tts2uxn(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_XNX_SHIFT,
                   R_ID_MMFR4_XNX_LENGTH) != 0;
}

static inline
# 339 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 339 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_half_evt(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_EVT_SHIFT,
                   R_ID_MMFR4_EVT_LENGTH) >= 1;
}

static inline
# 344 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 344 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_evt(const ARMISARegisters *id) {
  return extract32((id->id_mmfr4), R_ID_MMFR4_EVT_SHIFT,
                   R_ID_MMFR4_EVT_LENGTH) >= 2;
}

static inline
# 349 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 349 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_dit(const ARMISARegisters *id) {
  return extract32((id->id_pfr0), R_ID_PFR0_DIT_SHIFT, R_ID_PFR0_DIT_LENGTH) !=
         0;
}

static inline
# 354 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 354 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_ssbs(const ARMISARegisters *id) {
  return extract32((id->id_pfr2), R_ID_PFR2_SSBS_SHIFT,
                   R_ID_PFR2_SSBS_LENGTH) != 0;
}

static inline
# 359 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 359 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_debugv7p1(const ARMISARegisters *id) {
  return extract32((id->id_dfr0), R_ID_DFR0_COPDBG_SHIFT,
                   R_ID_DFR0_COPDBG_LENGTH) >= 5;
}

static inline
# 364 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 364 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_debugv8p2(const ARMISARegisters *id) {
  return extract32((id->id_dfr0), R_ID_DFR0_COPDBG_SHIFT,
                   R_ID_DFR0_COPDBG_LENGTH) >= 8;
}

static inline
# 369 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 369 "../../../target/arm/cpu-features.h"
    isar_feature_aa32_doublelock(const ARMISARegisters *id) {
  return extract32((id->dbgdevid), R_DBGDEVID_DOUBLELOCK_SHIFT,
                   R_DBGDEVID_DOUBLELOCK_LENGTH) > 0;
}

static inline
# 377 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 377 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_aes(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_AES_SHIFT,
                   R_ID_AA64ISAR0_AES_LENGTH) != 0;
}

static inline
# 382 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 382 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pmull(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_AES_SHIFT,
                   R_ID_AA64ISAR0_AES_LENGTH) > 1;
}

static inline
# 387 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 387 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sha1(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SHA1_SHIFT,
                   R_ID_AA64ISAR0_SHA1_LENGTH) != 0;
}

static inline
# 392 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 392 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sha256(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SHA2_SHIFT,
                   R_ID_AA64ISAR0_SHA2_LENGTH) != 0;
}

static inline
# 397 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 397 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sha512(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SHA2_SHIFT,
                   R_ID_AA64ISAR0_SHA2_LENGTH) > 1;
}

static inline
# 402 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 402 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_crc32(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_CRC32_SHIFT,
                   R_ID_AA64ISAR0_CRC32_LENGTH) != 0;
}

static inline
# 407 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 407 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_atomics(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_ATOMIC_SHIFT,
                   R_ID_AA64ISAR0_ATOMIC_LENGTH) != 0;
}

static inline
# 412 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 412 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rdm(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_RDM_SHIFT,
                   R_ID_AA64ISAR0_RDM_LENGTH) != 0;
}

static inline
# 417 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 417 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sha3(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SHA3_SHIFT,
                   R_ID_AA64ISAR0_SHA3_LENGTH) != 0;
}

static inline
# 422 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 422 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sm3(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SM3_SHIFT,
                   R_ID_AA64ISAR0_SM3_LENGTH) != 0;
}

static inline
# 427 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 427 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sm4(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_SM4_SHIFT,
                   R_ID_AA64ISAR0_SM4_LENGTH) != 0;
}

static inline
# 432 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 432 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_dp(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_DP_SHIFT,
                   R_ID_AA64ISAR0_DP_LENGTH) != 0;
}

static inline
# 437 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 437 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fhm(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_FHM_SHIFT,
                   R_ID_AA64ISAR0_FHM_LENGTH) != 0;
}

static inline
# 442 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 442 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_condm_4(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_TS_SHIFT,
                   R_ID_AA64ISAR0_TS_LENGTH) != 0;
}

static inline
# 447 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 447 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_condm_5(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_TS_SHIFT,
                   R_ID_AA64ISAR0_TS_LENGTH) >= 2;
}

static inline
# 452 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 452 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rndr(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_RNDR_SHIFT,
                   R_ID_AA64ISAR0_RNDR_LENGTH) != 0;
}

static inline
# 457 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 457 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tlbirange(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_TLB_SHIFT,
                   R_ID_AA64ISAR0_TLB_LENGTH) == 2;
}

static inline
# 462 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 462 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tlbios(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar0), R_ID_AA64ISAR0_TLB_SHIFT,
                   R_ID_AA64ISAR0_TLB_LENGTH) != 0;
}

static inline
# 467 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 467 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_jscvt(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_JSCVT_SHIFT,
                   R_ID_AA64ISAR1_JSCVT_LENGTH) != 0;
}

static inline
# 472 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 472 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fcma(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_FCMA_SHIFT,
                   R_ID_AA64ISAR1_FCMA_LENGTH) != 0;
}

static inline
# 477 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 477 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_xs(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_XS_SHIFT,
                   R_ID_AA64ISAR1_XS_LENGTH) != 0;
}

typedef enum {
  PauthFeat_None = 0,
  PauthFeat_1 = 1,
  PauthFeat_EPAC = 2,
  PauthFeat_2 = 3,
  PauthFeat_FPAC = 4,
  PauthFeat_FPACCOMBINED = 5,
} ARMPauthFeature;

static inline ARMPauthFeature
isar_feature_pauth_feature(const ARMISARegisters *id) {

  return (extract64((id->id_aa64isar1), R_ID_AA64ISAR1_APA_SHIFT,
                    R_ID_AA64ISAR1_APA_LENGTH) |
          extract64((id->id_aa64isar1), R_ID_AA64ISAR1_API_SHIFT,
                    R_ID_AA64ISAR1_API_LENGTH) |
          extract64((id->id_aa64isar2), R_ID_AA64ISAR2_APA3_SHIFT,
                    R_ID_AA64ISAR2_APA3_LENGTH));
}

static inline
# 508 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 508 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pauth(const ARMISARegisters *id) {

  return isar_feature_pauth_feature(id) != PauthFeat_None;
}

static inline
# 517 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 517 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pauth_qarma5(const ARMISARegisters *id) {

  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_APA_SHIFT,
                   R_ID_AA64ISAR1_APA_LENGTH) != 0;
}

static inline
# 526 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 526 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pauth_qarma3(const ARMISARegisters *id) {

  return extract64((id->id_aa64isar2), R_ID_AA64ISAR2_APA3_SHIFT,
                   R_ID_AA64ISAR2_APA3_LENGTH) != 0;
}

static inline
# 535 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 535 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sb(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_SB_SHIFT,
                   R_ID_AA64ISAR1_SB_LENGTH) != 0;
}

static inline
# 540 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 540 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_predinv(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_SPECRES_SHIFT,
                   R_ID_AA64ISAR1_SPECRES_LENGTH) != 0;
}

static inline
# 545 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 545 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_frint(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_FRINTTS_SHIFT,
                   R_ID_AA64ISAR1_FRINTTS_LENGTH) != 0;
}

static inline
# 550 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 550 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_dcpop(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_DPB_SHIFT,
                   R_ID_AA64ISAR1_DPB_LENGTH) != 0;
}

static inline
# 555 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 555 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_dcpodp(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_DPB_SHIFT,
                   R_ID_AA64ISAR1_DPB_LENGTH) >= 2;
}

static inline
# 560 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 560 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_bf16(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_BF16_SHIFT,
                   R_ID_AA64ISAR1_BF16_LENGTH) != 0;
}

static inline
# 565 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 565 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ebf16(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_BF16_SHIFT,
                   R_ID_AA64ISAR1_BF16_LENGTH) > 1;
}

static inline
# 570 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 570 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rcpc_8_3(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_LRCPC_SHIFT,
                   R_ID_AA64ISAR1_LRCPC_LENGTH) != 0;
}

static inline
# 575 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 575 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rcpc_8_4(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_LRCPC_SHIFT,
                   R_ID_AA64ISAR1_LRCPC_LENGTH) >= 2;
}

static inline
# 580 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 580 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_i8mm(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar1), R_ID_AA64ISAR1_I8MM_SHIFT,
                   R_ID_AA64ISAR1_I8MM_LENGTH) != 0;
}

static inline
# 585 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 585 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_wfxt(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar2), R_ID_AA64ISAR2_WFXT_SHIFT,
                   R_ID_AA64ISAR2_WFXT_LENGTH) >= 2;
}

static inline
# 590 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 590 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_hbc(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar2), R_ID_AA64ISAR2_BC_SHIFT,
                   R_ID_AA64ISAR2_BC_LENGTH) != 0;
}

static inline
# 595 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 595 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_mops(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar2), R_ID_AA64ISAR2_MOPS_SHIFT,
                   R_ID_AA64ISAR2_MOPS_LENGTH);
}

static inline
# 600 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 600 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rpres(const ARMISARegisters *id) {
  return extract64((id->id_aa64isar2), R_ID_AA64ISAR2_RPRES_SHIFT,
                   R_ID_AA64ISAR2_RPRES_LENGTH);
}

static inline
# 605 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 605 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fp_simd(const ARMISARegisters *id) {

  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_FP_SHIFT,
                   R_ID_AA64PFR0_FP_LENGTH) != 0xf;
}

static inline
# 611 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 611 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fp16(const ARMISARegisters *id) {

  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_FP_SHIFT,
                   R_ID_AA64PFR0_FP_LENGTH) == 1;
}

static inline
# 617 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 617 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_aa32(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_EL0_SHIFT,
                   R_ID_AA64PFR0_EL0_LENGTH) >= 2;
}

static inline
# 622 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 622 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_aa32_el1(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_EL1_SHIFT,
                   R_ID_AA64PFR0_EL1_LENGTH) >= 2;
}

static inline
# 627 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 627 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_aa32_el2(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_EL2_SHIFT,
                   R_ID_AA64PFR0_EL2_LENGTH) >= 2;
}

static inline
# 632 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 632 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ras(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_RAS_SHIFT,
                   R_ID_AA64PFR0_RAS_LENGTH) != 0;
}

static inline
# 637 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 637 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_doublefault(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_RAS_SHIFT,
                   R_ID_AA64PFR0_RAS_LENGTH) >= 2;
}

static inline
# 642 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 642 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_SVE_SHIFT,
                   R_ID_AA64PFR0_SVE_LENGTH) != 0;
}

static inline
# 647 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 647 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sel2(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_SEL2_SHIFT,
                   R_ID_AA64PFR0_SEL2_LENGTH) != 0;
}

static inline
# 652 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 652 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_rme(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_RME_SHIFT,
                   R_ID_AA64PFR0_RME_LENGTH) != 0;
}

static inline
# 657 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 657 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_dit(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr0), R_ID_AA64PFR0_DIT_SHIFT,
                   R_ID_AA64PFR0_DIT_LENGTH) != 0;
}

static inline
# 662 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 662 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_scxtnum(const ARMISARegisters *id) {
  int key = extract64((id->id_aa64pfr0), R_ID_AA64PFR0_CSV2_SHIFT,
                      R_ID_AA64PFR0_CSV2_LENGTH);
  if (key >= 2) {
    return
# 666 "../../../target/arm/cpu-features.h" 3 4
        1
# 666 "../../../target/arm/cpu-features.h"
        ;
  }
  if (key == 1) {
    key = extract64((id->id_aa64pfr1), R_ID_AA64PFR1_CSV2_FRAC_SHIFT,
                    R_ID_AA64PFR1_CSV2_FRAC_LENGTH);
    return key >= 2;
  }
  return
# 672 "../../../target/arm/cpu-features.h" 3 4
      0
# 672 "../../../target/arm/cpu-features.h"
      ;
}

static inline
# 675 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 675 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ssbs(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_SSBS_SHIFT,
                   R_ID_AA64PFR1_SSBS_LENGTH) != 0;
}

static inline
# 680 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 680 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_bti(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_BT_SHIFT,
                   R_ID_AA64PFR1_BT_LENGTH) != 0;
}

static inline
# 685 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 685 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_mte_insn_reg(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_MTE_SHIFT,
                   R_ID_AA64PFR1_MTE_LENGTH) != 0;
}

static inline
# 690 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 690 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_mte(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_MTE_SHIFT,
                   R_ID_AA64PFR1_MTE_LENGTH) >= 2;
}

static inline
# 695 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 695 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_mte3(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_MTE_SHIFT,
                   R_ID_AA64PFR1_MTE_LENGTH) >= 3;
}

static inline
# 700 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 700 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sme(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_SME_SHIFT,
                   R_ID_AA64PFR1_SME_LENGTH) != 0;
}

static inline
# 705 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 705 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_nmi(const ARMISARegisters *id) {
  return extract64((id->id_aa64pfr1), R_ID_AA64PFR1_NMI_SHIFT,
                   R_ID_AA64PFR1_NMI_LENGTH) != 0;
}

static inline
# 710 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 710 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran4_lpa2(const ARMISARegisters *id) {
  return sextract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN4_SHIFT,
                    R_ID_AA64MMFR0_TGRAN4_LENGTH) >= 1;
}

static inline
# 715 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 715 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran4_2_lpa2(const ARMISARegisters *id) {
  unsigned t = extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN4_2_SHIFT,
                         R_ID_AA64MMFR0_TGRAN4_2_LENGTH);
  return t >= 3 || (t == 0 && isar_feature_aa64_tgran4_lpa2(id));
}

static inline
# 721 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 721 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran16_lpa2(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN16_SHIFT,
                   R_ID_AA64MMFR0_TGRAN16_LENGTH) >= 2;
}

static inline
# 726 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 726 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran16_2_lpa2(const ARMISARegisters *id) {
  unsigned t = extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN16_2_SHIFT,
                         R_ID_AA64MMFR0_TGRAN16_2_LENGTH);
  return t >= 3 || (t == 0 && isar_feature_aa64_tgran16_lpa2(id));
}

static inline
# 732 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 732 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran4(const ARMISARegisters *id) {
  return sextract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN4_SHIFT,
                    R_ID_AA64MMFR0_TGRAN4_LENGTH) >= 0;
}

static inline
# 737 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 737 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran16(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN16_SHIFT,
                   R_ID_AA64MMFR0_TGRAN16_LENGTH) >= 1;
}

static inline
# 742 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 742 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran64(const ARMISARegisters *id) {
  return sextract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN64_SHIFT,
                    R_ID_AA64MMFR0_TGRAN64_LENGTH) >= 0;
}

static inline
# 747 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 747 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran4_2(const ARMISARegisters *id) {
  unsigned t = extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN4_2_SHIFT,
                         R_ID_AA64MMFR0_TGRAN4_2_LENGTH);
  return t >= 2 || (t == 0 && isar_feature_aa64_tgran4(id));
}

static inline
# 753 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 753 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran16_2(const ARMISARegisters *id) {
  unsigned t = extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN16_2_SHIFT,
                         R_ID_AA64MMFR0_TGRAN16_2_LENGTH);
  return t >= 2 || (t == 0 && isar_feature_aa64_tgran16(id));
}

static inline
# 759 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 759 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tgran64_2(const ARMISARegisters *id) {
  unsigned t = extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_TGRAN64_2_SHIFT,
                         R_ID_AA64MMFR0_TGRAN64_2_LENGTH);
  return t >= 2 || (t == 0 && isar_feature_aa64_tgran64(id));
}

static inline
# 765 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 765 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fgt(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_FGT_SHIFT,
                   R_ID_AA64MMFR0_FGT_LENGTH) != 0;
}

static inline
# 770 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 770 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ecv_traps(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_ECV_SHIFT,
                   R_ID_AA64MMFR0_ECV_LENGTH) > 0;
}

static inline
# 775 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 775 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ecv(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr0), R_ID_AA64MMFR0_ECV_SHIFT,
                   R_ID_AA64MMFR0_ECV_LENGTH) > 1;
}

static inline
# 780 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 780 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_vh(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_VH_SHIFT,
                   R_ID_AA64MMFR1_VH_LENGTH) != 0;
}

static inline
# 785 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 785 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_lor(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_LO_SHIFT,
                   R_ID_AA64MMFR1_LO_LENGTH) != 0;
}

static inline
# 790 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 790 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pan(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_PAN_SHIFT,
                   R_ID_AA64MMFR1_PAN_LENGTH) != 0;
}

static inline
# 795 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 795 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ats1e1(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_PAN_SHIFT,
                   R_ID_AA64MMFR1_PAN_LENGTH) >= 2;
}

static inline
# 800 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 800 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pan3(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_PAN_SHIFT,
                   R_ID_AA64MMFR1_PAN_LENGTH) >= 3;
}

static inline
# 805 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 805 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_hcx(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_HCX_SHIFT,
                   R_ID_AA64MMFR1_HCX_LENGTH) != 0;
}

static inline
# 810 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 810 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_afp(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_AFP_SHIFT,
                   R_ID_AA64MMFR1_AFP_LENGTH) != 0;
}

static inline
# 815 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 815 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tidcp1(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_TIDCP1_SHIFT,
                   R_ID_AA64MMFR1_TIDCP1_LENGTH) != 0;
}

static inline
# 820 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 820 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_cmow(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_CMOW_SHIFT,
                   R_ID_AA64MMFR1_CMOW_LENGTH) != 0;
}

static inline
# 825 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 825 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_hafs(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_HAFDBS_SHIFT,
                   R_ID_AA64MMFR1_HAFDBS_LENGTH) != 0;
}

static inline
# 830 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 830 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_hdbs(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_HAFDBS_SHIFT,
                   R_ID_AA64MMFR1_HAFDBS_LENGTH) >= 2;
}

static inline
# 835 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 835 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_tts2uxn(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr1), R_ID_AA64MMFR1_XNX_SHIFT,
                   R_ID_AA64MMFR1_XNX_LENGTH) != 0;
}

static inline
# 840 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 840 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_uao(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_UAO_SHIFT,
                   R_ID_AA64MMFR2_UAO_LENGTH) != 0;
}

static inline
# 845 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 845 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_st(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_ST_SHIFT,
                   R_ID_AA64MMFR2_ST_LENGTH) != 0;
}

static inline
# 850 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 850 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_lse2(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_AT_SHIFT,
                   R_ID_AA64MMFR2_AT_LENGTH) != 0;
}

static inline
# 855 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 855 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_fwb(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_FWB_SHIFT,
                   R_ID_AA64MMFR2_FWB_LENGTH) != 0;
}

static inline
# 860 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 860 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ids(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_IDS_SHIFT,
                   R_ID_AA64MMFR2_IDS_LENGTH) != 0;
}

static inline
# 865 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 865 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_half_evt(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_EVT_SHIFT,
                   R_ID_AA64MMFR2_EVT_LENGTH) >= 1;
}

static inline
# 870 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 870 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_evt(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_EVT_SHIFT,
                   R_ID_AA64MMFR2_EVT_LENGTH) >= 2;
}

static inline
# 875 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 875 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_ccidx(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_CCIDX_SHIFT,
                   R_ID_AA64MMFR2_CCIDX_LENGTH) != 0;
}

static inline
# 880 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 880 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_lva(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_VARANGE_SHIFT,
                   R_ID_AA64MMFR2_VARANGE_LENGTH) != 0;
}

static inline
# 885 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 885 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_e0pd(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_E0PD_SHIFT,
                   R_ID_AA64MMFR2_E0PD_LENGTH) != 0;
}

static inline
# 890 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 890 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_nv(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_NV_SHIFT,
                   R_ID_AA64MMFR2_NV_LENGTH) != 0;
}

static inline
# 895 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 895 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_nv2(const ARMISARegisters *id) {
  return extract64((id->id_aa64mmfr2), R_ID_AA64MMFR2_NV_SHIFT,
                   R_ID_AA64MMFR2_NV_LENGTH) >= 2;
}

static inline
# 900 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 900 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pmuv3p1(const ARMISARegisters *id) {
  return extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) >= 4 &&
         extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) != 0xf;
}

static inline
# 906 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 906 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pmuv3p4(const ARMISARegisters *id) {
  return extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) >= 5 &&
         extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) != 0xf;
}

static inline
# 912 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 912 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_pmuv3p5(const ARMISARegisters *id) {
  return extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) >= 6 &&
         extract64((id->id_aa64dfr0), R_ID_AA64DFR0_PMUVER_SHIFT,
                   R_ID_AA64DFR0_PMUVER_LENGTH) != 0xf;
}

static inline
# 918 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 918 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_debugv8p2(const ARMISARegisters *id) {
  return extract64((id->id_aa64dfr0), R_ID_AA64DFR0_DEBUGVER_SHIFT,
                   R_ID_AA64DFR0_DEBUGVER_LENGTH) >= 8;
}

static inline
# 923 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 923 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_doublelock(const ARMISARegisters *id) {
  return sextract64((id->id_aa64dfr0), R_ID_AA64DFR0_DOUBLELOCK_SHIFT,
                    R_ID_AA64DFR0_DOUBLELOCK_LENGTH) >= 0;
}

static inline
# 928 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 928 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_SVEVER_SHIFT,
                   R_ID_AA64ZFR0_SVEVER_LENGTH) != 0;
}

static inline
# 933 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 933 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2_aes(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_AES_SHIFT,
                   R_ID_AA64ZFR0_AES_LENGTH) != 0;
}

static inline
# 938 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 938 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2_pmull128(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_AES_SHIFT,
                   R_ID_AA64ZFR0_AES_LENGTH) >= 2;
}

static inline
# 943 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 943 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2_bitperm(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_BITPERM_SHIFT,
                   R_ID_AA64ZFR0_BITPERM_LENGTH) != 0;
}

static inline
# 948 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 948 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve_bf16(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_BFLOAT16_SHIFT,
                   R_ID_AA64ZFR0_BFLOAT16_LENGTH) != 0;
}

static inline
# 953 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 953 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2_sha3(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_SHA3_SHIFT,
                   R_ID_AA64ZFR0_SHA3_LENGTH) != 0;
}

static inline
# 958 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 958 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve2_sm4(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_SM4_SHIFT,
                   R_ID_AA64ZFR0_SM4_LENGTH) != 0;
}

static inline
# 963 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 963 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve_i8mm(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_I8MM_SHIFT,
                   R_ID_AA64ZFR0_I8MM_LENGTH) != 0;
}

static inline
# 968 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 968 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve_f32mm(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_F32MM_SHIFT,
                   R_ID_AA64ZFR0_F32MM_LENGTH) != 0;
}

static inline
# 973 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 973 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sve_f64mm(const ARMISARegisters *id) {
  return extract64((id->id_aa64zfr0), R_ID_AA64ZFR0_F64MM_SHIFT,
                   R_ID_AA64ZFR0_F64MM_LENGTH) != 0;
}

static inline
# 978 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 978 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sme_f64f64(const ARMISARegisters *id) {
  return extract64((id->id_aa64smfr0), R_ID_AA64SMFR0_F64F64_SHIFT,
                   R_ID_AA64SMFR0_F64F64_LENGTH);
}

static inline
# 983 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 983 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sme_i16i64(const ARMISARegisters *id) {
  return extract64((id->id_aa64smfr0), R_ID_AA64SMFR0_I16I64_SHIFT,
                   R_ID_AA64SMFR0_I16I64_LENGTH) == 0xf;
}

static inline
# 988 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 988 "../../../target/arm/cpu-features.h"
    isar_feature_aa64_sme_fa64(const ARMISARegisters *id) {
  return extract64((id->id_aa64smfr0), R_ID_AA64SMFR0_FA64_SHIFT,
                   R_ID_AA64SMFR0_FA64_LENGTH);
}

static inline
# 996 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 996 "../../../target/arm/cpu-features.h"
    isar_feature_any_fp16(const ARMISARegisters *id) {
  return isar_feature_aa64_fp16(id) || isar_feature_aa32_fp16_arith(id);
}

static inline
# 1001 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1001 "../../../target/arm/cpu-features.h"
    isar_feature_any_predinv(const ARMISARegisters *id) {
  return isar_feature_aa64_predinv(id) || isar_feature_aa32_predinv(id);
}

static inline
# 1006 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1006 "../../../target/arm/cpu-features.h"
    isar_feature_any_pmuv3p1(const ARMISARegisters *id) {
  return isar_feature_aa64_pmuv3p1(id) || isar_feature_aa32_pmuv3p1(id);
}

static inline
# 1011 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1011 "../../../target/arm/cpu-features.h"
    isar_feature_any_pmuv3p4(const ARMISARegisters *id) {
  return isar_feature_aa64_pmuv3p4(id) || isar_feature_aa32_pmuv3p4(id);
}

static inline
# 1016 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1016 "../../../target/arm/cpu-features.h"
    isar_feature_any_pmuv3p5(const ARMISARegisters *id) {
  return isar_feature_aa64_pmuv3p5(id) || isar_feature_aa32_pmuv3p5(id);
}

static inline
# 1021 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1021 "../../../target/arm/cpu-features.h"
    isar_feature_any_ccidx(const ARMISARegisters *id) {
  return isar_feature_aa64_ccidx(id) || isar_feature_aa32_ccidx(id);
}

static inline
# 1026 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1026 "../../../target/arm/cpu-features.h"
    isar_feature_any_tts2uxn(const ARMISARegisters *id) {
  return isar_feature_aa64_tts2uxn(id) || isar_feature_aa32_tts2uxn(id);
}

static inline
# 1031 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1031 "../../../target/arm/cpu-features.h"
    isar_feature_any_debugv8p2(const ARMISARegisters *id) {
  return isar_feature_aa64_debugv8p2(id) || isar_feature_aa32_debugv8p2(id);
}

static inline
# 1036 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1036 "../../../target/arm/cpu-features.h"
    isar_feature_any_ras(const ARMISARegisters *id) {
  return isar_feature_aa64_ras(id) || isar_feature_aa32_ras(id);
}

static inline
# 1041 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1041 "../../../target/arm/cpu-features.h"
    isar_feature_any_half_evt(const ARMISARegisters *id) {
  return isar_feature_aa64_half_evt(id) || isar_feature_aa32_half_evt(id);
}

static inline
# 1046 "../../../target/arm/cpu-features.h" 3 4
    _Bool
# 1046 "../../../target/arm/cpu-features.h"
    isar_feature_any_evt(const ARMISARegisters *id) {
  return isar_feature_aa64_evt(id) || isar_feature_aa32_evt(id);
}

typedef enum {
  CCSIDR_FORMAT_LEGACY,
  CCSIDR_FORMAT_CCIDX,
} CCSIDRFormat;

static inline uint64_t make_ccsidr(CCSIDRFormat format, unsigned assoc,
                                   unsigned linesize, unsigned cachesize,
                                   uint8_t flags) {
  unsigned lg_linesize = ctz32(linesize);
  unsigned sets;
  uint64_t ccsidr = 0;

# 1064 "../../../target/arm/cpu-features.h" 3 4
  ((void)sizeof((
# 1064 "../../../target/arm/cpu-features.h"
                    assoc != 0
# 1064 "../../../target/arm/cpu-features.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1064 "../../../target/arm/cpu-features.h"
         assoc != 0
# 1064 "../../../target/arm/cpu-features.h" 3 4
     )
       ;
     else
       __assert_fail(
# 1064 "../../../target/arm/cpu-features.h"
           "assoc != 0"
# 1064 "../../../target/arm/cpu-features.h" 3 4
           ,
           "../../../target/arm/cpu-features.h", 1064,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1064 "../../../target/arm/cpu-features.h"
      ;

# 1065 "../../../target/arm/cpu-features.h" 3 4
  ((void)sizeof((
# 1065 "../../../target/arm/cpu-features.h"
                    is_power_of_2(linesize)
# 1065 "../../../target/arm/cpu-features.h" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1065 "../../../target/arm/cpu-features.h"
         is_power_of_2(linesize)
# 1065 "../../../target/arm/cpu-features.h" 3 4
     )
       ;
     else
       __assert_fail(
# 1065 "../../../target/arm/cpu-features.h"
           "is_power_of_2(linesize)"
# 1065 "../../../target/arm/cpu-features.h" 3 4
           ,
           "../../../target/arm/cpu-features.h", 1065,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1065 "../../../target/arm/cpu-features.h"
      ;

# 1066 "../../../target/arm/cpu-features.h" 3 4
  ((void)sizeof((
# 1066 "../../../target/arm/cpu-features.h"
                    lg_linesize >= 4 && lg_linesize <= 7 + 4
# 1066 "../../../target/arm/cpu-features.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1066 "../../../target/arm/cpu-features.h"
         lg_linesize >= 4 && lg_linesize <= 7 + 4
# 1066 "../../../target/arm/cpu-features.h" 3 4
     )
       ;
     else
       __assert_fail(
# 1066 "../../../target/arm/cpu-features.h"
           "lg_linesize >= 4 && lg_linesize <= 7 + 4"
# 1066 "../../../target/arm/cpu-features.h" 3 4
           ,
           "../../../target/arm/cpu-features.h", 1066,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1066 "../../../target/arm/cpu-features.h"
      ;

  sets = cachesize / (assoc * linesize);

# 1070 "../../../target/arm/cpu-features.h" 3 4
  ((void)sizeof((
# 1070 "../../../target/arm/cpu-features.h"
                    cachesize % (assoc * linesize) == 0
# 1070 "../../../target/arm/cpu-features.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1070 "../../../target/arm/cpu-features.h"
         cachesize % (assoc * linesize) == 0
# 1070 "../../../target/arm/cpu-features.h" 3 4
     )
       ;
     else
       __assert_fail(
# 1070 "../../../target/arm/cpu-features.h"
           "cachesize % (assoc * linesize) == 0"
# 1070 "../../../target/arm/cpu-features.h" 3 4
           ,
           "../../../target/arm/cpu-features.h", 1070,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1070 "../../../target/arm/cpu-features.h"
      ;

  if (format == CCSIDR_FORMAT_LEGACY) {

    ccsidr = deposit32(ccsidr, 28, 4, flags);
    ccsidr = deposit32(ccsidr, 13, 15, sets - 1);
    ccsidr = deposit32(ccsidr, 3, 10, assoc - 1);
    ccsidr = deposit32(ccsidr, 0, 3, lg_linesize - 4);
  } else {

    ccsidr = deposit64(ccsidr, 32, 24, sets - 1);
    ccsidr = deposit64(ccsidr, 3, 21, assoc - 1);
    ccsidr = deposit64(ccsidr, 0, 3, lg_linesize - 4);
  }

  return ccsidr;
}
# 33 "../../../target/arm/internals.h" 2
# 44 "../../../target/arm/internals.h"
static inline int arm_env_mmu_index(CPUARMState *env) {
  return extract32((env->hflags.flags), R_TBFLAG_ANY_MMUIDX_SHIFT,
                   R_TBFLAG_ANY_MMUIDX_LENGTH);
}

static inline
# 49 "../../../target/arm/internals.h" 3 4
    _Bool
# 49 "../../../target/arm/internals.h"
    excp_is_internal(int excp) {

  return excp == 0x10000 || excp == 0x10001 || excp == 0x10002 ||
         excp == 0x10003 || excp == 8 || excp == 9 || excp == 16;
}
# 78 "../../../target/arm/internals.h"
enum { R_V7M_CONTROL_NPRIV_SHIFT = (0) };
enum { R_V7M_CONTROL_NPRIV_LENGTH = (1) };
enum { R_V7M_CONTROL_NPRIV_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_CONTROL_SPSEL_SHIFT = (1) };
enum { R_V7M_CONTROL_SPSEL_LENGTH = (1) };
enum { R_V7M_CONTROL_SPSEL_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_CONTROL_FPCA_SHIFT = (2) };
enum { R_V7M_CONTROL_FPCA_LENGTH = (1) };
enum { R_V7M_CONTROL_FPCA_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_CONTROL_SFPA_SHIFT = (3) };
enum { R_V7M_CONTROL_SFPA_LENGTH = (1) };
enum { R_V7M_CONTROL_SFPA_MASK = (((~0ULL) >> (64 - (1))) << (3)) };

enum { R_V7M_EXCRET_ES_SHIFT = (0) };
enum { R_V7M_EXCRET_ES_LENGTH = (1) };
enum { R_V7M_EXCRET_ES_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_V7M_EXCRET_RES0_SHIFT = (1) };
enum { R_V7M_EXCRET_RES0_LENGTH = (1) };
enum { R_V7M_EXCRET_RES0_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_V7M_EXCRET_SPSEL_SHIFT = (2) };
enum { R_V7M_EXCRET_SPSEL_LENGTH = (1) };
enum { R_V7M_EXCRET_SPSEL_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_V7M_EXCRET_MODE_SHIFT = (3) };
enum { R_V7M_EXCRET_MODE_LENGTH = (1) };
enum { R_V7M_EXCRET_MODE_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_V7M_EXCRET_FTYPE_SHIFT = (4) };
enum { R_V7M_EXCRET_FTYPE_LENGTH = (1) };
enum { R_V7M_EXCRET_FTYPE_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_V7M_EXCRET_DCRS_SHIFT = (5) };
enum { R_V7M_EXCRET_DCRS_LENGTH = (1) };
enum { R_V7M_EXCRET_DCRS_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_V7M_EXCRET_S_SHIFT = (6) };
enum { R_V7M_EXCRET_S_LENGTH = (1) };
enum { R_V7M_EXCRET_S_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_V7M_EXCRET_RES1_SHIFT = (7) };
enum { R_V7M_EXCRET_RES1_LENGTH = (25) };
enum { R_V7M_EXCRET_RES1_MASK = (((~0ULL) >> (64 - (25))) << (7)) };
# 101 "../../../target/arm/internals.h"
enum { R_DBGWCR_E_SHIFT = (0) };
enum { R_DBGWCR_E_LENGTH = (1) };
enum { R_DBGWCR_E_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_DBGWCR_PAC_SHIFT = (1) };
enum { R_DBGWCR_PAC_LENGTH = (2) };
enum { R_DBGWCR_PAC_MASK = (((~0ULL) >> (64 - (2))) << (1)) };
enum { R_DBGWCR_LSC_SHIFT = (3) };
enum { R_DBGWCR_LSC_LENGTH = (2) };
enum { R_DBGWCR_LSC_MASK = (((~0ULL) >> (64 - (2))) << (3)) };
enum { R_DBGWCR_BAS_SHIFT = (5) };
enum { R_DBGWCR_BAS_LENGTH = (8) };
enum { R_DBGWCR_BAS_MASK = (((~0ULL) >> (64 - (8))) << (5)) };
enum { R_DBGWCR_HMC_SHIFT = (13) };
enum { R_DBGWCR_HMC_LENGTH = (1) };
enum { R_DBGWCR_HMC_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_DBGWCR_SSC_SHIFT = (14) };
enum { R_DBGWCR_SSC_LENGTH = (2) };
enum { R_DBGWCR_SSC_MASK = (((~0ULL) >> (64 - (2))) << (14)) };
enum { R_DBGWCR_LBN_SHIFT = (16) };
enum { R_DBGWCR_LBN_LENGTH = (4) };
enum { R_DBGWCR_LBN_MASK = (((~0ULL) >> (64 - (4))) << (16)) };
enum { R_DBGWCR_WT_SHIFT = (20) };
enum { R_DBGWCR_WT_LENGTH = (1) };
enum { R_DBGWCR_WT_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_DBGWCR_MASK_SHIFT = (24) };
enum { R_DBGWCR_MASK_LENGTH = (5) };
enum { R_DBGWCR_MASK_MASK = (((~0ULL) >> (64 - (5))) << (24)) };
enum { R_DBGWCR_SSCE_SHIFT = (29) };
enum { R_DBGWCR_SSCE_LENGTH = (1) };
enum { R_DBGWCR_SSCE_MASK = (((~0ULL) >> (64 - (1))) << (29)) };

enum { R_CPACR_CP10_SHIFT = (20) };
enum { R_CPACR_CP10_LENGTH = (2) };
enum { R_CPACR_CP10_MASK = (((~0ULL) >> (64 - (2))) << (20)) };
enum { R_CPACR_CP11_SHIFT = (22) };
enum { R_CPACR_CP11_LENGTH = (2) };
enum { R_CPACR_CP11_MASK = (((~0ULL) >> (64 - (2))) << (22)) };
enum { R_CPACR_TRCDIS_SHIFT = (28) };
enum { R_CPACR_TRCDIS_LENGTH = (1) };
enum { R_CPACR_TRCDIS_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_CPACR_D32DIS_SHIFT = (30) };
enum { R_CPACR_D32DIS_LENGTH = (1) };
enum { R_CPACR_D32DIS_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_CPACR_ASEDIS_SHIFT = (31) };
enum { R_CPACR_ASEDIS_LENGTH = (1) };
enum { R_CPACR_ASEDIS_MASK = (((~0ULL) >> (64 - (1))) << (31)) };

enum { R_CPACR_EL1_ZEN_SHIFT = (16) };
enum { R_CPACR_EL1_ZEN_LENGTH = (2) };
enum { R_CPACR_EL1_ZEN_MASK = (((~0ULL) >> (64 - (2))) << (16)) };
enum { R_CPACR_EL1_FPEN_SHIFT = (20) };
enum { R_CPACR_EL1_FPEN_LENGTH = (2) };
enum { R_CPACR_EL1_FPEN_MASK = (((~0ULL) >> (64 - (2))) << (20)) };
enum { R_CPACR_EL1_SMEN_SHIFT = (24) };
enum { R_CPACR_EL1_SMEN_LENGTH = (2) };
enum { R_CPACR_EL1_SMEN_MASK = (((~0ULL) >> (64 - (2))) << (24)) };
enum { R_CPACR_EL1_TTA_SHIFT = (28) };
enum { R_CPACR_EL1_TTA_LENGTH = (1) };
enum { R_CPACR_EL1_TTA_MASK = (((~0ULL) >> (64 - (1))) << (28)) };

enum { R_HCPTR_TCP10_SHIFT = (10) };
enum { R_HCPTR_TCP10_LENGTH = (1) };
enum { R_HCPTR_TCP10_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_HCPTR_TCP11_SHIFT = (11) };
enum { R_HCPTR_TCP11_LENGTH = (1) };
enum { R_HCPTR_TCP11_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HCPTR_TASE_SHIFT = (15) };
enum { R_HCPTR_TASE_LENGTH = (1) };
enum { R_HCPTR_TASE_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_HCPTR_TTA_SHIFT = (20) };
enum { R_HCPTR_TTA_LENGTH = (1) };
enum { R_HCPTR_TTA_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_HCPTR_TAM_SHIFT = (30) };
enum { R_HCPTR_TAM_LENGTH = (1) };
enum { R_HCPTR_TAM_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_HCPTR_TCPAC_SHIFT = (31) };
enum { R_HCPTR_TCPAC_LENGTH = (1) };
enum { R_HCPTR_TCPAC_MASK = (((~0ULL) >> (64 - (1))) << (31)) };

enum { R_CPTR_EL2_TZ_SHIFT = (8) };
enum { R_CPTR_EL2_TZ_LENGTH = (1) };
enum { R_CPTR_EL2_TZ_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_CPTR_EL2_TFP_SHIFT = (10) };
enum { R_CPTR_EL2_TFP_LENGTH = (1) };
enum { R_CPTR_EL2_TFP_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_CPTR_EL2_TSM_SHIFT = (12) };
enum { R_CPTR_EL2_TSM_LENGTH = (1) };
enum { R_CPTR_EL2_TSM_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_CPTR_EL2_ZEN_SHIFT = (16) };
enum { R_CPTR_EL2_ZEN_LENGTH = (2) };
enum { R_CPTR_EL2_ZEN_MASK = (((~0ULL) >> (64 - (2))) << (16)) };
enum { R_CPTR_EL2_FPEN_SHIFT = (20) };
enum { R_CPTR_EL2_FPEN_LENGTH = (2) };
enum { R_CPTR_EL2_FPEN_MASK = (((~0ULL) >> (64 - (2))) << (20)) };
enum { R_CPTR_EL2_SMEN_SHIFT = (24) };
enum { R_CPTR_EL2_SMEN_LENGTH = (2) };
enum { R_CPTR_EL2_SMEN_MASK = (((~0ULL) >> (64 - (2))) << (24)) };
enum { R_CPTR_EL2_TTA_SHIFT = (28) };
enum { R_CPTR_EL2_TTA_LENGTH = (1) };
enum { R_CPTR_EL2_TTA_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_CPTR_EL2_TAM_SHIFT = (30) };
enum { R_CPTR_EL2_TAM_LENGTH = (1) };
enum { R_CPTR_EL2_TAM_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_CPTR_EL2_TCPAC_SHIFT = (31) };
enum { R_CPTR_EL2_TCPAC_LENGTH = (1) };
enum { R_CPTR_EL2_TCPAC_MASK = (((~0ULL) >> (64 - (1))) << (31)) };

enum { R_CPTR_EL3_EZ_SHIFT = (8) };
enum { R_CPTR_EL3_EZ_LENGTH = (1) };
enum { R_CPTR_EL3_EZ_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_CPTR_EL3_TFP_SHIFT = (10) };
enum { R_CPTR_EL3_TFP_LENGTH = (1) };
enum { R_CPTR_EL3_TFP_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_CPTR_EL3_ESM_SHIFT = (12) };
enum { R_CPTR_EL3_ESM_LENGTH = (1) };
enum { R_CPTR_EL3_ESM_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_CPTR_EL3_TTA_SHIFT = (20) };
enum { R_CPTR_EL3_TTA_LENGTH = (1) };
enum { R_CPTR_EL3_TTA_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_CPTR_EL3_TAM_SHIFT = (30) };
enum { R_CPTR_EL3_TAM_LENGTH = (1) };
enum { R_CPTR_EL3_TAM_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_CPTR_EL3_TCPAC_SHIFT = (31) };
enum { R_CPTR_EL3_TCPAC_LENGTH = (1) };
enum { R_CPTR_EL3_TCPAC_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
# 200 "../../../target/arm/internals.h"
enum { R_VTCR_T0SZ_SHIFT = (0) };
enum { R_VTCR_T0SZ_LENGTH = (6) };
enum { R_VTCR_T0SZ_MASK = (((~0ULL) >> (64 - (6))) << (0)) };
enum { R_VTCR_SL0_SHIFT = (6) };
enum { R_VTCR_SL0_LENGTH = (2) };
enum { R_VTCR_SL0_MASK = (((~0ULL) >> (64 - (2))) << (6)) };
enum { R_VTCR_IRGN0_SHIFT = (8) };
enum { R_VTCR_IRGN0_LENGTH = (2) };
enum { R_VTCR_IRGN0_MASK = (((~0ULL) >> (64 - (2))) << (8)) };
enum { R_VTCR_ORGN0_SHIFT = (10) };
enum { R_VTCR_ORGN0_LENGTH = (2) };
enum { R_VTCR_ORGN0_MASK = (((~0ULL) >> (64 - (2))) << (10)) };
enum { R_VTCR_SH0_SHIFT = (12) };
enum { R_VTCR_SH0_LENGTH = (2) };
enum { R_VTCR_SH0_MASK = (((~0ULL) >> (64 - (2))) << (12)) };
enum { R_VTCR_TG0_SHIFT = (14) };
enum { R_VTCR_TG0_LENGTH = (2) };
enum { R_VTCR_TG0_MASK = (((~0ULL) >> (64 - (2))) << (14)) };
enum { R_VTCR_PS_SHIFT = (16) };
enum { R_VTCR_PS_LENGTH = (3) };
enum { R_VTCR_PS_MASK = (((~0ULL) >> (64 - (3))) << (16)) };
enum { R_VTCR_VS_SHIFT = (19) };
enum { R_VTCR_VS_LENGTH = (1) };
enum { R_VTCR_VS_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_VTCR_HA_SHIFT = (21) };
enum { R_VTCR_HA_LENGTH = (1) };
enum { R_VTCR_HA_MASK = (((~0ULL) >> (64 - (1))) << (21)) };
enum { R_VTCR_HD_SHIFT = (22) };
enum { R_VTCR_HD_LENGTH = (1) };
enum { R_VTCR_HD_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_VTCR_HWU59_SHIFT = (25) };
enum { R_VTCR_HWU59_LENGTH = (1) };
enum { R_VTCR_HWU59_MASK = (((~0ULL) >> (64 - (1))) << (25)) };
enum { R_VTCR_HWU60_SHIFT = (26) };
enum { R_VTCR_HWU60_LENGTH = (1) };
enum { R_VTCR_HWU60_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_VTCR_HWU61_SHIFT = (27) };
enum { R_VTCR_HWU61_LENGTH = (1) };
enum { R_VTCR_HWU61_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_VTCR_HWU62_SHIFT = (28) };
enum { R_VTCR_HWU62_LENGTH = (1) };
enum { R_VTCR_HWU62_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_VTCR_NSW_SHIFT = (29) };
enum { R_VTCR_NSW_LENGTH = (1) };
enum { R_VTCR_NSW_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_VTCR_NSA_SHIFT = (30) };
enum { R_VTCR_NSA_LENGTH = (1) };
enum { R_VTCR_NSA_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_VTCR_DS_SHIFT = (32) };
enum { R_VTCR_DS_LENGTH = (1) };
enum { R_VTCR_DS_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_VTCR_SL2_SHIFT = (33) };
enum { R_VTCR_SL2_LENGTH = (1) };
enum { R_VTCR_SL2_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
# 243 "../../../target/arm/internals.h"
enum { R_CNTHCTL_EL0PCTEN_E2H1_SHIFT = (0) };
enum { R_CNTHCTL_EL0PCTEN_E2H1_LENGTH = (1) };
enum { R_CNTHCTL_EL0PCTEN_E2H1_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_CNTHCTL_EL0VCTEN_E2H1_SHIFT = (1) };
enum { R_CNTHCTL_EL0VCTEN_E2H1_LENGTH = (1) };
enum { R_CNTHCTL_EL0VCTEN_E2H1_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_CNTHCTL_EL1PCTEN_E2H0_SHIFT = (0) };
enum { R_CNTHCTL_EL1PCTEN_E2H0_LENGTH = (1) };
enum { R_CNTHCTL_EL1PCTEN_E2H0_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_CNTHCTL_EL1PCEN_E2H0_SHIFT = (1) };
enum { R_CNTHCTL_EL1PCEN_E2H0_LENGTH = (1) };
enum { R_CNTHCTL_EL1PCEN_E2H0_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_CNTHCTL_EVNTEN_SHIFT = (2) };
enum { R_CNTHCTL_EVNTEN_LENGTH = (1) };
enum { R_CNTHCTL_EVNTEN_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_CNTHCTL_EVNTDIR_SHIFT = (3) };
enum { R_CNTHCTL_EVNTDIR_LENGTH = (1) };
enum { R_CNTHCTL_EVNTDIR_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_CNTHCTL_EVNTI_SHIFT = (4) };
enum { R_CNTHCTL_EVNTI_LENGTH = (4) };
enum { R_CNTHCTL_EVNTI_MASK = (((~0ULL) >> (64 - (4))) << (4)) };
enum { R_CNTHCTL_EL0VTEN_SHIFT = (8) };
enum { R_CNTHCTL_EL0VTEN_LENGTH = (1) };
enum { R_CNTHCTL_EL0VTEN_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_CNTHCTL_EL0PTEN_SHIFT = (9) };
enum { R_CNTHCTL_EL0PTEN_LENGTH = (1) };
enum { R_CNTHCTL_EL0PTEN_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_CNTHCTL_EL1PCTEN_E2H1_SHIFT = (10) };
enum { R_CNTHCTL_EL1PCTEN_E2H1_LENGTH = (1) };
enum { R_CNTHCTL_EL1PCTEN_E2H1_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_CNTHCTL_EL1PTEN_SHIFT = (11) };
enum { R_CNTHCTL_EL1PTEN_LENGTH = (1) };
enum { R_CNTHCTL_EL1PTEN_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_CNTHCTL_ECV_SHIFT = (12) };
enum { R_CNTHCTL_ECV_LENGTH = (1) };
enum { R_CNTHCTL_ECV_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_CNTHCTL_EL1TVT_SHIFT = (13) };
enum { R_CNTHCTL_EL1TVT_LENGTH = (1) };
enum { R_CNTHCTL_EL1TVT_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_CNTHCTL_EL1TVCT_SHIFT = (14) };
enum { R_CNTHCTL_EL1TVCT_LENGTH = (1) };
enum { R_CNTHCTL_EL1TVCT_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_CNTHCTL_EL1NVPCT_SHIFT = (15) };
enum { R_CNTHCTL_EL1NVPCT_LENGTH = (1) };
enum { R_CNTHCTL_EL1NVPCT_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_CNTHCTL_EL1NVVCT_SHIFT = (16) };
enum { R_CNTHCTL_EL1NVVCT_LENGTH = (1) };
enum { R_CNTHCTL_EL1NVVCT_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_CNTHCTL_EVNTIS_SHIFT = (17) };
enum { R_CNTHCTL_EVNTIS_LENGTH = (1) };
enum { R_CNTHCTL_EVNTIS_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_CNTHCTL_CNTVMASK_SHIFT = (18) };
enum { R_CNTHCTL_CNTVMASK_LENGTH = (1) };
enum { R_CNTHCTL_CNTVMASK_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_CNTHCTL_CNTPMASK_SHIFT = (19) };
enum { R_CNTHCTL_CNTPMASK_LENGTH = (1) };
enum { R_CNTHCTL_CNTPMASK_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
# 284 "../../../target/arm/internals.h"
__attribute__((__noreturn__)) void raise_exception(CPUARMState *env,
                                                   uint32_t excp,
                                                   uint32_t syndrome,
                                                   uint32_t target_el);

__attribute__((__noreturn__)) void
raise_exception_ra(CPUARMState *env, uint32_t excp, uint32_t syndrome,
                   uint32_t target_el, uintptr_t ra);

static inline unsigned int aarch64_banked_spsr_index(unsigned int el) {
  static const unsigned int map[4] = {
      [1] = 1,
      [2] = 6,
      [3] = 7,
  };

# 307 "../../../target/arm/internals.h" 3 4
  ((void)sizeof((
# 307 "../../../target/arm/internals.h"
                    el >= 1 && el <= 3
# 307 "../../../target/arm/internals.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 307 "../../../target/arm/internals.h"
         el >= 1 && el <= 3
# 307 "../../../target/arm/internals.h" 3 4
     )
       ;
     else
       __assert_fail(
# 307 "../../../target/arm/internals.h"
           "el >= 1 && el <= 3"
# 307 "../../../target/arm/internals.h" 3 4
           ,
           "../../../target/arm/internals.h", 307,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 307 "../../../target/arm/internals.h"
      ;
  return map[el];
}

static inline int bank_number(int mode) {
  switch (mode) {
  case ARM_CPU_MODE_USR:
  case ARM_CPU_MODE_SYS:
    return 0;
  case ARM_CPU_MODE_SVC:
    return 1;
  case ARM_CPU_MODE_ABT:
    return 2;
  case ARM_CPU_MODE_UND:
    return 3;
  case ARM_CPU_MODE_IRQ:
    return 4;
  case ARM_CPU_MODE_FIQ:
    return 5;
  case ARM_CPU_MODE_HYP:
    return 6;
  case ARM_CPU_MODE_MON:
    return 7;
  }
  do {
    g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                             333, ((const char *)(__func__)),
# 333 "../../../target/arm/internals.h" 3 4
                             ((void *)0)
# 333 "../../../target/arm/internals.h"
    );
  } while (0);
}
# 347 "../../../target/arm/internals.h"
static inline int r14_bank_number(int mode) {
  return (mode == ARM_CPU_MODE_HYP) ? 0 : bank_number(mode);
}

void arm_cpu_register(const ARMCPUInfo *info);
void aarch64_cpu_register(const ARMCPUInfo *info);

void register_cp_regs_for_features(ARMCPU *cpu);
void init_cpreg_list(ARMCPU *cpu);

void arm_cpu_register_gdb_regs_for_features(ARMCPU *cpu);
void arm_translate_init(void);
void arm_translate_code(CPUState *cs, TranslationBlock *tb, int *max_insns,
                        vaddr pc, void *host_pc);

void arm_cpu_register_gdb_commands(ARMCPU *cpu);
void aarch64_cpu_register_gdb_commands(ARMCPU *cpu, GString *, GPtrArray *,
                                       GPtrArray *);

void arm_restore_state_to_opc(CPUState *cs, const TranslationBlock *tb,
                              const uint64_t *data);

void arm_cpu_synchronize_from_tb(CPUState *cs, const TranslationBlock *tb);

# 375 "../../../target/arm/internals.h" 3 4
_Bool
# 375 "../../../target/arm/internals.h"
    arm_cpu_exec_halt(CPUState *cs);

typedef enum ARMFPRounding {
  FPROUNDING_TIEEVEN,
  FPROUNDING_POSINF,
  FPROUNDING_NEGINF,
  FPROUNDING_ZERO,
  FPROUNDING_TIEAWAY,
  FPROUNDING_ODD
} ARMFPRounding;

extern const FloatRoundMode arm_rmode_to_sf_map[6];

static inline FloatRoundMode arm_rmode_to_sf(ARMFPRounding rmode) {

# 391 "../../../target/arm/internals.h" 3 4
  ((void)sizeof(
       (
# 391 "../../../target/arm/internals.h"
           (unsigned)rmode <
           ((sizeof(arm_rmode_to_sf_map) / sizeof((arm_rmode_to_sf_map)[0])) +
            (sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(arm_rmode_to_sf_map),
                             typeof(&(arm_rmode_to_sf_map)[0]))))
                         ? -1
                         : 1;
                 }) -
             sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(arm_rmode_to_sf_map),
                             typeof(&(arm_rmode_to_sf_map)[0]))))
                         ? -1
                         : 1;
                 })))
# 391 "../../../target/arm/internals.h" 3 4
               )
           ? 1
           : 0),
   __extension__({
     if (
# 391 "../../../target/arm/internals.h"
         (unsigned)rmode <
         ((sizeof(arm_rmode_to_sf_map) / sizeof((arm_rmode_to_sf_map)[0])) +
          (sizeof(
               struct {
                 int : (!(!__builtin_types_compatible_p(
                           typeof(arm_rmode_to_sf_map),
                           typeof(&(arm_rmode_to_sf_map)[0]))))
                       ? -1
                       : 1;
               }) -
           sizeof(
               struct {
                 int : (!(!__builtin_types_compatible_p(
                           typeof(arm_rmode_to_sf_map),
                           typeof(&(arm_rmode_to_sf_map)[0]))))
                       ? -1
                       : 1;
               })))
# 391 "../../../target/arm/internals.h" 3 4
     )
       ;
     else
       __assert_fail(
# 391 "../../../target/arm/internals.h"
           "(unsigned)rmode < ARRAY_SIZE(arm_rmode_to_sf_map)"
# 391 "../../../target/arm/internals.h" 3 4
           ,
           "../../../target/arm/internals.h", 391,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 391 "../../../target/arm/internals.h"
      ;
  return arm_rmode_to_sf_map[rmode];
}

static inline
# 396 "../../../target/arm/internals.h" 3 4
    _Bool
# 396 "../../../target/arm/internals.h"
    arm_scr_rw_eff(CPUARMState *env) {

  ARMCPU *cpu = env_archcpu(env);

  if (env->cp15.scr_el3 & (1ULL << 10)) {
    return
# 406 "../../../target/arm/internals.h" 3 4
        1
# 406 "../../../target/arm/internals.h"
        ;
  }
  if (env->cp15.scr_el3 & (1ULL << 0)) {
    return arm_feature(env, ARM_FEATURE_EL2) && !({
             ARMCPU *cpu_ = (cpu);
             isar_feature_aa64_aa32_el2(&cpu_->isar);
           });
  } else {
    return env->cp15.scr_el3 & (1ULL << 18);
  }
}

static inline
# 417 "../../../target/arm/internals.h" 3 4
    _Bool
# 417 "../../../target/arm/internals.h"
    arm_el_is_aa64(CPUARMState *env, int el) {

# 423 "../../../target/arm/internals.h" 3 4
  ((void)sizeof((
# 423 "../../../target/arm/internals.h"
                    el >= 1 && el <= 3
# 423 "../../../target/arm/internals.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 423 "../../../target/arm/internals.h"
         el >= 1 && el <= 3
# 423 "../../../target/arm/internals.h" 3 4
     )
       ;
     else
       __assert_fail(
# 423 "../../../target/arm/internals.h"
           "el >= 1 && el <= 3"
# 423 "../../../target/arm/internals.h" 3 4
           ,
           "../../../target/arm/internals.h", 423,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 423 "../../../target/arm/internals.h"
      ;

# 424 "../../../target/arm/internals.h" 3 4
  _Bool
# 424 "../../../target/arm/internals.h"
      aa64 = arm_feature(env, ARM_FEATURE_AARCH64);

  if (el == 3) {
    return aa64;
  }

  if (arm_feature(env, ARM_FEATURE_EL3)) {
    aa64 = aa64 && arm_scr_rw_eff(env);
  }

  if (el == 2) {
    return aa64;
  }

  if (arm_is_el2_enabled(env)) {
    aa64 = aa64 && (env->cp15.hcr_el2 & (1ULL << 31));
  }

  return aa64;
}

static inline int arm_current_el(CPUARMState *env) {
  if (arm_feature(env, ARM_FEATURE_M)) {
    return arm_v7m_is_handler_mode(env) ||
           !(env->v7m.control[env->v7m.secure] & 1);
  }

  if (is_a64(env)) {
    return extract32(env->pstate, 2, 2);
  }

  switch (env->uncached_cpsr & 0x1f) {
  case ARM_CPU_MODE_USR:
    return 0;
  case ARM_CPU_MODE_HYP:
    return 2;
  case ARM_CPU_MODE_MON:
    return 3;
  default:
    if (arm_is_secure(env) && !arm_el_is_aa64(env, 3)) {

      return 3;
    }

    return 1;
  }
}

static inline
# 482 "../../../target/arm/internals.h" 3 4
    _Bool
# 482 "../../../target/arm/internals.h"
    arm_cpu_data_is_big_endian_a32(CPUARMState *env,

# 483 "../../../target/arm/internals.h" 3 4
                                   _Bool
# 483 "../../../target/arm/internals.h"
                                       sctlr_b) {
# 498 "../../../target/arm/internals.h"
  if (sctlr_b) {
    return
# 499 "../../../target/arm/internals.h" 3 4
        1
# 499 "../../../target/arm/internals.h"
        ;
  }

  return env->uncached_cpsr & (1U << 9);
}

static inline
# 506 "../../../target/arm/internals.h" 3 4
    _Bool
# 506 "../../../target/arm/internals.h"
    arm_cpu_data_is_big_endian_a64(int el, uint64_t sctlr) {
  return sctlr & (el ? (1U << 25) : (1U << 24));
}

static inline
# 512 "../../../target/arm/internals.h" 3 4
    _Bool
# 512 "../../../target/arm/internals.h"
    arm_cpu_data_is_big_endian(CPUARMState *env) {
  if (!is_a64(env)) {
    return arm_cpu_data_is_big_endian_a32(env, arm_sctlr_b(env));
  } else {
    int cur_el = arm_current_el(env);
    uint64_t sctlr = arm_sctlr(env, cur_el);
    return arm_cpu_data_is_big_endian_a64(cur_el, sctlr);
  }
}

static inline
# 524 "../../../target/arm/internals.h" 3 4
    _Bool
# 524 "../../../target/arm/internals.h"
    arm_cpu_bswap_data(CPUARMState *env) {
  return 0 ^ arm_cpu_data_is_big_endian(env);
}

static inline void aarch64_save_sp(CPUARMState *env, int el) {
  if (env->pstate & (1U)) {
    env->sp_el[el] = env->xregs[31];
  } else {
    env->sp_el[0] = env->xregs[31];
  }
}

static inline void aarch64_restore_sp(CPUARMState *env, int el) {
  if (env->pstate & (1U)) {
    env->xregs[31] = env->sp_el[el];
  } else {
    env->xregs[31] = env->sp_el[0];
  }
}

static inline void update_spsel(CPUARMState *env, uint32_t imm) {
  unsigned int cur_el = arm_current_el(env);

  if (!((imm ^ env->pstate) & (1U))) {
    return;
  }
  aarch64_save_sp(env, cur_el);
  env->pstate = deposit32(env->pstate, 0, 1, imm);

# 563 "../../../target/arm/internals.h" 3 4
  ((void)sizeof((
# 563 "../../../target/arm/internals.h"
                    cur_el >= 1 && cur_el <= 3
# 563 "../../../target/arm/internals.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 563 "../../../target/arm/internals.h"
         cur_el >= 1 && cur_el <= 3
# 563 "../../../target/arm/internals.h" 3 4
     )
       ;
     else
       __assert_fail(
# 563 "../../../target/arm/internals.h"
           "cur_el >= 1 && cur_el <= 3"
# 563 "../../../target/arm/internals.h" 3 4
           ,
           "../../../target/arm/internals.h", 563,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 563 "../../../target/arm/internals.h"
      ;
  aarch64_restore_sp(env, cur_el);
}
# 574 "../../../target/arm/internals.h"
unsigned int arm_pamax(ARMCPU *cpu);
# 584 "../../../target/arm/internals.h"
uint8_t round_down_to_parange_index(uint8_t bit_size);
# 593 "../../../target/arm/internals.h"
uint8_t round_down_to_parange_bit_size(uint8_t bit_size);

static inline
# 599 "../../../target/arm/internals.h" 3 4
    _Bool
# 599 "../../../target/arm/internals.h"
    extended_addresses_enabled(CPUARMState *env) {
  uint64_t tcr = env->cp15.tcr_el[arm_is_secure(env) ? 3 : 1];
  if (arm_feature(env, ARM_FEATURE_PMSA) && arm_feature(env, ARM_FEATURE_V8)) {
    return
# 604 "../../../target/arm/internals.h" 3 4
        1
# 604 "../../../target/arm/internals.h"
        ;
  }
  return arm_el_is_aa64(env, 1) ||
         (arm_feature(env, ARM_FEATURE_LPAE) && (tcr & (1U << 31)));
}

void hw_watchpoint_update(ARMCPU *cpu, int n);

void hw_watchpoint_update_all(ARMCPU *cpu);

void hw_breakpoint_update(ARMCPU *cpu, int n);

void hw_breakpoint_update_all(ARMCPU *cpu);

# 630 "../../../target/arm/internals.h" 3 4
_Bool
# 630 "../../../target/arm/internals.h"
    arm_debug_check_breakpoint(CPUState *cs);

# 633 "../../../target/arm/internals.h" 3 4
_Bool
# 633 "../../../target/arm/internals.h"
    arm_debug_check_watchpoint(CPUState *cs, CPUWatchpoint *wp);

vaddr arm_adjust_watchpoint_address(CPUState *cs, vaddr addr, int len);

void arm_debug_excp_handler(CPUState *cs);

static inline
# 644 "../../../target/arm/internals.h" 3 4
    _Bool
# 644 "../../../target/arm/internals.h"
    arm_is_psci_call(ARMCPU *cpu, int excp_type) {
  return
# 646 "../../../target/arm/internals.h" 3 4
      0
# 646 "../../../target/arm/internals.h"
      ;
}
static inline void arm_handle_psci_call(ARMCPU *cpu) {
  do {
    g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                             650, ((const char *)(__func__)),
# 650 "../../../target/arm/internals.h" 3 4
                             ((void *)0)
# 650 "../../../target/arm/internals.h"
    );
  } while (0);
}
# 664 "../../../target/arm/internals.h"
static inline void arm_clear_exclusive(CPUARMState *env) {
  env->exclusive_addr = -1;
}

typedef enum ARMFaultType {
  ARMFault_None,
  ARMFault_AccessFlag,
  ARMFault_Alignment,
  ARMFault_Background,
  ARMFault_Domain,
  ARMFault_Permission,
  ARMFault_Translation,
  ARMFault_AddressSize,
  ARMFault_SyncExternal,
  ARMFault_SyncExternalOnWalk,
  ARMFault_SyncParity,
  ARMFault_SyncParityOnWalk,
  ARMFault_AsyncParity,
  ARMFault_AsyncExternal,
  ARMFault_Debug,
  ARMFault_TLBConflict,
  ARMFault_UnsuppAtomicUpdate,
  ARMFault_Lockdown,
  ARMFault_Exclusive,
  ARMFault_ICacheMaint,
  ARMFault_QEMU_NSCExec,
  ARMFault_QEMU_SFault,
  ARMFault_GPCFOnWalk,
  ARMFault_GPCFOnOutput,
} ARMFaultType;

typedef enum ARMGPCF {
  GPCF_None,
  GPCF_AddressSize,
  GPCF_Walk,
  GPCF_EABT,
  GPCF_Fail,
} ARMGPCF;
# 723 "../../../target/arm/internals.h"
typedef struct ARMMMUFaultInfo ARMMMUFaultInfo;
struct ARMMMUFaultInfo {
  ARMFaultType type;
  ARMGPCF gpcf;
  target_ulong s2addr;
  target_ulong paddr;
  ARMSecuritySpace paddr_space;
  int level;
  int domain;

# 732 "../../../target/arm/internals.h" 3 4
  _Bool
# 732 "../../../target/arm/internals.h"
      stage2;

# 733 "../../../target/arm/internals.h" 3 4
  _Bool
# 733 "../../../target/arm/internals.h"
      s1ptw;

# 734 "../../../target/arm/internals.h" 3 4
  _Bool
# 734 "../../../target/arm/internals.h"
      s1ns;

# 735 "../../../target/arm/internals.h" 3 4
  _Bool
# 735 "../../../target/arm/internals.h"
      ea;
};

static inline uint32_t arm_fi_to_sfsc(ARMMMUFaultInfo *fi) {
  uint32_t fsc;

  switch (fi->type) {
  case ARMFault_None:
    return 0;
  case ARMFault_AccessFlag:
    fsc = fi->level == 1 ? 0x3 : 0x6;
    break;
  case ARMFault_Alignment:
    fsc = 0x1;
    break;
  case ARMFault_Permission:
    fsc = fi->level == 1 ? 0xd : 0xf;
    break;
  case ARMFault_Domain:
    fsc = fi->level == 1 ? 0x9 : 0xb;
    break;
  case ARMFault_Translation:
    fsc = fi->level == 1 ? 0x5 : 0x7;
    break;
  case ARMFault_SyncExternal:
    fsc = 0x8 | (fi->ea << 12);
    break;
  case ARMFault_SyncExternalOnWalk:
    fsc = fi->level == 1 ? 0xc : 0xe;
    fsc |= (fi->ea << 12);
    break;
  case ARMFault_SyncParity:
    fsc = 0x409;
    break;
  case ARMFault_SyncParityOnWalk:
    fsc = fi->level == 1 ? 0x40c : 0x40e;
    break;
  case ARMFault_AsyncParity:
    fsc = 0x408;
    break;
  case ARMFault_AsyncExternal:
    fsc = 0x406 | (fi->ea << 12);
    break;
  case ARMFault_Debug:
    fsc = 0x2;
    break;
  case ARMFault_TLBConflict:
    fsc = 0x400;
    break;
  case ARMFault_Lockdown:
    fsc = 0x404;
    break;
  case ARMFault_Exclusive:
    fsc = 0x405;
    break;
  case ARMFault_ICacheMaint:
    fsc = 0x4;
    break;
  case ARMFault_Background:
    fsc = 0x0;
    break;
  case ARMFault_QEMU_NSCExec:
    fsc = 0xf;
    break;
  case ARMFault_QEMU_SFault:
    fsc = 0xe;
    break;
  default:

    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                               813, ((const char *)(__func__)),
# 813 "../../../target/arm/internals.h" 3 4
                               ((void *)0)
# 813 "../../../target/arm/internals.h"
      );
    } while (0);
  }

  fsc |= (fi->domain << 4);
  return fsc;
}

static inline uint32_t arm_fi_to_lfsc(ARMMMUFaultInfo *fi) {
  uint32_t fsc;

  switch (fi->type) {
  case ARMFault_None:
    return 0;
  case ARMFault_AddressSize:

# 833 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 833 "../../../target/arm/internals.h"
                      fi->level >= -1 && fi->level <= 3
# 833 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 833 "../../../target/arm/internals.h"
           fi->level >= -1 && fi->level <= 3
# 833 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 833 "../../../target/arm/internals.h"
             "fi->level >= -1 && fi->level <= 3"
# 833 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 833,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 833 "../../../target/arm/internals.h"
        ;
    if (fi->level < 0) {
      fsc = 0b101001;
    } else {
      fsc = fi->level;
    }
    break;
  case ARMFault_AccessFlag:

# 841 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 841 "../../../target/arm/internals.h"
                      fi->level >= 0 && fi->level <= 3
# 841 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 841 "../../../target/arm/internals.h"
           fi->level >= 0 && fi->level <= 3
# 841 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 841 "../../../target/arm/internals.h"
             "fi->level >= 0 && fi->level <= 3"
# 841 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 841,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 841 "../../../target/arm/internals.h"
        ;
    fsc = 0b001000 | fi->level;
    break;
  case ARMFault_Permission:

# 845 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 845 "../../../target/arm/internals.h"
                      fi->level >= 0 && fi->level <= 3
# 845 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 845 "../../../target/arm/internals.h"
           fi->level >= 0 && fi->level <= 3
# 845 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 845 "../../../target/arm/internals.h"
             "fi->level >= 0 && fi->level <= 3"
# 845 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 845,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 845 "../../../target/arm/internals.h"
        ;
    fsc = 0b001100 | fi->level;
    break;
  case ARMFault_Translation:

# 849 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 849 "../../../target/arm/internals.h"
                      fi->level >= -1 && fi->level <= 3
# 849 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 849 "../../../target/arm/internals.h"
           fi->level >= -1 && fi->level <= 3
# 849 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 849 "../../../target/arm/internals.h"
             "fi->level >= -1 && fi->level <= 3"
# 849 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 849,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 849 "../../../target/arm/internals.h"
        ;
    if (fi->level < 0) {
      fsc = 0b101011;
    } else {
      fsc = 0b000100 | fi->level;
    }
    break;
  case ARMFault_SyncExternal:
    fsc = 0x10 | (fi->ea << 12);
    break;
  case ARMFault_SyncExternalOnWalk:

# 860 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 860 "../../../target/arm/internals.h"
                      fi->level >= -1 && fi->level <= 3
# 860 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 860 "../../../target/arm/internals.h"
           fi->level >= -1 && fi->level <= 3
# 860 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 860 "../../../target/arm/internals.h"
             "fi->level >= -1 && fi->level <= 3"
# 860 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 860,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 860 "../../../target/arm/internals.h"
        ;
    if (fi->level < 0) {
      fsc = 0b010011;
    } else {
      fsc = 0b010100 | fi->level;
    }
    fsc |= fi->ea << 12;
    break;
  case ARMFault_SyncParity:
    fsc = 0x18;
    break;
  case ARMFault_SyncParityOnWalk:

# 872 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 872 "../../../target/arm/internals.h"
                      fi->level >= -1 && fi->level <= 3
# 872 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 872 "../../../target/arm/internals.h"
           fi->level >= -1 && fi->level <= 3
# 872 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 872 "../../../target/arm/internals.h"
             "fi->level >= -1 && fi->level <= 3"
# 872 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 872,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 872 "../../../target/arm/internals.h"
        ;
    if (fi->level < 0) {
      fsc = 0b011011;
    } else {
      fsc = 0b011100 | fi->level;
    }
    break;
  case ARMFault_AsyncParity:
    fsc = 0x19;
    break;
  case ARMFault_AsyncExternal:
    fsc = 0x11 | (fi->ea << 12);
    break;
  case ARMFault_Alignment:
    fsc = 0x21;
    break;
  case ARMFault_Debug:
    fsc = 0x22;
    break;
  case ARMFault_TLBConflict:
    fsc = 0x30;
    break;
  case ARMFault_UnsuppAtomicUpdate:
    fsc = 0x31;
    break;
  case ARMFault_Lockdown:
    fsc = 0x34;
    break;
  case ARMFault_Exclusive:
    fsc = 0x35;
    break;
  case ARMFault_GPCFOnWalk:

# 904 "../../../target/arm/internals.h" 3 4
    ((void)sizeof((
# 904 "../../../target/arm/internals.h"
                      fi->level >= -1 && fi->level <= 3
# 904 "../../../target/arm/internals.h" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 904 "../../../target/arm/internals.h"
           fi->level >= -1 && fi->level <= 3
# 904 "../../../target/arm/internals.h" 3 4
       )
         ;
       else
         __assert_fail(
# 904 "../../../target/arm/internals.h"
             "fi->level >= -1 && fi->level <= 3"
# 904 "../../../target/arm/internals.h" 3 4
             ,
             "../../../target/arm/internals.h", 904,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 904 "../../../target/arm/internals.h"
        ;
    if (fi->level < 0) {
      fsc = 0b100011;
    } else {
      fsc = 0b100100 | fi->level;
    }
    break;
  case ARMFault_GPCFOnOutput:
    fsc = 0b101000;
    break;
  default:

    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                               918, ((const char *)(__func__)),
# 918 "../../../target/arm/internals.h" 3 4
                               ((void *)0)
# 918 "../../../target/arm/internals.h"
      );
    } while (0);
  }

  fsc |= 1 << 9;
  return fsc;
}

static inline
# 925 "../../../target/arm/internals.h" 3 4
    _Bool
# 925 "../../../target/arm/internals.h"
    arm_extabort_type(MemTxResult result) {

  return result != (1U << 1);
}

void arm_cpu_record_sigsegv(CPUState *cpu, vaddr addr,
                            MMUAccessType access_type,

# 938 "../../../target/arm/internals.h" 3 4
                            _Bool
# 938 "../../../target/arm/internals.h"
                                maperr,
                            uintptr_t ra);
void arm_cpu_record_sigbus(CPUState *cpu, vaddr addr, MMUAccessType access_type,
                           uintptr_t ra);

static inline int arm_to_core_mmu_idx(ARMMMUIdx mmu_idx) {
  return mmu_idx & 0xf;
}

static inline ARMMMUIdx core_to_arm_mmu_idx(CPUARMState *env, int mmu_idx) {
  if (arm_feature(env, ARM_FEATURE_M)) {
    return mmu_idx | 0x40;
  } else {
    return mmu_idx | 0x10;
  }
}

static inline ARMMMUIdx core_to_aa64_mmu_idx(int mmu_idx) {

  return mmu_idx | 0x10;
}

int arm_mmu_idx_to_el(ARMMMUIdx mmu_idx);

ARMMMUIdx arm_v7m_mmu_idx_for_secstate(CPUARMState *env,
# 970 "../../../target/arm/internals.h" 3 4
                                       _Bool
# 970 "../../../target/arm/internals.h"
                                           secstate);

# 976 "../../../target/arm/internals.h" 3 4
_Bool
# 976 "../../../target/arm/internals.h"
    arm_s1_regime_using_lpae_format(CPUARMState *env, ARMMMUIdx mmu_idx);

__attribute__((__noreturn__)) void
arm_cpu_do_unaligned_access(CPUState *cs, vaddr vaddr,
                            MMUAccessType access_type, int mmu_idx,
                            uintptr_t retaddr);
# 996 "../../../target/arm/internals.h"
static inline void arm_call_pre_el_change_hook(ARMCPU *cpu) {
  ARMELChangeHook *hook, *next;
  for ((hook) = ((&cpu->pre_el_change_hooks)->lh_first);
       (hook) && ((next) = ((hook)->node.le_next), 1); (hook) = (next)) {
    hook->hook(cpu, hook->opaque);
  }
}
static inline void arm_call_el_change_hook(ARMCPU *cpu) {
  ARMELChangeHook *hook, *next;
  for ((hook) = ((&cpu->el_change_hooks)->lh_first);
       (hook) && ((next) = ((hook)->node.le_next), 1); (hook) = (next)) {
    hook->hook(cpu, hook->opaque);
  }
}
# 1021 "../../../target/arm/internals.h"
static inline
# 1021 "../../../target/arm/internals.h" 3 4
    _Bool
# 1021 "../../../target/arm/internals.h"
    regime_has_2_ranges(ARMMMUIdx mmu_idx) {
  switch (mmu_idx) {
  case ARMMMUIdx_Stage1_E0:
  case ARMMMUIdx_Stage1_E1:
  case ARMMMUIdx_Stage1_E1_PAN:
  case ARMMMUIdx_E10_0:
  case ARMMMUIdx_E10_1:
  case ARMMMUIdx_E10_1_PAN:
  case ARMMMUIdx_E20_0:
  case ARMMMUIdx_E20_2:
  case ARMMMUIdx_E20_2_PAN:
    return
# 1033 "../../../target/arm/internals.h" 3 4
        1
# 1033 "../../../target/arm/internals.h"
        ;
  default:
    return
# 1035 "../../../target/arm/internals.h" 3 4
        0
# 1035 "../../../target/arm/internals.h"
        ;
  }
}

static inline
# 1039 "../../../target/arm/internals.h" 3 4
    _Bool
# 1039 "../../../target/arm/internals.h"
    regime_is_pan(CPUARMState *env, ARMMMUIdx mmu_idx) {
  switch (mmu_idx) {
  case ARMMMUIdx_Stage1_E1_PAN:
  case ARMMMUIdx_E10_1_PAN:
  case ARMMMUIdx_E20_2_PAN:
  case ARMMMUIdx_E30_3_PAN:
    return
# 1046 "../../../target/arm/internals.h" 3 4
        1
# 1046 "../../../target/arm/internals.h"
        ;
  default:
    return
# 1048 "../../../target/arm/internals.h" 3 4
        0
# 1048 "../../../target/arm/internals.h"
        ;
  }
}

static inline
# 1052 "../../../target/arm/internals.h" 3 4
    _Bool
# 1052 "../../../target/arm/internals.h"
    regime_is_stage2(ARMMMUIdx mmu_idx) {
  return mmu_idx == ARMMMUIdx_Stage2 || mmu_idx == ARMMMUIdx_Stage2_S;
}

static inline uint32_t regime_el(CPUARMState *env, ARMMMUIdx mmu_idx) {
  switch (mmu_idx) {
  case ARMMMUIdx_E20_0:
  case ARMMMUIdx_E20_2:
  case ARMMMUIdx_E20_2_PAN:
  case ARMMMUIdx_Stage2:
  case ARMMMUIdx_Stage2_S:
  case ARMMMUIdx_E2:
    return 2;
  case ARMMMUIdx_E3:
  case ARMMMUIdx_E30_0:
  case ARMMMUIdx_E30_3_PAN:
    return 3;
  case ARMMMUIdx_E10_0:
  case ARMMMUIdx_Stage1_E0:
  case ARMMMUIdx_Stage1_E1:
  case ARMMMUIdx_Stage1_E1_PAN:
  case ARMMMUIdx_E10_1:
  case ARMMMUIdx_E10_1_PAN:
  case ARMMMUIdx_MPrivNegPri:
  case ARMMMUIdx_MUserNegPri:
  case ARMMMUIdx_MPriv:
  case ARMMMUIdx_MUser:
  case ARMMMUIdx_MSPrivNegPri:
  case ARMMMUIdx_MSUserNegPri:
  case ARMMMUIdx_MSPriv:
  case ARMMMUIdx_MSUser:
    return 1;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                               1088, ((const char *)(__func__)),
# 1088 "../../../target/arm/internals.h" 3 4
                               ((void *)0)
# 1088 "../../../target/arm/internals.h"
      );
    } while (0);
  }
}

static inline
# 1092 "../../../target/arm/internals.h" 3 4
    _Bool
# 1092 "../../../target/arm/internals.h"
    regime_is_user(CPUARMState *env, ARMMMUIdx mmu_idx) {
  switch (mmu_idx) {
  case ARMMMUIdx_E10_0:
  case ARMMMUIdx_E20_0:
  case ARMMMUIdx_E30_0:
  case ARMMMUIdx_Stage1_E0:
  case ARMMMUIdx_MUser:
  case ARMMMUIdx_MSUser:
  case ARMMMUIdx_MUserNegPri:
  case ARMMMUIdx_MSUserNegPri:
    return
# 1103 "../../../target/arm/internals.h" 3 4
        1
# 1103 "../../../target/arm/internals.h"
        ;
  default:
    return
# 1105 "../../../target/arm/internals.h" 3 4
        0
# 1105 "../../../target/arm/internals.h"
        ;
  }
}

static inline uint64_t regime_sctlr(CPUARMState *env, ARMMMUIdx mmu_idx) {
  return env->cp15.sctlr_el[regime_el(env, mmu_idx)];
}
# 1126 "../../../target/arm/internals.h"
static inline uint64_t regime_tcr(CPUARMState *env, ARMMMUIdx mmu_idx) {
  if (mmu_idx == ARMMMUIdx_Stage2) {
    return env->cp15.vtcr_el2;
  }
  if (mmu_idx == ARMMMUIdx_Stage2_S) {
# 1140 "../../../target/arm/internals.h"
    uint64_t v = env->cp15.vstcr_el2 &
                 ~(R_VTCR_IRGN0_MASK | R_VTCR_ORGN0_MASK | R_VTCR_SH0_MASK |
                   R_VTCR_PS_MASK | R_VTCR_VS_MASK | R_VTCR_HA_MASK |
                   R_VTCR_HD_MASK | R_VTCR_DS_MASK);
    v |= env->cp15.vtcr_el2 &
         (R_VTCR_IRGN0_MASK | R_VTCR_ORGN0_MASK | R_VTCR_SH0_MASK |
          R_VTCR_PS_MASK | R_VTCR_VS_MASK | R_VTCR_HA_MASK | R_VTCR_HD_MASK |
          R_VTCR_DS_MASK);
    return v;
  }
  return env->cp15.tcr_el[regime_el(env, mmu_idx)];
}

static inline
# 1148 "../../../target/arm/internals.h" 3 4
    _Bool
# 1148 "../../../target/arm/internals.h"
    regime_using_lpae_format(CPUARMState *env, ARMMMUIdx mmu_idx) {
  int el = regime_el(env, mmu_idx);
  if (el == 2 || arm_el_is_aa64(env, el)) {
    return
# 1152 "../../../target/arm/internals.h" 3 4
        1
# 1152 "../../../target/arm/internals.h"
        ;
  }
  if (arm_feature(env, ARM_FEATURE_PMSA) && arm_feature(env, ARM_FEATURE_V8)) {
    return
# 1156 "../../../target/arm/internals.h" 3 4
        1
# 1156 "../../../target/arm/internals.h"
        ;
  }
  if (arm_feature(env, ARM_FEATURE_LPAE) &&
      (regime_tcr(env, mmu_idx) & (1U << 31))) {
    return
# 1160 "../../../target/arm/internals.h" 3 4
        1
# 1160 "../../../target/arm/internals.h"
        ;
  }
  return
# 1162 "../../../target/arm/internals.h" 3 4
      0
# 1162 "../../../target/arm/internals.h"
      ;
}

static inline int arm_num_brps(ARMCPU *cpu) {
  if (arm_feature(&cpu->env, ARM_FEATURE_AARCH64)) {
    return extract64((cpu->isar.id_aa64dfr0), R_ID_AA64DFR0_BRPS_SHIFT,
                     R_ID_AA64DFR0_BRPS_LENGTH) +
           1;
  } else {
    return extract32((cpu->isar.dbgdidr), R_DBGDIDR_BRPS_SHIFT,
                     R_DBGDIDR_BRPS_LENGTH) +
           1;
  }
}

static inline int arm_num_wrps(ARMCPU *cpu) {
  if (arm_feature(&cpu->env, ARM_FEATURE_AARCH64)) {
    return extract64((cpu->isar.id_aa64dfr0), R_ID_AA64DFR0_WRPS_SHIFT,
                     R_ID_AA64DFR0_WRPS_LENGTH) +
           1;
  } else {
    return extract32((cpu->isar.dbgdidr), R_DBGDIDR_WRPS_SHIFT,
                     R_DBGDIDR_WRPS_LENGTH) +
           1;
  }
}

static inline int arm_num_ctx_cmps(ARMCPU *cpu) {
  if (arm_feature(&cpu->env, ARM_FEATURE_AARCH64)) {
    return extract64((cpu->isar.id_aa64dfr0), R_ID_AA64DFR0_CTX_CMPS_SHIFT,
                     R_ID_AA64DFR0_CTX_CMPS_LENGTH) +
           1;
  } else {
    return extract32((cpu->isar.dbgdidr), R_DBGDIDR_CTX_CMPS_SHIFT,
                     R_DBGDIDR_CTX_CMPS_LENGTH) +
           1;
  }
}

static inline
# 1212 "../../../target/arm/internals.h" 3 4
    _Bool
# 1212 "../../../target/arm/internals.h"
    v7m_using_psp(CPUARMState *env) {

  return !arm_v7m_is_handler_mode(env) &&
         env->v7m.control[env->v7m.secure] & R_V7M_CONTROL_SPSEL_MASK;
}

static inline uint32_t v7m_sp_limit(CPUARMState *env) {
  if (v7m_using_psp(env)) {
    return env->v7m.psplim[env->v7m.secure];
  } else {
    return env->v7m.msplim[env->v7m.secure];
  }
}

static inline
# 1242 "../../../target/arm/internals.h" 3 4
    _Bool
# 1242 "../../../target/arm/internals.h"
    v7m_cpacr_pass(CPUARMState *env,

# 1243 "../../../target/arm/internals.h" 3 4
                   _Bool
# 1243 "../../../target/arm/internals.h"
                       is_secure,
# 1243 "../../../target/arm/internals.h" 3 4
                   _Bool
# 1243 "../../../target/arm/internals.h"
                       is_priv) {
  switch (extract32(env->v7m.cpacr[is_secure], 20, 2)) {
  case 0:
  case 2:
    return
# 1248 "../../../target/arm/internals.h" 3 4
        0
# 1248 "../../../target/arm/internals.h"
        ;
  case 1:
    return is_priv;
  case 3:
    return
# 1252 "../../../target/arm/internals.h" 3 4
        1
# 1252 "../../../target/arm/internals.h"
        ;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                               1254, ((const char *)(__func__)),
# 1254 "../../../target/arm/internals.h" 3 4
                               ((void *)0)
# 1254 "../../../target/arm/internals.h"
      );
    } while (0);
  }
}
# 1266 "../../../target/arm/internals.h"
static inline const char *aarch32_mode_name(uint32_t psr) {
  static const char cpu_mode_names[16][4] = {
      "usr", "fiq", "irq", "svc", "???", "???", "mon", "abt",
      "???", "???", "hyp", "und", "???", "???", "???", "sys"};

  return cpu_mode_names[psr & 0xf];
}
# 1283 "../../../target/arm/internals.h"
void arm_cpu_update_virq(ARMCPU *cpu);
# 1292 "../../../target/arm/internals.h"
void arm_cpu_update_vfiq(ARMCPU *cpu);
# 1301 "../../../target/arm/internals.h"
void arm_cpu_update_vinmi(ARMCPU *cpu);
# 1310 "../../../target/arm/internals.h"
void arm_cpu_update_vfnmi(ARMCPU *cpu);

void arm_cpu_update_vserr(ARMCPU *cpu);
# 1327 "../../../target/arm/internals.h"
ARMMMUIdx arm_mmu_idx_el(CPUARMState *env, int el);

ARMMMUIdx arm_mmu_idx(CPUARMState *env);
# 1344 "../../../target/arm/internals.h"
static inline ARMMMUIdx stage_1_mmu_idx(ARMMMUIdx mmu_idx) {
  return ARMMMUIdx_Stage1_E0;
}
static inline ARMMMUIdx arm_stage1_mmu_idx(CPUARMState *env) {
  return ARMMMUIdx_Stage1_E0;
}
# 1364 "../../../target/arm/internals.h"
static inline
# 1364 "../../../target/arm/internals.h" 3 4
    _Bool
# 1364 "../../../target/arm/internals.h"
    arm_mmu_idx_is_stage1_of_2(ARMMMUIdx mmu_idx) {
  switch (mmu_idx) {
  case ARMMMUIdx_Stage1_E0:
  case ARMMMUIdx_Stage1_E1:
  case ARMMMUIdx_Stage1_E1_PAN:
    return
# 1370 "../../../target/arm/internals.h" 3 4
        1
# 1370 "../../../target/arm/internals.h"
        ;
  default:
    return
# 1372 "../../../target/arm/internals.h" 3 4
        0
# 1372 "../../../target/arm/internals.h"
        ;
  }
}

static inline uint32_t aarch32_cpsr_valid_mask(uint64_t features,
                                               const ARMISARegisters *id) {
  uint32_t valid = (0x1fU) | ((1U << 8) | (1U << 7) | (1U << 6)) | (1U << 20) |
                   ((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28));

  if ((features >> ARM_FEATURE_V4T) & 1) {
    valid |= (1U << 5);
  }
  if ((features >> ARM_FEATURE_V5) & 1) {
    valid |= (1U << 27);
  }
  if ((features >> ARM_FEATURE_V6) & 1) {
    valid |= (1U << 9) | (0xfU << 16);
  }
  if ((features >> ARM_FEATURE_THUMB2) & 1) {
    valid |= ((3U << 25) | (0xfc00U));
  }
  if (isar_feature_aa32_jazelle(id)) {
    valid |= (1U << 24);
  }
  if (isar_feature_aa32_pan(id)) {
    valid |= (1U << 22);
  }
  if (isar_feature_aa32_dit(id)) {
    valid |= (1U << 21);
  }
  if (isar_feature_aa32_ssbs(id)) {
    valid |= (1U << 23);
  }

  return valid;
}

static inline uint32_t aarch64_pstate_valid_mask(const ARMISARegisters *id) {
  uint32_t valid;

  valid = (0xFU) | ((1U << 9) | (1U << 8) | (1U << 7) | (1U << 6)) |
          (1U << 20) | (1U << 21) |
          ((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28));
  if (isar_feature_aa64_bti(id)) {
    valid |= (3U << 10);
  }
  if (isar_feature_aa64_pan(id)) {
    valid |= (1U << 22);
  }
  if (isar_feature_aa64_uao(id)) {
    valid |= (1U << 23);
  }
  if (isar_feature_aa64_dit(id)) {
    valid |= (1U << 24);
  }
  if (isar_feature_aa64_ssbs(id)) {
    valid |= (1U << 12);
  }
  if (isar_feature_aa64_mte(id)) {
    valid |= (1U << 25);
  }
  if (isar_feature_aa64_nmi(id)) {
    valid |= (1U << 13);
  }

  return valid;
}

typedef enum ARMGranuleSize {

  Gran4K,
  Gran64K,
  Gran16K,
  GranInvalid,
} ARMGranuleSize;

static inline int arm_granule_bits(ARMGranuleSize gran) {
  switch (gran) {
  case Gran64K:
    return 16;
  case Gran16K:
    return 14;
  case Gran4K:
    return 12;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/internals.h",
                               1464, ((const char *)(__func__)),
# 1464 "../../../target/arm/internals.h" 3 4
                               ((void *)0)
# 1464 "../../../target/arm/internals.h"
      );
    } while (0);
  }
}

typedef struct ARMVAParameters {
  unsigned tsz : 8;
  unsigned ps : 3;
  unsigned sh : 2;
  unsigned select : 1;

# 1477 "../../../target/arm/internals.h" 3 4
  _Bool
# 1477 "../../../target/arm/internals.h"
      tbi : 1;

# 1478 "../../../target/arm/internals.h" 3 4
  _Bool
# 1478 "../../../target/arm/internals.h"
      epd : 1;

# 1479 "../../../target/arm/internals.h" 3 4
  _Bool
# 1479 "../../../target/arm/internals.h"
      hpd : 1;

# 1480 "../../../target/arm/internals.h" 3 4
  _Bool
# 1480 "../../../target/arm/internals.h"
      tsz_oob : 1;

# 1481 "../../../target/arm/internals.h" 3 4
  _Bool
# 1481 "../../../target/arm/internals.h"
      ds : 1;

# 1482 "../../../target/arm/internals.h" 3 4
  _Bool
# 1482 "../../../target/arm/internals.h"
      ha : 1;

# 1483 "../../../target/arm/internals.h" 3 4
  _Bool
# 1483 "../../../target/arm/internals.h"
      hd : 1;
  ARMGranuleSize gran : 2;
} ARMVAParameters;
# 1496 "../../../target/arm/internals.h"
ARMVAParameters aa64_va_parameters(CPUARMState *env, uint64_t va,
                                   ARMMMUIdx mmu_idx,
# 1497 "../../../target/arm/internals.h" 3 4
                                   _Bool
# 1497 "../../../target/arm/internals.h"
                                       data,

# 1498 "../../../target/arm/internals.h" 3 4
                                   _Bool
# 1498 "../../../target/arm/internals.h"
                                       el1_is_aa32);

int aa64_va_parameter_tbi(uint64_t tcr, ARMMMUIdx mmu_idx);
int aa64_va_parameter_tbid(uint64_t tcr, ARMMMUIdx mmu_idx);
int aa64_va_parameter_tcma(uint64_t tcr, ARMMMUIdx mmu_idx);

static inline
# 1505 "../../../target/arm/internals.h" 3 4
    _Bool
# 1505 "../../../target/arm/internals.h"
    allocation_tag_access_enabled(CPUARMState *env, int el, uint64_t sctlr) {
  if (el < 3 && arm_feature(env, ARM_FEATURE_EL3) &&
      !(env->cp15.scr_el3 & (1ULL << 26))) {
    return
# 1511 "../../../target/arm/internals.h" 3 4
        0
# 1511 "../../../target/arm/internals.h"
        ;
  }
  if (el < 2 && arm_is_el2_enabled(env)) {
    uint64_t hcr = arm_hcr_el2_eff(env);
    if (!(hcr & (1ULL << 56)) &&
        (!(hcr & (1ULL << 34)) || !(hcr & (1ULL << 27)))) {
      return
# 1516 "../../../target/arm/internals.h" 3 4
          0
# 1516 "../../../target/arm/internals.h"
          ;
    }
  }
  sctlr &= (el == 0 ? (1ULL << 42) : (1ULL << 43));
  return sctlr != 0;
}
# 1621 "../../../target/arm/internals.h"
enum { R_PREDDESC_OPRSZ_SHIFT = (0) };
enum { R_PREDDESC_OPRSZ_LENGTH = (6) };
enum { R_PREDDESC_OPRSZ_MASK = (((~0ULL) >> (64 - (6))) << (0)) };
enum { R_PREDDESC_ESZ_SHIFT = (6) };
enum { R_PREDDESC_ESZ_LENGTH = (2) };
enum { R_PREDDESC_ESZ_MASK = (((~0ULL) >> (64 - (2))) << (6)) };
enum { R_PREDDESC_DATA_SHIFT = (8) };
enum { R_PREDDESC_DATA_LENGTH = (24) };
enum { R_PREDDESC_DATA_MASK = (((~0ULL) >> (64 - (24))) << (8)) };
# 1632 "../../../target/arm/internals.h"
enum { R_MTEDESC_MIDX_SHIFT = (0) };
enum { R_MTEDESC_MIDX_LENGTH = (4) };
enum { R_MTEDESC_MIDX_MASK = (((~0ULL) >> (64 - (4))) << (0)) };
enum { R_MTEDESC_TBI_SHIFT = (4) };
enum { R_MTEDESC_TBI_LENGTH = (2) };
enum { R_MTEDESC_TBI_MASK = (((~0ULL) >> (64 - (2))) << (4)) };
enum { R_MTEDESC_TCMA_SHIFT = (6) };
enum { R_MTEDESC_TCMA_LENGTH = (2) };
enum { R_MTEDESC_TCMA_MASK = (((~0ULL) >> (64 - (2))) << (6)) };
enum { R_MTEDESC_WRITE_SHIFT = (8) };
enum { R_MTEDESC_WRITE_LENGTH = (1) };
enum { R_MTEDESC_WRITE_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_MTEDESC_ALIGN_SHIFT = (9) };
enum { R_MTEDESC_ALIGN_LENGTH = (3) };
enum { R_MTEDESC_ALIGN_MASK = (((~0ULL) >> (64 - (3))) << (9)) };
enum { R_MTEDESC_SIZEM1_SHIFT = (12) };
enum { R_MTEDESC_SIZEM1_LENGTH = ((32 - ((0 + 8) + 2)) - 5 - 12) };
enum {
  R_MTEDESC_SIZEM1_MASK =
      (((~0ULL) >> (64 - ((32 - ((0 + 8) + 2)) - 5 - 12))) << (12))
};

# 1639 "../../../target/arm/internals.h" 3 4
_Bool
# 1639 "../../../target/arm/internals.h"
    mte_probe(CPUARMState *env, uint32_t desc, uint64_t ptr);
uint64_t mte_check(CPUARMState *env, uint32_t desc, uint64_t ptr, uintptr_t ra);
# 1655 "../../../target/arm/internals.h"
uint64_t mte_mops_probe(CPUARMState *env, uint64_t ptr, uint64_t size,
                        uint32_t desc);
# 1672 "../../../target/arm/internals.h"
uint64_t mte_mops_probe_rev(CPUARMState *env, uint64_t ptr, uint64_t size,
                            uint32_t desc);
# 1684 "../../../target/arm/internals.h"
void mte_check_fail(CPUARMState *env, uint32_t desc, uint64_t dirty_ptr,
                    uintptr_t ra);
# 1694 "../../../target/arm/internals.h"
void mte_mops_set_tags(CPUARMState *env, uint64_t dirty_ptr, uint64_t size,
                       uint32_t desc);

static inline int allocation_tag_from_addr(uint64_t ptr) {
  return extract64(ptr, 56, 4);
}

static inline uint64_t address_with_allocation_tag(uint64_t ptr, int rtag) {
  return deposit64(ptr, 56, 4, rtag);
}

static inline
# 1708 "../../../target/arm/internals.h" 3 4
    _Bool
# 1708 "../../../target/arm/internals.h"
    tbi_check(uint32_t desc, int bit55) {
  return (desc >> (R_MTEDESC_TBI_SHIFT + bit55)) & 1;
}

static inline
# 1714 "../../../target/arm/internals.h" 3 4
    _Bool
# 1714 "../../../target/arm/internals.h"
    tcma_check(uint32_t desc, int bit55, int ptr_tag) {

# 1720 "../../../target/arm/internals.h" 3 4
  _Bool
# 1720 "../../../target/arm/internals.h"
      match = ((ptr_tag + bit55) & 0xf) == 0;

# 1721 "../../../target/arm/internals.h" 3 4
  _Bool
# 1721 "../../../target/arm/internals.h"
      tcma = (desc >> (R_MTEDESC_TCMA_SHIFT + bit55)) & 1;
  return tcma && match;
}

static inline uint64_t useronly_clean_ptr(uint64_t ptr) {

  ptr &= sextract64(ptr, 0, 56);

  return ptr;
}

static inline uint64_t useronly_maybe_clean_ptr(uint32_t desc, uint64_t ptr) {

  int64_t clean_ptr = sextract64(ptr, 0, 56);
  if (tbi_check(desc, clean_ptr < 0)) {
    ptr = clean_ptr;
  }

  return ptr;
}

enum MVEECIState {
  ECI_NONE = 0,
  ECI_A0 = 1,
  ECI_A0A1 = 2,

  ECI_A0A1A2 = 4,
  ECI_A0A1A2B0 = 5,

};
# 1796 "../../../target/arm/internals.h"
static inline uint32_t pmu_num_counters(CPUARMState *env) {
  ARMCPU *cpu = env_archcpu(env);

  return (cpu->isar.reset_pmcr_el0 & 0xf800) >> 11;
}

static inline uint64_t pmu_counter_mask(CPUARMState *env) {
  return (1ULL << 31) | ((1ULL << pmu_num_counters(env)) - 1);
}
# 1830 "../../../target/arm/internals.h"
uint32_t arm_v7m_mrs_control(CPUARMState *env, uint32_t secure);
# 1839 "../../../target/arm/internals.h"
uint32_t *arm_v7m_get_sp_ptr(CPUARMState *env,
# 1839 "../../../target/arm/internals.h" 3 4
                             _Bool
# 1839 "../../../target/arm/internals.h"
                                 secure,

# 1840 "../../../target/arm/internals.h" 3 4
                             _Bool
# 1840 "../../../target/arm/internals.h"
                                 threadmode,
# 1840 "../../../target/arm/internals.h" 3 4
                             _Bool
# 1840 "../../../target/arm/internals.h"
                                 spsel);

# 1842 "../../../target/arm/internals.h" 3 4
_Bool
# 1842 "../../../target/arm/internals.h"
    el_is_in_host(CPUARMState *env, int el);

void aa32_max_features(ARMCPU *cpu);
int exception_target_el(CPUARMState *env);

# 1846 "../../../target/arm/internals.h" 3 4
_Bool
# 1846 "../../../target/arm/internals.h"
    arm_singlestep_active(CPUARMState *env);

# 1847 "../../../target/arm/internals.h" 3 4
_Bool
# 1847 "../../../target/arm/internals.h"
    arm_generate_debug_exceptions(CPUARMState *env);
# 1856 "../../../target/arm/internals.h"
static inline uint64_t pauth_ptr_mask(ARMVAParameters param) {
  int bot_pac_bit = 64 - param.tsz;
  int top_pac_bit = 64 - 8 * param.tbi;

  return (((~0ULL) >> (64 - (top_pac_bit - bot_pac_bit))) << (bot_pac_bit));
}

void define_debug_regs(ARMCPU *cpu);

void define_tlb_insn_regs(ARMCPU *cpu);

static inline uint64_t arm_mdcr_el2_eff(CPUARMState *env) {
  return arm_is_el2_enabled(env) ? env->cp15.mdcr_el2 : 0;
}
# 1884 "../../../target/arm/internals.h"
static inline
# 1884 "../../../target/arm/internals.h" 3 4
    _Bool
# 1884 "../../../target/arm/internals.h"
    arm_fgt_active(CPUARMState *env, int el) {
# 1894 "../../../target/arm/internals.h"
  return ({
           ARMCPU *cpu_ = (env_archcpu(env));
           isar_feature_aa64_fgt(&cpu_->isar);
         }) &&
         el < 2 && arm_is_el2_enabled(env) && arm_el_is_aa64(env, 1) &&
         (arm_hcr_el2_eff(env) & ((1ULL << 34) | (1ULL << 27))) !=
             ((1ULL << 34) | (1ULL << 27)) &&
         (!arm_feature(env, ARM_FEATURE_EL3) ||
          (env->cp15.scr_el3 & (1ULL << 27)));
}

void assert_hflags_rebuild_correctly(CPUARMState *env);
# 1918 "../../../target/arm/internals.h"
typedef struct {
  uint64_t bcr;
  uint64_t bvr;
} HWBreakpoint;

typedef struct {
  uint64_t wcr;
  uint64_t wvr;
  CPUWatchpoint details;
} HWWatchpoint;

extern int max_hw_bps, max_hw_wps;
extern GArray *hw_breakpoints, *hw_watchpoints;

# 1944 "../../../target/arm/internals.h" 3 4
_Bool
# 1944 "../../../target/arm/internals.h"
    find_hw_breakpoint(CPUState *cpu, target_ulong pc);
int insert_hw_breakpoint(target_ulong pc);
int delete_hw_breakpoint(target_ulong pc);

# 1948 "../../../target/arm/internals.h" 3 4
_Bool
# 1948 "../../../target/arm/internals.h"
    check_watchpoint_in_range(int i, target_ulong addr);
CPUWatchpoint *find_hw_watchpoint(CPUState *cpu, target_ulong addr);
int insert_hw_watchpoint(target_ulong addr, target_ulong len, int type);
int delete_hw_watchpoint(target_ulong addr, target_ulong len, int type);

uint64_t gt_get_countervalue(CPUARMState *env);

uint64_t gt_direct_access_timer_offset(CPUARMState *env, int timeridx);

int alle1_tlbmask(CPUARMState *env);

void arm_set_default_fp_behaviours(float_status *s);

void arm_set_ah_fp_behaviours(float_status *s);

uint32_t vfp_get_fpsr_from_host(CPUARMState *env);

void vfp_clear_float_status_exc_flags(CPUARMState *env);

void vfp_set_fpcr_to_host(CPUARMState *env, uint32_t val, uint32_t mask);
# 14 "../../../target/arm/helper.c" 2

# 1 "/home/paulning/study/qemu/include/exec/helper-proto.h" 1
# 10 "/home/paulning/study/qemu/include/exec/helper-proto.h"
# 1 "/home/paulning/study/qemu/include/exec/helper-proto-common.h" 1
# 10 "/home/paulning/study/qemu/include/exec/helper-proto-common.h"
# 1 "/home/paulning/study/qemu/include/qemu/atomic128.h" 1
# 62 "/home/paulning/study/qemu/include/qemu/atomic128.h"
# 1 "/home/paulning/study/qemu/host/include/generic/host/atomic128-cas.h.inc" 1
# 28 "/home/paulning/study/qemu/host/include/generic/host/atomic128-cas.h.inc"
static inline Int128 atomic16_cmpxchg(Int128 *ptr, Int128 cmp, Int128 new) {
  Int128Aligned *ptr_align = __builtin_assume_aligned(ptr, 16);
  Int128Alias r, c, n;

  c.s = cmp;
  n.s = new;
  r.i = __sync_val_compare_and_swap_16(ptr_align, c.i, n.i);
  return r.s;
}
# 63 "/home/paulning/study/qemu/include/qemu/atomic128.h" 2
# 1 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 1
# 15 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
# 1 "/home/paulning/study/qemu/host/include/x86_64/host/cpuinfo.h" 1
# 1 "/home/paulning/study/qemu/host/include/i386/host/cpuinfo.h" 1
# 32 "/home/paulning/study/qemu/host/include/i386/host/cpuinfo.h"
extern unsigned cpuinfo;

unsigned cpuinfo_init(void);
# 2 "/home/paulning/study/qemu/host/include/x86_64/host/cpuinfo.h" 2
# 16 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 1 3 4
# 27 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("general-regs-only")

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/ia32intrin.h" 1 3 4
# 29 "/usr/lib/gcc/x86_64-linux-gnu/13/include/ia32intrin.h" 3 4

# 29 "/usr/lib/gcc/x86_64-linux-gnu/13/include/ia32intrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsfd(int __X) {
  return __builtin_ctz(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsrd(int __X) {
  return __builtin_ia32_bsrsi(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bswapd(int __X) {
  return __builtin_bswap32(__X);
}

#pragma GCC push_options
#pragma GCC target("crc32")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32b(unsigned int __C, unsigned char __V) {
  return __builtin_ia32_crc32qi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32w(unsigned int __C, unsigned short __V) {
  return __builtin_ia32_crc32hi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32d(unsigned int __C, unsigned int __V) {
  return __builtin_ia32_crc32si(__C, __V);
}

#pragma GCC pop_options

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __popcntd(unsigned int __X) {
  return __builtin_popcount(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdpmc(int __S) {
  return __builtin_ia32_rdpmc(__S);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdtsc(void) {
  return __builtin_ia32_rdtsc();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdtscp(unsigned int *__A) {
  return __builtin_ia32_rdtscp(__A);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolb(unsigned char __X, int __C) {
  return __builtin_ia32_rolqi(__X, __C);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolw(unsigned short __X, int __C) {
  return __builtin_ia32_rolhi(__X, __C);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rold(unsigned int __X, int __C) {
  __C &= 31;
  return (__X << __C) | (__X >> (-__C & 31));
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorb(unsigned char __X, int __C) {
  return __builtin_ia32_rorqi(__X, __C);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorw(unsigned short __X, int __C) {
  return __builtin_ia32_rorhi(__X, __C);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rord(unsigned int __X, int __C) {
  __C &= 31;
  return (__X >> __C) | (__X << (-__C & 31));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __pause(void) {
  __builtin_ia32_pause();
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsfq(long long __X) {
  return __builtin_ctzll(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsrq(long long __X) {
  return __builtin_ia32_bsrdi(__X);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bswapq(long long __X) {
  return __builtin_bswap64(__X);
}

#pragma GCC push_options
#pragma GCC target("crc32")

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32q(unsigned long long __C, unsigned long long __V) {
  return __builtin_ia32_crc32di(__C, __V);
}

#pragma GCC pop_options

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __popcntq(unsigned long long __X) {
  return __builtin_popcountll(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolq(unsigned long long __X, int __C) {
  __C &= 63;
  return (__X << __C) | (__X >> (-__C & 63));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorq(unsigned long long __X, int __C) {
  __C &= 63;
  return (__X >> __C) | (__X << (-__C & 63));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __readeflags(void) {
  return __builtin_ia32_readeflags_u64();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __writeeflags(unsigned long long __X) {
  __builtin_ia32_writeeflags_u64(__X);
}
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/stddef.h" 1 3 4
# 38 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/adxintrin.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/13/include/adxintrin.h" 3 4
extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _subborrow_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                   unsigned int *__P) {
  return __builtin_ia32_sbb_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarry_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                  unsigned int *__P) {
  return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarryx_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                   unsigned int *__P) {
  return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _subborrow_u64(unsigned char __CF, unsigned long long __X,
                   unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_sbb_u64(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarry_u64(unsigned char __CF, unsigned long long __X,
                  unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarryx_u64(unsigned char __CF, unsigned long long __X,
                   unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P);
}
# 40 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/bmiintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/bmiintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("bmi")

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u16(unsigned short __X) {
  return __builtin_ia32_tzcnt_u16(__X);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tzcnt_u16(unsigned short __X) {
  return __builtin_ia32_tzcnt_u16(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __andn_u32(unsigned int __X, unsigned int __Y) {
  return ~__X & __Y;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _andn_u32(unsigned int __X, unsigned int __Y) {
  return __andn_u32(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextr_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_bextr_u32(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bextr_u32(unsigned int __X, unsigned int __Y, unsigned __Z) {
  return __builtin_ia32_bextr_u32(__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsi_u32(unsigned int __X) {
  return __X & -__X;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsi_u32(unsigned int __X) {
  return __blsi_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsmsk_u32(unsigned int __X) {
  return __X ^ (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsmsk_u32(unsigned int __X) {
  return __blsmsk_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsr_u32(unsigned int __X) {
  return __X & (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsr_u32(unsigned int __X) {
  return __blsr_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u32(unsigned int __X) {
  return __builtin_ia32_tzcnt_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tzcnt_u32(unsigned int __X) {
  return __builtin_ia32_tzcnt_u32(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __andn_u64(unsigned long long __X, unsigned long long __Y) {
  return ~__X & __Y;
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _andn_u64(unsigned long long __X, unsigned long long __Y) {
  return __andn_u64(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextr_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_bextr_u64(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bextr_u64(unsigned long long __X, unsigned int __Y, unsigned int __Z) {
  return __builtin_ia32_bextr_u64(__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsi_u64(unsigned long long __X) {
  return __X & -__X;
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsi_u64(unsigned long long __X) {
  return __blsi_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsmsk_u64(unsigned long long __X) {
  return __X ^ (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsmsk_u64(unsigned long long __X) {
  return __blsmsk_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsr_u64(unsigned long long __X) {
  return __X & (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsr_u64(unsigned long long __X) {
  return __blsr_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_tzcnt_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_tzcnt_u64(__X);
}

#pragma GCC pop_options
# 42 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/bmi2intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/bmi2intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("bmi2")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bzhi_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_bzhi_si(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pdep_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_pdep_si(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pext_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_pext_si(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bzhi_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_bzhi_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pdep_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_pdep_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pext_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_pext_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mulx_u64(unsigned long long __X, unsigned long long __Y,
              unsigned long long *__P) {
  unsigned __int128 __res = (unsigned __int128)__X * __Y;
  *__P = (unsigned long long)(__res >> 64);
  return (unsigned long long)__res;
}
# 106 "/usr/lib/gcc/x86_64-linux-gnu/13/include/bmi2intrin.h" 3 4
#pragma GCC pop_options
# 44 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cetintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cetintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("shstk")

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _get_ssp(void) {
  return __builtin_ia32_rdsspq();
}
# 53 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cetintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _inc_ssp(unsigned int __B) {

  __builtin_ia32_incsspq((unsigned long long)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _saveprevssp(void) {
  __builtin_ia32_saveprevssp();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rstorssp(void *__B) {
  __builtin_ia32_rstorssp(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrssd(unsigned int __B, void *__C) {
  __builtin_ia32_wrssd(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrssq(unsigned long long __B, void *__C) {
  __builtin_ia32_wrssq(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrussd(unsigned int __B, void *__C) {
  __builtin_ia32_wrussd(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrussq(unsigned long long __B, void *__C) {
  __builtin_ia32_wrussq(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _setssbsy(void) {
  __builtin_ia32_setssbsy();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _clrssbsy(void *__B) {
  __builtin_ia32_clrssbsy(__B);
}

#pragma GCC pop_options
# 46 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cldemoteintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cldemoteintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("cldemote")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cldemote(void *__A) {
  __builtin_ia32_cldemote(__A);
}

#pragma GCC pop_options
# 48 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clflushoptintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clflushoptintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("clflushopt")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clflushopt(void *__A) {
  __builtin_ia32_clflushopt(__A);
}

#pragma GCC pop_options
# 50 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clwbintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clwbintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("clwb")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clwb(void *__A) {
  __builtin_ia32_clwb(__A);
}

#pragma GCC pop_options
# 52 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clzerointrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/clzerointrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("clzero")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clzero(void *__I) {
  __builtin_ia32_clzero(__I);
}

#pragma GCC pop_options
# 54 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cmpccxaddintrin.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cmpccxaddintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("cmpccxadd")

typedef enum {
  _CMPCCX_O,
  _CMPCCX_NO,
  _CMPCCX_B,
  _CMPCCX_NB,
  _CMPCCX_Z,
  _CMPCCX_NZ,
  _CMPCCX_BE,
  _CMPCCX_NBE,
  _CMPCCX_S,
  _CMPCCX_NS,
  _CMPCCX_P,
  _CMPCCX_NP,
  _CMPCCX_L,
  _CMPCCX_NL,
  _CMPCCX_LE,
  _CMPCCX_NLE,
} _CMPCCX_ENUM;
# 84 "/usr/lib/gcc/x86_64-linux-gnu/13/include/cmpccxaddintrin.h" 3 4
#pragma GCC pop_options
# 56 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/enqcmdintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/enqcmdintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("enqcmd")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enqcmd(void *__P, const void *__Q) {
  return __builtin_ia32_enqcmd(__P, __Q);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enqcmds(void *__P, const void *__Q) {
  return __builtin_ia32_enqcmds(__P, __Q);
}

#pragma GCC pop_options
# 58 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/fxsrintrin.h" 1 3 4
# 37 "/usr/lib/gcc/x86_64-linux-gnu/13/include/fxsrintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxsave(void *__P) {
  __builtin_ia32_fxsave(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxrstor(void *__P) {
  __builtin_ia32_fxrstor(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxsave64(void *__P) {
  __builtin_ia32_fxsave64(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxrstor64(void *__P) {
  __builtin_ia32_fxrstor64(__P);
}
# 60 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/lzcntintrin.h" 1 3 4
# 33 "/usr/lib/gcc/x86_64-linux-gnu/13/include/lzcntintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("lzcnt")

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt16(unsigned short __X) {
  return __builtin_ia32_lzcnt_u16(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt32(unsigned int __X) {
  return __builtin_ia32_lzcnt_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _lzcnt_u32(unsigned int __X) {
  return __builtin_ia32_lzcnt_u32(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt64(unsigned long long __X) {
  return __builtin_ia32_lzcnt_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _lzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_lzcnt_u64(__X);
}

#pragma GCC pop_options
# 62 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/lwpintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/lwpintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("lwp")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __llwpcb(void *__pcbAddress) {
  __builtin_ia32_llwpcb(__pcbAddress);
}

extern __inline void *__attribute__((__gnu_inline__, __always_inline__,
                                     __artificial__))
__slwpcb(void) {
  return __builtin_ia32_slwpcb();
}
# 104 "/usr/lib/gcc/x86_64-linux-gnu/13/include/lwpintrin.h" 3 4
#pragma GCC pop_options
# 64 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/movdirintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/movdirintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("movdiri")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _directstoreu_u32(void *__P, unsigned int __A) {
  __builtin_ia32_directstoreu_u32((unsigned int *)__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _directstoreu_u64(void *__P, unsigned long long __A) {
  __builtin_ia32_directstoreu_u64((unsigned long long *)__P, __A);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("movdir64b")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _movdir64b(void *__P, const void *__Q) {
  __builtin_ia32_movdir64b(__P, __Q);
}

#pragma GCC pop_options
# 66 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mwaitintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mwaitintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("mwait")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_monitor(void const *__P, unsigned int __E, unsigned int __H) {
  __builtin_ia32_monitor(__P, __E, __H);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mwait(unsigned int __E, unsigned int __H) {
  __builtin_ia32_mwait(__E, __H);
}

#pragma GCC pop_options
# 68 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mwaitxintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mwaitxintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("mwaitx")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_monitorx(void const *__P, unsigned int __E, unsigned int __H) {
  __builtin_ia32_monitorx(__P, __E, __H);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mwaitx(unsigned int __E, unsigned int __H, unsigned int __C) {
  __builtin_ia32_mwaitx(__E, __H, __C);
}

#pragma GCC pop_options
# 70 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pconfigintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pconfigintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("pconfig")
# 49 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pconfigintrin.h" 3 4
extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pconfig_u32(const unsigned int __L, size_t __D[]) {
  enum __pconfig_type {
    __PCONFIG_KEY_PROGRAM = 0x01,
  };

  unsigned int __R = 0;

  if (!__builtin_constant_p(__L))
    __asm__ __volatile__("pconfig\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__L) {
    case __PCONFIG_KEY_PROGRAM:
      __asm__ __volatile__("pconfig\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("pconfig\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

#pragma GCC pop_options
# 72 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/popcntintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/popcntintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("popcnt")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_u32(unsigned int __X) {
  return __builtin_popcount(__X);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_u64(unsigned long long __X) {
  return __builtin_popcountll(__X);
}

#pragma GCC pop_options
# 74 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pkuintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pkuintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("pku")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdpkru_u32(void) {
  return __builtin_ia32_rdpkru();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrpkru(unsigned int __key) {
  __builtin_ia32_wrpkru(__key);
}

#pragma GCC pop_options
# 76 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/prfchiintrin.h" 1 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/prfchiintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("prefetchi")
# 65 "/usr/lib/gcc/x86_64-linux-gnu/13/include/prfchiintrin.h" 3 4
#pragma GCC pop_options
# 78 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/raointintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/raointintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("raoint")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aadd_i32(int *__A, int __B) {
  __builtin_ia32_aadd32((int *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aand_i32(int *__A, int __B) {
  __builtin_ia32_aand32((int *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aor_i32(int *__A, int __B) {
  __builtin_ia32_aor32((int *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _axor_i32(int *__A, int __B) {
  __builtin_ia32_axor32((int *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aadd_i64(long long *__A, long long __B) {
  __builtin_ia32_aadd64((long long *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aand_i64(long long *__A, long long __B) {
  __builtin_ia32_aand64((long long *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _aor_i64(long long *__A, long long __B) {
  __builtin_ia32_aor64((long long *)__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _axor_i64(long long *__A, long long __B) {
  __builtin_ia32_axor64((long long *)__A, __B);
}

#pragma GCC pop_options
# 80 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rdseedintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rdseedintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("rdseed")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed16_step(unsigned short *__p) {
  return __builtin_ia32_rdseed_hi_step(__p);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed32_step(unsigned int *__p) {
  return __builtin_ia32_rdseed_si_step(__p);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed64_step(unsigned long long *__p) {
  return __builtin_ia32_rdseed_di_step(__p);
}

#pragma GCC pop_options
# 82 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rtmintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rtmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("rtm")
# 48 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rtmintrin.h" 3 4
extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xbegin(void) {
  return __builtin_ia32_xbegin();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xend(void) {
  __builtin_ia32_xend();
}
# 81 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rtmintrin.h" 3 4
#pragma GCC pop_options
# 84 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/serializeintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/serializeintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("serialize")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _serialize(void) {
  __builtin_ia32_serialize();
}

#pragma GCC pop_options
# 86 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/sgxintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/sgxintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("sgx")
# 110 "/usr/lib/gcc/x86_64-linux-gnu/13/include/sgxintrin.h" 3 4
extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _encls_u32(const unsigned int __L, size_t __D[]) {
  enum __encls_type {
    __SGX_ECREATE = 0x00,
    __SGX_EADD = 0x01,
    __SGX_EINIT = 0x02,
    __SGX_EREMOVE = 0x03,
    __SGX_EDBGRD = 0x04,
    __SGX_EDBGWR = 0x05,
    __SGX_EEXTEND = 0x06,
    __SGX_ELDB = 0x07,
    __SGX_ELDU = 0x08,
    __SGX_EBLOCK = 0x09,
    __SGX_EPA = 0x0A,
    __SGX_EWB = 0x0B,
    __SGX_ETRACK = 0x0C,
    __SGX_EAUG = 0x0D,
    __SGX_EMODPR = 0x0E,
    __SGX_EMODT = 0x0F,
    __SGX_ERDINFO = 0x10,
    __SGX_ETRACKC = 0x11,
    __SGX_ELDBC = 0x12,
    __SGX_ELDUC = 0x13
  };
  enum __encls_type __T = (enum __encls_type)__L;
  unsigned int __R = 0;
  if (!__builtin_constant_p(__T))
    __asm__ __volatile__("encls\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__T) {
    case __SGX_ECREATE:
    case __SGX_EADD:
    case __SGX_EDBGWR:
    case __SGX_EEXTEND:
    case __SGX_EPA:
    case __SGX_EMODPR:
    case __SGX_EMODT:
    case __SGX_EAUG:
    case __SGX_ERDINFO:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EINIT:
    case __SGX_ELDB:
    case __SGX_ELDU:
    case __SGX_EWB:
    case __SGX_ELDBC:
    case __SGX_ELDUC:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    case __SGX_EREMOVE:
    case __SGX_EBLOCK:
    case __SGX_ETRACK:
    case __SGX_ETRACKC:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EDBGRD:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R), "=b"(__D[0])
                           : "a"(__L), "c"(__D[1]));
      break;
    default:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enclu_u32(const unsigned int __L, size_t __D[]) {
  enum __enclu_type {
    __SGX_EREPORT = 0x00,
    __SGX_EGETKEY = 0x01,
    __SGX_EENTER = 0x02,
    __SGX_ERESUME = 0x03,
    __SGX_EEXIT = 0x04,
    __SGX_EACCEPT = 0x05,
    __SGX_EMODPE = 0x06,
    __SGX_EACCEPTCOPY = 0x07
  };
  enum __enclu_type __T = (enum __enclu_type)__L;
  unsigned int __R = 0;
  if (!__builtin_constant_p(__T))
    __asm__ __volatile__("enclu\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__T) {
    case __SGX_EREPORT:
    case __SGX_EACCEPTCOPY:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    case __SGX_EGETKEY:
    case __SGX_ERESUME:
    case __SGX_EACCEPT:
    case __SGX_EMODPE:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EENTER:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=c"(__D[1])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EEXIT:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=c"(__D[1])
                           : "a"(__L), "b"(__D[0])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enclv_u32(const unsigned int __L, size_t __D[]) {
  enum __enclv_type {
    __SGX_EDECVIRTCHILD = 0x00,
    __SGX_EINCVIRTCHILD = 0x01,
    __SGX_ESETCONTEXT = 0x02
  };
  unsigned int __R = 0;
  if (!__builtin_constant_p(__L))
    __asm__ __volatile__("enclv\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[0]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__L) {
    case __SGX_EDECVIRTCHILD:
    case __SGX_EINCVIRTCHILD:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_ESETCONTEXT:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R)
                           : "a"(__L), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[0]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

#pragma GCC pop_options
# 88 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tbmintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tbmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("tbm")
# 49 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tbmintrin.h" 3 4
extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcfill_u32(unsigned int __X) {
  return __X & (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blci_u32(unsigned int __X) {
  return __X | ~(__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcic_u32(unsigned int __X) {
  return ~__X & (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcmsk_u32(unsigned int __X) {
  return __X ^ (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcs_u32(unsigned int __X) {
  return __X | (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsfill_u32(unsigned int __X) {
  return __X | (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsic_u32(unsigned int __X) {
  return ~__X | (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __t1mskc_u32(unsigned int __X) {
  return ~__X | (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzmsk_u32(unsigned int __X) {
  return ~__X & (__X - 1);
}
# 118 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tbmintrin.h" 3 4
extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcfill_u64(unsigned long long __X) {
  return __X & (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blci_u64(unsigned long long __X) {
  return __X | ~(__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcic_u64(unsigned long long __X) {
  return ~__X & (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcmsk_u64(unsigned long long __X) {
  return __X ^ (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcs_u64(unsigned long long __X) {
  return __X | (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsfill_u64(unsigned long long __X) {
  return __X | (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsic_u64(unsigned long long __X) {
  return ~__X | (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __t1mskc_u64(unsigned long long __X) {
  return ~__X | (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzmsk_u64(unsigned long long __X) {
  return ~__X & (__X - 1);
}

#pragma GCC pop_options
# 90 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tsxldtrkintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tsxldtrkintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("tsxldtrk")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsusldtrk(void) {
  __builtin_ia32_xsusldtrk();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xresldtrk(void) {
  __builtin_ia32_xresldtrk();
}

#pragma GCC pop_options
# 92 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/uintrintrin.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/uintrintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("uintr")

struct __uintr_frame {

  unsigned long long rip;

  unsigned long long rflags;

  unsigned long long rsp;
};

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _clui(void) {
  __builtin_ia32_clui();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _stui(void) {
  __builtin_ia32_stui();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _senduipi(unsigned long long __R) {
  __builtin_ia32_senduipi(__R);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _testui(void) {
  return __builtin_ia32_testui();
}

#pragma GCC pop_options
# 94 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/waitpkgintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/waitpkgintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("waitpkg")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _umonitor(void *__A) {
  __builtin_ia32_umonitor(__A);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _umwait(unsigned int __A, unsigned long long __B) {
  return __builtin_ia32_umwait(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tpause(unsigned int __A, unsigned long long __B) {
  return __builtin_ia32_tpause(__A, __B);
}

#pragma GCC pop_options
# 96 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wbnoinvdintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wbnoinvdintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("wbnoinvd")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wbnoinvd(void) {
  __builtin_ia32_wbnoinvd();
}

#pragma GCC pop_options
# 98 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsaveintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsaveintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("xsave")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsave(void *__P, long long __M) {
  __builtin_ia32_xsave(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstor(void *__P, long long __M) {
  __builtin_ia32_xrstor(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsetbv(unsigned int __A, long long __V) {
  __builtin_ia32_xsetbv(__A, __V);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xgetbv(unsigned int __A) {
  return __builtin_ia32_xgetbv(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsave64(void *__P, long long __M) {
  __builtin_ia32_xsave64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstor64(void *__P, long long __M) {
  __builtin_ia32_xrstor64(__P, __M);
}

#pragma GCC pop_options
# 100 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsavecintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsavecintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("xsavec")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsavec(void *__P, long long __M) {
  __builtin_ia32_xsavec(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsavec64(void *__P, long long __M) {
  __builtin_ia32_xsavec64(__P, __M);
}

#pragma GCC pop_options
# 102 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsaveoptintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsaveoptintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("xsaveopt")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaveopt(void *__P, long long __M) {
  __builtin_ia32_xsaveopt(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaveopt64(void *__P, long long __M) {
  __builtin_ia32_xsaveopt64(__P, __M);
}

#pragma GCC pop_options
# 104 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsavesintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xsavesintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("xsaves")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaves(void *__P, long long __M) {
  __builtin_ia32_xsaves(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstors(void *__P, long long __M) {
  __builtin_ia32_xrstors(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstors64(void *__P, long long __M) {
  __builtin_ia32_xrstors64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaves64(void *__P, long long __M) {
  __builtin_ia32_xsaves64(__P, __M);
}

#pragma GCC pop_options
# 106 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xtestintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xtestintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("rtm")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xtest(void) {
  return __builtin_ia32_xtest();
}

#pragma GCC pop_options
# 108 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/hresetintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/hresetintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("hreset")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _hreset(unsigned int __EAX) {
  __builtin_ia32_hreset(__EAX);
}

#pragma GCC pop_options
# 110 "/usr/lib/gcc/x86_64-linux-gnu/13/include/x86gprintrin.h" 2 3 4

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wbinvd(void) {
  __builtin_ia32_wbinvd();
}

#pragma GCC push_options
#pragma GCC target("rdrnd")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand16_step(unsigned short *__P) {
  return __builtin_ia32_rdrand16_step(__P);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand32_step(unsigned int *__P) {
  return __builtin_ia32_rdrand32_step(__P);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("rdpid")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdpid_u32(void) {
  return __builtin_ia32_rdpid();
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("fsgsbase")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readfsbase_u32(void) {
  return __builtin_ia32_rdfsbase32();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readfsbase_u64(void) {
  return __builtin_ia32_rdfsbase64();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readgsbase_u32(void) {
  return __builtin_ia32_rdgsbase32();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readgsbase_u64(void) {
  return __builtin_ia32_rdgsbase64();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writefsbase_u32(unsigned int __B) {
  __builtin_ia32_wrfsbase32(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writefsbase_u64(unsigned long long __B) {
  __builtin_ia32_wrfsbase64(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writegsbase_u32(unsigned int __B) {
  __builtin_ia32_wrgsbase32(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writegsbase_u64(unsigned long long __B) {
  __builtin_ia32_wrgsbase64(__B);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("rdrnd")

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand64_step(unsigned long long *__P) {
  return __builtin_ia32_rdrand64_step(__P);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("ptwrite")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ptwrite64(unsigned long long __B) {
  __builtin_ia32_ptwrite64(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ptwrite32(unsigned __B) {
  __builtin_ia32_ptwrite32(__B);
}

#pragma GCC pop_options

#pragma GCC pop_options
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mmintrin.h" 1 3 4
# 44 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mmintrin.h" 3 4
typedef int __m64 __attribute__((__vector_size__(8), __may_alias__));
typedef int __m32 __attribute__((__vector_size__(4), __may_alias__));
typedef short __m16 __attribute__((__vector_size__(2), __may_alias__));

typedef int __m64_u
    __attribute__((__vector_size__(8), __may_alias__, __aligned__(1)));
typedef int __m32_u
    __attribute__((__vector_size__(4), __may_alias__, __aligned__(1)));
typedef short __m16_u
    __attribute__((__vector_size__(2), __may_alias__, __aligned__(1)));

typedef int __v2si __attribute__((__vector_size__(8)));
typedef short __v4hi __attribute__((__vector_size__(8)));
typedef char __v8qi __attribute__((__vector_size__(8)));
typedef long long __v1di __attribute__((__vector_size__(8)));
typedef float __v2sf __attribute__((__vector_size__(8)));

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_empty(void) {
  __builtin_ia32_emms();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_empty(void) {
  _mm_empty();
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_si64(int __i) {
  return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_from_int(int __i) {
  return _mm_cvtsi32_si64(__i);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_from_int64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_m64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_si64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi64x(long long __i) {
  return (__m64)__i;
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si32(__m64 __i) {
  return __builtin_ia32_vec_ext_v2si((__v2si)__i, 0);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_to_int(__m64 __i) {
  return _mm_cvtsi64_si32(__i);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_to_int64(__m64 __i) {
  return (long long)__i;
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtm64_si64(__m64 __i) {
  return (long long)__i;
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si64x(__m64 __i) {
  return (long long)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packsswb(__m64 __m1, __m64 __m2) {
  return _mm_packs_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packssdw(__m64 __m1, __m64 __m2) {
  return _mm_packs_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packuswb(__m64 __m1, __m64 __m2) {
  return _mm_packs_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhbw(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhwd(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhdq(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpcklbw(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpcklwd(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckldq(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddb(__m64 __m1, __m64 __m2) {
  return _mm_add_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddw(__m64 __m1, __m64 __m2) {
  return _mm_add_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddd(__m64 __m1, __m64 __m2) {
  return _mm_add_pi32(__m1, __m2);
}
# 334 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mmintrin.h" 3 4
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_si64(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddq((__v1di)__m1, (__v1di)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddsb(__m64 __m1, __m64 __m2) {
  return _mm_adds_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddsw(__m64 __m1, __m64 __m2) {
  return _mm_adds_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pu8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddusb(__m64 __m1, __m64 __m2) {
  return _mm_adds_pu8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddusw(__m64 __m1, __m64 __m2) {
  return _mm_adds_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubb(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubw(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubd(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi32(__m1, __m2);
}
# 450 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mmintrin.h" 3 4
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_si64(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubq((__v1di)__m1, (__v1di)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubsb(__m64 __m1, __m64 __m2) {
  return _mm_subs_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubsw(__m64 __m1, __m64 __m2) {
  return _mm_subs_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pu8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubusb(__m64 __m1, __m64 __m2) {
  return _mm_subs_pu8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubusw(__m64 __m1, __m64 __m2) {
  return _mm_subs_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaddwd(__m64 __m1, __m64 __m2) {
  return _mm_madd_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmulhw(__m64 __m1, __m64 __m2) {
  return _mm_mulhi_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmullw(__m64 __m1, __m64 __m2) {
  return _mm_mullo_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psllw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllw(__m64 __m, __m64 __count) {
  return _mm_sll_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllwi(__m64 __m, int __count) {
  return _mm_slli_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_pslld((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pslld(__m64 __m, __m64 __count) {
  return _mm_sll_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pslldi(__m64 __m, int __count) {
  return _mm_slli_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_si64(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psllq((__v1di)__m, (__v1di)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllq(__m64 __m, __m64 __count) {
  return _mm_sll_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_si64(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllqi(__m64 __m, int __count) {
  return _mm_slli_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psraw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psraw(__m64 __m, __m64 __count) {
  return _mm_sra_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrawi(__m64 __m, int __count) {
  return _mm_srai_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrad((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrad(__m64 __m, __m64 __count) {
  return _mm_sra_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psradi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psradi(__m64 __m, int __count) {
  return _mm_srai_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrlw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlw(__m64 __m, __m64 __count) {
  return _mm_srl_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlwi(__m64 __m, int __count) {
  return _mm_srli_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrld((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrld(__m64 __m, __m64 __count) {
  return _mm_srl_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrldi(__m64 __m, int __count) {
  return _mm_srli_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_si64(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrlq((__v1di)__m, (__v1di)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlq(__m64 __m, __m64 __count) {
  return _mm_srl_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_si64(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlqi(__m64 __m, int __count) {
  return _mm_srli_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pand(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pand(__m64 __m1, __m64 __m2) {
  return _mm_and_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pandn(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pandn(__m64 __m1, __m64 __m2) {
  return _mm_andnot_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_por(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_por(__m64 __m1, __m64 __m2) {
  return _mm_or_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pxor(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pxor(__m64 __m1, __m64 __m2) {
  return _mm_xor_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqb(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtb(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqw(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtw(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqd(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtd(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_si64(void) {
  return (__m64)0LL;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi32(int __i1, int __i0) {
  return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi16(short __w3, short __w2, short __w1, short __w0) {
  return (__m64)__builtin_ia32_vec_init_v4hi(__w0, __w1, __w2, __w3);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char __b3,
                char __b2, char __b1, char __b0) {
  return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3, __b4, __b5,
                                             __b6, __b7);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi32(int __i0, int __i1) {
  return _mm_set_pi32(__i1, __i0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi16(short __w0, short __w1, short __w2, short __w3) {
  return _mm_set_pi16(__w3, __w2, __w1, __w0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char __b4,
                 char __b5, char __b6, char __b7) {
  return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi32(int __i) {
  return _mm_set_pi32(__i, __i);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi16(short __w) {
  return _mm_set_pi16(__w, __w, __w, __w);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi8(char __b) {
  return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b);
}
# 30 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mm_malloc.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/mm_malloc.h" 3 4
extern int posix_memalign(void **, size_t, size_t);

static __inline void *_mm_malloc(size_t __size, size_t __alignment) {
  void *__ptr;
  if (__alignment == 1)
    return malloc(__size);
  if (__alignment == 2 || (sizeof(void *) == 8 && __alignment == 4))
    __alignment = sizeof(void *);
  if (posix_memalign(&__ptr, __alignment, __size) == 0)
    return __ptr;
  else
    return ((void *)0);
}

static __inline void _mm_free(void *__ptr) { free(__ptr); }
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 2 3 4

enum _mm_hint {
  _MM_HINT_IT0 = 19,
  _MM_HINT_IT1 = 18,

  _MM_HINT_ET0 = 7,
  _MM_HINT_ET1 = 6,
  _MM_HINT_T0 = 3,
  _MM_HINT_T1 = 2,
  _MM_HINT_T2 = 1,
  _MM_HINT_NTA = 0
};
# 72 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
typedef float __m128 __attribute__((__vector_size__(16), __may_alias__));

typedef float __m128_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

typedef float __v4sf __attribute__((__vector_size__(16)));
# 112 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_ps(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m128 __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_ps(void) {
  return __extension__(__m128){0.0f, 0.0f, 0.0f, 0.0f};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_ss(__m128 __A) {
  return (__m128)__builtin_ia32_sqrtss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_ss(__m128 __A) {
  return (__m128)__builtin_ia32_rcpss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_ss(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrtss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A + (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A - (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A * (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A / (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_ps(__m128 __A) {
  return (__m128)__builtin_ia32_sqrtps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rcpps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrtps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_andps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_andnps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_orps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_xorps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpeqss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpltss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpless((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpltss((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpless((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpneqss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnltss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnless((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpnless((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpordss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpunordss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpeqps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpgtps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpgeps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpneqps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpngtps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpngeps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpordps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpunordps((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comieq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comieq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comilt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comilt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comile_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comile((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comigt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comigt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comige_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comige((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comineq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comineq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomieq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomieq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomilt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomilt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomile_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomile((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomigt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomigt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomige_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomige((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomineq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomineq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si32(__m128 __A) {
  return __builtin_ia32_cvtss2si((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_ss2si(__m128 __A) {
  return _mm_cvtss_si32(__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si64(__m128 __A) {
  return __builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si64x(__m128 __A) {
  return __builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi32(__m128 __A) {
  return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_ps2pi(__m128 __A) {
  return _mm_cvtps_pi32(__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si32(__m128 __A) {
  return __builtin_ia32_cvttss2si((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_ss2si(__m128 __A) {
  return _mm_cvttss_si32(__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si64(__m128 __A) {
  return __builtin_ia32_cvttss2si64((__v4sf)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si64x(__m128 __A) {
  return __builtin_ia32_cvttss2si64((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_pi32(__m128 __A) {
  return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_ps2pi(__m128 __A) {
  return _mm_cvttps_pi32(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_ss(__m128 __A, int __B) {
  return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_si2ss(__m128 __A, int __B) {
  return _mm_cvtsi32_ss(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32_ps(__m128 __A, __m64 __B) {
  return (__m128)__builtin_ia32_cvtpi2ps((__v4sf)__A, (__v2si)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_pi2ps(__m128 __A, __m64 __B) {
  return _mm_cvtpi32_ps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi16_ps(__m64 __A) {
  __v4hi __sign;
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;

  __sign = __builtin_ia32_pcmpgtw((__v4hi)0LL, (__v4hi)__A);

  __losi = (__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, __sign);
  __hisi = (__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, __sign);

  __zero = (__v4sf)_mm_setzero_ps();
  __ra = __builtin_ia32_cvtpi2ps(__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps(__ra, __hisi);

  return (__m128)__builtin_ia32_movlhps(__ra, __rb);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpu16_ps(__m64 __A) {
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;

  __losi = (__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, (__v4hi)0LL);
  __hisi = (__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, (__v4hi)0LL);

  __zero = (__v4sf)_mm_setzero_ps();
  __ra = __builtin_ia32_cvtpi2ps(__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps(__ra, __hisi);

  return (__m128)__builtin_ia32_movlhps(__ra, __rb);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi8_ps(__m64 __A) {
  __v8qi __sign;

  __sign = __builtin_ia32_pcmpgtb((__v8qi)0LL, (__v8qi)__A);

  __A = (__m64)__builtin_ia32_punpcklbw((__v8qi)__A, __sign);

  return _mm_cvtpi16_ps(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpu8_ps(__m64 __A) {
  __A = (__m64)__builtin_ia32_punpcklbw((__v8qi)__A, (__v8qi)0LL);
  return _mm_cvtpu16_ps(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32x2_ps(__m64 __A, __m64 __B) {
  __v4sf __zero = (__v4sf)_mm_setzero_ps();
  __v4sf __sfa = __builtin_ia32_cvtpi2ps(__zero, (__v2si)__A);
  __v4sf __sfb = __builtin_ia32_cvtpi2ps(__sfa, (__v2si)__B);
  return (__m128)__builtin_ia32_movlhps(__sfa, __sfb);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi16(__m128 __A) {
  __v4sf __hisf = (__v4sf)__A;
  __v4sf __losf = __builtin_ia32_movhlps(__hisf, __hisf);
  __v2si __hisi = __builtin_ia32_cvtps2pi(__hisf);
  __v2si __losi = __builtin_ia32_cvtps2pi(__losf);
  return (__m64)__builtin_ia32_packssdw(__hisi, __losi);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi8(__m128 __A) {
  __v4hi __tmp = (__v4hi)_mm_cvtps_pi16(__A);
  return (__m64)__builtin_ia32_packsswb(__tmp, (__v4hi)0LL);
}
# 761 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadh_pi(__m128 __A, __m64 const *__P) {
  return (__m128)__builtin_ia32_loadhps((__v4sf)__A, (const __v2sf *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeh_pi(__m64 *__P, __m128 __A) {
  __builtin_ia32_storehps((__v2sf *)__P, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movehl_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movhlps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movelh_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movlhps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_pi(__m128 __A, __m64 const *__P) {
  return (__m128)__builtin_ia32_loadlps((__v4sf)__A, (const __v2sf *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_pi(__m64 *__P, __m128 __A) {
  __builtin_ia32_storelps((__v2sf *)__P, (__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_ps(__m128 __A) {
  return __builtin_ia32_movmskps((__v4sf)__A);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getcsr(void) {
  return __builtin_ia32_stmxcsr();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_EXCEPTION_STATE(void) {
  return _mm_getcsr() & 0x003f;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_EXCEPTION_MASK(void) {
  return _mm_getcsr() & 0x1f80;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_ROUNDING_MODE(void) {
  return _mm_getcsr() & 0x6000;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_FLUSH_ZERO_MODE(void) {
  return _mm_getcsr() & 0x8000;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setcsr(unsigned int __I) {
  __builtin_ia32_ldmxcsr(__I);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_EXCEPTION_STATE(unsigned int __mask) {
  _mm_setcsr((_mm_getcsr() & ~0x003f) | __mask);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_EXCEPTION_MASK(unsigned int __mask) {
  _mm_setcsr((_mm_getcsr() & ~0x1f80) | __mask);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_ROUNDING_MODE(unsigned int __mode) {
  _mm_setcsr((_mm_getcsr() & ~0x6000) | __mode);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_FLUSH_ZERO_MODE(unsigned int __mode) {
  _mm_setcsr((_mm_getcsr() & ~0x8000) | __mode);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_ss(float __F) {
  return __extension__(__m128)(__v4sf){__F, 0.0f, 0.0f, 0.0f};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_ps(float __F) {
  return __extension__(__m128)(__v4sf){__F, __F, __F, __F};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_ps1(float __F) {
  return _mm_set1_ps(__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ss(float const *__P) {
  return _mm_set_ss(*__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load1_ps(float const *__P) {
  return _mm_set1_ps(*__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ps1(float const *__P) {
  return _mm_load1_ps(__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ps(float const *__P) {
  return *(__m128 *)__P;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_ps(float const *__P) {
  return *(__m128_u *)__P;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadr_ps(float const *__P) {
  __v4sf __tmp = *(__v4sf *)__P;
  return (__m128)__builtin_ia32_shufps(
      __tmp, __tmp, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_set_ps(const float __Z, const float __Y, const float __X, const float __W) {
  return __extension__(__m128)(__v4sf){__W, __X, __Y, __Z};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_ps(float __Z, float __Y, float __X, float __W) {
  return __extension__(__m128)(__v4sf){__Z, __Y, __X, __W};
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ss(float *__P, __m128 __A) {
  *__P = ((__v4sf)__A)[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_f32(__m128 __A) {
  return ((__v4sf)__A)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ps(float *__P, __m128 __A) {
  *(__m128 *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_ps(float *__P, __m128 __A) {
  *(__m128_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store1_ps(float *__P, __m128 __A) {
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps(
      __va, __va, (((0) << 6) | ((0) << 4) | ((0) << 2) | (0)));
  _mm_storeu_ps(__P, __tmp);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ps1(float *__P, __m128 __A) {
  _mm_store1_ps(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storer_ps(float *__P, __m128 __A) {
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps(
      __va, __va, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
  _mm_store_ps(__P, __tmp);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_shuffle(
      (__v4sf)__A, (__v4sf)__B,
      __extension__(__attribute__((__vector_size__(16))) int){4, 1, 2, 3});
}
# 1069 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pi16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmaxsw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaxsw(__m64 __A, __m64 __B) {
  return _mm_max_pi16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmaxub((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaxub(__m64 __A, __m64 __B) {
  return _mm_max_pu8(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pi16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pminsw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pminsw(__m64 __A, __m64 __B) {
  return _mm_min_pi16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pminub((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pminub(__m64 __A, __m64 __B) {
  return _mm_min_pu8(__A, __B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_pi8(__m64 __A) {
  return __builtin_ia32_pmovmskb((__v8qi)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmovmskb(__m64 __A) {
  return _mm_movemask_pi8(__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_pu16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmulhuw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmulhuw(__m64 __A, __m64 __B) {
  return _mm_mulhi_pu16(__A, __B);
}
# 1171 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskmove_si64(__m64 __A, __m64 __N, char *__P) {

  typedef long long __v2di __attribute__((__vector_size__(16)));
  typedef char __v16qi __attribute__((__vector_size__(16)));

  __v2di __A128 = __extension__(__v2di){((__v1di)__A)[0], 0};
  __v2di __N128 = __extension__(__v2di){((__v1di)__N)[0], 0};

  long unsigned int offset = ((long unsigned int)__P) & 0xf;
  if (offset) {

    if (offset > 8)
      offset = 8;
    __P = (char *)(((long unsigned int)__P) - offset);

    switch (offset) {
    case 1:
      __A128 = __builtin_ia32_pslldqi128(__A128, 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 8);
      break;
    case 2:
      __A128 = __builtin_ia32_pslldqi128(__A128, 2 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 2 * 8);
      break;
    case 3:
      __A128 = __builtin_ia32_pslldqi128(__A128, 3 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 3 * 8);
      break;
    case 4:
      __A128 = __builtin_ia32_pslldqi128(__A128, 4 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 4 * 8);
      break;
    case 5:
      __A128 = __builtin_ia32_pslldqi128(__A128, 5 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 5 * 8);
      break;
    case 6:
      __A128 = __builtin_ia32_pslldqi128(__A128, 6 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 6 * 8);
      break;
    case 7:
      __A128 = __builtin_ia32_pslldqi128(__A128, 7 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 7 * 8);
      break;
    case 8:
      __A128 = __builtin_ia32_pslldqi128(__A128, 8 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 8 * 8);
      break;
    default:
      break;
    }
  }
  __builtin_ia32_maskmovdqu((__v16qi)__A128, (__v16qi)__N128, __P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_maskmovq(__m64 __A, __m64 __N, char *__P) {
  _mm_maskmove_si64(__A, __N, __P);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pavgb((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pavgb(__m64 __A, __m64 __B) {
  return _mm_avg_pu8(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_pu16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pavgw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pavgw(__m64 __A, __m64 __B) {
  return _mm_avg_pu16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sad_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_psadbw((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psadbw(__m64 __A, __m64 __B) {
  return _mm_sad_pu8(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_pi(__m64 *__P, __m64 __A) {
  __builtin_ia32_movntq((unsigned long long *)__P, (unsigned long long)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_ps(float *__P, __m128 __A) {
  __builtin_ia32_movntps(__P, (__v4sf)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sfence(void) {
  __builtin_ia32_sfence();
}
# 1322 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 2 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
typedef double __v2df __attribute__((__vector_size__(16)));
typedef long long __v2di __attribute__((__vector_size__(16)));
typedef unsigned long long __v2du __attribute__((__vector_size__(16)));
typedef int __v4si __attribute__((__vector_size__(16)));
typedef unsigned int __v4su __attribute__((__vector_size__(16)));
typedef short __v8hi __attribute__((__vector_size__(16)));
typedef unsigned short __v8hu __attribute__((__vector_size__(16)));
typedef char __v16qi __attribute__((__vector_size__(16)));
typedef signed char __v16qs __attribute__((__vector_size__(16)));
typedef unsigned char __v16qu __attribute__((__vector_size__(16)));

typedef long long __m128i __attribute__((__vector_size__(16), __may_alias__));
typedef double __m128d __attribute__((__vector_size__(16), __may_alias__));

typedef long long __m128i_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef double __m128d_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_sd(double __F) {
  return __extension__(__m128d){__F, 0.0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pd(double __F) {
  return __extension__(__m128d){__F, __F};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pd1(double __F) {
  return _mm_set1_pd(__F);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pd(double __W, double __X) {
  return __extension__(__m128d){__X, __W};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pd(double __W, double __X) {
  return __extension__(__m128d){__W, __X};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_pd(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m128d __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_pd(void) {
  return __extension__(__m128d){0.0, 0.0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_sd(__m128d __A, __m128d __B) {
  return __extension__(__m128d)
      __builtin_shuffle((__v2df)__A, (__v2df)__B, (__v2di){2, 1});
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_pd(double const *__P) {
  return *(__m128d *)__P;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_pd(double const *__P) {
  return *(__m128d_u *)__P;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load1_pd(double const *__P) {
  return _mm_set1_pd(*__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_sd(double const *__P) {
  return _mm_set_sd(*__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_pd1(double const *__P) {
  return _mm_load1_pd(__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadr_pd(double const *__P) {
  __m128d __tmp = _mm_load_pd(__P);
  return __builtin_ia32_shufpd(__tmp, __tmp, (((0) << 1) | (1)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_pd(double *__P, __m128d __A) {
  *(__m128d *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_pd(double *__P, __m128d __A) {
  *(__m128d_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_sd(double *__P, __m128d __A) {
  *__P = ((__v2df)__A)[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_f64(__m128d __A) {
  return ((__v2df)__A)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_pd(double *__P, __m128d __A) {
  _mm_store_sd(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeh_pd(double *__P, __m128d __A) {
  *__P = ((__v2df)__A)[1];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store1_pd(double *__P, __m128d __A) {
  _mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (((0) << 1) | (0))));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_pd1(double *__P, __m128d __A) {
  _mm_store1_pd(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storer_pd(double *__P, __m128d __A) {
  _mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (((0) << 1) | (1))));
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si32(__m128i __A) {
  return __builtin_ia32_vec_ext_v4si((__v4si)__A, 0);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si64(__m128i __A) {
  return ((__v2di)__A)[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si64x(__m128i __A) {
  return ((__v2di)__A)[0];
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A + (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A - (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A * (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A / (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd((__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_sd(__m128d __A, __m128d __B) {
  __v2df __tmp = __builtin_ia32_movsd((__v2df)__A, (__v2df)__B);
  return (__m128d)__builtin_ia32_sqrtsd((__v2df)__tmp);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpgtpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpgepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpngtpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpngepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpordpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpltsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmplesd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpltsd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmplesd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpnltsd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpnlesd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpordsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comieq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdeq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comilt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdlt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comile_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdle((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comigt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdgt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comige_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdge((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comineq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdneq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomieq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdeq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomilt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdlt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomile_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdle((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomigt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdgt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomige_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdge((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomineq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdneq((__v2df)__A, (__v2df)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi64x(long long __q1, long long __q0) {
  return __extension__(__m128i)(__v2di){__q0, __q1};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi64(__m64 __q1, __m64 __q0) {
  return _mm_set_epi64x((long long)__q1, (long long)__q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi32(int __q3, int __q2, int __q1, int __q0) {
  return __extension__(__m128i)(__v4si){__q0, __q1, __q2, __q3};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi16(short __q7, short __q6, short __q5, short __q4, short __q3,
                  short __q2, short __q1, short __q0) {
  return __extension__(__m128i)(__v8hi){__q0, __q1, __q2, __q3,
                                        __q4, __q5, __q6, __q7};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi8(char __q15, char __q14, char __q13, char __q12, char __q11,
                 char __q10, char __q09, char __q08, char __q07, char __q06,
                 char __q05, char __q04, char __q03, char __q02, char __q01,
                 char __q00) {
  return __extension__(__m128i)(__v16qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi64x(long long __A) {
  return _mm_set_epi64x(__A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi64(__m64 __A) {
  return _mm_set_epi64(__A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi32(int __A) {
  return _mm_set_epi32(__A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi16(short __A) {
  return _mm_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi8(char __A) {
  return _mm_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                      __A, __A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi64(__m64 __q0, __m64 __q1) {
  return _mm_set_epi64(__q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi32(int __q0, int __q1, int __q2, int __q3) {
  return _mm_set_epi32(__q3, __q2, __q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi16(short __q0, short __q1, short __q2, short __q3, short __q4,
                   short __q5, short __q6, short __q7) {
  return _mm_set_epi16(__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi8(char __q00, char __q01, char __q02, char __q03, char __q04,
                  char __q05, char __q06, char __q07, char __q08, char __q09,
                  char __q10, char __q11, char __q12, char __q13, char __q14,
                  char __q15) {
  return _mm_set_epi8(__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08,
                      __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_si128(__m128i const *__P) {
  return *__P;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si128(__m128i_u const *__P) {
  return *__P;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_epi64(__m128i_u const *__P) {
  return _mm_set_epi64((__m64)0LL, *(__m64_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si64(void const *__P) {
  return _mm_loadl_epi64((__m128i_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si32(void const *__P) {
  return _mm_set_epi32(0, 0, 0, (*(__m32_u *)__P)[0]);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si16(void const *__P) {
  return _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, (*(__m16_u *)__P)[0]);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_si128(__m128i *__P, __m128i __B) {
  *__P = __B;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si128(__m128i_u *__P, __m128i __B) {
  *__P = __B;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_epi64(__m128i_u *__P, __m128i __B) {
  *(__m64_u *)__P = (__m64)((__v2di)__B)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si64(void *__P, __m128i __B) {
  _mm_storel_epi64((__m128i_u *)__P, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si32(void *__P, __m128i __B) {
  *(__m32_u *)__P = (__m32)((__v4si)__B)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si16(void *__P, __m128i __B) {
  *(__m16_u *)__P = (__m16)((__v8hi)__B)[0];
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi64_pi64(__m128i __B) {
  return (__m64)((__v2di)__B)[0];
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movpi64_epi64(__m64 __A) {
  return _mm_set_epi64((__m64)0LL, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_movq128((__v2di)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_si128(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m128i __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_si128(void) {
  return __extension__(__m128i)(__v4si){0, 0, 0, 0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd((__v4si)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps((__v4si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epi32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq((__v2df)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_pi32(__m128d __A) {
  return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_ps(__m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps((__v2df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epi32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_pi32(__m128d __A) {
  return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32_pd(__m64 __A) {
  return (__m128d)__builtin_ia32_cvtpi2pd((__v2si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epi32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epi32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pd(__m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si32(__m128d __A) {
  return __builtin_ia32_cvtsd2si((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si64(__m128d __A) {
  return __builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si64x(__m128d __A) {
  return __builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si32(__m128d __A) {
  return __builtin_ia32_cvttsd2si((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si64(__m128d __A) {
  return __builtin_ia32_cvttsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si64x(__m128d __A) {
  return __builtin_ia32_cvttsd2si64((__v2df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_ss(__m128 __A, __m128d __B) {
  return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_sd(__m128d __A, int __B) {
  return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_sd(__m128d __A, __m128 __B) {
  return (__m128d)__builtin_ia32_cvtss2sd((__v2df)__A, (__v4sf)__B);
}
# 961 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadh_pd(__m128d __A, double const *__B) {
  return (__m128d)__builtin_ia32_loadhpd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_pd(__m128d __A, double const *__B) {
  return (__m128d)__builtin_ia32_loadlpd((__v2df)__A, __B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_pd(__m128d __A) {
  return __builtin_ia32_movmskpd((__v2df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packus_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qu)__A + (__v16qu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A + (__v8hu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A + (__v4su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A + (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qu)__A - (__v16qu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A - (__v8hu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A - (__v4su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A - (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A * (__v8hu)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_su32(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmuludq((__v2si)__A, (__v2si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmuludq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllwi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_pslldi128((__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi64(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllqi128((__v2di)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrawi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psradi128((__v4si)__A, __B);
}
# 1248 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrldi128((__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi64(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrlqi128((__v2di)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A & (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_si128(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandn128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A | (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A ^ (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qi)__A == (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A == (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A == (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qs)__A < (__v16qs)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A < (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A < (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qs)__A > (__v16qs)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A > (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A > (__v4si)__B);
}
# 1412 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128((__v16qi)__A, (__v16qi)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_epi8(__m128i __A) {
  return __builtin_ia32_pmovmskb128((__v16qi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__A, (__v8hi)__B);
}
# 1475 "/usr/lib/gcc/x86_64-linux-gnu/13/include/emmintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskmoveu_si128(__m128i __A, __m128i __B, char *__C) {
  __builtin_ia32_maskmovdqu((__v16qi)__A, (__v16qi)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sad_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psadbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si32(int *__A, int __B) {
  __builtin_ia32_movnti(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si64(long long int *__A, long long int __B) {
  __builtin_ia32_movnti64(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si128(__m128i *__A, __m128i __B) {
  __builtin_ia32_movntdq((__v2di *)__A, (__v2di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_pd(double *__A, __m128d __B) {
  __builtin_ia32_movntpd(__A, (__v2df)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clflush(void const *__A) {
  __builtin_ia32_clflush(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lfence(void) {
  __builtin_ia32_lfence();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mfence(void) {
  __builtin_ia32_mfence();
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_si128(int __A) {
  return _mm_set_epi32(0, 0, 0, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si128(long long __A) {
  return _mm_set_epi64x(0, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_si128(long long __A) {
  return _mm_set_epi64x(0, __A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castpd_ps(__m128d __A) {
  return (__m128)__A;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castpd_si128(__m128d __A) {
  return (__m128i)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castps_pd(__m128 __A) {
  return (__m128d)__A;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castps_si128(__m128 __A) {
  return (__m128i)__A;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castsi128_ps(__m128i __A) {
  return (__m128)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castsi128_pd(__m128i __A) {
  return (__m128d)__A;
}
# 1323 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 2 3 4
# 1334 "/usr/lib/gcc/x86_64-linux-gnu/13/include/xmmintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_pause(void) {
  __builtin_ia32_pause();
}
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pmmintrin.h" 1 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pmmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("sse3")
# 50 "/usr/lib/gcc/x86_64-linux-gnu/13/include/pmmintrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_addsub_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_addsubps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_haddps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_hsubps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movehdup_ps(__m128 __X) {
  return (__m128)__builtin_ia32_movshdup((__v4sf)__X);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_moveldup_ps(__m128 __X) {
  return (__m128)__builtin_ia32_movsldup((__v4sf)__X);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_addsub_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_addsubpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_haddpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_hsubpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loaddup_pd(double const *__P) {
  return _mm_load1_pd(__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movedup_pd(__m128d __X) {
  return ((__m128d)__builtin_ia32_shufpd((__v2df)(__m128d)(__X),
                                         (__v2df)(__m128d)(__X),
                                         (int)((((0) << 1) | (0)))));
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lddqu_si128(__m128i const *__P) {
  return (__m128i)__builtin_ia32_lddqu((char const *)__P);
}

#pragma GCC pop_options
# 36 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tmmintrin.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tmmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("ssse3")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadds_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddd((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadds_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsubs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubd((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsubs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maddubs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maddubs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pmaddubsw((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhrs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhrs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pmulhrsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pshufb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_pi8(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pshufb((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi8(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignb((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignd((__v2si)__X, (__v2si)__Y);
}
# 208 "/usr/lib/gcc/x86_64-linux-gnu/13/include/tmmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi8(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsb128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsd128((__v4si)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi8(__m64 __X) {
  return (__m64)__builtin_ia32_pabsb((__v8qi)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi16(__m64 __X) {
  return (__m64)__builtin_ia32_pabsw((__v4hi)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi32(__m64 __X) {
  return (__m64)__builtin_ia32_pabsd((__v2si)__X);
}

#pragma GCC pop_options
# 38 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 1 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("sse4.1")
# 66 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestz128((__v2di)__M, (__v2di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestc128((__v2di)__M, (__v2di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestnzc128((__v2di)__M, (__v2di)__V);
}
# 178 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_epi8(__m128i __X, __m128i __Y, __m128i __M) {
  return (__m128i)__builtin_ia32_pblendvb128((__v16qi)__X, (__v16qi)__Y,
                                             (__v16qi)__M);
}
# 203 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_ps(__m128 __X, __m128 __Y, __m128 __M) {
  return (__m128)__builtin_ia32_blendvps((__v4sf)__X, (__v4sf)__Y, (__v4sf)__M);
}
# 228 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_pd(__m128d __X, __m128d __Y, __m128d __M) {
  return (__m128d)__builtin_ia32_blendvpd((__v2df)__X, (__v2df)__Y,
                                          (__v2df)__M);
}
# 267 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)((__v2di)__X == (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminsb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxsb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminuw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxuw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminsd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxsd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminud128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxud128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)((__v4su)__X * (__v4su)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128((__v4si)__X, (__v4si)__Y);
}
# 474 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_minpos_epu16(__m128i __X) {
  return (__m128i)__builtin_ia32_phminposuw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbd128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxwd128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbq128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxwq128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbw128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbd128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu16_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxwd128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbq128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu16_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxwq128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbw128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packus_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_packusdw128((__v4si)__X, (__v4si)__Y);
}
# 582 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_load_si128(__m128i *__X) {
  return (__m128i)__builtin_ia32_movntdqa((__v2di *)__X);
}

#pragma GCC push_options
#pragma GCC target("sse4.2")
# 796 "/usr/lib/gcc/x86_64-linux-gnu/13/include/smmintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)((__v2di)__X > (__v2di)__Y);
}

#pragma GCC pop_options

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("crc32")

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u8(unsigned int __C, unsigned char __V) {
  return __builtin_ia32_crc32qi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u16(unsigned int __C, unsigned short __V) {
  return __builtin_ia32_crc32hi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u32(unsigned int __C, unsigned int __V) {
  return __builtin_ia32_crc32si(__C, __V);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u64(unsigned long long __C, unsigned long long __V) {
  return __builtin_ia32_crc32di(__C, __V);
}

#pragma GCC pop_options
# 40 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wmmintrin.h" 1 3 4
# 36 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wmmintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("aes,sse2")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesdec128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdeclast_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesdeclast128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesenc128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenclast_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesenclast128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesimc_si128(__m128i __X) {
  return (__m128i)__builtin_ia32_aesimc128((__v2di)__X);
}
# 99 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wmmintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("pclmul,sse2")
# 129 "/usr/lib/gcc/x86_64-linux-gnu/13/include/wmmintrin.h" 3 4
#pragma GCC pop_options
# 42 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 1 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx")

typedef double __v4df __attribute__((__vector_size__(32)));
typedef float __v8sf __attribute__((__vector_size__(32)));
typedef long long __v4di __attribute__((__vector_size__(32)));
typedef unsigned long long __v4du __attribute__((__vector_size__(32)));
typedef int __v8si __attribute__((__vector_size__(32)));
typedef unsigned int __v8su __attribute__((__vector_size__(32)));
typedef short __v16hi __attribute__((__vector_size__(32)));
typedef unsigned short __v16hu __attribute__((__vector_size__(32)));
typedef char __v32qi __attribute__((__vector_size__(32)));
typedef signed char __v32qs __attribute__((__vector_size__(32)));
typedef unsigned char __v32qu __attribute__((__vector_size__(32)));

typedef float __m256 __attribute__((__vector_size__(32), __may_alias__));
typedef long long __m256i __attribute__((__vector_size__(32), __may_alias__));
typedef double __m256d __attribute__((__vector_size__(32), __may_alias__));

typedef float __m256_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef long long __m256i_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef double __m256d_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
# 140 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A + (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A + (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_addsub_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addsubpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_addsub_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addsubps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256((__v8sf)__A, (__v8sf)__B);
}
# 218 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_pd(__m256d __X, __m256d __Y, __m256d __M) {
  return (__m256d)__builtin_ia32_blendvpd256((__v4df)__X, (__v4df)__Y,
                                             (__v4df)__M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_ps(__m256 __X, __m256 __Y, __m256 __M) {
  return (__m256)__builtin_ia32_blendvps256((__v8sf)__X, (__v8sf)__Y,
                                            (__v8sf)__M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_div_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A / (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_div_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A / (__v8sf)__B);
}
# 263 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_pd(__m256d __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_haddpd256((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_ps(__m256 __X, __m256 __Y) {
  return (__m256)__builtin_ia32_haddps256((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_pd(__m256d __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_hsubpd256((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_ps(__m256 __X, __m256 __Y) {
  return (__m256)__builtin_ia32_hsubps256((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A * (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A * (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256((__v8sf)__A, (__v8sf)__B);
}
# 359 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A - (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A - (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256((__v8sf)__A, (__v8sf)__B);
}
# 447 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsi256_si32(__m256i __A) {
  __v8si __B = (__v8si)__A;
  return __B[0];
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_pd(__m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256((__v4si)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_ps(__m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256((__v8si)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_ps(__m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256((__v4df)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epi32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_pd(__m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256((__v4sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epi32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256((__v4df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epi32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256((__v4df)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epi32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256((__v8sf)__A);
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsd_f64(__m256d __A) {
  return __A[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtss_f32(__m256 __A) {
  return __A[0];
}
# 608 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zeroall(void) {
  __builtin_ia32_vzeroall();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zeroupper(void) {
  __builtin_ia32_vzeroupper();
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutevar_pd(__m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd((__v2df)__A, (__v2di)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar_pd(__m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256((__v4df)__A, (__v4di)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutevar_ps(__m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps((__v4sf)__A, (__v4si)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar_ps(__m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256((__v8sf)__A, (__v8si)__C);
}
# 727 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcast_ss(float const *__X) {
  return (__m128)__builtin_ia32_vbroadcastss(__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_sd(double const *__X) {
  return (__m256d)__builtin_ia32_vbroadcastsd256(__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_ss(float const *__X) {
  return (__m256)__builtin_ia32_vbroadcastss256(__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_pd(__m128d const *__X) {
  return (__m256d)__builtin_ia32_vbroadcastf128_pd256(__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_ps(__m128 const *__X) {
  return (__m256)__builtin_ia32_vbroadcastf128_ps256(__X);
}
# 866 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_pd(double const *__P) {
  return *(__m256d *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_pd(double *__P, __m256d __A) {
  *(__m256d *)__P = __A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_ps(float const *__P) {
  return *(__m256 *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_ps(float *__P, __m256 __A) {
  *(__m256 *)__P = __A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_pd(double const *__P) {
  return *(__m256d_u *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_pd(double *__P, __m256d __A) {
  *(__m256d_u *)__P = __A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_ps(float const *__P) {
  return *(__m256_u *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_ps(float *__P, __m256 __A) {
  *(__m256_u *)__P = __A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_si256(__m256i const *__P) {
  return *__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_si256(__m256i *__P, __m256i __A) {
  *__P = __A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_si256(__m256i_u const *__P) {
  return *__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_si256(__m256i_u *__P, __m256i __A) {
  *__P = __A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_pd(double const *__P, __m128i __M) {
  return (__m128d)__builtin_ia32_maskloadpd((const __v2df *)__P, (__v2di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_pd(double *__P, __m128i __M, __m128d __A) {
  __builtin_ia32_maskstorepd((__v2df *)__P, (__v2di)__M, (__v2df)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_pd(double const *__P, __m256i __M) {
  return (__m256d)__builtin_ia32_maskloadpd256((const __v4df *)__P,
                                               (__v4di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_pd(double *__P, __m256i __M, __m256d __A) {
  __builtin_ia32_maskstorepd256((__v4df *)__P, (__v4di)__M, (__v4df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_ps(float const *__P, __m128i __M) {
  return (__m128)__builtin_ia32_maskloadps((const __v4sf *)__P, (__v4si)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_ps(float *__P, __m128i __M, __m128 __A) {
  __builtin_ia32_maskstoreps((__v4sf *)__P, (__v4si)__M, (__v4sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_ps(float const *__P, __m256i __M) {
  return (__m256)__builtin_ia32_maskloadps256((const __v8sf *)__P, (__v8si)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_ps(float *__P, __m256i __M, __m256 __A) {
  __builtin_ia32_maskstoreps256((__v8sf *)__P, (__v8si)__M, (__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movehdup_ps(__m256 __X) {
  return (__m256)__builtin_ia32_movshdup256((__v8sf)__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_moveldup_ps(__m256 __X) {
  return (__m256)__builtin_ia32_movsldup256((__v8sf)__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movedup_pd(__m256d __X) {
  return (__m256d)__builtin_ia32_movddup256((__v4df)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lddqu_si256(__m256i const *__P) {
  return (__m256i)__builtin_ia32_lddqu256((char const *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_si256(__m256i *__A, __m256i __B) {
  __builtin_ia32_movntdq256((__v4di *)__A, (__v4di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_pd(double *__A, __m256d __B) {
  __builtin_ia32_movntpd256(__A, (__v4df)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_ps(float *__P, __m256 __A) {
  __builtin_ia32_movntps256(__P, (__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rcpps256((__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rsqrtps256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sqrt_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256((__v4df)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sqrt_ps(__m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256((__v8sf)__A);
}
# 1081 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxintrin.h" 3 4
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestzpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestcpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestnzcpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestzps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestcps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestnzcps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestzpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestcpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestnzcpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestzps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestcps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestnzcps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestz256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestc256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestnzc256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_pd(__m256d __A) {
  return __builtin_ia32_movmskpd256((__v4df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_ps(__m256 __A) {
  return __builtin_ia32_movmskps256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_pd(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m256d __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_ps(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m256 __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_si256(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m256i __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_pd(void) {
  return __extension__(__m256d){0.0, 0.0, 0.0, 0.0};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_ps(void) {
  return __extension__(__m256){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_si256(void) {
  return __extension__(__m256i)(__v4di){0, 0, 0, 0};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_pd(double __A, double __B, double __C, double __D) {
  return __extension__(__m256d){__D, __C, __B, __A};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_ps(float __A, float __B, float __C, float __D, float __E,
                  float __F, float __G, float __H) {
  return __extension__(__m256){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                     int __G, int __H) {
  return __extension__(__m256i)(__v8si){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi16(short __q15, short __q14, short __q13, short __q12,
                     short __q11, short __q10, short __q09, short __q08,
                     short __q07, short __q06, short __q05, short __q04,
                     short __q03, short __q02, short __q01, short __q00) {
  return __extension__(__m256i)(__v16hi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi8(char __q31, char __q30, char __q29, char __q28, char __q27,
                    char __q26, char __q25, char __q24, char __q23, char __q22,
                    char __q21, char __q20, char __q19, char __q18, char __q17,
                    char __q16, char __q15, char __q14, char __q13, char __q12,
                    char __q11, char __q10, char __q09, char __q08, char __q07,
                    char __q06, char __q05, char __q04, char __q03, char __q02,
                    char __q01, char __q00) {
  return __extension__(__m256i)(__v32qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
      __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
      __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31};
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_set_epi64x(long long __A, long long __B, long long __C, long long __D) {
  return __extension__(__m256i)(__v4di){__D, __C, __B, __A};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_pd(double __A) {
  return __extension__(__m256d){__A, __A, __A, __A};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_ps(float __A) {
  return __extension__(__m256){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi32(int __A) {
  return __extension__(__m256i)(__v8si){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi16(short __A) {
  return _mm256_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                          __A, __A, __A, __A, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi8(char __A) {
  return _mm256_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                         __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                         __A, __A, __A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi64x(long long __A) {
  return __extension__(__m256i)(__v4di){__A, __A, __A, __A};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_pd(double __A, double __B, double __C, double __D) {
  return _mm256_set_pd(__D, __C, __B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_ps(float __A, float __B, float __C, float __D, float __E,
                   float __F, float __G, float __H) {
  return _mm256_set_ps(__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                      int __G, int __H) {
  return _mm256_set_epi32(__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi16(short __q15, short __q14, short __q13, short __q12,
                      short __q11, short __q10, short __q09, short __q08,
                      short __q07, short __q06, short __q05, short __q04,
                      short __q03, short __q02, short __q01, short __q00) {
  return _mm256_set_epi16(__q00, __q01, __q02, __q03, __q04, __q05, __q06,
                          __q07, __q08, __q09, __q10, __q11, __q12, __q13,
                          __q14, __q15);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi8(char __q31, char __q30, char __q29, char __q28, char __q27,
                     char __q26, char __q25, char __q24, char __q23, char __q22,
                     char __q21, char __q20, char __q19, char __q18, char __q17,
                     char __q16, char __q15, char __q14, char __q13, char __q12,
                     char __q11, char __q10, char __q09, char __q08, char __q07,
                     char __q06, char __q05, char __q04, char __q03, char __q02,
                     char __q01, char __q00) {
  return _mm256_set_epi8(__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
                         __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
                         __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
                         __q24, __q25, __q26, __q27, __q28, __q29, __q30,
                         __q31);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_setr_epi64x(long long __A, long long __B, long long __C, long long __D) {
  return _mm256_set_epi64x(__D, __C, __B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd_ps(__m256d __A) {
  return (__m256)__A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd_si256(__m256d __A) {
  return (__m256i)__A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps_pd(__m256 __A) {
  return (__m256d)__A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps_si256(__m256 __A) {
  return (__m256i)__A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_ps(__m256i __A) {
  return (__m256)__A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_pd(__m256i __A) {
  return (__m256d)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd256_pd128(__m256d __A) {
  return (__m128d)__builtin_ia32_pd_pd256((__v4df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps256_ps128(__m256 __A) {
  return (__m128)__builtin_ia32_ps_ps256((__v8sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_si128(__m256i __A) {
  return (__m128i)__builtin_ia32_si_si256((__v8si)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd128_pd256(__m128d __A) {
  return (__m256d)__builtin_ia32_pd256_pd((__v2df)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps128_ps256(__m128 __A) {
  return (__m256)__builtin_ia32_ps256_ps((__v4sf)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi128_si256(__m128i __A) {
  return (__m256i)__builtin_ia32_si256_si((__v4si)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextpd128_pd256(__m128d __A) {
  return ((__m256d)__builtin_ia32_vinsertf128_pd256(
      (__v4df)(__m256d)(_mm256_setzero_pd()), (__v2df)(__m128d)(__A),
      (int)(0)));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextps128_ps256(__m128 __A) {
  return ((__m256)__builtin_ia32_vinsertf128_ps256(
      (__v8sf)(__m256)(_mm256_setzero_ps()), (__v4sf)(__m128)(__A), (int)(0)));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextsi128_si256(__m128i __A) {
  return ((__m256i)__builtin_ia32_vinsertf128_si256(
      (__v8si)(__m256i)(_mm256_setzero_si256()), (__v4si)(__m128i)(__A),
      (int)(0)));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128(__m128 __H, __m128 __L) {
  return ((__m256)__builtin_ia32_vinsertf128_ps256(
      (__v8sf)(__m256)(_mm256_castps128_ps256(__L)), (__v4sf)(__m128)(__H),
      (int)(1)));
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128d(__m128d __H, __m128d __L) {
  return ((__m256d)__builtin_ia32_vinsertf128_pd256(
      (__v4df)(__m256d)(_mm256_castpd128_pd256(__L)), (__v2df)(__m128d)(__H),
      (int)(1)));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128i(__m128i __H, __m128i __L) {
  return ((__m256i)__builtin_ia32_vinsertf128_si256(
      (__v8si)(__m256i)(_mm256_castsi128_si256(__L)), (__v4si)(__m128i)(__H),
      (int)(1)));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128(__m128 __L, __m128 __H) {
  return _mm256_set_m128(__H, __L);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128d(__m128d __L, __m128d __H) {
  return _mm256_set_m128d(__H, __L);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128i(__m128i __L, __m128i __H) {
  return _mm256_set_m128i(__H, __L);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128(float const *__PH, float const *__PL) {
  return ((__m256)__builtin_ia32_vinsertf128_ps256(
      (__v8sf)(__m256)(_mm256_castps128_ps256(_mm_loadu_ps(__PL))),
      (__v4sf)(__m128)(_mm_loadu_ps(__PH)), (int)(1)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128(float *__PH, float *__PL, __m256 __A) {
  _mm_storeu_ps(__PL, _mm256_castps256_ps128(__A));
  _mm_storeu_ps(__PH, ((__m128)__builtin_ia32_vextractf128_ps256(
                          (__v8sf)(__m256)(__A), (int)(1))));
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128d(double const *__PH, double const *__PL) {
  return ((__m256d)__builtin_ia32_vinsertf128_pd256(
      (__v4df)(__m256d)(_mm256_castpd128_pd256(_mm_loadu_pd(__PL))),
      (__v2df)(__m128d)(_mm_loadu_pd(__PH)), (int)(1)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128d(double *__PH, double *__PL, __m256d __A) {
  _mm_storeu_pd(__PL, _mm256_castpd256_pd128(__A));
  _mm_storeu_pd(__PH, ((__m128d)__builtin_ia32_vextractf128_pd256(
                          (__v4df)(__m256d)(__A), (int)(1))));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128i(__m128i_u const *__PH, __m128i_u const *__PL) {
  return ((__m256i)__builtin_ia32_vinsertf128_si256(
      (__v8si)(__m256i)(_mm256_castsi128_si256(_mm_loadu_si128(__PL))),
      (__v4si)(__m128i)(_mm_loadu_si128(__PH)), (int)(1)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128i(__m128i_u *__PH, __m128i_u *__PL, __m256i __A) {
  _mm_storeu_si128(__PL, _mm256_castsi256_si128(__A));
  _mm_storeu_si128(__PH, ((__m128i)__builtin_ia32_vextractf128_si256(
                             (__v8si)(__m256i)(__A), (int)(1))));
}

#pragma GCC pop_options
# 44 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxvnniintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxvnniintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avxvnni")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbusd_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si((__v8si)__A, (__v8si)__B,
                                               (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbusd_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si((__v4si)__A, (__v4si)__B,
                                               (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbusds_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si((__v8si)__A, (__v8si)__B,
                                                (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbusds_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si((__v4si)__A, (__v4si)__B,
                                                (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpwssd_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si((__v8si)__A, (__v8si)__B,
                                               (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpwssd_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si((__v4si)__A, (__v4si)__B,
                                               (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpwssds_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si((__v8si)__A, (__v8si)__B,
                                                (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpwssds_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si((__v4si)__A, (__v4si)__B,
                                                (__v4si)__C);
}

#pragma GCC pop_options
# 46 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxifmaintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxifmaintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avxifma")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd52lo_avx_epu64(__m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52luq128((__v2di)__X, (__v2di)__Y,
                                                (__v2di)__Z);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd52hi_avx_epu64(__m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52huq128((__v2di)__X, (__v2di)__Y,
                                                (__v2di)__Z);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd52lo_avx_epu64(__m256i __X, __m256i __Y, __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52luq256((__v4di)__X, (__v4di)__Y,
                                                (__v4di)__Z);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd52hi_avx_epu64(__m256i __X, __m256i __Y, __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52huq256((__v4di)__X, (__v4di)__Y,
                                                (__v4di)__Z);
}

#pragma GCC pop_options
# 48 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxvnniint8intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxvnniint8intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avxvnniint8")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbssd_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbssd128((__v4si)__W, (__v4si)__A,
                                             (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbssds_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbssds128((__v4si)__W, (__v4si)__A,
                                              (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbsud_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbsud128((__v4si)__W, (__v4si)__A,
                                             (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbsuds_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbsuds128((__v4si)__W, (__v4si)__A,
                                              (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbuud_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbuud128((__v4si)__W, (__v4si)__A,
                                             (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbuuds_epi32(__m128i __W, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vpdpbuuds128((__v4si)__W, (__v4si)__A,
                                              (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbssd_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbssd256((__v8si)__W, (__v8si)__A,
                                             (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbssds_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbssds256((__v8si)__W, (__v8si)__A,
                                              (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbsud_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbsud256((__v8si)__W, (__v8si)__A,
                                             (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbsuds_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbsuds256((__v8si)__W, (__v8si)__A,
                                              (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbuud_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbuud256((__v8si)__W, (__v8si)__A,
                                             (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbuuds_epi32(__m256i __W, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vpdpbuuds256((__v8si)__W, (__v8si)__A,
                                              (__v8si)__B);
}

#pragma GCC pop_options
# 50 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx2")
# 54 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi8(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi16(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256((__v16hi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256((__v8si)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packs_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packs_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packus_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packus_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qu)__A + (__v32qu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A + (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A + (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A + (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256((__v16hi)__A, (__v16hi)__B);
}
# 177 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A & (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_si256(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_andnotsi256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_avg_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_avg_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_epi8(__m256i __X, __m256i __Y, __m256i __M) {
  return (__m256i)__builtin_ia32_pblendvb256((__v32qi)__X, (__v32qi)__Y,
                                             (__v32qi)__M);
}
# 229 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qi)__A == (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hi)__A == (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8si)__A == (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4di)__A == (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qs)__A > (__v32qs)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hi)__A > (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8si)__A > (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4di)__A > (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddd256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadds_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubd256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsubs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maddubs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256((__v8si)__A, (__v8si)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_epi8(__m256i __A) {
  return __builtin_ia32_pmovmskb256((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbw256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbd256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbq256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxwd256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxwq256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbw256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbd256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbq256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu16_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxwd256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu16_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxwq256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhrs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhi_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhi_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A * (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A * (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmuludq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A | (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sad_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psadbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pshufb256((__v32qi)__X, (__v32qi)__Y);
}
# 624 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignb256((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignd256((__v8si)__X, (__v8si)__Y);
}
# 666 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllwi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_pslldi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi64(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllqi256((__v4di)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srai_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrawi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srai_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psradi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256((__v8si)__A, (__v4si)__B);
}
# 757 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrlwi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrldi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi64(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrlqi256((__v4di)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qu)__A - (__v32qu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A - (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A - (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A - (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A ^ (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_load_si256(__m256i const *__X) {
  return (__m256i)__builtin_ia32_movntdqa256((__v4di *)__X);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastss_ps(__m128 __X) {
  return (__m128)__builtin_ia32_vbroadcastss_ps((__v4sf)__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastss_ps(__m128 __X) {
  return (__m256)__builtin_ia32_vbroadcastss_ps256((__v4sf)__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastsd_pd(__m128d __X) {
  return (__m256d)__builtin_ia32_vbroadcastsd_pd256((__v2df)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastsi128_si256(__m128i __X) {
  return (__m256i)__builtin_ia32_vbroadcastsi256((__v2di)__X);
}
# 986 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastb_epi8(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastb256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastw_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastw256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastd_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastd256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastq_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastq256((__v2di)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastb_epi8(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastb128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastw_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastd_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastd128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastq_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastq128((__v2di)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar8x32_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256((__v8si)__X, (__v8si)__Y);
}
# 1061 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar8x32_ps(__m256 __X, __m256i __Y) {
  return (__m256)__builtin_ia32_permvarsf256((__v8sf)__X, (__v8si)__Y);
}
# 1119 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_epi32(int const *__X, __m256i __M) {
  return (__m256i)__builtin_ia32_maskloadd256((const __v8si *)__X, (__v8si)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_epi64(long long const *__X, __m256i __M) {
  return (__m256i)__builtin_ia32_maskloadq256((const __v4di *)__X, (__v4di)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_epi32(int const *__X, __m128i __M) {
  return (__m128i)__builtin_ia32_maskloadd((const __v4si *)__X, (__v4si)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_epi64(long long const *__X, __m128i __M) {
  return (__m128i)__builtin_ia32_maskloadq((const __v2di *)__X, (__v2di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_epi32(int *__X, __m256i __M, __m256i __Y) {
  __builtin_ia32_maskstored256((__v8si *)__X, (__v8si)__M, (__v8si)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_epi64(long long *__X, __m256i __M, __m256i __Y) {
  __builtin_ia32_maskstoreq256((__v4di *)__X, (__v4di)__M, (__v4di)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_epi32(int *__X, __m128i __M, __m128i __Y) {
  __builtin_ia32_maskstored((__v4si *)__X, (__v4si)__M, (__v4si)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_epi64(long long *__X, __m128i __M, __m128i __Y) {
  __builtin_ia32_maskstoreq((__v2di *)__X, (__v2di)__M, (__v2di)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di((__v2di)__X, (__v2di)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di((__v2di)__X, (__v2di)__Y);
}
# 1920 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx2intrin.h" 3 4
#pragma GCC pop_options
# 52 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512f")

typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));
typedef long long __v8di __attribute__((__vector_size__(64)));
typedef unsigned long long __v8du __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));
typedef unsigned int __v16su __attribute__((__vector_size__(64)));
typedef short __v32hi __attribute__((__vector_size__(64)));
typedef unsigned short __v32hu __attribute__((__vector_size__(64)));
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef unsigned char __v64qu __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64), __may_alias__));
typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef float __m512_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef long long __m512i_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef double __m512d_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_int2mask(int __M) {
  return (__mmask16)__M;
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2int(__mmask16 __M) {
  return (int)__M;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi64(long long __A, long long __B, long long __C, long long __D,
                     long long __E, long long __F, long long __G,
                     long long __H) {
  return __extension__(__m512i)(__v8di){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                     int __G, int __H, int __I, int __J, int __K, int __L,
                     int __M, int __N, int __O, int __P) {
  return __extension__(__m512i)(__v16si){__P, __O, __N, __M, __L, __K,
                                         __J, __I, __H, __G, __F, __E,
                                         __D, __C, __B, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi16(short __q31, short __q30, short __q29, short __q28,
                     short __q27, short __q26, short __q25, short __q24,
                     short __q23, short __q22, short __q21, short __q20,
                     short __q19, short __q18, short __q17, short __q16,
                     short __q15, short __q14, short __q13, short __q12,
                     short __q11, short __q10, short __q09, short __q08,
                     short __q07, short __q06, short __q05, short __q04,
                     short __q03, short __q02, short __q01, short __q00) {
  return __extension__(__m512i)(__v32hi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
      __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
      __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi8(char __q63, char __q62, char __q61, char __q60, char __q59,
                    char __q58, char __q57, char __q56, char __q55, char __q54,
                    char __q53, char __q52, char __q51, char __q50, char __q49,
                    char __q48, char __q47, char __q46, char __q45, char __q44,
                    char __q43, char __q42, char __q41, char __q40, char __q39,
                    char __q38, char __q37, char __q36, char __q35, char __q34,
                    char __q33, char __q32, char __q31, char __q30, char __q29,
                    char __q28, char __q27, char __q26, char __q25, char __q24,
                    char __q23, char __q22, char __q21, char __q20, char __q19,
                    char __q18, char __q17, char __q16, char __q15, char __q14,
                    char __q13, char __q12, char __q11, char __q10, char __q09,
                    char __q08, char __q07, char __q06, char __q05, char __q04,
                    char __q03, char __q02, char __q01, char __q00) {
  return __extension__(__m512i)(__v64qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09,
      __q10, __q11, __q12, __q13, __q14, __q15, __q16, __q17, __q18, __q19,
      __q20, __q21, __q22, __q23, __q24, __q25, __q26, __q27, __q28, __q29,
      __q30, __q31, __q32, __q33, __q34, __q35, __q36, __q37, __q38, __q39,
      __q40, __q41, __q42, __q43, __q44, __q45, __q46, __q47, __q48, __q49,
      __q50, __q51, __q52, __q53, __q54, __q55, __q56, __q57, __q58, __q59,
      __q60, __q61, __q62, __q63};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_pd(double __A, double __B, double __C, double __D, double __E,
                  double __F, double __G, double __H) {
  return __extension__(__m512d){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_ps(float __A, float __B, float __C, float __D, float __E,
                  float __F, float __G, float __H, float __I, float __J,
                  float __K, float __L, float __M, float __N, float __O,
                  float __P) {
  return __extension__(__m512){__P, __O, __N, __M, __L, __K, __J, __I,
                               __H, __G, __F, __E, __D, __C, __B, __A};
}
# 184 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_ps(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m512 __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_pd(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m512d __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_epi32(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m512i __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi8(char __A) {
  return __extension__(__m512i)(__v64qi){
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi16(short __A) {
  return __extension__(__m512i)(__v32hi){
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_pd(double __A) {
  return __extension__(__m512d)(__v8df){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_ps(float __A) {
  return __extension__(__m512)(__v16sf){__A, __A, __A, __A, __A, __A, __A, __A,
                                        __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_epi32(int __A, int __B, int __C, int __D) {
  return __extension__(__m512i)(__v16si){__D, __C, __B, __A, __D, __C,
                                         __B, __A, __D, __C, __B, __A,
                                         __D, __C, __B, __A};
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_set4_epi64(long long __A, long long __B, long long __C, long long __D) {
  return __extension__(__m512i)(__v8di){__D, __C, __B, __A, __D, __C, __B, __A};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_pd(double __A, double __B, double __C, double __D) {
  return __extension__(__m512d){__D, __C, __B, __A, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_ps(float __A, float __B, float __C, float __D) {
  return __extension__(__m512){__D, __C, __B, __A, __D, __C, __B, __A,
                               __D, __C, __B, __A, __D, __C, __B, __A};
}
# 312 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_ps(void) {
  return __extension__(__m512){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero(void) {
  return _mm512_setzero_ps();
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_pd(void) {
  return __extension__(__m512d){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_epi32(void) {
  return __extension__(__m512i)(__v8di){0, 0, 0, 0, 0, 0, 0, 0};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_si512(void) {
  return __extension__(__m512i)(__v8di){0, 0, 0, 0, 0, 0, 0, 0};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movapd512_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movapd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movaps512_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movaps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_pd(void const *__P) {
  return *(__m512d *)__P;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadapd512_mask((const __v8df *)__P,
                                                 (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadapd512_mask(
      (const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_pd(void *__P, __m512d __A) {
  *(__m512d *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_storeapd512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_ps(void const *__P) {
  return *(__m512 *)__P;
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadaps512_mask((const __v16sf *)__P,
                                                (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadaps512_mask(
      (const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_ps(void *__P, __m512 __A) {
  *(__m512 *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_storeaps512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa64_512_mask((__v8di)__A, (__v8di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa64_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_epi64(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa64load512_mask(
      (const __v8di *)__P, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa64load512_mask(
      (const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_epi64(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_movdqa64store512_mask((__v8di *)__P, (__v8di)__A,
                                       (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa32_512_mask((__v16si)__A, (__v16si)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa32_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_si512(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_epi32(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa32load512_mask(
      (const __v16si *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa32load512_mask(
      (const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_si512(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_epi32(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_movdqa32store512_mask((__v16si *)__P, (__v16si)__A,
                                       (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A * (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulld512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulld512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullox_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A * (__v8du)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullox_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return _mm512_mask_mov_epi64(__W, __M, _mm512_mullox_epi64(__A, __B));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A + (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A - (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A + (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_add_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_epi32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask((__v16si)__X, (__v16si)__Y,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_epi32(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A - (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sub_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_epu32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_epu32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask((__v16si)__X, (__v16si)__Y,
                                                 (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_epu32(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M);
}
# 1056 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sll_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 1135 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srl_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 1214 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sra_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 1293 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sll_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}
# 1372 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srl_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}
# 1451 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sra_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}
# 1653 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
typedef enum {
  _MM_TERNLOG_A = 0xF0,
  _MM_TERNLOG_B = 0xCC,
  _MM_TERNLOG_C = 0xAA
} _MM_TERNLOG_ENUM;
# 1783 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp14_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp14_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask((__v8df)__A, (__v8df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp14_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp14_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp14_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask((__v16sf)__A, (__v16sf)__W,
                                                (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp14_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd((__v2df)__B, (__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd_mask((__v2df)__B, (__v2df)__A,
                                              (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd_mask(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss((__v4sf)__B, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss_mask((__v4sf)__B, (__v4sf)__A,
                                             (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss_mask(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt14_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rsqrt14_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask((__v8df)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt14_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt14_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rsqrt14_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask((__v16sf)__A, (__v16sf)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt14_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd((__v2df)__B, (__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd_mask((__v2df)__B, (__v2df)__A,
                                                (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd_mask(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss((__v4sf)__B, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss_mask((__v4sf)__B, (__v4sf)__A,
                                               (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss_mask(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}
# 2190 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi32(__m512i __W, __mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask((__v16qi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi32(__mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask((__v16qi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi32(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi32(__m512i __W, __mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask((__v16hi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi32(__mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask((__v8hi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi64(__m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi64(__m512i __W, __mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask((__v8si)__X, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi64(__mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi32(__m512i __W, __mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask((__v16qi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi32(__mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask((__v16qi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu16_epi32(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu16_epi32(__m512i __W, __mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask((__v16hi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu16_epi32(__mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu16_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu16_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask((__v8hi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_epi64(__m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_epi64(__m512i __W, __mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask((__v8si)__X, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_epi64(__mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 4035 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask(
      (__v8di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask((__v8di)__A, (__v8di)__W,
                                               (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask(
      (__v16si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask((__v16si)__A, (__v16si)__W,
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastss_ps(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastss_ps(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512((__v4sf)__A, (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastss_ps(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastsd_pd(__m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512(
      (__v2df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastsd_pd(__m512d __O, __mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512((__v2df)__A, (__v8df)__O, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512(
      (__v2df)__A, (__v8df)_mm512_setzero_pd(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastd_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastd_epi32(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512((__v4si)__A, (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastd_epi32(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi32(int __A) {
  return (__m512i)(__v16si){__A, __A, __A, __A, __A, __A, __A, __A,
                            __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi32(__m512i __O, __mmask16 __M, int __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(__A, (__v16si)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi32(__mmask16 __M, int __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(
      __A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastq_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512(
      (__v2di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastq_epi64(__m512i __O, __mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512((__v2di)__A, (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512(
      (__v2di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi64(long long __A) {
  return (__m512i)(__v8di){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi64(__m512i __O, __mmask8 __M, long long __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(__A, (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(
      __A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x4(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x4(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512((__v4sf)__A, (__v16sf)__O,
                                                   __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x4(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x4(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x4(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512((__v4si)__A, (__v16si)__O,
                                                    __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x4(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f64x4(__m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512(
      (__v4df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f64x4(__m512d __O, __mmask8 __M, __m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512((__v4df)__A, (__v8df)__O,
                                                    __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f64x4(__mmask8 __M, __m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512(
      (__v4df)__A, (__v8df)_mm512_setzero_pd(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i64x4(__m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512(
      (__v4di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i64x4(__m512i __O, __mmask8 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512((__v4di)__A, (__v8di)__O,
                                                    __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i64x4(__mmask8 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512(
      (__v4di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

typedef enum {
  _MM_PERM_AAAA = 0x00,
  _MM_PERM_AAAB = 0x01,
  _MM_PERM_AAAC = 0x02,
  _MM_PERM_AAAD = 0x03,
  _MM_PERM_AABA = 0x04,
  _MM_PERM_AABB = 0x05,
  _MM_PERM_AABC = 0x06,
  _MM_PERM_AABD = 0x07,
  _MM_PERM_AACA = 0x08,
  _MM_PERM_AACB = 0x09,
  _MM_PERM_AACC = 0x0A,
  _MM_PERM_AACD = 0x0B,
  _MM_PERM_AADA = 0x0C,
  _MM_PERM_AADB = 0x0D,
  _MM_PERM_AADC = 0x0E,
  _MM_PERM_AADD = 0x0F,
  _MM_PERM_ABAA = 0x10,
  _MM_PERM_ABAB = 0x11,
  _MM_PERM_ABAC = 0x12,
  _MM_PERM_ABAD = 0x13,
  _MM_PERM_ABBA = 0x14,
  _MM_PERM_ABBB = 0x15,
  _MM_PERM_ABBC = 0x16,
  _MM_PERM_ABBD = 0x17,
  _MM_PERM_ABCA = 0x18,
  _MM_PERM_ABCB = 0x19,
  _MM_PERM_ABCC = 0x1A,
  _MM_PERM_ABCD = 0x1B,
  _MM_PERM_ABDA = 0x1C,
  _MM_PERM_ABDB = 0x1D,
  _MM_PERM_ABDC = 0x1E,
  _MM_PERM_ABDD = 0x1F,
  _MM_PERM_ACAA = 0x20,
  _MM_PERM_ACAB = 0x21,
  _MM_PERM_ACAC = 0x22,
  _MM_PERM_ACAD = 0x23,
  _MM_PERM_ACBA = 0x24,
  _MM_PERM_ACBB = 0x25,
  _MM_PERM_ACBC = 0x26,
  _MM_PERM_ACBD = 0x27,
  _MM_PERM_ACCA = 0x28,
  _MM_PERM_ACCB = 0x29,
  _MM_PERM_ACCC = 0x2A,
  _MM_PERM_ACCD = 0x2B,
  _MM_PERM_ACDA = 0x2C,
  _MM_PERM_ACDB = 0x2D,
  _MM_PERM_ACDC = 0x2E,
  _MM_PERM_ACDD = 0x2F,
  _MM_PERM_ADAA = 0x30,
  _MM_PERM_ADAB = 0x31,
  _MM_PERM_ADAC = 0x32,
  _MM_PERM_ADAD = 0x33,
  _MM_PERM_ADBA = 0x34,
  _MM_PERM_ADBB = 0x35,
  _MM_PERM_ADBC = 0x36,
  _MM_PERM_ADBD = 0x37,
  _MM_PERM_ADCA = 0x38,
  _MM_PERM_ADCB = 0x39,
  _MM_PERM_ADCC = 0x3A,
  _MM_PERM_ADCD = 0x3B,
  _MM_PERM_ADDA = 0x3C,
  _MM_PERM_ADDB = 0x3D,
  _MM_PERM_ADDC = 0x3E,
  _MM_PERM_ADDD = 0x3F,
  _MM_PERM_BAAA = 0x40,
  _MM_PERM_BAAB = 0x41,
  _MM_PERM_BAAC = 0x42,
  _MM_PERM_BAAD = 0x43,
  _MM_PERM_BABA = 0x44,
  _MM_PERM_BABB = 0x45,
  _MM_PERM_BABC = 0x46,
  _MM_PERM_BABD = 0x47,
  _MM_PERM_BACA = 0x48,
  _MM_PERM_BACB = 0x49,
  _MM_PERM_BACC = 0x4A,
  _MM_PERM_BACD = 0x4B,
  _MM_PERM_BADA = 0x4C,
  _MM_PERM_BADB = 0x4D,
  _MM_PERM_BADC = 0x4E,
  _MM_PERM_BADD = 0x4F,
  _MM_PERM_BBAA = 0x50,
  _MM_PERM_BBAB = 0x51,
  _MM_PERM_BBAC = 0x52,
  _MM_PERM_BBAD = 0x53,
  _MM_PERM_BBBA = 0x54,
  _MM_PERM_BBBB = 0x55,
  _MM_PERM_BBBC = 0x56,
  _MM_PERM_BBBD = 0x57,
  _MM_PERM_BBCA = 0x58,
  _MM_PERM_BBCB = 0x59,
  _MM_PERM_BBCC = 0x5A,
  _MM_PERM_BBCD = 0x5B,
  _MM_PERM_BBDA = 0x5C,
  _MM_PERM_BBDB = 0x5D,
  _MM_PERM_BBDC = 0x5E,
  _MM_PERM_BBDD = 0x5F,
  _MM_PERM_BCAA = 0x60,
  _MM_PERM_BCAB = 0x61,
  _MM_PERM_BCAC = 0x62,
  _MM_PERM_BCAD = 0x63,
  _MM_PERM_BCBA = 0x64,
  _MM_PERM_BCBB = 0x65,
  _MM_PERM_BCBC = 0x66,
  _MM_PERM_BCBD = 0x67,
  _MM_PERM_BCCA = 0x68,
  _MM_PERM_BCCB = 0x69,
  _MM_PERM_BCCC = 0x6A,
  _MM_PERM_BCCD = 0x6B,
  _MM_PERM_BCDA = 0x6C,
  _MM_PERM_BCDB = 0x6D,
  _MM_PERM_BCDC = 0x6E,
  _MM_PERM_BCDD = 0x6F,
  _MM_PERM_BDAA = 0x70,
  _MM_PERM_BDAB = 0x71,
  _MM_PERM_BDAC = 0x72,
  _MM_PERM_BDAD = 0x73,
  _MM_PERM_BDBA = 0x74,
  _MM_PERM_BDBB = 0x75,
  _MM_PERM_BDBC = 0x76,
  _MM_PERM_BDBD = 0x77,
  _MM_PERM_BDCA = 0x78,
  _MM_PERM_BDCB = 0x79,
  _MM_PERM_BDCC = 0x7A,
  _MM_PERM_BDCD = 0x7B,
  _MM_PERM_BDDA = 0x7C,
  _MM_PERM_BDDB = 0x7D,
  _MM_PERM_BDDC = 0x7E,
  _MM_PERM_BDDD = 0x7F,
  _MM_PERM_CAAA = 0x80,
  _MM_PERM_CAAB = 0x81,
  _MM_PERM_CAAC = 0x82,
  _MM_PERM_CAAD = 0x83,
  _MM_PERM_CABA = 0x84,
  _MM_PERM_CABB = 0x85,
  _MM_PERM_CABC = 0x86,
  _MM_PERM_CABD = 0x87,
  _MM_PERM_CACA = 0x88,
  _MM_PERM_CACB = 0x89,
  _MM_PERM_CACC = 0x8A,
  _MM_PERM_CACD = 0x8B,
  _MM_PERM_CADA = 0x8C,
  _MM_PERM_CADB = 0x8D,
  _MM_PERM_CADC = 0x8E,
  _MM_PERM_CADD = 0x8F,
  _MM_PERM_CBAA = 0x90,
  _MM_PERM_CBAB = 0x91,
  _MM_PERM_CBAC = 0x92,
  _MM_PERM_CBAD = 0x93,
  _MM_PERM_CBBA = 0x94,
  _MM_PERM_CBBB = 0x95,
  _MM_PERM_CBBC = 0x96,
  _MM_PERM_CBBD = 0x97,
  _MM_PERM_CBCA = 0x98,
  _MM_PERM_CBCB = 0x99,
  _MM_PERM_CBCC = 0x9A,
  _MM_PERM_CBCD = 0x9B,
  _MM_PERM_CBDA = 0x9C,
  _MM_PERM_CBDB = 0x9D,
  _MM_PERM_CBDC = 0x9E,
  _MM_PERM_CBDD = 0x9F,
  _MM_PERM_CCAA = 0xA0,
  _MM_PERM_CCAB = 0xA1,
  _MM_PERM_CCAC = 0xA2,
  _MM_PERM_CCAD = 0xA3,
  _MM_PERM_CCBA = 0xA4,
  _MM_PERM_CCBB = 0xA5,
  _MM_PERM_CCBC = 0xA6,
  _MM_PERM_CCBD = 0xA7,
  _MM_PERM_CCCA = 0xA8,
  _MM_PERM_CCCB = 0xA9,
  _MM_PERM_CCCC = 0xAA,
  _MM_PERM_CCCD = 0xAB,
  _MM_PERM_CCDA = 0xAC,
  _MM_PERM_CCDB = 0xAD,
  _MM_PERM_CCDC = 0xAE,
  _MM_PERM_CCDD = 0xAF,
  _MM_PERM_CDAA = 0xB0,
  _MM_PERM_CDAB = 0xB1,
  _MM_PERM_CDAC = 0xB2,
  _MM_PERM_CDAD = 0xB3,
  _MM_PERM_CDBA = 0xB4,
  _MM_PERM_CDBB = 0xB5,
  _MM_PERM_CDBC = 0xB6,
  _MM_PERM_CDBD = 0xB7,
  _MM_PERM_CDCA = 0xB8,
  _MM_PERM_CDCB = 0xB9,
  _MM_PERM_CDCC = 0xBA,
  _MM_PERM_CDCD = 0xBB,
  _MM_PERM_CDDA = 0xBC,
  _MM_PERM_CDDB = 0xBD,
  _MM_PERM_CDDC = 0xBE,
  _MM_PERM_CDDD = 0xBF,
  _MM_PERM_DAAA = 0xC0,
  _MM_PERM_DAAB = 0xC1,
  _MM_PERM_DAAC = 0xC2,
  _MM_PERM_DAAD = 0xC3,
  _MM_PERM_DABA = 0xC4,
  _MM_PERM_DABB = 0xC5,
  _MM_PERM_DABC = 0xC6,
  _MM_PERM_DABD = 0xC7,
  _MM_PERM_DACA = 0xC8,
  _MM_PERM_DACB = 0xC9,
  _MM_PERM_DACC = 0xCA,
  _MM_PERM_DACD = 0xCB,
  _MM_PERM_DADA = 0xCC,
  _MM_PERM_DADB = 0xCD,
  _MM_PERM_DADC = 0xCE,
  _MM_PERM_DADD = 0xCF,
  _MM_PERM_DBAA = 0xD0,
  _MM_PERM_DBAB = 0xD1,
  _MM_PERM_DBAC = 0xD2,
  _MM_PERM_DBAD = 0xD3,
  _MM_PERM_DBBA = 0xD4,
  _MM_PERM_DBBB = 0xD5,
  _MM_PERM_DBBC = 0xD6,
  _MM_PERM_DBBD = 0xD7,
  _MM_PERM_DBCA = 0xD8,
  _MM_PERM_DBCB = 0xD9,
  _MM_PERM_DBCC = 0xDA,
  _MM_PERM_DBCD = 0xDB,
  _MM_PERM_DBDA = 0xDC,
  _MM_PERM_DBDB = 0xDD,
  _MM_PERM_DBDC = 0xDE,
  _MM_PERM_DBDD = 0xDF,
  _MM_PERM_DCAA = 0xE0,
  _MM_PERM_DCAB = 0xE1,
  _MM_PERM_DCAC = 0xE2,
  _MM_PERM_DCAD = 0xE3,
  _MM_PERM_DCBA = 0xE4,
  _MM_PERM_DCBB = 0xE5,
  _MM_PERM_DCBC = 0xE6,
  _MM_PERM_DCBD = 0xE7,
  _MM_PERM_DCCA = 0xE8,
  _MM_PERM_DCCB = 0xE9,
  _MM_PERM_DCCC = 0xEA,
  _MM_PERM_DCCD = 0xEB,
  _MM_PERM_DCDA = 0xEC,
  _MM_PERM_DCDB = 0xED,
  _MM_PERM_DCDC = 0xEE,
  _MM_PERM_DCDD = 0xEF,
  _MM_PERM_DDAA = 0xF0,
  _MM_PERM_DDAB = 0xF1,
  _MM_PERM_DDAC = 0xF2,
  _MM_PERM_DDAD = 0xF3,
  _MM_PERM_DDBA = 0xF4,
  _MM_PERM_DDBB = 0xF5,
  _MM_PERM_DDBC = 0xF6,
  _MM_PERM_DDBD = 0xF7,
  _MM_PERM_DDCA = 0xF8,
  _MM_PERM_DDCB = 0xF9,
  _MM_PERM_DDCC = 0xFA,
  _MM_PERM_DDCD = 0xFB,
  _MM_PERM_DDDA = 0xFC,
  _MM_PERM_DDDB = 0xFD,
  _MM_PERM_DDDC = 0xFE,
  _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;
# 4725 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rolv_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rolv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rolv_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rorv_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rorv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rorv_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rolv_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rolv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rolv_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rorv_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rorv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rorv_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 5173 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu32_sd(__m128d __A, unsigned __B) {
  return (__m128d)__builtin_ia32_cvtusi2sd32((__v2df)__A, __B);
}
# 5282 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask((__v16si)__A, (__v16qi)__O,
                                                __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovsdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask((__v16si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovusdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask((__v16si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask((__v16si)__A, (__v16hi)__O,
                                                __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovsdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask((__v16si)__A, (__v16hi)__O,
                                                 __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovusdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask((__v16si)__A, (__v16hi)__O,
                                                  __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask((__v8di)__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask((__v8di)__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask((__v8di)__A, (__v8si)__O,
                                                  __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask((__v8di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask((__v8di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask((__v8di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqb512mem_mask((unsigned long long *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask((__v8di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqb512mem_mask((unsigned long long *)__P, (__v8di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask((__v8di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqb512mem_mask((unsigned long long *)__P, (__v8di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask((__v8di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_pd(__m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_pd(__m512d __W, __mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask((__v8si)__A, (__v8df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_pd(__mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_pd(__m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_pd(__m512d __W, __mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask((__v8si)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_pd(__mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}
# 6297 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_pd(void const *__P) {
  return *(__m512d_u *)__P;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadupd512_mask((const double *)__P,
                                                 (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadupd512_mask(
      (const double *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_pd(void *__P, __m512d __A) {
  *(__m512d_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_storeupd512_mask((double *)__P, (__v8df)__A, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_ps(void const *__P) {
  return *(__m512_u *)__P;
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadups512_mask((const float *)__P,
                                                (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadups512_mask(
      (const float *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_ps(void *__P, __m512 __A) {
  *(__m512_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_storeups512_mask((float *)__P, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_ss(__m128 __W, __mmask8 __U, const float *__P) {
  return (__m128)__builtin_ia32_loadss_mask(__P, (__v4sf)__W, __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_ss(__mmask8 __U, const float *__P) {
  return (__m128)__builtin_ia32_loadss_mask(__P, (__v4sf)_mm_setzero_ps(), __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_sd(__m128d __W, __mmask8 __U, const double *__P) {
  return (__m128d)__builtin_ia32_loadsd_mask(__P, (__v2df)__W, __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_sd(__mmask8 __U, const double *__P) {
  return (__m128d)__builtin_ia32_loadsd_mask(__P, (__v2df)_mm_setzero_pd(),
                                             __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_move_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movess_mask((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)__W, __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_move_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movess_mask((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)_mm_setzero_ps(), __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_move_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movesd_mask((__v2df)__A, (__v2df)__B,
                                             (__v2df)__W, __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_move_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movesd_mask((__v2df)__A, (__v2df)__B,
                                             (__v2df)_mm_setzero_pd(), __U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_ss(float *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storess_mask(__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_sd(double *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storesd_mask(__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi64(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqudi512_mask((const long long *)__P,
                                                   (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqudi512_mask(
      (const long long *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi64(void *__P, __m512i __A) {
  *(__m512i_u *)__P = (__m512i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_storedqudi512_mask((long long *)__P, (__v8di)__A,
                                    (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_si512(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi32(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqusi512_mask(
      (const int *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqusi512_mask(
      (const int *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_si512(void *__P, __m512i __A) {
  *(__m512i_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi32(void *__P, __m512i __A) {
  *(__m512i_u *)__P = (__m512i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_storedqusi512_mask((int *)__P, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutevar_pd(__m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_permutevar_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutevar_pd(__mmask8 __U, __m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutevar_ps(__m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_permutevar_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutevar_ps(__mmask16 __U, __m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi64(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_mask((__v8di)__I, (__v8di)__A,
                                                     (__v8di)__B, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi64(__m512i __A, __mmask8 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_mask(
      (__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi64(__m512i __A, __m512i __I, __mmask8 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varq512_mask(
      (__v8di)__A, (__v8di)__I, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi64(__mmask8 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_maskz(
      (__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi32(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_mask(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi32(__m512i __A, __mmask16 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_mask(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi32(__m512i __A, __m512i __I, __mmask16 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2vard512_mask(
      (__v16si)__A, (__v16si)__I, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi32(__mmask16 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_maskz(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_pd(__m512d __A, __m512i __I, __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_mask(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_pd(__m512d __A, __mmask8 __U, __m512i __I,
                                __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_mask(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_pd(__m512d __A, __m512i __I, __mmask8 __U,
                                 __m512d __B) {
  return (__m512d)__builtin_ia32_vpermi2varpd512_mask(
      (__v8df)__A, (__v8di)__I, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_pd(__mmask8 __U, __m512d __A, __m512i __I,
                                 __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_maskz(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_ps(__m512 __A, __m512i __I, __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_mask(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_ps(__m512 __A, __mmask16 __U, __m512i __I,
                                __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_mask(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_ps(__m512 __A, __m512i __I, __mmask16 __U,
                                 __m512 __B) {
  return (__m512)__builtin_ia32_vpermi2varps512_mask(
      (__v16sf)__A, (__v16si)__I, (__v16sf)__B, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_ps(__mmask16 __U, __m512 __A, __m512i __I,
                                 __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_maskz(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U);
}
# 6988 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi64(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask(
      (__v8di)__Y, (__v8di)__X, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask(
      (__v8di)__Y, (__v8di)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi64(__m512i __W, __mmask8 __M, __m512i __X,
                                  __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask((__v8di)__Y, (__v8di)__X,
                                                   (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi32(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask(
      (__v16si)__Y, (__v16si)__X, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask(
      (__v16si)__Y, (__v16si)__X, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi32(__m512i __W, __mmask16 __M, __m512i __X,
                                  __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask((__v16si)__Y, (__v16si)__X,
                                                   (__v16si)__W, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_pd(__m512i __X, __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask(
      (__v8df)__Y, (__v8di)__X, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_pd(__m512d __W, __mmask8 __U, __m512i __X,
                               __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask((__v8df)__Y, (__v8di)__X,
                                                   (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_pd(__mmask8 __U, __m512i __X, __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask(
      (__v8df)__Y, (__v8di)__X, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_ps(__m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask(
      (__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_permutexvar_ps(__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask((__v16sf)__Y, (__v16si)__X,
                                                  (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_ps(__mmask16 __U, __m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask(
      (__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}
# 7423 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movehdup_ps(__m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_movehdup_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_movehdup_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_moveldup_ps(__m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_moveldup_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_moveldup_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A | (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A | (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B,
                                              (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B,
                                              (__v16si)_mm512_setzero_si512(),
                                              (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A | (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_porq512_mask((__v8di)__A, (__v8di)__B,
                                              (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_porq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A ^ (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A ^ (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_xor_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A ^ (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxorq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxorq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 7788 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A & (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A & (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_and_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A & (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_si512(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_andnot_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_andnot_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B, __U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_ps(__m512 __A) {
  return (__m512)_mm512_and_epi32((__m512i)__A, _mm512_set1_epi32(0x7fffffff));
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)_mm512_mask_and_epi32((__m512i)__W, __U, (__m512i)__A,
                                       _mm512_set1_epi32(0x7fffffff));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_pd(__m512d __A) {
  return (__m512d)_mm512_and_epi64((__m512i)__A,
                                   _mm512_set1_epi64(0x7fffffffffffffffLL));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)_mm512_mask_and_epi64(
      (__m512i)__W, __U, (__m512i)__A, _mm512_set1_epi64(0x7fffffffffffffffLL));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask((__v8di)__A, (__v8di)__B,
                                                    (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask((__v8di)__A, (__v8di)__B,
                                                    (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
# 8406 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movedup_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_movedup_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask((__v8df)__A, (__v8df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_movedup_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_unpacklo_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_unpackhi_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}
# 8835 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_si512(__m512i *__P, __m512i __A) {
  __builtin_ia32_movntdq512((__v8di *)__P, (__v8di)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_ps(float *__P, __m512 __A) {
  __builtin_ia32_movntps512(__P, (__v16sf)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_pd(double *__P, __m512d __A) {
  __builtin_ia32_movntpd512(__P, (__v8df)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_load_si512(void *__P) {
  return __builtin_ia32_movntdqa512((__v8di *)__P);
}

typedef enum {
  _MM_MANT_NORM_1_2,
  _MM_MANT_NORM_p5_2,
  _MM_MANT_NORM_p5_1,
  _MM_MANT_NORM_p75_1p5
} _MM_MANTISSA_NORM_ENUM;

typedef enum {
  _MM_MANT_SIGN_src,
  _MM_MANT_SIGN_zero,
  _MM_MANT_SIGN_nan
} _MM_MANTISSA_SIGN_ENUM;
# 9507 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_floor_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x01 | 0x00),
                                                (__v16sf)__A, -1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_floor_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x01 | 0x00),
                                                 (__v8df)__A, -1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ceil_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x02 | 0x00),
                                                (__v16sf)__A, -1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ceil_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x02 | 0x00),
                                                 (__v8df)__A, -1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_floor_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x01 | 0x00),
                                                (__v16sf)__W, __U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_floor_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x01 | 0x00),
                                                 (__v8df)__W, __U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ceil_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x02 | 0x00),
                                                (__v16sf)__W, __U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ceil_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x02 | 0x00),
                                                 (__v8df)__W, __U, 0x04);
}
# 9686 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                                (__mmask8)-1);
}
# 10834 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_compressdf512_mask((__v8df)__A, (__v8df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_compressdf512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_compressstoredf512_mask((__v8df *)__P, (__v8df)__A,
                                         (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_compresssf512_mask((__v16sf)__A, (__v16sf)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_compresssf512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_compressstoresf512_mask((__v16sf *)__P, (__v16sf)__A,
                                         (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compressdi512_mask((__v8di)__A, (__v8di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compressdi512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_compressstoredi512_mask((__v8di *)__P, (__v8di)__A,
                                         (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compresssi512_mask((__v16si)__A, (__v16si)__W,
                                                    (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compresssi512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_compressstoresi512_mask((__v16si *)__P, (__v16si)__A,
                                         (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_expanddf512_mask((__v8df)__A, (__v8df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_expanddf512_maskz(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_expandloaddf512_mask(
      (const __v8df *)__P, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_expandloaddf512_maskz(
      (const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_expandsf512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_expandsf512_maskz(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_expandloadsf512_mask(
      (const __v16sf *)__P, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_expandloadsf512_maskz(
      (const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expanddi512_mask((__v8di)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expanddi512_maskz(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloaddi512_mask(
      (const __v8di *)__P, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloaddi512_maskz(
      (const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expandsi512_mask((__v16si)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expandsi512_maskz(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloadsi512_mask(
      (const __v16si *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloadsi512_maskz(
      (const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}
# 11103 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask16_u8(__mmask16 __A, __mmask16 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestchi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_kortestzhi((__mmask16)__A,
                                                  (__mmask16)__B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_kortestchi((__mmask16)__A,
                                                  (__mmask16)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask16_u32(__mmask16 __A) {
  return (unsigned int)__builtin_ia32_kmovw((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask16(unsigned int __A) {
  return (__mmask16)__builtin_ia32_kmovw((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask16(__mmask16 *__A) {
  return (__mmask16)__builtin_ia32_kmovw(*(__mmask16 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask16(__mmask16 *__A, __mmask16 __B) {
  *(__mmask16 *)__A = __builtin_ia32_kmovw(__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kand(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kandhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kandn(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kandnhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_korhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kortestz(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kortestzhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kortestc(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kortestchi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kxnor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kxnorhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kxor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kxorhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_knot(__mmask16 __A) {
  return (__mmask16)__builtin_ia32_knothi((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackb(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kunpckhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackb_mask16(__mmask8 __A, __mmask8 __B) {
  return (__mmask16)__builtin_ia32_kunpckhi((__mmask16)__A, (__mmask16)__B);
}
# 11298 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}
# 11746 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_pd(__mmask8 __U, __m512d __A, __m512d __W) {
  return (__m512d)__builtin_ia32_blendmpd_512_mask((__v8df)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_ps(__mmask16 __U, __m512 __A, __m512 __W) {
  return (__m512)__builtin_ia32_blendmps_512_mask((__v16sf)__A, (__v16sf)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi64(__mmask8 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmq_512_mask((__v8di)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi32(__mmask16 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmd_512_mask((__v16si)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}
# 11888 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}
# 12511 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_ps(__m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A + (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_addpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A + (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_addps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A - (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_subpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A - (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_subps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A * (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_mulpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A * (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_mulps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_pd(__m512d __M, __m512d __V) {
  return (__m512d)((__v8df)__M / (__v8df)__V);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d __V) {
  return (__m512d)__builtin_ia32_divpd512_mask(
      (__v8df)__M, (__v8df)__V, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_pd(__mmask8 __U, __m512d __M, __m512d __V) {
  return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A / (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_divps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_undefined_pd(),
                                                  (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_setzero_pd(),
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_setzero_ps(),
                                                 (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmaddsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmaddsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmaddsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask3_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_fmaddsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmsubadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmsubaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmsubadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsubadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask3_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmsubaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_fmsubadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epi32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epi32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epu32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epu32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epi32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epi32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epu32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epu32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epi32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epi32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epi32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epu32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epu32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                    (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epu32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epi32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epi32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epi32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epu32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epu32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epu32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsd_f64(__m512d __A) {
  return __A[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtss_f32(__m512 __A) {
  return __A[0];
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu64_ss(__m128 __A, unsigned long long __B) {
  return (__m128)__builtin_ia32_cvtusi2ss64((__v4sf)__A, __B, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu64_sd(__m128d __A, unsigned long long __B) {
  return (__m128d)__builtin_ia32_cvtusi2sd64((__v2df)__A, __B, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu32_ss(__m128 __A, unsigned __B) {
  return (__m128)__builtin_ia32_cvtusi2ss32((__v4sf)__A, __B, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_ps(__m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_ps(__m512 __W, __mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                 (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_ps(__mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_ps(__m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_ps(__m512 __W, __mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_ps(__mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}
# 14427 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_u64(__m128 __A) {
  return (unsigned long long)__builtin_ia32_vcvtss2usi64((__v4sf)__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_u64(__m128 __A) {
  return (unsigned long long)__builtin_ia32_vcvttss2usi64((__v4sf)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_i64(__m128 __A) {
  return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsi512_si32(__m512i __A) {
  __v16si __B = (__v16si)__A;
  return __B[0];
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_u32(__m128 __A) {
  return (unsigned)__builtin_ia32_vcvtss2usi32((__v4sf)__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_u32(__m128 __A) {
  return (unsigned)__builtin_ia32_vcvttss2usi32((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_i32(__m128 __A) {
  return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_i32(__m128d __A) {
  return (int)__builtin_ia32_cvtsd2si((__v2df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_i32(__m128 __A) {
  return (int)__builtin_ia32_cvtss2si((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti32_sd(__m128d __A, int __B) {
  return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti32_ss(__m128 __A, int __B) {
  return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_u64(__m128d __A) {
  return (unsigned long long)__builtin_ia32_vcvtsd2usi64((__v2df)__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_u64(__m128d __A) {
  return (unsigned long long)__builtin_ia32_vcvttsd2usi64((__v2df)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_i64(__m128d __A) {
  return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_i64(__m128d __A) {
  return (long long)__builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_i64(__m128 __A) {
  return (long long)__builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti64_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti64_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_u32(__m128d __A) {
  return (unsigned)__builtin_ia32_vcvtsd2usi32((__v2df)__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_u32(__m128d __A) {
  return (unsigned)__builtin_ia32_vcvttsd2usi32((__v2df)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_i32(__m128d __A) {
  return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_pd(__m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_pd(__m512d __W, __mmask8 __U, __m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_pd(__mmask8 __U, __m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_ps(__m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_ps(__m512 __W, __mmask16 __U, __m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_ps(__mmask16 __U, __m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_ps(__m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_ps(__m256 __W, __mmask8 __U, __m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)__W,
                                                 (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_ps(__mmask8 __U, __m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}
# 15451 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x00,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x00,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x01,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x01,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x02,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x02,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpunord_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x03,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpunord_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x03,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x04,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x04,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnlt_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x05,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnlt_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x05,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnle_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x06,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnle_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x06,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpord_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x07,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpord_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x07,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x00, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x00, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x01, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x01, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x02, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x02, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpunord_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x03, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpunord_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x03, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x04, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x04, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnlt_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x05, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnlt_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x05, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnle_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x06, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnle_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x06, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpord_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x07, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpord_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x07, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kmov(__mmask16 __A) {
  return __builtin_ia32_kmovw(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd_ps(__m512d __A) {
  return (__m512)(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd_si512(__m512d __A) {
  return (__m512i)(__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps_pd(__m512 __A) {
  return (__m512d)(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps_si512(__m512 __A) {
  return (__m512i)(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_ps(__m512i __A) {
  return (__m512)(__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_pd(__m512i __A) {
  return (__m512d)(__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd512_pd128(__m512d __A) {
  return (__m128d)((__m128)__builtin_ia32_extractf32x4_mask(
      (__v16sf)(__m512)((__m512)__A), (int)(0),
      (__v4sf)(__m128)_mm_undefined_ps(), (__mmask8)-1));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps512_ps128(__m512 __A) {
  return ((__m128)__builtin_ia32_extractf32x4_mask(
      (__v16sf)(__m512)(__A), (int)(0), (__v4sf)(__m128)_mm_undefined_ps(),
      (__mmask8)-1));
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_si128(__m512i __A) {
  return (__m128i)((__m128i)__builtin_ia32_extracti32x4_mask(
      (__v16si)(__m512i)((__m512i)__A), (int)(0),
      (__v4si)(__m128i)_mm_undefined_si128(), (__mmask8)-1));
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd512_pd256(__m512d __A) {
  return ((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps512_ps256(__m512 __A) {
  return (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_si256(__m512i __A) {
  return (__m256i)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd128_pd512(__m128d __A) {
  return (__m512d)__builtin_ia32_pd512_pd((__m128d)__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps128_ps512(__m128 __A) {
  return (__m512)__builtin_ia32_ps512_ps((__m128)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi128_si512(__m128i __A) {
  return (__m512i)__builtin_ia32_si512_si((__v4si)__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd256_pd512(__m256d __A) {
  return __builtin_ia32_pd512_256pd(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps256_ps512(__m256 __A) {
  return __builtin_ia32_ps512_256ps(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi256_si512(__m256i __A) {
  return (__m512i)__builtin_ia32_si512_256si((__v8si)__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextpd128_pd512(__m128d __A) {
  return (__m512d)((__m512)__builtin_ia32_insertf32x4_mask(
      (__v16sf)(__m512)(_mm512_setzero_ps()), (__v4sf)(__m128)((__m128)__A),
      (int)(0), (__v16sf)(__m512)(_mm512_setzero_ps()), (__mmask16)(-1)));
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextps128_ps512(__m128 __A) {
  return ((__m512)__builtin_ia32_insertf32x4_mask(
      (__v16sf)(__m512)(_mm512_setzero_ps()), (__v4sf)(__m128)(__A), (int)(0),
      (__v16sf)(__m512)(_mm512_setzero_ps()), (__mmask16)(-1)));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextsi128_si512(__m128i __A) {
  return ((__m512i)__builtin_ia32_inserti32x4_mask(
      (__v16si)(__m512i)(_mm512_setzero_si512()), (__v4si)(__m128i)(__A),
      (int)(0), (__v16si)(__m512i)(_mm512_setzero_si512()), (__mmask16)(-1)));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextpd256_pd512(__m256d __A) {
  return ((__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)(__m512d)(_mm512_setzero_pd()), (__v4df)(__m256d)(__A), (int)(0),
      (__v8df)(__m512d)_mm512_undefined_pd(), (__mmask8)-1));
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextps256_ps512(__m256 __A) {
  return (__m512)((__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)(__m512d)(_mm512_setzero_pd()), (__v4df)(__m256d)((__m256d)__A),
      (int)(0), (__v8df)(__m512d)_mm512_undefined_pd(), (__mmask8)-1));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextsi256_si512(__m256i __A) {
  return ((__m512i)__builtin_ia32_inserti64x4_mask(
      (__v8di)(__m512i)(_mm512_setzero_si512()), (__v4di)(__m256i)(__A),
      (int)(0), (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0,
                                                 __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6,
                                                 __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6,
                                                (__mmask8)-1);
}
# 16026 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 + __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 * __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_and_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 & __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 & __T7;
  return __T8[0] & __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_or_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 | __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 | __T7;
  return __T8[0] | __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 + __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(1), __U, __A);
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 * __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_and_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(~0), __U, __A);
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 & __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 & __T7;
  return __T8[0] & __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_or_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __v8si __T1 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v8si __T2 = (__v8si)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v4si __T4 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v4si __T5 = (__v4si)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v4si __T6 = __T4 | __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 | __T7;
  return __T8[0] | __T8[1];
}
# 16102 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epi32(__m512i __A) {
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_min_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_min_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epi32(__m512i __A) {
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_max_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_max_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epu32(__m512i __A) {
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_min_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_min_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epu32(__m512i __A) {
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_max_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_max_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(0x7fffffff), __U, __A);
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_min_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_min_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(-0x7fffffff - 1), __U, __A);
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_max_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_max_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epu32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(~0), __U, __A);
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_min_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_min_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epu32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __m256i __T1 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T2 = (__m256i)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = _mm256_max_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __m128i __T5 = (__m128i)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __m128i __T6 = _mm_max_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epu32(__T8, __T9);
  return __T10[0];
}
# 16174 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_ps(__m512 __A) {
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = __T1 + __T2;
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = __T4 + __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_ps(__m512 __A) {
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = __T1 * __T2;
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = __T4 * __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_maskz_mov_ps(__U, __A);
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = __T1 + __T2;
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = __T4 + __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(1.0f), __U, __A);
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = __T1 * __T2;
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = __T4 * __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}
# 16218 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_ps(__m512 __A) {
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = _mm256_min_ps(__T1, __T2);
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = _mm_min_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_min_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_min_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_ps(__m512 __A) {
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = _mm256_max_ps(__T1, __T2);
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = _mm_max_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_max_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_max_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(__builtin_inff()), __U, __A);
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = _mm256_min_ps(__T1, __T2);
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = _mm_min_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_min_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_min_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(-__builtin_inff()), __U, __A);
  __m256 __T1 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T2 = (__m256)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256 __T3 = _mm256_max_ps(__T1, __T2);
  __m128 __T4 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(1)));
  __m128 __T5 = ((__m128)__builtin_ia32_vextractf128_ps256(
      (__v8sf)(__m256)(__T3), (int)(0)));
  __m128 __T6 = _mm_max_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_max_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_max_ps(__T8, __T9);
  return __T10[0];
}
# 16258 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_and_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 & __T5;
  return __T6[0] & __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_or_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 | __T5;
  return __T6[0] | __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(1LL), __U, __A);
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_and_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(~0LL), __U, __A);
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 & __T5;
  return __T6[0] & __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_or_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __v4di __T1 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(1),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __v4di __T2 = (__v4di)((__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)(__m512i)(__A), (int)(0),
      (__v4di)(__m256i)_mm256_undefined_si256(), (__mmask8)-1));
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v2di __T4 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(1)));
  __v2di __T5 = (__v2di)((__m128i)__builtin_ia32_extract128i256(
      (__v4di)(__m256i)(__T3), (int)(0)));
  __v2di __T6 = __T4 | __T5;
  return __T6[0] | __T6[1];
}
# 16332 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epi64(__m512i __A) {
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_min_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epi64(__m512i __A) {
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_max_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epi64(__mmask8 __U, __m512i __A) {
  __A =
      _mm512_mask_mov_epi64(_mm512_set1_epi64(0x7fffffffffffffffLL), __U, __A);
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_min_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(-0x7fffffffffffffffLL - 1), __U,
                              __A);
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_max_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epu64(__m512i __A) {
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_min_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epu64(__m512i __A) {
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_max_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epu64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(~0LL), __U, __A);
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_min_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epu64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __m512i __T1 = ((__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)(__m512i)(__A), (__v8di)(__m512i)(__A), (int)(0x4e),
      (__v8di)(__m512i)_mm512_undefined_epi32(), (__mmask8)-1));
  __m512i __T2 = _mm512_max_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epu64(__T4, __T5);
  return __T6[0];
}
# 16404 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_pd(__m512d __A) {
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = __T1 + __T2;
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_pd(__m512d __A) {
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = __T1 * __T2;
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_maskz_mov_pd(__U, __A);
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = __T1 + __T2;
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(1.0), __U, __A);
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = __T1 * __T2;
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}
# 16446 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fintrin.h" 3 4
extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_pd(__m512d __A) {
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = _mm256_min_pd(__T1, __T2);
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = _mm_min_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_min_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_pd(__m512d __A) {
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = _mm256_max_pd(__T1, __T2);
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = _mm_max_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_max_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(__builtin_inf()), __U, __A);
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = _mm256_min_pd(__T1, __T2);
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = _mm_min_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_min_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(-__builtin_inf()), __U, __A);
  __m256d __T1 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(1), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T2 = (__m256d)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)(__A), (int)(0), (__v4df)(__m256d)_mm256_undefined_pd(),
      (__mmask8)-1));
  __m256d __T3 = _mm256_max_pd(__T1, __T2);
  __m128d __T4 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(1)));
  __m128d __T5 = ((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)(__T3), (int)(0)));
  __m128d __T6 = _mm_max_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_max_pd(__T6, __T7);
  return __T8[0];
}

#pragma GCC pop_options
# 54 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512erintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512erintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512er")

typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 533 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512erintrin.h" 3 4
#pragma GCC pop_options
# 56 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512pfintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512pfintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512pf")

typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));

typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;
# 266 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512pfintrin.h" 3 4
#pragma GCC pop_options
# 58 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512cdintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512cdintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512cd")

typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));

typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_conflict_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_conflict_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_conflict_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_conflict_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_conflict_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask((__v8di)__A, (__v8di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_conflict_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_lzcnt_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_lzcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask((__v8di)__A, (__v8di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_lzcnt_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_lzcnt_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_lzcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask((__v16si)__A, (__v16si)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_lzcnt_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastmb_epi64(__mmask8 __A) {
  return (__m512i)__builtin_ia32_broadcastmb512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastmw_epi32(__mmask16 __A) {
  return (__m512i)__builtin_ia32_broadcastmw512(__A);
}

#pragma GCC pop_options
# 60 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vl")

typedef unsigned int __mmask32;
typedef int __v4si_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef int __v8si_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef long long __v2di_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef long long __v4di_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movapd256_mask((__v4df)__A, (__v4df)__W,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movapd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movapd128_mask((__v2df)__A, (__v2df)__W,
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movapd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadapd256_mask((__v4df *)__P, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadapd256_mask(
      (__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadapd128_mask((__v2df *)__P, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadapd128_mask(
      (__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_storeapd256_mask((__v4df *)__P, (__v4df)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storeapd128_mask((__v2df *)__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movaps256_mask((__v8sf)__A, (__v8sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movaps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movaps128_mask((__v4sf)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movaps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadaps256_mask((__v8sf *)__P, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadaps256_mask(
      (__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadaps128_mask((__v4sf *)__P, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadaps128_mask(
      (__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_storeaps256_mask((__v8sf *)__P, (__v8sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storeaps128_mask((__v4sf *)__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa64_256_mask((__v4di)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa64_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa64_128_mask((__v2di)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa64_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_epi64(void const *__P) {
  return (__m256i)(*(__v4di *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa64load256_mask(
      (__v4di *)__P, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa64load256_mask(
      (__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_epi64(void const *__P) {
  return (__m128i)(*(__v2di *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa64load128_mask(
      (__v2di *)__P, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa64load128_mask(
      (__v2di *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_movdqa64store256_mask((__v4di *)__P, (__v4di)__A,
                                       (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_movdqa64store128_mask((__v2di *)__P, (__v2di)__A,
                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa32_256_mask((__v8si)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa32_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa32_128_mask((__v4si)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa32_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_epi32(void const *__P) {
  return (__m256i)(*(__v8si *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa32load256_mask(
      (__v8si *)__P, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa32load256_mask(
      (__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_epi32(void const *__P) {
  return (__m128i)(*(__v4si *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa32load128_mask(
      (__v4si *)__P, (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa32load128_mask(
      (__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_epi32(void *__P, __m256i __A) {
  *(__v8si *)__P = (__v8si)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_movdqa32store256_mask((__v8si *)__P, (__v8si)__A,
                                       (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_epi32(void *__P, __m128i __A) {
  *(__v4si *)__P = (__v4si)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_movdqa32store128_mask((__v4si *)__P, (__v4si)__A,
                                       (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_subpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_subpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_subps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_subps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_epi64(void *__P, __m256i __A) {
  *(__m256i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_epi64(void *__P, __m128i __A) {
  *(__m128i *)__P = __A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadupd256_mask((const double *)__P,
                                                 (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadupd256_mask(
      (const double *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadupd128_mask((const double *)__P,
                                                 (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadupd128_mask(
      (const double *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_storeupd256_mask((double *)__P, (__v4df)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storeupd128_mask((double *)__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadups256_mask((const float *)__P, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadups256_mask(
      (const float *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadups128_mask((const float *)__P, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadups128_mask(
      (const float *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_storeups256_mask((float *)__P, (__v8sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storeups128_mask((float *)__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi64(void const *__P) {
  return (__m256i)(*(__v4di_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqudi256_mask((const long long *)__P,
                                                   (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqudi256_mask(
      (const long long *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi64(void const *__P) {
  return (__m128i)(*(__v2di_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqudi128_mask((const long long *)__P,
                                                   (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqudi128_mask(
      (const long long *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi64(void *__P, __m256i __A) {
  *(__m256i_u *)__P = (__m256i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_storedqudi256_mask((long long *)__P, (__v4di)__A,
                                    (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi64(void *__P, __m128i __A) {
  *(__m128i_u *)__P = (__m128i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedqudi128_mask((long long *)__P, (__v2di)__A,
                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi32(void const *__P) {
  return (__m256i)(*(__v8si_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqusi256_mask((const int *)__P,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqusi256_mask(
      (const int *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi32(void const *__P) {
  return (__m128i)(*(__v4si_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqusi128_mask((const int *)__P,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqusi128_mask(
      (const int *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi32(void *__P, __m256i __A) {
  *(__m256i_u *)__P = (__m256i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_storedqusi256_mask((int *)__P, (__v8si)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi32(void *__P, __m128i __A) {
  *(__m128i_u *)__P = (__m128i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedqusi128_mask((int *)__P, (__v4si)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256_mask((__v8si)__A, (__v8si)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsd128_mask((__v4si)__A, (__v4si)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsd128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask((__v4di)__A, (__v4di)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask((__v2di)__A, (__v2di)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epu32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask((__v4df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epu32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epu32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask((__v2df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epu32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epi32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256_mask((__v8sf)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epi32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epi32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq128_mask((__v4sf)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epi32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epu32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epu32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask((__v8sf)__A, (__v8si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epu32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epu32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epu32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask((__v4sf)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epu32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256_mask((__v4df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epi32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq128_mask((__v2df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epi32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epu32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask((__v4df)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epu32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epu32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask((__v2df)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epu32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256_mask((__v4df)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epi32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq128_mask((__v2df)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epi32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_pd(__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256_mask((__v4si)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd128_mask((__v4si)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_pd(__m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_pd(__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask((__v4si)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask((__v4si)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_ps(__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256_mask((__v8si)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_ps(__mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps128_mask((__v4si)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_ps(__m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_ps(__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask((__v8si)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_ps(__mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask((__v4si)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_pd(__m256d __W, __mmask8 __U, __m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256_mask((__v4sf)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_pd(__mmask8 __U, __m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256_mask(
      (__v4sf)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_pd(__m128d __W, __mmask8 __U, __m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd128_mask((__v4sf)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_pd(__mmask8 __U, __m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd128_mask(
      (__v4sf)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask((__v4si)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask((__v8si)__A, (__v16qi)__O, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovdb256mem_mask((unsigned long long *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask((__v4si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsdb256mem_mask((unsigned long long *)__P, (__v8si)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask((__v8si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask((__v4si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusdb256mem_mask((unsigned long long *)__P, (__v8si)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask((__v8si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovdw128mem_mask((unsigned long long *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask((__v4si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask((__v8si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsdw128mem_mask((unsigned long long *)__P, (__v4si)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask((__v4si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask(
      (__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask((__v8si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask(
      (__v4si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusdw128mem_mask((unsigned long long *)__P, (__v4si)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask((__v4si)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask(
      (__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask((__v8si)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask((__v2di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask((__v4di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask((__v2di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask((__v4di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask((__v2di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask((__v4di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask((__v2di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqw256mem_mask((unsigned long long *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask((__v4di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask((__v2di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqw256mem_mask((unsigned long long *)__P, (__v4di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask((__v4di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask((__v2di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqw256mem_mask((unsigned long long *)__P, (__v4di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask((__v4di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqd128mem_mask((unsigned long long *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask((__v2di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask((__v4di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqd128mem_mask((unsigned long long *)__P, (__v2di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask((__v2di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask((__v4di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqd128mem_mask((unsigned long long *)__P, (__v2di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask((__v2di)__A, (__v4si)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask((__v4di)__A, (__v4si)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastss_ps(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastss256_mask((__v4sf)__A, (__v8sf)__O,
                                                    __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastss256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastss_ps(__m128 __O, __mmask8 __M, __m128 __A) {
  return (__m128)__builtin_ia32_broadcastss128_mask((__v4sf)__A, (__v4sf)__O,
                                                    __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) {
  return (__m128)__builtin_ia32_broadcastss128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastsd_pd(__m256d __O, __mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastsd256_mask((__v2df)__A, (__v4df)__O,
                                                     __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastsd256_mask(
      (__v2df)__A, (__v4df)_mm256_setzero_pd(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastd_epi32(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_mask((__v4si)__A, (__v8si)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi32(__m256i __O, __mmask8 __M, int __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi32(__mmask8 __M, int __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(
      __A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastd_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_mask((__v4si)__A, (__v4si)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi32(__m128i __O, __mmask8 __M, int __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi32(__mmask8 __M, int __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(
      __A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastq_epi64(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_mask((__v2di)__A, (__v4di)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_mask(
      (__v2di)__A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi64(__m256i __O, __mmask8 __M, long long __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(__A, (__v4di)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(
      __A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastq_epi64(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_mask((__v2di)__A, (__v2di)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi64(__m128i __O, __mmask8 __M, long long __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(__A, (__v2di)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(
      __A, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f32x4(__m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_undefined_pd(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f32x4(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask((__v4sf)__A,
                                                        (__v8sf)__O, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f32x4(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i32x4(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask(
      (__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i32x4(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask((__v4si)__A,
                                                         (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i32x4(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbd256_mask((__v16qi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbd256_mask(
      (__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbd128_mask((__v16qi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbd128_mask(
      (__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbq256_mask((__v16qi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbq256_mask(
      (__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbq128_mask((__v16qi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbq128_mask(
      (__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwd256_mask((__v8hi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwd256_mask(
      (__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwd128_mask((__v8hi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwd128_mask(
      (__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwq256_mask((__v8hi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwq256_mask(
      (__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwq128_mask((__v8hi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwq128_mask(
      (__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi64(__m256i __W, __mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256_mask((__v4si)__X, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256_mask(
      (__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi64(__m128i __W, __mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128_mask((__v4si)__X, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128_mask(
      (__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbd256_mask((__v16qi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbd256_mask(
      (__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbd128_mask((__v16qi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbd128_mask(
      (__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbq256_mask((__v16qi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbq256_mask(
      (__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbq128_mask((__v16qi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbq128_mask(
      (__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu16_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwd256_mask((__v8hi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwd256_mask(
      (__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu16_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwd128_mask((__v8hi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwd128_mask(
      (__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu16_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwq256_mask((__v8hi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwq256_mask(
      (__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu16_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwq128_mask((__v8hi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwq128_mask(
      (__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_epi64(__m256i __W, __mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256_mask((__v4si)__X, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256_mask(
      (__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_epi64(__m128i __W, __mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128_mask((__v4si)__X, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128_mask(
      (__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp14_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rcp14_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask((__v4df)__A, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rcp14_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask((__v2df)__A, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp14_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rcp14_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask((__v8sf)__A, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rcp14_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask((__v4sf)__A, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt14_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rsqrt14_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask((__v4df)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rsqrt14_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask((__v2df)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt14_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rsqrt14_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask((__v8sf)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rsqrt14_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask((__v4sf)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sqrt_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256_mask((__v4df)__A, (__v4df)__W,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sqrt_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd128_mask((__v2df)__A, (__v2df)__W,
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sqrt_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256_mask((__v8sf)__A, (__v8sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sqrt_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_sqrtps128_mask((__v4sf)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_sqrtps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getexp_ps(__m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getexp_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getexp_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getexp_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getexp_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask((__v4df)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getexp_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_ps(__m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask((__v2df)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srl_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srl_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_scalef_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_scalef_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_scalef_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_scalef_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_scalef_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_scalef_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmaddpd256_mask3((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256_maskz((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddpd128_mask3((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd128_maskz((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmaddps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmsubpd256_mask3((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256_maskz((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubpd128_mask3((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd128_maskz((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmsubps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmaddsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask3(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmaddsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmaddsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask3(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmaddsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmaddsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                    (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask3(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmaddsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_maskz(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmaddsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                    (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask3(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmaddsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_maskz(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmsubadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask(
      (__v4df)__A, (__v4df)__B, -(__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmsubaddpd256_mask3(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmsubadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz(
      (__v4df)__A, (__v4df)__B, -(__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsubadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask(
      (__v2df)__A, (__v2df)__B, -(__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubaddpd128_mask3(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsubadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz(
      (__v2df)__A, (__v2df)__B, -(__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsubadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask(
      (__v8sf)__A, (__v8sf)__B, -(__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmsubaddps256_mask3(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsubadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_maskz(
      (__v8sf)__A, (__v8sf)__B, -(__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsubadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask(
      (__v4sf)__A, (__v4sf)__B, -(__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubaddps128_mask3(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsubadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_maskz(
      (__v4sf)__A, (__v4sf)__B, -(__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_mask((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_mask3((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_maskz((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_mask((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_mask3((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_maskz((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256_mask((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfnmaddps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fnmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps128_mask((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfnmaddps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_mask((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_mask3((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_maskz((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_mask((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_mask3((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_maskz((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfnmsubps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fnmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfnmsubps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_andnot_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pord256_mask((__v8si)__A, (__v8si)__B,
                                              (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pord256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A | (__v8su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pord128_mask((__v4si)__A, (__v4si)__B,
                                              (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pord128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A | (__v4su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxord256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxord256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A ^ (__v8su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxord128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxord128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A ^ (__v4su)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps_mask((__v2df)__A, (__v4sf)__W,
                                              (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_ps(__mmask8 __U, __m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps_mask(
      (__v2df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256_mask((__v4df)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_ps(__mmask8 __U, __m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256_mask(
      (__v4df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epi32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256_mask((__v8sf)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epi32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epi32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq128_mask((__v4sf)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epi32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epu32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epu32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask((__v8sf)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epu32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epu32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epu32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask((__v4sf)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epu32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_movedup_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movddup256_mask((__v4df)__A, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_movedup_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movddup256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_movedup_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movddup128_mask((__v2df)__A, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_movedup_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movddup128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_movehdup_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movshdup256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_movehdup_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movshdup256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_movehdup_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movshdup128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_movehdup_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movshdup128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_moveldup_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movsldup256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_moveldup_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movsldup256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_moveldup_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movsldup128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_moveldup_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movsldup128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128_mask((__v4si)__A, (__v4si)__B,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256_mask((__v8si)__A, (__v8si)__B,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128_mask((__v2di)__A, (__v2di)__B,
                                                    (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256_mask((__v4di)__A, (__v4di)__B,
                                                    (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128_mask((__v4si)__A, (__v4si)__B,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256_mask((__v8si)__A, (__v8si)__B,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128_mask((__v2di)__A, (__v2di)__B,
                                                    (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256_mask((__v4di)__A, (__v4di)__B,
                                                    (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B, __U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_compressdf256_mask((__v4df)__A, (__v4df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_compressdf256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_compressstoredf256_mask((__v4df *)__P, (__v4df)__A,
                                         (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_compressdf128_mask((__v2df)__A, (__v2df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_compressdf128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_compressstoredf128_mask((__v2df *)__P, (__v2df)__A,
                                         (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_compresssf256_mask((__v8sf)__A, (__v8sf)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_compresssf256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_compressstoresf256_mask((__v8sf *)__P, (__v8sf)__A,
                                         (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_compresssf128_mask((__v4sf)__A, (__v4sf)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_compresssf128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_compressstoresf128_mask((__v4sf *)__P, (__v4sf)__A,
                                         (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compressdi256_mask((__v4di)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compressdi256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoredi256_mask((__v4di *)__P, (__v4di)__A,
                                         (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compressdi128_mask((__v2di)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compressdi128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoredi128_mask((__v2di *)__P, (__v2di)__A,
                                         (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compresssi256_mask((__v8si)__A, (__v8si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compresssi256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoresi256_mask((__v8si *)__P, (__v8si)__A,
                                         (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compresssi128_mask((__v4si)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compresssi128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoresi128_mask((__v4si *)__P, (__v4si)__A,
                                         (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_expanddf256_mask((__v4df)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_expanddf256_maskz(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_expandloaddf256_mask(
      (__v4df *)__P, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_expandloaddf256_maskz(
      (__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_expanddf128_mask((__v2df)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_expanddf128_maskz(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_expandloaddf128_mask(
      (__v2df *)__P, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_expandloaddf128_maskz(
      (__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_expandsf256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_expandsf256_maskz(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_expandloadsf256_mask((__v8sf *)__P, (__v8sf)__W,
                                                     (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_expandloadsf256_maskz(
      (__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_expandsf128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_expandsf128_maskz(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_expandloadsf128_mask((__v4sf *)__P, (__v4sf)__W,
                                                     (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_expandloadsf128_maskz(
      (__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expanddi256_mask((__v4di)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expanddi256_maskz(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloaddi256_mask(
      (__v4di *)__P, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloaddi256_maskz(
      (__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expanddi128_mask((__v2di)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expanddi128_maskz(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloaddi128_mask(
      (__v2di *)__P, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloaddi128_maskz(
      (__v2di *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expandsi256_mask((__v8si)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expandsi256_maskz(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloadsi256_mask(
      (__v8si *)__P, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloadsi256_maskz(
      (__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expandsi128_mask((__v4si)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expandsi128_maskz(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloadsi128_mask(
      (__v4si *)__P, (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloadsi128_maskz(
      (__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_pd(__m256d __A, __m256i __I, __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_mask(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_pd(__m256d __A, __mmask8 __U, __m256i __I,
                                __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_mask(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_pd(__m256d __A, __m256i __I, __mmask8 __U,
                                 __m256d __B) {
  return (__m256d)__builtin_ia32_vpermi2varpd256_mask(
      (__v4df)__A, (__v4di)__I, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_pd(__mmask8 __U, __m256d __A, __m256i __I,
                                 __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_maskz(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_ps(__m256 __A, __m256i __I, __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_mask((__v8si)__I, (__v8sf)__A,
                                                     (__v8sf)__B, (__mmask8)-1);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutex2var_ps(__m256 __A, __mmask8 __U, __m256i __I, __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_mask(
      (__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_ps(__m256 __A, __m256i __I, __mmask8 __U,
                                 __m256 __B) {
  return (__m256)__builtin_ia32_vpermi2varps256_mask(
      (__v8sf)__A, (__v8si)__I, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_ps(__mmask8 __U, __m256 __A, __m256i __I,
                                 __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_maskz(
      (__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi64(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_mask((__v2di)__I, (__v2di)__A,
                                                     (__v2di)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi64(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_mask(
      (__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi64(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varq128_mask(
      (__v2di)__A, (__v2di)__I, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi64(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_maskz(
      (__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi32(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_mask((__v4si)__I, (__v4si)__A,
                                                     (__v4si)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi32(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_mask(
      (__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi32(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2vard128_mask(
      (__v4si)__A, (__v4si)__I, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi32(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_maskz(
      (__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi64(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_mask((__v4di)__I, (__v4di)__A,
                                                     (__v4di)__B, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi64(__m256i __A, __mmask8 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_mask(
      (__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi64(__m256i __A, __m256i __I, __mmask8 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varq256_mask(
      (__v4di)__A, (__v4di)__I, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi64(__mmask8 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_maskz(
      (__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi32(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_mask((__v8si)__I, (__v8si)__A,
                                                     (__v8si)__B, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi32(__m256i __A, __mmask8 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_mask(
      (__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi32(__m256i __A, __m256i __I, __mmask8 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2vard256_mask(
      (__v8si)__A, (__v8si)__I, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi32(__mmask8 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_maskz(
      (__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_pd(__m128d __A, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_mask(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)-1);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_permutex2var_pd(__m128d __A, __mmask8 __U, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_mask(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask2_permutex2var_pd(__m128d __A, __m128i __I, __mmask8 __U, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermi2varpd128_mask(
      (__v2df)__A, (__v2di)__I, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_permutex2var_pd(__mmask8 __U, __m128d __A, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_maskz(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_ps(__m128 __A, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_mask((__v4si)__I, (__v4sf)__A,
                                                     (__v4sf)__B, (__mmask8)-1);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_permutex2var_ps(__m128 __A, __mmask8 __U, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_mask(
      (__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask2_permutex2var_ps(__m128 __A, __m128i __I, __mmask8 __U, __m128 __B) {
  return (__m128)__builtin_ia32_vpermi2varps128_mask(
      (__v4sf)__A, (__v4si)__I, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_permutex2var_ps(__mmask8 __U, __m128 __A, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_maskz(
      (__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask((__v2di)__X, (__v2di)__Y,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di_mask((__v4di)__X, (__v4di)__Y,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di_mask((__v2di)__X, (__v2di)__Y,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di_mask((__v4di)__X, (__v4di)__Y,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di_mask((__v2di)__X, (__v2di)__Y,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rolv_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rolv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rolv_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rolv_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rolv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rolv_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rorv_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rorv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rorv_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rorv_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rorv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rorv_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rolv_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rolv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rolv_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rolv_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rolv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rolv_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rorv_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rorv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rorv_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rorv_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rorv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rorv_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask((__v4di)__X, (__v4di)__Y,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)_mm_setzero_pd(), __U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_andnot_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)_mm_setzero_pd(), __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_porq256_mask((__v4di)__A, (__v4di)__B,
                                              (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_porq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A | (__v4du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_porq128_mask((__v2di)__A, (__v2di)__B,
                                              (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_porq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A | (__v2du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxorq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxorq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A ^ (__v4du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxorq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxorq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A ^ (__v2du)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_div_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_divpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_div_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_divpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_div_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_divps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_div_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_divps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_mulps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_mulps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_mulpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_mulpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxud128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxud128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminud128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminud128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

#pragma GCC push_options
#pragma GCC target("avx512vl,avx512cd")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastmb_epi64(__mmask8 __A) {
  return (__m128i)__builtin_ia32_broadcastmb128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastmb_epi64(__mmask8 __A) {
  return (__m256i)__builtin_ia32_broadcastmb256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastmw_epi32(__mmask16 __A) {
  return (__m128i)__builtin_ia32_broadcastmw128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastmw_epi32(__mmask16 __A) {
  return (__m256i)__builtin_ia32_broadcastmw256(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lzcnt_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_lzcnt_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask((__v8si)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_lzcnt_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lzcnt_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_lzcnt_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask((__v4di)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_lzcnt_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_conflict_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_conflict_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask((__v4di)__A, (__v4di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_conflict_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_conflict_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_conflict_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask((__v8si)__A, (__v8si)__W,
                                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_conflict_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lzcnt_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_lzcnt_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask((__v4si)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_lzcnt_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lzcnt_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_lzcnt_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask((__v2di)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_lzcnt_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_conflict_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_conflict_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask((__v2di)__A, (__v2di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_conflict_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_conflict_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_conflict_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask((__v4si)__A, (__v4si)__W,
                                                       (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_conflict_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

#pragma GCC pop_options

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_unpacklo_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpacklo_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_unpackhi_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpackhi_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpackhi_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps_mask((__v8hi)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps_mask(
      (__v8hi)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_ps(__m256 __W, __mmask8 __U, __m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256_mask((__v8hi)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_ps(__mmask8 __U, __m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256_mask(
      (__v8hi)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpacklo_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sra_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sra_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sll_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sll_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutexvar_ps(__m256 __W, __mmask8 __U, __m256i __X, __m256 __Y) {
  return (__m256)__builtin_ia32_permvarsf256_mask((__v8sf)__Y, (__v8si)__X,
                                                  (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_ps(__mmask8 __U, __m256i __X, __m256 __Y) {
  return (__m256)__builtin_ia32_permvarsf256_mask(
      (__v8sf)__Y, (__v8si)__X, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_pd(__m256i __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask(
      (__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_pd(__m256d __W, __mmask8 __U, __m256i __X,
                               __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask((__v4df)__Y, (__v4di)__X,
                                                   (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_pd(__mmask8 __U, __m256i __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask(
      (__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_permutevar_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256_mask(
      (__v4df)__A, (__v4di)__C, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutevar_pd(__mmask8 __U, __m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256_mask(
      (__v4df)__A, (__v4di)__C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutevar_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256_mask(
      (__v8sf)__A, (__v8si)__C, (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutevar_ps(__mmask8 __U, __m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256_mask(
      (__v8sf)__A, (__v8si)__C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_permutevar_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd_mask((__v2df)__A, (__v2di)__C,
                                                   (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutevar_pd(__mmask8 __U, __m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd_mask(
      (__v2df)__A, (__v2di)__C, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutevar_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps_mask((__v4sf)__A, (__v4si)__C,
                                                  (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutevar_ps(__mmask8 __U, __m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps_mask(
      (__v4sf)__A, (__v4si)__C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulld256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi64(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask(
      (__v4di)__Y, (__v4di)__X, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulld256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulld128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_epi32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256_mask((__v8si)__X, (__v8si)__Y,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_epi32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256_mask(
      (__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_epi32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128_mask((__v4si)__X, (__v4si)__Y,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_epi32(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128_mask(
      (__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask(
      (__v4di)__Y, (__v4di)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi64(__m256i __W, __mmask8 __M, __m256i __X,
                                  __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask((__v4di)__Y, (__v4di)__X,
                                                   (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_epu32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuludq256_mask((__v8si)__X, (__v8si)__Y,
                                                 (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask(
      (__v8si)__Y, (__v8si)__X, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_epu32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuludq256_mask(
      (__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_epu32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuludq128_mask((__v4si)__X, (__v4si)__Y,
                                                 (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_epu32(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuludq128_mask(
      (__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask(
      (__v8si)__Y, (__v8si)__X, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi32(__m256i __W, __mmask8 __M, __m256i __X,
                                  __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask((__v8si)__Y, (__v8si)__X,
                                                   (__v8si)__W, __M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                               (__mmask8)-1);
}
# 13893 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlintrin.h" 3 4
#pragma GCC pop_options
# 62 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bwintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bwintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512bw")

typedef short __v32hi __attribute__((__vector_size__(64)));
typedef short __v32hi_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef char __v64qi_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));

typedef unsigned long long __mmask64;

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask32_u8(__mmask32 __A, __mmask32 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcsi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask64_u8(__mmask64 __A, __mmask64 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcdi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_ktestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_ktestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_ktestcsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_ktestcdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask32_u8(__mmask32 __A, __mmask32 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcsi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask64_u8(__mmask64 __A, __mmask64 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcdi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_kortestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_kortestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_kortestcsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_kortestcdi(__A, __B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kaddsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kadddi((__mmask64)__A, (__mmask64)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask32_u32(__mmask32 __A) {
  return (unsigned int)__builtin_ia32_kmovd((__mmask32)__A);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask64_u64(__mmask64 __A) {
  return (unsigned long long)__builtin_ia32_kmovq((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask32(unsigned int __A) {
  return (__mmask32)__builtin_ia32_kmovd((__mmask32)__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu64_mask64(unsigned long long __A) {
  return (__mmask64)__builtin_ia32_kmovq((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask32(__mmask32 *__A) {
  return (__mmask32)__builtin_ia32_kmovd(*__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask64(__mmask64 *__A) {
  return (__mmask64)__builtin_ia32_kmovq(*(__mmask64 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask32(__mmask32 *__A, __mmask32 __B) {
  *(__mmask32 *)__A = __builtin_ia32_kmovd(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask64(__mmask64 *__A, __mmask64 __B) {
  *(__mmask64 *)__A = __builtin_ia32_kmovq(__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask32(__mmask32 __A) {
  return (__mmask32)__builtin_ia32_knotsi((__mmask32)__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask64(__mmask64 __A) {
  return (__mmask64)__builtin_ia32_knotdi((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_korsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kxnorsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kxnordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kxorsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kxordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kandsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kanddi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kandnsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kandndi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquhi512_mask((__v32hi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquhi512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi16(void const *__P) {
  return (__m512i)(*(__v32hi_u *)__P);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi16(__m512i __W, __mmask32 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquhi512_mask(
      (const short *)__P, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi16(__mmask32 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquhi512_mask(
      (const short *)__P, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi16(void *__P, __m512i __A) {
  *(__v32hi_u *)__P = (__v32hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi16(void *__P, __mmask32 __U, __m512i __A) {
  __builtin_ia32_storedquhi512_mask((short *)__P, (__v32hi)__A, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquqi512_mask((__v64qi)__A, (__v64qi)__W,
                                                  (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquqi512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackw(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kunpcksi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackw_mask32(__mmask16 __A, __mmask16 __B) {
  return (__mmask32)__builtin_ia32_kunpcksi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackd(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kunpckdi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackd_mask64(__mmask32 __A, __mmask32 __B) {
  return (__mmask64)__builtin_ia32_kunpckdi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi8(void const *__P) {
  return (__m512i)(*(__v64qi_u *)__P);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi8(__m512i __W, __mmask64 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquqi512_mask(
      (const char *)__P, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi8(__mmask64 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquqi512_mask(
      (const char *)__P, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi8(void *__P, __m512i __A) {
  *(__v64qi_u *)__P = (__v64qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi8(void *__P, __mmask64 __U, __m512i __A) {
  __builtin_ia32_storedquqi512_mask((char *)__P, (__v64qi)__A, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sad_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psadbw512((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovwb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask((__v32hi)__A, (__v32qi)__O,
                                                __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovswb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask((__v32hi)__A, (__v32qi)__O,
                                                 __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask((__v32hi)__A, (__v32qi)__O,
                                                  __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovuswb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastb_epi8(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask(
      (__v16qi)__A, (__v64qi)_mm512_undefined_epi32(), (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastb_epi8(__m512i __O, __mmask64 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask((__v16qi)__A, (__v64qi)__O,
                                                     __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastb_epi8(__mmask64 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask(
      (__v16qi)__A, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi8(__m512i __O, __mmask64 __M, char __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(__A, (__v64qi)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi8(__mmask64 __M, char __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(
      __A, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastw_epi16(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask(
      (__v8hi)__A, (__v32hi)_mm512_undefined_epi32(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastw_epi16(__m512i __O, __mmask32 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask((__v8hi)__A, (__v32hi)__O,
                                                     __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastw_epi16(__mmask32 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask(
      (__v8hi)__A, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi16(__m512i __O, __mmask32 __M, short __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(__A, (__v32hi)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi16(__mmask32 __M, short __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(
      __A, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhrs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhrs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhrs_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhi_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhi_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhi_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A * (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi16(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi16(__m512i __W, __mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask((__v32qi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi16(__mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi16(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi16(__m512i __W, __mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask((__v32qi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi16(__mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi16(__m512i __W, __mmask32 __M, __m512i __A,
                                  __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi16(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_mask(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi16(__m512i __A, __mmask32 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_mask(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi16(__m512i __A, __m512i __I, __mmask32 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varhi512_mask(
      (__v32hi)__A, (__v32hi)__I, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi16(__mmask32 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_maskz(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_avg_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_avg_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_avg_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi8(__m512i __A, __m512i __B) {
  return (__m512i)((__v64qu)__A + (__v64qu)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi8(__m512i __A, __m512i __B) {
  return (__m512i)((__v64qu)__A - (__v64qu)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_avg_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_avg_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_avg_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask((__v64qi)__A, (__v64qi)__B,
                                                 (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask((__v64qi)__A, (__v64qi)__B,
                                                 (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A - (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sub_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A + (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_add_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srl_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sll_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maddubs_epi16(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_maddubs_epi16(__m512i __W, __mmask32 __U, __m512i __X,
                              __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_maddubs_epi16(__mmask32 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_madd_epi16(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd_epi16(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi8(__m512i __W, __mmask64 __U, __m512i __A,
                              __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi8(__m512i __W, __mmask64 __U, __m512i __A,
                              __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0,
                                                 __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6,
                                                 __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi8_mask(__m512i __A) {
  return (__mmask64)__builtin_ia32_cvtb2mask512((__v64qi)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi16_mask(__m512i __A) {
  return (__mmask32)__builtin_ia32_cvtw2mask512((__v32hi)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi8(__mmask64 __A) {
  return (__m512i)__builtin_ia32_cvtmask2b512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi16(__mmask32 __A) {
  return (__m512i)__builtin_ia32_cvtmask2w512(__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B,
                                              (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B,
                                              (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B, __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B,
                                               (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B,
                                               (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shuffle_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sra_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packs_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packs_epi16(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packus_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packus_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packus_epi16(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi8(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask((__v64qi)__A, (__v64qi)__W,
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi16(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask((__v32hi)__A, (__v32hi)__W,
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                 (__mmask64)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                 (__mmask32)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                (__mmask64)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                (__mmask32)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                 (__mmask64)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                 (__mmask32)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                (__mmask64)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packs_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packs_epi32(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packs_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask((__v16si)__A, (__v16si)__B,
                                                  (__v32hi)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packus_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packus_epi32(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packus_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask((__v16si)__A, (__v16si)__B,
                                                  (__v32hi)__W, __M);
}
# 3330 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bwintrin.h" 3 4
#pragma GCC pop_options
# 64 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512dqintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512dqintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512dq")

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask8_u8(__mmask8 __A, __mmask8 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcqi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_ktestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_ktestcqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask16_u8(__mmask16 __A, __mmask16 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestchi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_ktestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_ktestchi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask8_u8(__mmask8 __A, __mmask8 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcqi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_kortestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_kortestcqi(__A, __B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kaddqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask16(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kaddhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask8_u32(__mmask8 __A) {
  return (unsigned int)__builtin_ia32_kmovb((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask8(unsigned int __A) {
  return (__mmask8)__builtin_ia32_kmovb((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask8(__mmask8 *__A) {
  return (__mmask8)__builtin_ia32_kmovb(*(__mmask8 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask8(__mmask8 *__A, __mmask8 __B) {
  *(__mmask8 *)__A = __builtin_ia32_kmovb(__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask8(__mmask8 __A) {
  return (__mmask8)__builtin_ia32_knotqi((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_korqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kxnorqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kxorqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kandqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kandnqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f64x2(__m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask(
      (__v2df)__A, _mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f64x2(__m512d __O, __mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask((__v2df)__A,
                                                         (__v8df)__O, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask(
      (__v2df)__A, (__v8df)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i64x2(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask(
      (__v2di)__A, _mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i64x2(__m512i __O, __mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask((__v2di)__A,
                                                         (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask(
      (__v2di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x2(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x2(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask((__v4sf)__A,
                                                        (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x2(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x2(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x2(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask((__v4si)__A,
                                                         (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x2(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x8(__m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask(
      (__v8sf)__A, _mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x8(__m512 __O, __mmask16 __M, __m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask((__v8sf)__A,
                                                        (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x8(__mmask16 __M, __m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask(
      (__v8sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x8(__m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask(
      (__v8si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x8(__m512i __O, __mmask16 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask((__v8si)__A,
                                                         (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x8(__mmask16 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask(
      (__v8si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A * (__v8du)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask((__v8df)__A, (__v8df)__B,
                                              (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask((__v16sf)__A, (__v16sf)__B,
                                             (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_andnot_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask((__v8df)__A, (__v8df)__B,
                                                (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_andnot_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask((__v16sf)__A, (__v16sf)__B,
                                               (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi32_mask(__m512i __A) {
  return (__mmask16)__builtin_ia32_cvtd2mask512((__v16si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi64_mask(__m512i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask512((__v8di)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi32(__mmask16 __A) {
  return (__m512i)__builtin_ia32_cvtmask2d512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi64(__mmask8 __A) {
  return (__m512i)__builtin_ia32_cvtmask2q512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epi64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epi64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epu64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epu64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epi64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epi64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epi64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epu64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epu64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epu64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epi64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epi64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epu64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epu64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epi64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epi64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epi64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epu64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epu64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epu64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_ps(__m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_ps(__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                 (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_ps(__mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu64_ps(__m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu64_ps(__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu64_ps(__mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_pd(__m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_pd(__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_pd(__mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu64_pd(__m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu64_pd(__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu64_pd(__mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}
# 2890 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512dqintrin.h" 3 4
#pragma GCC pop_options
# 66 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlbwintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlbwintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vl,avx512bw")

typedef short __v16hi_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef short __v8hi_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef char __v32qi_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef char __v16qi_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquqi256_mask((__v32qi)__A, (__v32qi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquqi256_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquqi128_mask((__v16qi)__A, (__v16qi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquqi128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi8(void *__P, __m256i __A) {
  *(__v32qi_u *)__P = (__v32qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi8(void *__P, __mmask32 __U, __m256i __A) {
  __builtin_ia32_storedquqi256_mask((char *)__P, (__v32qi)__A, (__mmask32)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi8(void *__P, __m128i __A) {
  *(__v16qi_u *)__P = (__v16qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi8(void *__P, __mmask16 __U, __m128i __A) {
  __builtin_ia32_storedquqi128_mask((char *)__P, (__v16qi)__A, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi16(void const *__P) {
  return (__m256i)(*(__v16hi_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi16(__m256i __W, __mmask16 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquhi256_mask(
      (const short *)__P, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi16(__mmask16 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquhi256_mask(
      (const short *)__P, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi16(void const *__P) {
  return (__m128i)(*(__v8hi_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi16(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquhi128_mask((const short *)__P,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi16(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquhi128_mask(
      (const short *)__P, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquhi256_mask((__v16hi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquhi256_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquhi128_mask((__v8hi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquhi128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi8(void const *__P) {
  return (__m256i)(*(__v32qi_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi8(__m256i __W, __mmask32 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquqi256_mask(
      (const char *)__P, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi8(__mmask32 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquqi256_mask(
      (const char *)__P, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi8(void const *__P) {
  return (__m128i)(*(__v16qi_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi8(__m128i __W, __mmask16 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquqi128_mask(
      (const char *)__P, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi8(__mmask16 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquqi128_mask(
      (const char *)__P, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovwb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovwb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovwb256_mask((__v16hi)__A, (__v16qi)__O,
                                                __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovwb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovswb128mem_mask((unsigned long long *)__P, (__v8hi)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovswb128_mask((__v8hi)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovswb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovswb256_mask((__v16hi)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovuswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovuswb128mem_mask((unsigned long long *)__P, (__v8hi)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovuswb128_mask((__v8hi)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovuswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovuswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovuswb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovuswb256_mask((__v16hi)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovuswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastb_epi8(__m256i __O, __mmask32 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_mask((__v16qi)__A, (__v32qi)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastb_epi8(__mmask32 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_mask(
      (__v16qi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi8(__m256i __O, __mmask32 __M, char __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(__A, (__v32qi)__O,
                                                         __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi8(__mmask32 __M, char __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(
      __A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastb_epi8(__m128i __O, __mmask16 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_mask((__v16qi)__A, (__v16qi)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastb_epi8(__mmask16 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi8(__m128i __O, __mmask16 __M, char __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(__A, (__v16qi)__O,
                                                         __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi8(__mmask16 __M, char __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(
      __A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastw_epi16(__m256i __O, __mmask16 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_mask((__v8hi)__A, (__v16hi)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastw_epi16(__mmask16 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_mask(
      (__v8hi)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi16(__m256i __O, __mmask16 __M, short __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(__A, (__v16hi)__O,
                                                         __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi16(__mmask16 __M, short __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(
      __A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastw_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_mask((__v8hi)__A, (__v8hi)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastw_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi16(__m128i __O, __mmask8 __M, short __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi16(__mmask8 __M, short __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(
      __A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi16(__m256i __W, __mmask16 __M, __m256i __A,
                                  __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutexvar_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask(
      (__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutexvar_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask(
      (__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutexvar_epi16(__m128i __W, __mmask8 __M, __m128i __A,
                               __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask((__v8hi)__B, (__v8hi)__A,
                                                   (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi16(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_mask(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi16(__m256i __A, __mmask16 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_mask(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi16(__m256i __A, __m256i __I, __mmask16 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varhi256_mask(
      (__v16hi)__A, (__v16hi)__I, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi16(__mmask16 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_maskz(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi16(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_mask(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi16(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_mask(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi16(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varhi128_mask(
      (__v8hi)__A, (__v8hi)__I, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi16(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_maskz(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_maddubs_epi16(__m256i __W, __mmask16 __U, __m256i __X,
                              __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_maddubs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_maddubs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128_mask((__v16qi)__X, (__v16qi)__Y,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_maddubs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_madd_epi16(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd_epi16(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v8si)_mm256_setzero_si256(),
                                                 (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_madd_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_madd_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi8_mask(__m128i __A) {
  return (__mmask16)__builtin_ia32_cvtb2mask128((__v16qi)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi8_mask(__m256i __A) {
  return (__mmask32)__builtin_ia32_cvtb2mask256((__v32qi)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi16_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtw2mask128((__v8hi)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi16_mask(__m256i __A) {
  return (__mmask16)__builtin_ia32_cvtw2mask256((__v16hi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi8(__mmask16 __A) {
  return (__m128i)__builtin_ia32_cvtmask2b128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi8(__mmask32 __A) {
  return (__m256i)__builtin_ia32_cvtmask2b256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi16(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2w128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi16(__mmask16 __A) {
  return (__m256i)__builtin_ia32_cvtmask2w256(__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B,
                                              (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_min_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_min_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_max_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_max_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}
# 2090 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vlbwintrin.h" 3 4
extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                (__mmask32)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhrs_epi16(__m256i __W, __mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256_mask((__v16hi)__X, (__v16hi)__Y,
                                                  (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhrs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256_mask(
      (__v16hi)__X, (__v16hi)__Y, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhi_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhi_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhi_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhi_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhrs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128_mask((__v8hi)__X, (__v8hi)__Y,
                                                  (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhrs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128_mask(
      (__v8hi)__X, (__v8hi)__Y, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi16(__m256i __W, __mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbw256_mask((__v16qi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi16(__mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbw256_mask(
      (__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbw128_mask((__v16qi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbw128_mask(
      (__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi16(__m256i __W, __mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbw256_mask((__v16qi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi16(__mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbw256_mask(
      (__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbw128_mask((__v16qi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbw128_mask(
      (__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_avg_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_avg_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_avg_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_avg_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_avg_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_avg_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_avg_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_avg_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_add_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256_mask((__v32qi)__A, (__v32qi)__B,
                                                 (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sub_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256_mask((__v32qi)__A, (__v32qi)__B,
                                                 (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi8(__m256i __W, __mmask32 __U, __m256i __A,
                              __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi8(__m256i __W, __mmask32 __U, __m256i __A,
                              __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B,
                                               (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B, __U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shuffle_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_shuffle_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pshufb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shuffle_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pshufb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packs_epi16(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packs_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256_mask((__v16hi)__A, (__v16hi)__B,
                                                  (__v32qi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packs_epi16(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packs_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__v16qi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packus_epi16(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packus_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256_mask((__v16hi)__A, (__v16hi)__B,
                                                  (__v32qi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packus_epi16(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_packus_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__v16qi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256_mask((__v32qi)__A, (__v32qi)__W,
                                               (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsb128_mask((__v16qi)__A, (__v16qi)__W,
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsb128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256_mask((__v16hi)__A, (__v16hi)__W,
                                               (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsw128_mask((__v8hi)__A, (__v8hi)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsw128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                 (__mmask32)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi16(void *__P, __m256i __A) {
  *(__v16hi_u *)__P = (__v16hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi16(void *__P, __mmask16 __U, __m256i __A) {
  __builtin_ia32_storedquhi256_mask((short *)__P, (__v16hi)__A, (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi16(void *__P, __m128i __A) {
  *(__v8hi_u *)__P = (__v8hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi16(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedquhi128_mask((short *)__P, (__v8hi)__A, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128_mask((__v16qi)__A, (__v16qi)__B,
                                                 (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srl_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sra_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128_mask((__v16qi)__A, (__v16qi)__B,
                                                 (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovwb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovwb128mem_mask((unsigned long long *)__P, (__v8hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovwb128_mask((__v8hi)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovwb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sll_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packus_epi32(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256_mask(
      (__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packus_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256_mask((__v8si)__A, (__v8si)__B,
                                                  (__v16hi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packus_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packusdw128_mask(
      (__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packus_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packusdw128_mask((__v4si)__A, (__v4si)__B,
                                                  (__v8hi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packs_epi32(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256_mask(
      (__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packs_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256_mask((__v8si)__A, (__v8si)__B,
                                                  (__v16hi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packs_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128_mask(
      (__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packs_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128_mask((__v4si)__A, (__v4si)__B,
                                                  (__v8hi)__W, __M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                (__mmask16)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                 (__mmask32)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                (__mmask32)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                (__mmask16)__M);
}

#pragma GCC pop_options
# 68 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vldqintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vldqintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vl,avx512dq")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epi64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask((__v4df)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epi64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epi64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask((__v2df)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epi64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epu64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask((__v4df)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epu64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epu64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask((__v2df)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epu64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epi64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask((__v4df)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epi64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epi64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask((__v2df)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epi64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epu64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask((__v4df)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epu64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epu64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask((__v2df)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epu64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epi64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epi64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask((__v4sf)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epi64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epi64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask((__v4sf)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epu64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epu64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask((__v4sf)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epu64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epu64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask((__v4sf)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f64x2(__m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask(
      (__v2df)__A, (__v4df)_mm256_undefined_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f64x2(__m256d __O, __mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask((__v2df)__A,
                                                         (__v4df)__O, __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask(
      (__v2df)__A, (__v4df)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i64x2(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask(
      (__v2di)__A, (__v4di)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i64x2(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask((__v2di)__A,
                                                         (__v4di)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask(
      (__v2di)__A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f32x2(__m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f32x2(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask((__v4sf)__A,
                                                        (__v8sf)__O, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f32x2(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i32x2(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask(
      (__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i32x2(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask((__v4si)__A,
                                                         (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcast_i32x2(__m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask(
      (__v4si)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcast_i32x2(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask((__v4si)__A,
                                                         (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A * (__v4du)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A * (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_andnot_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256_mask((__v4df)__A, (__v4df)__B,
                                                (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd128_mask((__v2df)__A, (__v2df)__B,
                                                (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_andnot_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256_mask((__v8sf)__A, (__v8sf)__B,
                                               (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andnps128_mask((__v4sf)__A, (__v4sf)__B,
                                               (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andnps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epi64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epi64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask((__v4sf)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epi64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epi64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask((__v4sf)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epu64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epu64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask((__v4sf)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epu64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epu64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask((__v4sf)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_ps(__m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask((__v4di)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_ps(__mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask((__v2di)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu64_ps(__m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask((__v4di)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu64_ps(__mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu64_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask((__v2di)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu64_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_pd(__m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_pd(__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask((__v4di)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_pd(__mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask((__v2di)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu64_pd(__m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu64_pd(__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask((__v4di)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu64_pd(__mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu64_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu64_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask((__v2di)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu64_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_xorps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_xorps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256_mask((__v4df)__A, (__v4df)__B,
                                              (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd128_mask((__v2df)__A, (__v2df)__B,
                                              (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256_mask((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_orps128_mask((__v4sf)__A, (__v4sf)__B,
                                             (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_orps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi32(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2d128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi32(__mmask8 __A) {
  return (__m256i)__builtin_ia32_cvtmask2d256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi64(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2q128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi64(__mmask8 __A) {
  return (__m256i)__builtin_ia32_cvtmask2q256(__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi32_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtd2mask128((__v4si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi32_mask(__m256i __A) {
  return (__mmask8)__builtin_ia32_cvtd2mask256((__v8si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi64_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask128((__v2di)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi64_mask(__m256i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask256((__v4di)__A);
}
# 2013 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vldqintrin.h" 3 4
#pragma GCC pop_options
# 70 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512ifmaintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512ifmaintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512ifma")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd52lo_epu64(__m512i __X, __m512i __Y, __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_mask((__v8di)__X, (__v8di)__Y,
                                                     (__v8di)__Z, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd52hi_epu64(__m512i __X, __m512i __Y, __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_mask((__v8di)__X, (__v8di)__Y,
                                                     (__v8di)__Z, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_madd52lo_epu64(__m512i __W, __mmask8 __M, __m512i __X,
                               __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_mask(
      (__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_madd52hi_epu64(__m512i __W, __mmask8 __M, __m512i __X,
                               __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_mask(
      (__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd52lo_epu64(__mmask8 __M, __m512i __X, __m512i __Y,
                                __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_maskz(
      (__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd52hi_epu64(__mmask8 __M, __m512i __X, __m512i __Y,
                                __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_maskz(
      (__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M);
}

#pragma GCC pop_options
# 72 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512ifmavlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512ifmavlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512ifma,avx512vl")
# 58 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512ifmavlintrin.h" 3 4
extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_madd52lo_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmadd52luq128_mask(
      (__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_madd52hi_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmadd52huq128_mask(
      (__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_madd52lo_epu64(__m256i __W, __mmask8 __M, __m256i __X,
                               __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmadd52luq256_mask(
      (__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_madd52hi_epu64(__m256i __W, __mmask8 __M, __m256i __X,
                               __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmadd52huq256_mask(
      (__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_madd52lo_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52luq128_maskz(
      (__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_madd52hi_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52huq128_maskz(
      (__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd52lo_epu64(__mmask8 __M, __m256i __X, __m256i __Y,
                                __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52luq256_maskz(
      (__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd52hi_epu64(__mmask8 __M, __m256i __X, __m256i __Y,
                                __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52huq256_maskz(
      (__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M);
}

#pragma GCC pop_options
# 74 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmiintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmiintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vbmi")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_multishift_epi64_epi8(__m512i __W, __mmask64 __M, __m512i __X,
                                      __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_multishift_epi64_epi8(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_multishift_epi64_epi8(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_undefined_epi32(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_undefined_epi32(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi8(__m512i __W, __mmask64 __M, __m512i __A,
                                 __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi8(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_mask(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi8(__m512i __A, __mmask64 __U, __m512i __I,
                                  __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_mask(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi8(__m512i __A, __m512i __I, __mmask64 __U,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varqi512_mask(
      (__v64qi)__A, (__v64qi)__I, (__v64qi)__B, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi8(__mmask64 __U, __m512i __A, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_maskz(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U);
}

#pragma GCC pop_options
# 76 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmivlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmivlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vbmi,avx512vl")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_multishift_epi64_epi8(__m256i __W, __mmask32 __M, __m256i __X,
                                      __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_multishift_epi64_epi8(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_multishift_epi64_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_undefined_si256(),
      (__mmask32)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_multishift_epi64_epi8(__m128i __W, __mmask16 __M, __m128i __X,
                                   __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_multishift_epi64_epi8(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_multishift_epi64_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_undefined_si128(),
      (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_undefined_si256(),
      (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi8(__m256i __W, __mmask32 __M, __m256i __A,
                                 __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutexvar_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_undefined_si128(),
      (__mmask16)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutexvar_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutexvar_epi8(__m128i __W, __mmask16 __M, __m128i __A,
                              __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi8(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_mask(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi8(__m256i __A, __mmask32 __U, __m256i __I,
                                  __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_mask(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi8(__m256i __A, __m256i __I, __mmask32 __U,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varqi256_mask(
      (__v32qi)__A, (__v32qi)__I, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi8(__mmask32 __U, __m256i __A, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_maskz(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi8(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_mask(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi8(__m128i __A, __mmask16 __U, __m128i __I,
                               __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_mask(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi8(__m128i __A, __m128i __I, __mmask16 __U,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varqi128_mask(
      (__v16qi)__A, (__v16qi)__I, (__v16qi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi8(__mmask16 __U, __m128i __A, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_maskz(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U);
}

#pragma GCC pop_options
# 78 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx5124fmapsintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx5124fmapsintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx5124fmaps")

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __m512 __D, __m512 __E,
                     __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps((__v16sf)__B, (__v16sf)__C,
                                         (__v16sf)__D, (__v16sf)__E,
                                         (__v16sf)__A, (const __v4sf *)__F);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C,
                          __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C,
                           __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_4fmadd_ss(__m128 __A, __m128 __B, __m128 __C, __m128 __D, __m128 __E,
                  __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss((__v4sf)__B, (__v4sf)__C, (__v4sf)__D,
                                         (__v4sf)__E, (__v4sf)__A,
                                         (const __v4sf *)__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_4fmadd_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C,
                       __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_4fmadd_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C,
                        __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __m512 __D,
                      __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps((__v16sf)__B, (__v16sf)__C,
                                          (__v16sf)__D, (__v16sf)__E,
                                          (__v16sf)__A, (const __v4sf *)__F);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C,
                           __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C,
                            __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_4fnmadd_ss(__m128 __A, __m128 __B, __m128 __C, __m128 __D, __m128 __E,
                   __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss((__v4sf)__B, (__v4sf)__C, (__v4sf)__D,
                                          (__v4sf)__E, (__v4sf)__A,
                                          (const __v4sf *)__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_4fnmadd_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C,
                        __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_4fnmadd_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C,
                         __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

#pragma GCC pop_options
# 80 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx5124vnniwintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx5124vnniwintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx5124vnniw")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4dpwssd_epi32(__m512i __A, __m512i __B, __m512i __C, __m512i __D,
                         __m512i __E, __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd((__v16si)__B, (__v16si)__C,
                                           (__v16si)__D, (__v16si)__E,
                                           (__v16si)__A, (const __v4si *)__F);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4dpwssd_epi32(__m512i __A, __mmask16 __U, __m512i __B,
                              __m512i __C, __m512i __D, __m512i __E,
                              __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4dpwssd_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                               __m512i __C, __m512i __D, __m512i __E,
                               __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4dpwssds_epi32(__m512i __A, __m512i __B, __m512i __C, __m512i __D,
                          __m512i __E, __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds((__v16si)__B, (__v16si)__C,
                                            (__v16si)__D, (__v16si)__E,
                                            (__v16si)__A, (const __v4si *)__F);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4dpwssds_epi32(__m512i __A, __mmask16 __U, __m512i __B,
                               __m512i __C, __m512i __D, __m512i __E,
                               __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4dpwssds_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                                __m512i __C, __m512i __D, __m512i __E,
                                __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)_mm512_setzero_ps(), (__mmask16)__U);
}

#pragma GCC pop_options
# 82 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vpopcntdqintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vpopcntdqintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vpopcntdq")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si((__v16si)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si_mask(
      (__v16si)__A, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di((__v8di)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di_mask((__v8di)__A, (__v8di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

#pragma GCC pop_options
# 84 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vbmi2")
# 218 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi16(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si((__v16si)__A, (__v16si)__B,
                                               (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi32(__mmask16 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi64(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di((__v8di)__A, (__v8di)__B,
                                              (__v8di)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di_mask((__v8di)__A, (__v8di)__C,
                                                   (__v8di)__D, (__mmask8)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi64(__mmask8 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di_maskz((__v8di)__B, (__v8di)__C,
                                                    (__v8di)__D, (__mmask8)__A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi16(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v16si((__v16si)__A, (__v16si)__B,
                                               (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi32(__mmask16 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi64(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v8di((__v8di)__A, (__v8di)__B,
                                              (__v8di)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v8di_mask((__v8di)__A, (__v8di)__C,
                                                   (__v8di)__D, (__mmask8)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi64(__mmask8 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v8di_maskz((__v8di)__B, (__v8di)__C,
                                                    (__v8di)__D, (__mmask8)__A);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("avx512vbmi2,avx512bw")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi8(__m512i __A, __mmask64 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_compressqi512_mask((__v64qi)__C, (__v64qi)__A,
                                                    (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi8(__mmask64 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_compressqi512_mask(
      (__v64qi)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi8(void *__A, __mmask64 __B, __m512i __C) {
  __builtin_ia32_compressstoreuqi512_mask((__v64qi *)__A, (__v64qi)__C,
                                          (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi16(__m512i __A, __mmask32 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_compresshi512_mask((__v32hi)__C, (__v32hi)__A,
                                                    (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi16(__mmask32 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_compresshi512_mask(
      (__v32hi)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi16(void *__A, __mmask32 __B, __m512i __C) {
  __builtin_ia32_compressstoreuhi512_mask((__v32hi *)__A, (__v32hi)__C,
                                          (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi8(__m512i __A, __mmask64 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_expandqi512_mask((__v64qi)__C, (__v64qi)__A,
                                                  (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi8(__mmask64 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_expandqi512_maskz(
      (__v64qi)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi8(__m512i __A, __mmask64 __B, const void *__C) {
  return (__m512i)__builtin_ia32_expandloadqi512_mask(
      (const __v64qi *)__C, (__v64qi)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi8(__mmask64 __A, const void *__B) {
  return (__m512i)__builtin_ia32_expandloadqi512_maskz(
      (const __v64qi *)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi16(__m512i __A, __mmask32 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_expandhi512_mask((__v32hi)__C, (__v32hi)__A,
                                                  (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi16(__mmask32 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_expandhi512_maskz(
      (__v32hi)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi16(__m512i __A, __mmask32 __B, const void *__C) {
  return (__m512i)__builtin_ia32_expandloadhi512_mask(
      (const __v32hi *)__C, (__v32hi)__A, (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi16(__mmask32 __A, const void *__B) {
  return (__m512i)__builtin_ia32_expandloadhi512_maskz(
      (const __v32hi *)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}
# 519 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2intrin.h" 3 4
extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi16(__m512i __A, __mmask32 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi_mask(
      (__v32hi)__A, (__v32hi)__C, (__v32hi)__D, (__mmask32)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi16(__mmask32 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi_maskz(
      (__v32hi)__B, (__v32hi)__C, (__v32hi)__D, (__mmask32)__A);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi16(__m512i __A, __mmask32 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi_mask(
      (__v32hi)__A, (__v32hi)__C, (__v32hi)__D, (__mmask32)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi16(__mmask32 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi_maskz(
      (__v32hi)__B, (__v32hi)__C, (__v32hi)__D, (__mmask32)__A);
}

#pragma GCC pop_options
# 86 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2vlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2vlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vbmi2,avx512vl")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi8(__m128i __A, __mmask16 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_compressqi128_mask((__v16qi)__C, (__v16qi)__A,
                                                    (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi8(__mmask16 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_compressqi128_mask(
      (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi16(void *__A, __mmask16 __B, __m256i __C) {
  __builtin_ia32_compressstoreuhi256_mask((__v16hi *)__A, (__v16hi)__C,
                                          (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi16(__m128i __A, __mmask8 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_compresshi128_mask((__v8hi)__C, (__v8hi)__A,
                                                    (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi16(__mmask8 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_compresshi128_mask(
      (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi16(__m256i __A, __mmask16 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_compresshi256_mask((__v16hi)__C, (__v16hi)__A,
                                                    (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi16(__mmask16 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_compresshi256_mask(
      (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi8(void *__A, __mmask16 __B, __m128i __C) {
  __builtin_ia32_compressstoreuqi128_mask((__v16qi *)__A, (__v16qi)__C,
                                          (__mmask16)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi16(void *__A, __mmask8 __B, __m128i __C) {
  __builtin_ia32_compressstoreuhi128_mask((__v8hi *)__A, (__v8hi)__C,
                                          (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi8(__m128i __A, __mmask16 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_expandqi128_mask((__v16qi)__C, (__v16qi)__A,
                                                  (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi8(__mmask16 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_expandqi128_maskz(
      (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi8(__m128i __A, __mmask16 __B, const void *__C) {
  return (__m128i)__builtin_ia32_expandloadqi128_mask(
      (const __v16qi *)__C, (__v16qi)__A, (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi8(__mmask16 __A, const void *__B) {
  return (__m128i)__builtin_ia32_expandloadqi128_maskz(
      (const __v16qi *)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi16(__m128i __A, __mmask8 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_expandhi128_mask((__v8hi)__C, (__v8hi)__A,
                                                  (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi16(__mmask8 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_expandhi128_maskz(
      (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi16(__m128i __A, __mmask8 __B, const void *__C) {
  return (__m128i)__builtin_ia32_expandloadhi128_mask(
      (const __v8hi *)__C, (__v8hi)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi16(__mmask8 __A, const void *__B) {
  return (__m128i)__builtin_ia32_expandloadhi128_maskz(
      (const __v8hi *)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi16(__m256i __A, __mmask16 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_expandhi256_mask((__v16hi)__C, (__v16hi)__A,
                                                  (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi16(__mmask16 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_expandhi256_maskz(
      (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi16(__m256i __A, __mmask16 __B, const void *__C) {
  return (__m256i)__builtin_ia32_expandloadhi256_mask(
      (const __v16hi *)__C, (__v16hi)__A, (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi16(__mmask16 __A, const void *__B) {
  return (__m256i)__builtin_ia32_expandloadhi256_maskz(
      (const __v16hi *)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}
# 672 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vbmi2vlintrin.h" 3 4
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi16(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi16(__m256i __A, __mmask16 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi_mask(
      (__v16hi)__A, (__v16hi)__C, (__v16hi)__D, (__mmask16)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi16(__mmask16 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi_maskz(
      (__v16hi)__B, (__v16hi)__C, (__v16hi)__D, (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si((__v8si)__A, (__v8si)__B,
                                              (__v8si)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si_mask((__v8si)__A, (__v8si)__C,
                                                   (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si_maskz((__v8si)__B, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi64(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di((__v4di)__A, (__v4di)__B,
                                              (__v4di)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di_mask((__v4di)__A, (__v4di)__C,
                                                   (__v4di)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi64(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di_maskz((__v4di)__B, (__v4di)__C,
                                                    (__v4di)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi16(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi((__v8hi)__A, (__v8hi)__B,
                                              (__v8hi)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi_mask((__v8hi)__A, (__v8hi)__C,
                                                   (__v8hi)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi16(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi_maskz((__v8hi)__B, (__v8hi)__C,
                                                    (__v8hi)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si((__v4si)__A, (__v4si)__B,
                                              (__v4si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si_mask((__v4si)__A, (__v4si)__C,
                                                   (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si_maskz((__v4si)__B, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi64(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di((__v2di)__A, (__v2di)__B,
                                              (__v2di)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di_mask((__v2di)__A, (__v2di)__C,
                                                   (__v2di)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi64(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di_maskz((__v2di)__B, (__v2di)__C,
                                                    (__v2di)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi16(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi16(__m256i __A, __mmask16 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi_mask(
      (__v16hi)__A, (__v16hi)__C, (__v16hi)__D, (__mmask16)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi16(__mmask16 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi_maskz(
      (__v16hi)__B, (__v16hi)__C, (__v16hi)__D, (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v8si((__v8si)__A, (__v8si)__B,
                                              (__v8si)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v8si_mask((__v8si)__A, (__v8si)__C,
                                                   (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v8si_maskz((__v8si)__B, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi64(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v4di((__v4di)__A, (__v4di)__B,
                                              (__v4di)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v4di_mask((__v4di)__A, (__v4di)__C,
                                                   (__v4di)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi64(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v4di_maskz((__v4di)__B, (__v4di)__C,
                                                    (__v4di)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi16(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi((__v8hi)__A, (__v8hi)__B,
                                              (__v8hi)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi_mask((__v8hi)__A, (__v8hi)__C,
                                                   (__v8hi)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi16(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi_maskz((__v8hi)__B, (__v8hi)__C,
                                                    (__v8hi)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v4si((__v4si)__A, (__v4si)__B,
                                              (__v4si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v4si_mask((__v4si)__A, (__v4si)__C,
                                                   (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v4si_maskz((__v4si)__B, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi64(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v2di((__v2di)__A, (__v2di)__B,
                                              (__v2di)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v2di_mask((__v2di)__A, (__v2di)__C,
                                                   (__v2di)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi64(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v2di_maskz((__v2di)__B, (__v2di)__C,
                                                    (__v2di)__D, (__mmask8)__A);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("avx512vbmi2,avx512vl,avx512bw")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi8(__m256i __A, __mmask32 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_compressqi256_mask((__v32qi)__C, (__v32qi)__A,
                                                    (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi8(__mmask32 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_compressqi256_mask(
      (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi8(void *__A, __mmask32 __B, __m256i __C) {
  __builtin_ia32_compressstoreuqi256_mask((__v32qi *)__A, (__v32qi)__C,
                                          (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi8(__m256i __A, __mmask32 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_expandqi256_mask((__v32qi)__C, (__v32qi)__A,
                                                  (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi8(__mmask32 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_expandqi256_maskz(
      (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi8(__m256i __A, __mmask32 __B, const void *__C) {
  return (__m256i)__builtin_ia32_expandloadqi256_mask(
      (const __v32qi *)__C, (__v32qi)__A, (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi8(__mmask32 __A, const void *__B) {
  return (__m256i)__builtin_ia32_expandloadqi256_maskz(
      (const __v32qi *)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

#pragma GCC pop_options
# 88 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vnniintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vnniintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vnni")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbusd_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si((__v16si)__A, (__v16si)__B,
                                                (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_dpbusd_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpbusd_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbusds_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si((__v16si)__A, (__v16si)__B,
                                                 (__v16si)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_dpbusds_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpbusds_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                               __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpwssd_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si((__v16si)__A, (__v16si)__B,
                                                (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_dpwssd_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpwssd_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpwssds_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si((__v16si)__A, (__v16si)__B,
                                                 (__v16si)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_dpwssds_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpwssds_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                               __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

#pragma GCC pop_options
# 90 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vnnivlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vnnivlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vnni,avx512vl")
# 42 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vnnivlintrin.h" 3 4
extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpbusd_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si_mask((__v8si)__A, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_dpbusd_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpbusd_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si_mask((__v4si)__A, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpbusd_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpbusds_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si_mask(
      (__v8si)__A, (__v8si)__C, (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_dpbusds_epi32(__mmask8 __A, __m256i __B, __m256i __C,
                               __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_dpbusds_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si_mask(
      (__v4si)__A, (__v4si)__C, (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpbusds_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpwssd_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si_mask((__v8si)__A, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_dpwssd_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpwssd_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si_mask((__v4si)__A, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpwssd_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpwssds_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si_mask(
      (__v8si)__A, (__v8si)__C, (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_dpwssds_epi32(__mmask8 __A, __m256i __B, __m256i __C,
                               __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_dpwssds_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si_mask(
      (__v4si)__A, (__v4si)__C, (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpwssds_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

#pragma GCC pop_options
# 92 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vpopcntdqvlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vpopcntdqvlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vpopcntdq,avx512vl")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si((__v4si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi32(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si_mask((__v4si)__A, (__v4si)__W,
                                                      (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi32(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si((__v8si)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi32(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si_mask((__v8si)__A, (__v8si)__W,
                                                      (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi32(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di((__v2di)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di_mask((__v2di)__A, (__v2di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di((__v4di)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di_mask((__v4di)__A, (__v4di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

#pragma GCC pop_options
# 94 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bitalgintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bitalgintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512bitalg")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi8(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi((__v64qi)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi16(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi((__v32hi)__A);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("avx512bitalg,avx512bw")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi_mask(
      (__v64qi)__A, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi_mask(
      (__v32hi)__A, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_bitshuffle_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_vpshufbitqmb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_bitshuffle_epi64_mask(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_vpshufbitqmb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__mmask64)__M);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("avx512bitalg,avx512vl,avx512bw")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi_mask(
      (__v32qi)__A, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bitshuffle_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_vpshufbitqmb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_bitshuffle_epi64_mask(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_vpshufbitqmb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__mmask32)__M);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("avx512bitalg,avx512vl")

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bitshuffle_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_vpshufbitqmb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_bitshuffle_epi64_mask(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_vpshufbitqmb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi8(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi16(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi((__v16hi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi((__v16qi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi((__v8hi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi_mask(
      (__v16hi)__A, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi_mask(
      (__v16qi)__A, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi_mask((__v8hi)__A, (__v8hi)__W,
                                                      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

#pragma GCC pop_options
# 96 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vp2intersectintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vp2intersectintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vp2intersect")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_2intersect_epi32(__m512i __A, __m512i __B, __mmask16 *__U,
                            __mmask16 *__M) {
  __builtin_ia32_2intersectd512(__U, __M, (__v16si)__A, (__v16si)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_2intersect_epi64(__m512i __A, __m512i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectq512(__U, __M, (__v8di)__A, (__v8di)__B);
}

#pragma GCC pop_options
# 98 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vp2intersectvlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512vp2intersectvlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512vp2intersect,avx512vl")

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm_2intersect_epi32(__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M) {
  __builtin_ia32_2intersectd128(__U, __M, (__v4si)__A, (__v4si)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_2intersect_epi32(__m256i __A, __m256i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectd256(__U, __M, (__v8si)__A, (__v8si)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm_2intersect_epi64(__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M) {
  __builtin_ia32_2intersectq128(__U, __M, (__v2di)__A, (__v2di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_2intersect_epi64(__m256i __A, __m256i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectq256(__U, __M, (__v4di)__A, (__v4di)__B);
}

#pragma GCC pop_options
# 100 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512fp16")

typedef _Float16 __v8hf __attribute__((__vector_size__(16)));
typedef _Float16 __v16hf __attribute__((__vector_size__(32)));
typedef _Float16 __v32hf __attribute__((__vector_size__(64)));

typedef _Float16 __m128h __attribute__((__vector_size__(16), __may_alias__));
typedef _Float16 __m256h __attribute__((__vector_size__(32), __may_alias__));
typedef _Float16 __m512h __attribute__((__vector_size__(64), __may_alias__));

typedef _Float16 __m128h_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef _Float16 __m256h_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef _Float16 __m512h_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_ph(_Float16 __A7, _Float16 __A6, _Float16 __A5, _Float16 __A4,
               _Float16 __A3, _Float16 __A2, _Float16 __A1, _Float16 __A0) {
  return __extension__(__m128h)(__v8hf){__A0, __A1, __A2, __A3,
                                        __A4, __A5, __A6, __A7};
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_ph(_Float16 __A15, _Float16 __A14, _Float16 __A13,
                  _Float16 __A12, _Float16 __A11, _Float16 __A10, _Float16 __A9,
                  _Float16 __A8, _Float16 __A7, _Float16 __A6, _Float16 __A5,
                  _Float16 __A4, _Float16 __A3, _Float16 __A2, _Float16 __A1,
                  _Float16 __A0) {
  return __extension__(__m256h)(__v16hf){
      __A0, __A1, __A2,  __A3,  __A4,  __A5,  __A6,  __A7,
      __A8, __A9, __A10, __A11, __A12, __A13, __A14, __A15};
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_set_ph(_Float16 __A31, _Float16 __A30, _Float16 __A29, _Float16 __A28,
              _Float16 __A27, _Float16 __A26, _Float16 __A25, _Float16 __A24,
              _Float16 __A23, _Float16 __A22, _Float16 __A21, _Float16 __A20,
              _Float16 __A19, _Float16 __A18, _Float16 __A17, _Float16 __A16,
              _Float16 __A15, _Float16 __A14, _Float16 __A13, _Float16 __A12,
              _Float16 __A11, _Float16 __A10, _Float16 __A9, _Float16 __A8,
              _Float16 __A7, _Float16 __A6, _Float16 __A5, _Float16 __A4,
              _Float16 __A3, _Float16 __A2, _Float16 __A1, _Float16 __A0) {
  return __extension__(__m512h)(__v32hf){
      __A0,  __A1,  __A2,  __A3,  __A4,  __A5,  __A6,  __A7,
      __A8,  __A9,  __A10, __A11, __A12, __A13, __A14, __A15,
      __A16, __A17, __A18, __A19, __A20, __A21, __A22, __A23,
      __A24, __A25, __A26, __A27, __A28, __A29, __A30, __A31};
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_ph(_Float16 __A0, _Float16 __A1, _Float16 __A2, _Float16 __A3,
                _Float16 __A4, _Float16 __A5, _Float16 __A6, _Float16 __A7) {
  return _mm_set_ph(__A7, __A6, __A5, __A4, __A3, __A2, __A1, __A0);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_ph(_Float16 __A0, _Float16 __A1, _Float16 __A2, _Float16 __A3,
                   _Float16 __A4, _Float16 __A5, _Float16 __A6, _Float16 __A7,
                   _Float16 __A8, _Float16 __A9, _Float16 __A10, _Float16 __A11,
                   _Float16 __A12, _Float16 __A13, _Float16 __A14,
                   _Float16 __A15) {
  return _mm256_set_ph(__A15, __A14, __A13, __A12, __A11, __A10, __A9, __A8,
                       __A7, __A6, __A5, __A4, __A3, __A2, __A1, __A0);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_setr_ph(_Float16 __A0, _Float16 __A1, _Float16 __A2, _Float16 __A3,
               _Float16 __A4, _Float16 __A5, _Float16 __A6, _Float16 __A7,
               _Float16 __A8, _Float16 __A9, _Float16 __A10, _Float16 __A11,
               _Float16 __A12, _Float16 __A13, _Float16 __A14, _Float16 __A15,
               _Float16 __A16, _Float16 __A17, _Float16 __A18, _Float16 __A19,
               _Float16 __A20, _Float16 __A21, _Float16 __A22, _Float16 __A23,
               _Float16 __A24, _Float16 __A25, _Float16 __A26, _Float16 __A27,
               _Float16 __A28, _Float16 __A29, _Float16 __A30, _Float16 __A31)

{
  return _mm512_set_ph(__A31, __A30, __A29, __A28, __A27, __A26, __A25, __A24,
                       __A23, __A22, __A21, __A20, __A19, __A18, __A17, __A16,
                       __A15, __A14, __A13, __A12, __A11, __A10, __A9, __A8,
                       __A7, __A6, __A5, __A4, __A3, __A2, __A1, __A0);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_ph(_Float16 __A) {
  return _mm_set_ph(__A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_ph(_Float16 __A) {
  return _mm256_set_ph(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                       __A, __A, __A, __A, __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_ph(_Float16 __A) {
  return _mm512_set_ph(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                       __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                       __A, __A, __A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_ph(void) {
  return _mm_set1_ph(0.0f16);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_ph(void) {
  return _mm256_set1_ph(0.0f16);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_ph(void) {
  return _mm512_set1_ph(0.0f16);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_ph(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m128h __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_ph(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m256h __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_ph(void) {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Winit-self"
  __m512h __Y = __Y;
#pragma GCC diagnostic pop
  return __Y;
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_h(__m128h __A) {
  return __A[0];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsh_h(__m256h __A) {
  return __A[0];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsh_h(__m512h __A) {
  return __A[0];
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph_ps(__m512h __a) {
  return (__m512)__a;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph_pd(__m512h __a) {
  return (__m512d)__a;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph_si512(__m512h __a) {
  return (__m512i)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph512_ph128(__m512h __A) {
  union {
    __m128h __a[4];
    __m512h __v;
  } __u = {.__v = __A};
  return __u.__a[0];
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph512_ph256(__m512h __A) {
  union {
    __m256h __a[2];
    __m512h __v;
  } __u = {.__v = __A};
  return __u.__a[0];
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph128_ph512(__m128h __A) {
  union {
    __m128h __a[4];
    __m512h __v;
  } __u;
  __u.__a[0] = __A;
  return __u.__v;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castph256_ph512(__m256h __A) {
  union {
    __m256h __a[2];
    __m512h __v;
  } __u;
  __u.__a[0] = __A;
  return __u.__v;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextph128_ph512(__m128h __A) {
  return (__m512h)((__m512)__builtin_ia32_insertf32x4_mask(
      (__v16sf)(__m512)(_mm512_setzero_ps()), (__v4sf)(__m128)((__m128)__A),
      (int)(0), (__v16sf)(__m512)(_mm512_setzero_ps()), (__mmask16)(-1)));
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextph256_ph512(__m256h __A) {
  return (__m512h)((__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)(__m512d)(_mm512_setzero_pd()), (__v4df)(__m256d)((__m256d)__A),
      (int)(0), (__v8df)(__m512d)_mm512_undefined_pd(), (__mmask8)-1));
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps_ph(__m512 __a) {
  return (__m512h)__a;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd_ph(__m512d __a) {
  return (__m512h)__a;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_ph(__m512i __a) {
  return (__m512h)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_sh(_Float16 __F) {
  return _mm_set_ph(0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16,
                    __F);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_sh(void const *__P) {
  return _mm_set_ph(0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16, 0.0f16,
                    *(_Float16 const *)__P);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_ph(void const *__P) {
  return *(const __m512h *)__P;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_ph(void const *__P) {
  return *(const __m256h *)__P;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ph(void const *__P) {
  return *(const __m128h *)__P;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_ph(void const *__P) {
  return *(const __m512h_u *)__P;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_ph(void const *__P) {
  return *(const __m256h_u *)__P;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_ph(void const *__P) {
  return *(const __m128h_u *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_sh(void *__P, __m128h __A) {
  *(_Float16 *)__P = ((__v8hf)__A)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_ph(void *__P, __m512h __A) {
  *(__m512h *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_ph(void *__P, __m256h __A) {
  *(__m256h *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ph(void *__P, __m128h __A) {
  *(__m128h *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_ph(void *__P, __m512h __A) {
  *(__m512h_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_ph(void *__P, __m256h __A) {
  *(__m256h_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_ph(void *__P, __m128h __A) {
  *(__m128h_u *)__P = __A;
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_ph(__m512h __A) {
  return (__m512h)_mm512_and_epi32(_mm512_set1_epi32(0x7FFF7FFF), (__m512i)__A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_ph(__m512h __A, __m512h __B) {
  return (__m512h)((__v32hf)__A + (__v32hf)__B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_addph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_addph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_ph(__m512h __A, __m512h __B) {
  return (__m512h)((__v32hf)__A - (__v32hf)__B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_subph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_subph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_ph(__m512h __A, __m512h __B) {
  return (__m512h)((__v32hf)__A * (__v32hf)__B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_mulph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_mulph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_ph(__m512h __A, __m512h __B) {
  return (__m512h)((__v32hf)__A / (__v32hf)__B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_divph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_divph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}
# 734 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_conj_pch(__m512h __A) {
  return (__m512h)_mm512_xor_epi32((__m512i)__A, _mm512_set1_epi32(1 << 31));
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_conj_pch(__m512h __W, __mmask16 __U, __m512h __A) {
  return (__m512h)__builtin_ia32_movaps512_mask((__v16sf)_mm512_conj_pch(__A),
                                                (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_conj_pch(__mmask16 __U, __m512h __A) {
  return (__m512h)__builtin_ia32_movaps512_mask((__v16sf)_mm512_conj_pch(__A),
                                                (__v16sf)_mm512_setzero_ps(),
                                                (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_sh(__m128h __A, __m128h __B) {
  __A[0] += __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_addsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_addsh_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_sh(__m128h __A, __m128h __B) {
  __A[0] -= __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_subsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_subsh_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_sh(__m128h __A, __m128h __B) {
  __A[0] *= __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_mulsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_mulsh_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_sh(__m128h __A, __m128h __B) {
  __A[0] /= __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_divsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_divsh_mask(__B, __C, _mm_setzero_ph(), __A);
}
# 1016 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_ph(__m512h __A, __m512h __B) {
  return __builtin_ia32_maxph512_mask(__A, __B, _mm512_setzero_ph(),
                                      (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_maxph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_maxph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_ph(__m512h __A, __m512h __B) {
  return __builtin_ia32_minph512_mask(__A, __B, _mm512_setzero_ph(),
                                      (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_minph512_mask(__C, __D, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_minph512_mask(__B, __C, _mm512_setzero_ph(), __A);
}
# 1148 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_sh(__m128h __A, __m128h __B) {
  __A[0] = __A[0] > __B[0] ? __A[0] : __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_maxsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_maxsh_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_sh(__m128h __A, __m128h __B) {
  __A[0] = __A[0] < __B[0] ? __A[0] : __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_minsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_minsh_mask(__B, __C, _mm_setzero_ph(), __A);
}
# 1393 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comieq_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x10, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comilt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x01, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comile_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x02, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comigt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x0e, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comige_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x0d, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comineq_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x14, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomieq_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x00, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomilt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x11, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomile_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x12, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomigt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x1e, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomige_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x1d, (__mmask8)-1, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomineq_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_cmpsh_mask_round(__A, __B, 0x04, (__mmask8)-1, 0x04);
}
# 1529 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_ph(__m512h __A) {
  return __builtin_ia32_sqrtph512_mask_round(__A, _mm512_setzero_ph(),
                                             (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_ph(__m512h __A, __mmask32 __B, __m512h __C) {
  return __builtin_ia32_sqrtph512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_ph(__mmask32 __A, __m512h __B) {
  return __builtin_ia32_sqrtph512_mask_round(__B, _mm512_setzero_ph(), __A,
                                             0x04);
}
# 1601 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt_ph(__m512h __A) {
  return __builtin_ia32_rsqrtph512_mask(__A, _mm512_setzero_ph(),
                                        (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rsqrt_ph(__m512h __A, __mmask32 __B, __m512h __C) {
  return __builtin_ia32_rsqrtph512_mask(__C, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt_ph(__mmask32 __A, __m512h __B) {
  return __builtin_ia32_rsqrtph512_mask(__B, _mm512_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_rsqrtsh_mask(__B, __A, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_rsqrtsh_mask(__D, __C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_rsqrtsh_mask(__C, __B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_sqrtsh_mask_round(__B, __A, _mm_setzero_ph(),
                                          (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_sqrtsh_mask_round(__D, __C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_sqrtsh_mask_round(__C, __B, _mm_setzero_ph(), __A,
                                          0x04);
}
# 1722 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp_ph(__m512h __A) {
  return __builtin_ia32_rcpph512_mask(__A, _mm512_setzero_ph(), (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp_ph(__m512h __A, __mmask32 __B, __m512h __C) {
  return __builtin_ia32_rcpph512_mask(__C, __A, __B);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp_ph(__mmask32 __A, __m512h __B) {
  return __builtin_ia32_rcpph512_mask(__B, _mm512_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_rcpsh_mask(__B, __A, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp_sh(__m128h __A, __mmask32 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_rcpsh_mask(__D, __C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp_sh(__mmask32 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_rcpsh_mask(__C, __B, _mm_setzero_ph(), __A);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_ph(__m512h __A, __m512h __B) {
  return __builtin_ia32_scalefph512_mask_round(__A, __B, _mm512_setzero_ph(),
                                               (__mmask32)-1, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_scalef_ph(__m512h __A, __mmask32 __B, __m512h __C, __m512h __D) {
  return __builtin_ia32_scalefph512_mask_round(__C, __D, __A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_ph(__mmask32 __A, __m512h __B, __m512h __C) {
  return __builtin_ia32_scalefph512_mask_round(__B, __C, _mm512_setzero_ph(),
                                               __A, 0x04);
}
# 1844 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_sh(__m128h __A, __m128h __B) {
  return __builtin_ia32_scalefsh_mask_round(__A, __B, _mm_setzero_ph(),
                                            (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_scalefsh_mask_round(__C, __D, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_scalefsh_mask_round(__B, __C, _mm_setzero_ph(), __A,
                                            0x04);
}
# 2333 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_sh(__m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_getexpsh_mask_round(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)_mm_setzero_ph(), (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_sh(__m128h __W, __mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_getexpsh_mask_round(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_sh(__mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_getexpsh_mask_round(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)_mm_setzero_ph(), (__mmask8)__U, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getexp_ph(__m512h __A) {
  return (__m512h)__builtin_ia32_getexpph512_mask(
      (__v32hf)__A, (__v32hf)_mm512_setzero_ph(), (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getexp_ph(__m512h __W, __mmask32 __U, __m512h __A) {
  return (__m512h)__builtin_ia32_getexpph512_mask((__v32hf)__A, (__v32hf)__W,
                                                  (__mmask32)__U, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getexp_ph(__mmask32 __U, __m512h __A) {
  return (__m512h)__builtin_ia32_getexpph512_mask(
      (__v32hf)__A, (__v32hf)_mm512_setzero_ph(), (__mmask32)__U, 0x04);
}
# 2747 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi16_si128(short __A) {
  return _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, __A);
}

extern __inline short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si16(__m128i __A) {
  return __builtin_ia32_vec_ext_v8hi((__v8hi)__A, 0);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_sh(__m128h __A, __mmask8 __B, _Float16 const *__C) {
  return __builtin_ia32_loadsh_mask(__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_sh(__mmask8 __A, _Float16 const *__B) {
  return __builtin_ia32_loadsh_mask(__B, _mm_setzero_ph(), __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_sh(_Float16 const *__A, __mmask8 __B, __m128h __C) {
  __builtin_ia32_storesh_mask(__A, __C, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_sh(__m128h __A, __m128h __B) {
  __A[0] = __B[0];
  return __A;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_move_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_vmovsh_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_move_sh(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_vmovsh_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epi32(__m256h __A) {
  return (__m512i)__builtin_ia32_vcvtph2dq512_mask_round(
      __A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epi32(__m512i __A, __mmask16 __B, __m256h __C) {
  return (__m512i)__builtin_ia32_vcvtph2dq512_mask_round(__C, (__v16si)__A, __B,
                                                         0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epi32(__mmask16 __A, __m256h __B) {
  return (__m512i)__builtin_ia32_vcvtph2dq512_mask_round(
      __B, (__v16si)_mm512_setzero_si512(), __A, 0x04);
}
# 2901 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epu32(__m256h __A) {
  return (__m512i)__builtin_ia32_vcvtph2udq512_mask_round(
      __A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epu32(__m512i __A, __mmask16 __B, __m256h __C) {
  return (__m512i)__builtin_ia32_vcvtph2udq512_mask_round(__C, (__v16si)__A,
                                                          __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epu32(__mmask16 __A, __m256h __B) {
  return (__m512i)__builtin_ia32_vcvtph2udq512_mask_round(
      __B, (__v16si)_mm512_setzero_si512(), __A, 0x04);
}
# 2996 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epi32(__m256h __A) {
  return (__m512i)__builtin_ia32_vcvttph2dq512_mask_round(
      __A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epi32(__m512i __A, __mmask16 __B, __m256h __C) {
  return (__m512i)__builtin_ia32_vcvttph2dq512_mask_round(__C, (__v16si)__A,
                                                          __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epi32(__mmask16 __A, __m256h __B) {
  return (__m512i)__builtin_ia32_vcvttph2dq512_mask_round(
      __B, (__v16si)_mm512_setzero_si512(), __A, 0x04);
}
# 3094 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epu32(__m256h __A) {
  return (__m512i)__builtin_ia32_vcvttph2udq512_mask_round(
      __A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epu32(__m512i __A, __mmask16 __B, __m256h __C) {
  return (__m512i)__builtin_ia32_vcvttph2udq512_mask_round(__C, (__v16si)__A,
                                                           __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epu32(__mmask16 __A, __m256h __B) {
  return (__m512i)__builtin_ia32_vcvttph2udq512_mask_round(
      __B, (__v16si)_mm512_setzero_si512(), __A, 0x04);
}
# 3193 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_ph(__m512i __A) {
  return __builtin_ia32_vcvtdq2ph512_mask_round(
      (__v16si)__A, _mm256_setzero_ph(), (__mmask16)-1, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_ph(__m256h __A, __mmask16 __B, __m512i __C) {
  return __builtin_ia32_vcvtdq2ph512_mask_round((__v16si)__C, __A, __B, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_ph(__mmask16 __A, __m512i __B) {
  return __builtin_ia32_vcvtdq2ph512_mask_round((__v16si)__B,
                                                _mm256_setzero_ph(), __A, 0x04);
}
# 3276 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_ph(__m512i __A) {
  return __builtin_ia32_vcvtudq2ph512_mask_round(
      (__v16si)__A, _mm256_setzero_ph(), (__mmask16)-1, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_ph(__m256h __A, __mmask16 __B, __m512i __C) {
  return __builtin_ia32_vcvtudq2ph512_mask_round((__v16si)__C, __A, __B, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_ph(__mmask16 __A, __m512i __B) {
  return __builtin_ia32_vcvtudq2ph512_mask_round(
      (__v16si)__B, _mm256_setzero_ph(), __A, 0x04);
}
# 3359 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epi64(__m128h __A) {
  return __builtin_ia32_vcvtph2qq512_mask_round(__A, _mm512_setzero_si512(),
                                                (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epi64(__m512i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2qq512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2qq512_mask_round(__B, _mm512_setzero_si512(),
                                                __A, 0x04);
}
# 3434 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epu64(__m128h __A) {
  return __builtin_ia32_vcvtph2uqq512_mask_round(__A, _mm512_setzero_si512(),
                                                 (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epu64(__m512i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2uqq512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2uqq512_mask_round(__B, _mm512_setzero_si512(),
                                                 __A, 0x04);
}
# 3510 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epi64(__m128h __A) {
  return __builtin_ia32_vcvttph2qq512_mask_round(__A, _mm512_setzero_si512(),
                                                 (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epi64(__m512i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2qq512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2qq512_mask_round(__B, _mm512_setzero_si512(),
                                                 __A, 0x04);
}
# 3585 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epu64(__m128h __A) {
  return __builtin_ia32_vcvttph2uqq512_mask_round(__A, _mm512_setzero_si512(),
                                                  (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epu64(__m512i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2uqq512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2uqq512_mask_round(__B, _mm512_setzero_si512(),
                                                  __A, 0x04);
}
# 3660 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_ph(__m512i __A) {
  return __builtin_ia32_vcvtqq2ph512_mask_round((__v8di)__A, _mm_setzero_ph(),
                                                (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_ph(__m128h __A, __mmask8 __B, __m512i __C) {
  return __builtin_ia32_vcvtqq2ph512_mask_round((__v8di)__C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_ph(__mmask8 __A, __m512i __B) {
  return __builtin_ia32_vcvtqq2ph512_mask_round((__v8di)__B, _mm_setzero_ph(),
                                                __A, 0x04);
}
# 3740 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu64_ph(__m512i __A) {
  return __builtin_ia32_vcvtuqq2ph512_mask_round((__v8di)__A, _mm_setzero_ph(),
                                                 (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu64_ph(__m128h __A, __mmask8 __B, __m512i __C) {
  return __builtin_ia32_vcvtuqq2ph512_mask_round((__v8di)__C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu64_ph(__mmask8 __A, __m512i __B) {
  return __builtin_ia32_vcvtuqq2ph512_mask_round((__v8di)__B, _mm_setzero_ph(),
                                                 __A, 0x04);
}
# 3820 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epi16(__m512h __A) {
  return (__m512i)__builtin_ia32_vcvtph2w512_mask_round(
      __A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epi16(__m512i __A, __mmask32 __B, __m512h __C) {
  return (__m512i)__builtin_ia32_vcvtph2w512_mask_round(__C, (__v32hi)__A, __B,
                                                        0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epi16(__mmask32 __A, __m512h __B) {
  return (__m512i)__builtin_ia32_vcvtph2w512_mask_round(
      __B, (__v32hi)_mm512_setzero_si512(), __A, 0x04);
}
# 3915 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_epu16(__m512h __A) {
  return (__m512i)__builtin_ia32_vcvtph2uw512_mask_round(
      __A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_epu16(__m512i __A, __mmask32 __B, __m512h __C) {
  return (__m512i)__builtin_ia32_vcvtph2uw512_mask_round(__C, (__v32hi)__A, __B,
                                                         0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_epu16(__mmask32 __A, __m512h __B) {
  return (__m512i)__builtin_ia32_vcvtph2uw512_mask_round(
      __B, (__v32hi)_mm512_setzero_si512(), __A, 0x04);
}
# 4004 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epi16(__m512h __A) {
  return (__m512i)__builtin_ia32_vcvttph2w512_mask_round(
      __A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epi16(__m512i __A, __mmask32 __B, __m512h __C) {
  return (__m512i)__builtin_ia32_vcvttph2w512_mask_round(__C, (__v32hi)__A, __B,
                                                         0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epi16(__mmask32 __A, __m512h __B) {
  return (__m512i)__builtin_ia32_vcvttph2w512_mask_round(
      __B, (__v32hi)_mm512_setzero_si512(), __A, 0x04);
}
# 4103 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttph_epu16(__m512h __A) {
  return (__m512i)__builtin_ia32_vcvttph2uw512_mask_round(
      __A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttph_epu16(__m512i __A, __mmask32 __B, __m512h __C) {
  return (__m512i)__builtin_ia32_vcvttph2uw512_mask_round(__C, (__v32hi)__A,
                                                          __B, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttph_epu16(__mmask32 __A, __m512h __B) {
  return (__m512i)__builtin_ia32_vcvttph2uw512_mask_round(
      __B, (__v32hi)_mm512_setzero_si512(), __A, 0x04);
}
# 4202 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_ph(__m512i __A) {
  return __builtin_ia32_vcvtw2ph512_mask_round(
      (__v32hi)__A, _mm512_setzero_ph(), (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_ph(__m512h __A, __mmask32 __B, __m512i __C) {
  return __builtin_ia32_vcvtw2ph512_mask_round((__v32hi)__C, __A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_ph(__mmask32 __A, __m512i __B) {
  return __builtin_ia32_vcvtw2ph512_mask_round((__v32hi)__B,
                                               _mm512_setzero_ph(), __A, 0x04);
}
# 4285 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu16_ph(__m512i __A) {
  return __builtin_ia32_vcvtuw2ph512_mask_round(
      (__v32hi)__A, _mm512_setzero_ph(), (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu16_ph(__m512h __A, __mmask32 __B, __m512i __C) {
  return __builtin_ia32_vcvtuw2ph512_mask_round((__v32hi)__C, __A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu16_ph(__mmask32 __A, __m512i __B) {
  return __builtin_ia32_vcvtuw2ph512_mask_round((__v32hi)__B,
                                                _mm512_setzero_ph(), __A, 0x04);
}
# 4368 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_i32(__m128h __A) {
  return (int)__builtin_ia32_vcvtsh2si32_round(__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_u32(__m128h __A) {
  return (int)__builtin_ia32_vcvtsh2usi32_round(__A, 0x04);
}
# 4407 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_i64(__m128h __A) {
  return (long long)__builtin_ia32_vcvtsh2si64_round(__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_u64(__m128h __A) {
  return (long long)__builtin_ia32_vcvtsh2usi64_round(__A, 0x04);
}
# 4448 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsh_i32(__m128h __A) {
  return (int)__builtin_ia32_vcvttsh2si32_round(__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsh_u32(__m128h __A) {
  return (int)__builtin_ia32_vcvttsh2usi32_round(__A, 0x04);
}
# 4488 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsh_i64(__m128h __A) {
  return (long long)__builtin_ia32_vcvttsh2si64_round(__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsh_u64(__m128h __A) {
  return (long long)__builtin_ia32_vcvttsh2usi64_round(__A, 0x04);
}
# 4529 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti32_sh(__m128h __A, int __B) {
  return __builtin_ia32_vcvtsi2sh32_round(__A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu32_sh(__m128h __A, unsigned int __B) {
  return __builtin_ia32_vcvtusi2sh32_round(__A, __B, 0x04);
}
# 4567 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti64_sh(__m128h __A, long long __B) {
  return __builtin_ia32_vcvtsi2sh64_round(__A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu64_sh(__m128h __A, unsigned long long __B) {
  return __builtin_ia32_vcvtusi2sh64_round(__A, __B, 0x04);
}
# 4606 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_pd(__m128h __A) {
  return __builtin_ia32_vcvtph2pd512_mask_round(__A, _mm512_setzero_pd(),
                                                (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_pd(__m512d __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2pd512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_pd(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2pd512_mask_round(__B, _mm512_setzero_pd(), __A,
                                                0x04);
}
# 4681 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtxph_ps(__m256h __A) {
  return __builtin_ia32_vcvtph2psx512_mask_round(__A, _mm512_setzero_ps(),
                                                 (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtxph_ps(__m512 __A, __mmask16 __B, __m256h __C) {
  return __builtin_ia32_vcvtph2psx512_mask_round(__C, __A, __B, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtxph_ps(__mmask16 __A, __m256h __B) {
  return __builtin_ia32_vcvtph2psx512_mask_round(__B, _mm512_setzero_ps(), __A,
                                                 0x04);
}
# 4755 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtxps_ph(__m512 __A) {
  return __builtin_ia32_vcvtps2phx512_mask_round(
      (__v16sf)__A, _mm256_setzero_ph(), (__mmask16)-1, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtxps_ph(__m256h __A, __mmask16 __B, __m512 __C) {
  return __builtin_ia32_vcvtps2phx512_mask_round((__v16sf)__C, __A, __B, 0x04);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtxps_ph(__mmask16 __A, __m512 __B) {
  return __builtin_ia32_vcvtps2phx512_mask_round(
      (__v16sf)__B, _mm256_setzero_ph(), __A, 0x04);
}
# 4829 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_ph(__m512d __A) {
  return __builtin_ia32_vcvtpd2ph512_mask_round((__v8df)__A, _mm_setzero_ph(),
                                                (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_ph(__m128h __A, __mmask8 __B, __m512d __C) {
  return __builtin_ia32_vcvtpd2ph512_mask_round((__v8df)__C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_ph(__mmask8 __A, __m512d __B) {
  return __builtin_ia32_vcvtpd2ph512_mask_round((__v8df)__B, _mm_setzero_ph(),
                                                __A, 0x04);
}
# 4904 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_ss(__m128 __A, __m128h __B) {
  return __builtin_ia32_vcvtsh2ss_mask_round(__B, __A, _mm_setzero_ps(),
                                             (__mmask8)-1, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsh_ss(__m128 __A, __mmask8 __B, __m128 __C, __m128h __D) {
  return __builtin_ia32_vcvtsh2ss_mask_round(__D, __C, __A, __B, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsh_ss(__mmask8 __A, __m128 __B, __m128h __C) {
  return __builtin_ia32_vcvtsh2ss_mask_round(__C, __B, _mm_setzero_ps(), __A,
                                             0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsh_sd(__m128d __A, __m128h __B) {
  return __builtin_ia32_vcvtsh2sd_mask_round(__B, __A, _mm_setzero_pd(),
                                             (__mmask8)-1, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsh_sd(__m128d __A, __mmask8 __B, __m128d __C, __m128h __D) {
  return __builtin_ia32_vcvtsh2sd_mask_round(__D, __C, __A, __B, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsh_sd(__mmask8 __A, __m128d __B, __m128h __C) {
  return __builtin_ia32_vcvtsh2sd_mask_round(__C, __B, _mm_setzero_pd(), __A,
                                             0x04);
}
# 5045 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_sh(__m128h __A, __m128 __B) {
  return __builtin_ia32_vcvtss2sh_mask_round(__B, __A, _mm_setzero_ph(),
                                             (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtss_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128 __D) {
  return __builtin_ia32_vcvtss2sh_mask_round(__D, __C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtss_sh(__mmask8 __A, __m128h __B, __m128 __C) {
  return __builtin_ia32_vcvtss2sh_mask_round(__C, __B, _mm_setzero_ph(), __A,
                                             0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_sh(__m128h __A, __m128d __B) {
  return __builtin_ia32_vcvtsd2sh_mask_round(__B, __A, _mm_setzero_ph(),
                                             (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsd_sh(__m128h __A, __mmask8 __B, __m128h __C, __m128d __D) {
  return __builtin_ia32_vcvtsd2sh_mask_round(__D, __C, __A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsd_sh(__mmask8 __A, __m128h __B, __m128d __C) {
  return __builtin_ia32_vcvtsd2sh_mask_round(__C, __B, _mm_setzero_ph(), __A,
                                             0x04);
}
# 5184 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmaddsub_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmaddsub_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmaddsub_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfmaddsubph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmaddsub_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddsubph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5296 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsubadd_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmsubadd_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmsubadd_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfmsubaddph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmsubadd_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubaddph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5412 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmadd_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfmaddph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmadd_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5520 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fnmadd_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmaddph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmadd_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfnmaddph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmadd_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmaddph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5628 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmsub_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfmsubph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmsub_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmsubph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5736 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_ph(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)-1, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fnmsub_ph(__m512h __A, __mmask32 __U, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmsubph512_mask(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmsub_ph(__m512h __A, __m512h __B, __m512h __C, __mmask32 __U) {
  return (__m512h)__builtin_ia32_vfnmsubph512_mask3(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmsub_ph(__mmask32 __U, __m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfnmsubph512_maskz(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, (__mmask32)__U, 0x04);
}
# 5844 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_sh(__m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_sh(__m128h __W, __mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_sh(__m128h __W, __m128h __A, __m128h __B, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask3(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_sh(__mmask8 __U, __m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_maskz(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}
# 5947 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_sh(__m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfnmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_sh(__m128h __W, __mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfnmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_sh(__m128h __W, __m128h __A, __m128h __B, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfnmaddsh3_mask3(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_sh(__mmask8 __U, __m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfnmaddsh3_maskz(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}
# 6050 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_sh(__m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, -(__v8hf)__B, (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_sh(__m128h __W, __mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, (__v8hf)__A, -(__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_sh(__m128h __W, __m128h __A, __m128h __B, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmsubsh3_mask3(
      (__v8hf)__W, (__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_sh(__mmask8 __U, __m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_maskz(
      (__v8hf)__W, (__v8hf)__A, -(__v8hf)__B, (__mmask8)__U, 0x04);
}
# 6153 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_sh(__m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, -(__v8hf)__A, -(__v8hf)__B, (__mmask8)-1, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_sh(__m128h __W, __mmask8 __U, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_mask(
      (__v8hf)__W, -(__v8hf)__A, -(__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_sh(__m128h __W, __m128h __A, __m128h __B, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmsubsh3_mask3(
      (__v8hf)__W, -(__v8hf)__A, (__v8hf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_sh(__mmask8 __U, __m128h __W, __m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmaddsh3_maskz(
      (__v8hf)__W, -(__v8hf)__A, -(__v8hf)__B, (__mmask8)__U, 0x04);
}
# 6256 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fcmadd_pch(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfcmaddcph512_round((__v32hf)__A, (__v32hf)__B,
                                                     (__v32hf)__C, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fcmadd_pch(__m512h __A, __mmask16 __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfcmaddcph512_mask_round(
      (__v32hf)__A, (__v32hf)__C, (__v32hf)__D, __B, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fcmadd_pch(__m512h __A, __m512h __B, __m512h __C, __mmask16 __D) {
  return (__m512h)__builtin_ia32_vfcmaddcph512_mask3_round(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, __D, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fcmadd_pch(__mmask16 __A, __m512h __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfcmaddcph512_maskz_round(
      (__v32hf)__B, (__v32hf)__C, (__v32hf)__D, __A, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_pch(__m512h __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmaddcph512_round((__v32hf)__A, (__v32hf)__B,
                                                    (__v32hf)__C, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmadd_pch(__m512h __A, __mmask16 __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfmaddcph512_mask_round(
      (__v32hf)__A, (__v32hf)__C, (__v32hf)__D, __B, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmadd_pch(__m512h __A, __m512h __B, __m512h __C, __mmask16 __D) {
  return (__m512h)__builtin_ia32_vfmaddcph512_mask3_round(
      (__v32hf)__A, (__v32hf)__B, (__v32hf)__C, __D, 0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmadd_pch(__mmask16 __A, __m512h __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfmaddcph512_maskz_round(
      (__v32hf)__B, (__v32hf)__C, (__v32hf)__D, __A, 0x04);
}
# 6480 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fcmul_pch(__m512h __A, __m512h __B) {
  return (__m512h)__builtin_ia32_vfcmulcph512_round((__v32hf)__A, (__v32hf)__B,
                                                    0x04);
}

extern __inline __m512h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fcmul_pch(__m512h __A, __mmask16 __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfcmulcph512_mask_round(
      (__v32hf)__C, (__v32hf)__D, (__v32hf)__A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fcmul_pch(__mmask16 __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfcmulcph512_mask_round(
      (__v32hf)__B, (__v32hf)__C, _mm512_setzero_ph(), __A, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmul_pch(__m512h __A, __m512h __B) {
  return (__m512h)__builtin_ia32_vfmulcph512_round((__v32hf)__A, (__v32hf)__B,
                                                   0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmul_pch(__m512h __A, __mmask16 __B, __m512h __C, __m512h __D) {
  return (__m512h)__builtin_ia32_vfmulcph512_mask_round(
      (__v32hf)__C, (__v32hf)__D, (__v32hf)__A, __B, 0x04);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmul_pch(__mmask16 __A, __m512h __B, __m512h __C) {
  return (__m512h)__builtin_ia32_vfmulcph512_mask_round(
      (__v32hf)__B, (__v32hf)__C, _mm512_setzero_ph(), __A, 0x04);
}
# 6640 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fcmadd_sch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmaddcsh_mask_round((__v8hf)__A, (__v8hf)__C,
                                                       (__v8hf)__D, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fcmadd_sch(__m128h __A, __m128h __B, __m128h __C, __mmask8 __D) {
  return (__m128h)__builtin_ia32_vfcmaddcsh_mask3_round(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, __D, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fcmadd_sch(__mmask8 __A, __m128h __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmaddcsh_maskz_round(
      (__v8hf)__B, (__v8hf)__C, (__v8hf)__D, __A, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fcmadd_sch(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfcmaddcsh_round((__v8hf)__A, (__v8hf)__B,
                                                  (__v8hf)__C, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_sch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmaddcsh_mask_round((__v8hf)__A, (__v8hf)__C,
                                                      (__v8hf)__D, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_sch(__m128h __A, __m128h __B, __m128h __C, __mmask8 __D) {
  return (__m128h)__builtin_ia32_vfmaddcsh_mask3_round((__v8hf)__A, (__v8hf)__B,
                                                       (__v8hf)__C, __D, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_sch(__mmask8 __A, __m128h __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmaddcsh_maskz_round((__v8hf)__B, (__v8hf)__C,
                                                       (__v8hf)__D, __A, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_sch(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddcsh_round((__v8hf)__A, (__v8hf)__B,
                                                 (__v8hf)__C, 0x04);
}
# 6867 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fcmul_sch(__m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfcmulcsh_round((__v8hf)__A, (__v8hf)__B,
                                                 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fcmul_sch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmulcsh_mask_round((__v8hf)__C, (__v8hf)__D,
                                                      (__v8hf)__A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fcmul_sch(__mmask8 __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfcmulcsh_mask_round(
      (__v8hf)__B, (__v8hf)__C, _mm_setzero_ph(), __A, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmul_sch(__m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmulcsh_round((__v8hf)__A, (__v8hf)__B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmul_sch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmulcsh_mask_round((__v8hf)__C, (__v8hf)__D,
                                                     (__v8hf)__A, __B, 0x04);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmul_sch(__mmask8 __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmulcsh_mask_round(
      (__v8hf)__B, (__v8hf)__C, _mm_setzero_ph(), __A, 0x04);
}
# 7049 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_ph(__m512h __A) {
  __m256h __T1 = (__m256h)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256h __T2 = (__m256h)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256h __T3 = (__T1 + __T2);
  __m128h __T4 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__T3), (int)(0)));
  __m128h __T5 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__T3), (int)(1)));
  __m128h __T6 = (__T4 + __T5);
  __m128h __T7 = (__m128h)__builtin_shuffle((__m128h)__T6,
                                            (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T8 = (__T6 + __T7);
  __m128h __T9 = (__m128h)__builtin_shuffle((__m128h)__T8,
                                            (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T10 = __T8 + __T9;
  return __T10[0] + __T10[1];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_ph(__m512h __A) {
  __m256h __T1 = (__m256h)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(0),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256h __T2 = (__m256h)((__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)(__m512d)((__m512d)__A), (int)(1),
      (__v4df)(__m256d)_mm256_undefined_pd(), (__mmask8)-1));
  __m256h __T3 = (__T1 * __T2);
  __m128h __T4 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__T3), (int)(0)));
  __m128h __T5 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__T3), (int)(1)));
  __m128h __T6 = (__T4 * __T5);
  __m128h __T7 = (__m128h)__builtin_shuffle((__m128h)__T6,
                                            (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T8 = (__T6 * __T7);
  __m128h __T9 = (__m128h)__builtin_shuffle((__m128h)__T8,
                                            (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T10 = __T8 * __T9;
  return __T10[0] * __T10[1];
}
# 7115 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_ph(__m512h __A) {
  __m512h __T1 = (__m512h)__builtin_shuffle((__m512d)__A,
                                            (__v8di){4, 5, 6, 7, 0, 0, 0, 0});
  __m512h __T2 = _mm512_min_ph(__A, __T1);
  __m512h __T3 = (__m512h)__builtin_shuffle((__m512d)__T2,
                                            (__v8di){2, 3, 0, 0, 0, 0, 0, 0});
  __m512h __T4 = _mm512_min_ph(__T2, __T3);
  __m512h __T5 = (__m512h)__builtin_shuffle((__m512d)__T4,
                                            (__v8di){1, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T6 = _mm512_min_ph(__T4, __T5);
  __m512h __T7 = (__m512h)__builtin_shuffle(
      (__m512)__T6, (__v16si){1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T8 = _mm512_min_ph(__T6, __T7);
  __m512h __T9 = (__m512h)__builtin_shuffle(
      __T8, (__v32hi){1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T10 = _mm512_min_ph(__T8, __T9);
  return __T10[0];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_ph(__m512h __A) {
  __m512h __T1 = (__m512h)__builtin_shuffle((__m512d)__A,
                                            (__v8di){4, 5, 6, 7, 0, 0, 0, 0});
  __m512h __T2 = _mm512_max_ph(__A, __T1);
  __m512h __T3 = (__m512h)__builtin_shuffle((__m512d)__T2,
                                            (__v8di){2, 3, 0, 0, 0, 0, 0, 0});
  __m512h __T4 = _mm512_max_ph(__T2, __T3);
  __m512h __T5 = (__m512h)__builtin_shuffle((__m512d)__T4,
                                            (__v8di){1, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T6 = _mm512_max_ph(__T4, __T5);
  __m512h __T7 = (__m512h)__builtin_shuffle(
      (__m512)__T6, (__v16si){1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T8 = _mm512_max_ph(__T6, __T7);
  __m512h __T9 = (__m512h)__builtin_shuffle(
      __T8, (__v32hi){1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
  __m512h __T10 = _mm512_max_ph(__T8, __T9);
  return __T10[0];
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_ph(__mmask32 __U, __m512h __A, __m512h __W) {
  return (__m512h)__builtin_ia32_movdquhi512_mask((__v32hi)__W, (__v32hi)__A,
                                                  (__mmask32)__U);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_ph(__m512h __A, __m512i __I, __m512h __B) {
  return (__m512h)__builtin_ia32_vpermi2varhi512_mask(
      (__v32hi)__A, (__v32hi)__I, (__v32hi)__B, (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_ph(__m512i __A, __m512h __B) {
  return (__m512h)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)(_mm512_setzero_ph()),
      (__mmask32)-1);
}

extern __inline __m512h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_pch(_Float16 _Complex __A) {
  union {
    _Float16 _Complex __a;
    float __b;
  } __u = {.__a = __A};

  return (__m512h)_mm512_set1_ps(__u.__b);
}
# 7216 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16intrin.h" 3 4
#pragma GCC pop_options
# 103 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512fp16,avx512vl")

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castph_ps(__m128h __a) {
  return (__m128)__a;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castph_ps(__m256h __a) {
  return (__m256)__a;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castph_pd(__m128h __a) {
  return (__m128d)__a;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castph_pd(__m256h __a) {
  return (__m256d)__a;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castph_si128(__m128h __a) {
  return (__m128i)__a;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castph_si256(__m256h __a) {
  return (__m256i)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castps_ph(__m128 __a) {
  return (__m128h)__a;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps_ph(__m256 __a) {
  return (__m256h)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castpd_ph(__m128d __a) {
  return (__m128h)__a;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd_ph(__m256d __a) {
  return (__m256h)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castsi128_ph(__m128i __a) {
  return (__m128h)__a;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_ph(__m256i __a) {
  return (__m256h)__a;
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castph256_ph128(__m256h __A) {
  union {
    __m128h __a[2];
    __m256h __v;
  } __u = {.__v = __A};
  return __u.__a[0];
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castph128_ph256(__m128h __A) {
  union {
    __m128h __a[2];
    __m256h __v;
  } __u;
  __u.__a[0] = __A;
  return __u.__v;
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextph128_ph256(__m128h __A) {
  return (__m256h)((__m256)__builtin_ia32_vinsertf128_ps256(
      (__v8sf)(__m256)(_mm256_setzero_ps()), (__v4sf)(__m128)((__m128)__A),
      (int)(0)));
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_conj_pch(__m256h __A) {
  return (__m256h)_mm256_xor_epi32((__m256i)__A, _mm256_set1_epi32(1 << 31));
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_conj_pch(__m256h __W, __mmask8 __U, __m256h __A) {
  return (__m256h)__builtin_ia32_movaps256_mask((__v8sf)_mm256_conj_pch(__A),
                                                (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_conj_pch(__mmask8 __U, __m256h __A) {
  return (__m256h)__builtin_ia32_movaps256_mask(
      (__v8sf)_mm256_conj_pch(__A), (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_conj_pch(__m128h __A) {
  return (__m128h)_mm_xor_epi32((__m128i)__A, _mm_set1_epi32(1 << 31));
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_conj_pch(__m128h __W, __mmask8 __U, __m128h __A) {
  return (__m128h)__builtin_ia32_movaps128_mask((__v4sf)_mm_conj_pch(__A),
                                                (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_conj_pch(__mmask8 __U, __m128h __A) {
  return (__m128h)__builtin_ia32_movaps128_mask(
      (__v4sf)_mm_conj_pch(__A), (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_ph(__m128h __A, __m128h __B) {
  return (__m128h)((__v8hf)__A + (__v8hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_ph(__m256h __A, __m256h __B) {
  return (__m256h)((__v16hf)__A + (__v16hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_addph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_addph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_addph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_addph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_ph(__m128h __A, __m128h __B) {
  return (__m128h)((__v8hf)__A - (__v8hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_ph(__m256h __A, __m256h __B) {
  return (__m256h)((__v16hf)__A - (__v16hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_subph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_subph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_subph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_subph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_ph(__m128h __A, __m128h __B) {
  return (__m128h)((__v8hf)__A * (__v8hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_ph(__m256h __A, __m256h __B) {
  return (__m256h)((__v16hf)__A * (__v16hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_mulph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_mulph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_mulph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_mulph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_ph(__m128h __A, __m128h __B) {
  return (__m128h)((__v8hf)__A / (__v8hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_div_ph(__m256h __A, __m256h __B) {
  return (__m256h)((__v16hf)__A / (__v16hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_divph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_div_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_divph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_divph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_div_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_divph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_ph(__m128h __A, __m128h __B) {
  return __builtin_ia32_maxph128_mask(__A, __B, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_ph(__m256h __A, __m256h __B) {
  return __builtin_ia32_maxph256_mask(__A, __B, _mm256_setzero_ph(),
                                      (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_maxph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_maxph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_maxph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_maxph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_ph(__m128h __A, __m128h __B) {
  return __builtin_ia32_minph128_mask(__A, __B, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_ph(__m256h __A, __m256h __B) {
  return __builtin_ia32_minph256_mask(__A, __B, _mm256_setzero_ph(),
                                      (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_minph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_minph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_minph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_minph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_ph(__m128h __A) {
  return (__m128h)_mm_and_si128(_mm_set1_epi32(0x7FFF7FFF), (__m128i)__A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_ph(__m256h __A) {
  return (__m256h)_mm256_and_si256(_mm256_set1_epi32(0x7FFF7FFF), (__m256i)__A);
}
# 548 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_ph(__m128h __A) {
  return __builtin_ia32_sqrtph128_mask(__A, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sqrt_ph(__m256h __A) {
  return __builtin_ia32_sqrtph256_mask(__A, _mm256_setzero_ph(), (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_ph(__m128h __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_sqrtph128_mask(__C, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sqrt_ph(__m256h __A, __mmask16 __B, __m256h __C) {
  return __builtin_ia32_sqrtph256_mask(__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_ph(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_sqrtph128_mask(__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sqrt_ph(__mmask16 __A, __m256h __B) {
  return __builtin_ia32_sqrtph256_mask(__B, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_ph(__m128h __A) {
  return __builtin_ia32_rsqrtph128_mask(__A, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt_ph(__m256h __A) {
  return __builtin_ia32_rsqrtph256_mask(__A, _mm256_setzero_ph(),
                                        (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt_ph(__m128h __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_rsqrtph128_mask(__C, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rsqrt_ph(__m256h __A, __mmask16 __B, __m256h __C) {
  return __builtin_ia32_rsqrtph256_mask(__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt_ph(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_rsqrtph128_mask(__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rsqrt_ph(__mmask16 __A, __m256h __B) {
  return __builtin_ia32_rsqrtph256_mask(__B, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_ph(__m128h __A) {
  return __builtin_ia32_rcpph128_mask(__A, _mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp_ph(__m256h __A) {
  return __builtin_ia32_rcpph256_mask(__A, _mm256_setzero_ph(), (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp_ph(__m128h __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_rcpph128_mask(__C, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rcp_ph(__m256h __A, __mmask16 __B, __m256h __C) {
  return __builtin_ia32_rcpph256_mask(__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp_ph(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_rcpph128_mask(__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rcp_ph(__mmask16 __A, __m256h __B) {
  return __builtin_ia32_rcpph256_mask(__B, _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_ph(__m128h __A, __m128h __B) {
  return __builtin_ia32_scalefph128_mask(__A, __B, _mm_setzero_ph(),
                                         (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_scalef_ph(__m256h __A, __m256h __B) {
  return __builtin_ia32_scalefph256_mask(__A, __B, _mm256_setzero_ph(),
                                         (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_ph(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return __builtin_ia32_scalefph128_mask(__C, __D, __A, __B);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_scalef_ph(__m256h __A, __mmask16 __B, __m256h __C, __m256h __D) {
  return __builtin_ia32_scalefph256_mask(__C, __D, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_ph(__mmask8 __A, __m128h __B, __m128h __C) {
  return __builtin_ia32_scalefph128_mask(__B, __C, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_scalef_ph(__mmask16 __A, __m256h __B, __m256h __C) {
  return __builtin_ia32_scalefph256_mask(__B, __C, _mm256_setzero_ph(), __A);
}
# 945 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getexp_ph(__m256h __A) {
  return (__m256h)__builtin_ia32_getexpph256_mask(
      (__v16hf)__A, (__v16hf)_mm256_setzero_ph(), (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getexp_ph(__m256h __W, __mmask16 __U, __m256h __A) {
  return (__m256h)__builtin_ia32_getexpph256_mask((__v16hf)__A, (__v16hf)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getexp_ph(__mmask16 __U, __m256h __A) {
  return (__m256h)__builtin_ia32_getexpph256_mask(
      (__v16hf)__A, (__v16hf)_mm256_setzero_ph(), (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_ph(__m128h __A) {
  return (__m128h)__builtin_ia32_getexpph128_mask(
      (__v8hf)__A, (__v8hf)_mm_setzero_ph(), (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_ph(__m128h __W, __mmask8 __U, __m128h __A) {
  return (__m128h)__builtin_ia32_getexpph128_mask((__v8hf)__A, (__v8hf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_ph(__mmask8 __U, __m128h __A) {
  return (__m128h)__builtin_ia32_getexpph128_mask(
      (__v8hf)__A, (__v8hf)_mm_setzero_ph(), (__mmask8)__U);
}
# 1120 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epi32(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvtph2dq128_mask(
      __A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epi32(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvtph2dq128_mask(__C, (__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epi32(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvtph2dq128_mask(
      __B, (__v4si)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epi32(__m128h __A) {
  return (__m256i)__builtin_ia32_vcvtph2dq256_mask(
      __A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epi32(__m256i __A, __mmask8 __B, __m128h __C) {
  return (__m256i)__builtin_ia32_vcvtph2dq256_mask(__C, (__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epi32(__mmask8 __A, __m128h __B) {
  return (__m256i)__builtin_ia32_vcvtph2dq256_mask(
      __B, (__v8si)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epu32(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvtph2udq128_mask(
      __A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epu32(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvtph2udq128_mask(__C, (__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epu32(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvtph2udq128_mask(
      __B, (__v4si)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epu32(__m128h __A) {
  return (__m256i)__builtin_ia32_vcvtph2udq256_mask(
      __A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epu32(__m256i __A, __mmask8 __B, __m128h __C) {
  return (__m256i)__builtin_ia32_vcvtph2udq256_mask(__C, (__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epu32(__mmask8 __A, __m128h __B) {
  return (__m256i)__builtin_ia32_vcvtph2udq256_mask(
      __B, (__v8si)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epi32(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvttph2dq128_mask(
      __A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epi32(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvttph2dq128_mask(__C, (__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epi32(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvttph2dq128_mask(
      __B, (__v4si)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epi32(__m128h __A) {
  return (__m256i)__builtin_ia32_vcvttph2dq256_mask(
      __A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epi32(__m256i __A, __mmask8 __B, __m128h __C) {
  return (__m256i)__builtin_ia32_vcvttph2dq256_mask(__C, (__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epi32(__mmask8 __A, __m128h __B) {
  return (__m256i)__builtin_ia32_vcvttph2dq256_mask(
      __B, (__v8si)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epu32(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvttph2udq128_mask(
      __A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epu32(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvttph2udq128_mask(__C, (__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epu32(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvttph2udq128_mask(
      __B, (__v4si)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epu32(__m128h __A) {
  return (__m256i)__builtin_ia32_vcvttph2udq256_mask(
      __A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epu32(__m256i __A, __mmask8 __B, __m128h __C) {
  return (__m256i)__builtin_ia32_vcvttph2udq256_mask(__C, (__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epu32(__mmask8 __A, __m128h __B) {
  return (__m256i)__builtin_ia32_vcvttph2udq256_mask(
      __B, (__v8si)_mm256_setzero_si256(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_ph(__m128i __A) {
  return __builtin_ia32_vcvtdq2ph128_mask((__v4si)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtdq2ph128_mask((__v4si)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtdq2ph128_mask((__v4si)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_ph(__m256i __A) {
  return __builtin_ia32_vcvtdq2ph256_mask((__v8si)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_ph(__m128h __A, __mmask8 __B, __m256i __C) {
  return __builtin_ia32_vcvtdq2ph256_mask((__v8si)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_ph(__mmask8 __A, __m256i __B) {
  return __builtin_ia32_vcvtdq2ph256_mask((__v8si)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_ph(__m128i __A) {
  return __builtin_ia32_vcvtudq2ph128_mask((__v4si)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtudq2ph128_mask((__v4si)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtudq2ph128_mask((__v4si)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_ph(__m256i __A) {
  return __builtin_ia32_vcvtudq2ph256_mask((__v8si)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_ph(__m128h __A, __mmask8 __B, __m256i __C) {
  return __builtin_ia32_vcvtudq2ph256_mask((__v8si)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_ph(__mmask8 __A, __m256i __B) {
  return __builtin_ia32_vcvtudq2ph256_mask((__v8si)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epi64(__m128h __A) {
  return __builtin_ia32_vcvtph2qq128_mask(__A, _mm_setzero_si128(),
                                          (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epi64(__m128i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2qq128_mask(__C, __A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2qq128_mask(__B, _mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epi64(__m128h __A) {
  return __builtin_ia32_vcvtph2qq256_mask(__A, _mm256_setzero_si256(),
                                          (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epi64(__m256i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2qq256_mask(__C, __A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2qq256_mask(__B, _mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epu64(__m128h __A) {
  return __builtin_ia32_vcvtph2uqq128_mask(__A, _mm_setzero_si128(),
                                           (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epu64(__m128i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2uqq128_mask(__C, __A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2uqq128_mask(__B, _mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epu64(__m128h __A) {
  return __builtin_ia32_vcvtph2uqq256_mask(__A, _mm256_setzero_si256(),
                                           (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epu64(__m256i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2uqq256_mask(__C, __A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2uqq256_mask(__B, _mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epi64(__m128h __A) {
  return __builtin_ia32_vcvttph2qq128_mask(__A, _mm_setzero_si128(),
                                           (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epi64(__m128i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2qq128_mask(__C, __A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2qq128_mask(__B, _mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epi64(__m128h __A) {
  return __builtin_ia32_vcvttph2qq256_mask(__A, _mm256_setzero_si256(),
                                           (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epi64(__m256i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2qq256_mask(__C, __A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epi64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2qq256_mask(__B, _mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epu64(__m128h __A) {
  return __builtin_ia32_vcvttph2uqq128_mask(__A, _mm_setzero_si128(),
                                            (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epu64(__m128i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2uqq128_mask(__C, __A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2uqq128_mask(__B, _mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epu64(__m128h __A) {
  return __builtin_ia32_vcvttph2uqq256_mask(__A, _mm256_setzero_si256(),
                                            (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epu64(__m256i __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvttph2uqq256_mask(__C, __A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epu64(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvttph2uqq256_mask(__B, _mm256_setzero_si256(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_ph(__m128i __A) {
  return __builtin_ia32_vcvtqq2ph128_mask((__v2di)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtqq2ph128_mask((__v2di)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtqq2ph128_mask((__v2di)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_ph(__m256i __A) {
  return __builtin_ia32_vcvtqq2ph256_mask((__v4di)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_ph(__m128h __A, __mmask8 __B, __m256i __C) {
  return __builtin_ia32_vcvtqq2ph256_mask((__v4di)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_ph(__mmask8 __A, __m256i __B) {
  return __builtin_ia32_vcvtqq2ph256_mask((__v4di)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu64_ph(__m128i __A) {
  return __builtin_ia32_vcvtuqq2ph128_mask((__v2di)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu64_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtuqq2ph128_mask((__v2di)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu64_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtuqq2ph128_mask((__v2di)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu64_ph(__m256i __A) {
  return __builtin_ia32_vcvtuqq2ph256_mask((__v4di)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu64_ph(__m128h __A, __mmask8 __B, __m256i __C) {
  return __builtin_ia32_vcvtuqq2ph256_mask((__v4di)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu64_ph(__mmask8 __A, __m256i __B) {
  return __builtin_ia32_vcvtuqq2ph256_mask((__v4di)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epi16(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvtph2w128_mask(
      __A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epi16(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvtph2w128_mask(__C, (__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epi16(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvtph2w128_mask(
      __B, (__v8hi)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epi16(__m256h __A) {
  return (__m256i)__builtin_ia32_vcvtph2w256_mask(
      __A, (__v16hi)_mm256_setzero_si256(), (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epi16(__m256i __A, __mmask16 __B, __m256h __C) {
  return (__m256i)__builtin_ia32_vcvtph2w256_mask(__C, (__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epi16(__mmask16 __A, __m256h __B) {
  return (__m256i)__builtin_ia32_vcvtph2w256_mask(
      __B, (__v16hi)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_epu16(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvtph2uw128_mask(
      __A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_epu16(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvtph2uw128_mask(__C, (__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_epu16(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvtph2uw128_mask(
      __B, (__v8hi)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_epu16(__m256h __A) {
  return (__m256i)__builtin_ia32_vcvtph2uw256_mask(
      __A, (__v16hi)_mm256_setzero_si256(), (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_epu16(__m256i __A, __mmask16 __B, __m256h __C) {
  return (__m256i)__builtin_ia32_vcvtph2uw256_mask(__C, (__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_epu16(__mmask16 __A, __m256h __B) {
  return (__m256i)__builtin_ia32_vcvtph2uw256_mask(
      __B, (__v16hi)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epi16(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvttph2w128_mask(
      __A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epi16(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvttph2w128_mask(__C, (__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epi16(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvttph2w128_mask(
      __B, (__v8hi)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epi16(__m256h __A) {
  return (__m256i)__builtin_ia32_vcvttph2w256_mask(
      __A, (__v16hi)_mm256_setzero_si256(), (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epi16(__m256i __A, __mmask16 __B, __m256h __C) {
  return (__m256i)__builtin_ia32_vcvttph2w256_mask(__C, (__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epi16(__mmask16 __A, __m256h __B) {
  return (__m256i)__builtin_ia32_vcvttph2w256_mask(
      __B, (__v16hi)_mm256_setzero_si256(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttph_epu16(__m128h __A) {
  return (__m128i)__builtin_ia32_vcvttph2uw128_mask(
      __A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttph_epu16(__m128i __A, __mmask8 __B, __m128h __C) {
  return (__m128i)__builtin_ia32_vcvttph2uw128_mask(__C, (__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttph_epu16(__mmask8 __A, __m128h __B) {
  return (__m128i)__builtin_ia32_vcvttph2uw128_mask(
      __B, (__v8hi)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttph_epu16(__m256h __A) {
  return (__m256i)__builtin_ia32_vcvttph2uw256_mask(
      __A, (__v16hi)_mm256_setzero_si256(), (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttph_epu16(__m256i __A, __mmask16 __B, __m256h __C) {
  return (__m256i)__builtin_ia32_vcvttph2uw256_mask(__C, (__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttph_epu16(__mmask16 __A, __m256h __B) {
  return (__m256i)__builtin_ia32_vcvttph2uw256_mask(
      __B, (__v16hi)_mm256_setzero_si256(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_ph(__m128i __A) {
  return __builtin_ia32_vcvtw2ph128_mask((__v8hi)__A, _mm_setzero_ph(),
                                         (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtw2ph128_mask((__v8hi)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtw2ph128_mask((__v8hi)__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_ph(__m256i __A) {
  return __builtin_ia32_vcvtw2ph256_mask((__v16hi)__A, _mm256_setzero_ph(),
                                         (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_ph(__m256h __A, __mmask16 __B, __m256i __C) {
  return __builtin_ia32_vcvtw2ph256_mask((__v16hi)__C, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_ph(__mmask16 __A, __m256i __B) {
  return __builtin_ia32_vcvtw2ph256_mask((__v16hi)__B, _mm256_setzero_ph(),
                                         __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu16_ph(__m128i __A) {
  return __builtin_ia32_vcvtuw2ph128_mask((__v8hi)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu16_ph(__m128h __A, __mmask8 __B, __m128i __C) {
  return __builtin_ia32_vcvtuw2ph128_mask((__v8hi)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu16_ph(__mmask8 __A, __m128i __B) {
  return __builtin_ia32_vcvtuw2ph128_mask((__v8hi)__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu16_ph(__m256i __A) {
  return __builtin_ia32_vcvtuw2ph256_mask((__v16hi)__A, _mm256_setzero_ph(),
                                          (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu16_ph(__m256h __A, __mmask16 __B, __m256i __C) {
  return __builtin_ia32_vcvtuw2ph256_mask((__v16hi)__C, __A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu16_ph(__mmask16 __A, __m256i __B) {
  return __builtin_ia32_vcvtuw2ph256_mask((__v16hi)__B, _mm256_setzero_ph(),
                                          __A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_pd(__m128h __A) {
  return __builtin_ia32_vcvtph2pd128_mask(__A, _mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_pd(__m128d __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2pd128_mask(__C, __A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_pd(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2pd128_mask(__B, _mm_setzero_pd(), __A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_pd(__m128h __A) {
  return __builtin_ia32_vcvtph2pd256_mask(__A, _mm256_setzero_pd(),
                                          (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_pd(__m256d __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2pd256_mask(__C, __A, __B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_pd(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2pd256_mask(__B, _mm256_setzero_pd(), __A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtxph_ps(__m128h __A) {
  return __builtin_ia32_vcvtph2psx128_mask(__A, _mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtxph_ps(__m128 __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2psx128_mask(__C, __A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtxph_ps(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2psx128_mask(__B, _mm_setzero_ps(), __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtxph_ps(__m128h __A) {
  return __builtin_ia32_vcvtph2psx256_mask(__A, _mm256_setzero_ps(),
                                           (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtxph_ps(__m256 __A, __mmask8 __B, __m128h __C) {
  return __builtin_ia32_vcvtph2psx256_mask(__C, __A, __B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtxph_ps(__mmask8 __A, __m128h __B) {
  return __builtin_ia32_vcvtph2psx256_mask(__B, _mm256_setzero_ps(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtxps_ph(__m128 __A) {
  return __builtin_ia32_vcvtps2phx128_mask((__v4sf)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtxps_ph(__m128h __A, __mmask8 __B, __m128 __C) {
  return __builtin_ia32_vcvtps2phx128_mask((__v4sf)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtxps_ph(__mmask8 __A, __m128 __B) {
  return __builtin_ia32_vcvtps2phx128_mask((__v4sf)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtxps_ph(__m256 __A) {
  return __builtin_ia32_vcvtps2phx256_mask((__v8sf)__A, _mm_setzero_ph(),
                                           (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtxps_ph(__m128h __A, __mmask8 __B, __m256 __C) {
  return __builtin_ia32_vcvtps2phx256_mask((__v8sf)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtxps_ph(__mmask8 __A, __m256 __B) {
  return __builtin_ia32_vcvtps2phx256_mask((__v8sf)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_ph(__m128d __A) {
  return __builtin_ia32_vcvtpd2ph128_mask((__v2df)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_ph(__m128h __A, __mmask8 __B, __m128d __C) {
  return __builtin_ia32_vcvtpd2ph128_mask((__v2df)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_ph(__mmask8 __A, __m128d __B) {
  return __builtin_ia32_vcvtpd2ph128_mask((__v2df)__B, _mm_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_ph(__m256d __A) {
  return __builtin_ia32_vcvtpd2ph256_mask((__v4df)__A, _mm_setzero_ph(),
                                          (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_ph(__m128h __A, __mmask8 __B, __m256d __C) {
  return __builtin_ia32_vcvtpd2ph256_mask((__v4df)__C, __A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_ph(__mmask8 __A, __m256d __B) {
  return __builtin_ia32_vcvtpd2ph256_mask((__v4df)__B, _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmaddsub_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddsubph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmaddsub_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddsubph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmaddsub_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfmaddsubph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmaddsub_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddsubph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmaddsub_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddsubph128_mask((__v8hf)__A, (__v8hf)__B,
                                                     (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmaddsub_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddsubph128_mask(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmaddsub_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmaddsubph128_mask3(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmaddsub_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddsubph128_maskz(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsubadd_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubaddph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmsubadd_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubaddph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmsubadd_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfmsubaddph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmsubadd_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubaddph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsubadd_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubaddph128_mask((__v8hf)__A, (__v8hf)__B,
                                                     (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsubadd_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubaddph128_mask(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsubadd_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmsubaddph128_mask3(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsubadd_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubaddph128_maskz(
      (__v8hf)__A, (__v8hf)__B, (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddph256_mask((__v16hf)__A, (__v16hf)__B,
                                                  (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddph256_mask((__v16hf)__A, (__v16hf)__B,
                                                  (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmadd_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfmaddph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmadd_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddph128_mask((__v8hf)__A, (__v8hf)__B,
                                                  (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddph128_mask((__v8hf)__A, (__v8hf)__B,
                                                  (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmaddph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddph128_maskz((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmadd_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmaddph256_mask((__v16hf)__A, (__v16hf)__B,
                                                   (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fnmadd_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmaddph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmadd_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfnmaddph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmadd_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmaddph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmaddph128_mask((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmaddph128_mask((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfnmaddph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                    (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmaddph128_maskz((__v8hf)__A, (__v8hf)__B,
                                                    (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsub_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubph256_mask((__v16hf)__A, (__v16hf)__B,
                                                  (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsub_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubph256_mask((__v16hf)__A, (__v16hf)__B,
                                                  (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmsub_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfmsubph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmsub_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmsubph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubph128_mask((__v8hf)__A, (__v8hf)__B,
                                                  (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubph128_mask((__v8hf)__A, (__v8hf)__B,
                                                  (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfmsubph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmsubph128_maskz((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmsub_ph(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmsubph256_mask((__v16hf)__A, (__v16hf)__B,
                                                   (__v16hf)__C, (__mmask16)-1);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fnmsub_ph(__m256h __A, __mmask16 __U, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmsubph256_mask(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmsub_ph(__m256h __A, __m256h __B, __m256h __C, __mmask16 __U) {
  return (__m256h)__builtin_ia32_vfnmsubph256_mask3(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmsub_ph(__mmask16 __U, __m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfnmsubph256_maskz(
      (__v16hf)__A, (__v16hf)__B, (__v16hf)__C, (__mmask16)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_ph(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmsubph128_mask((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_ph(__m128h __A, __mmask8 __U, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmsubph128_mask((__v8hf)__A, (__v8hf)__B,
                                                   (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_ph(__m128h __A, __m128h __B, __m128h __C, __mmask8 __U) {
  return (__m128h)__builtin_ia32_vfnmsubph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                    (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_ph(__mmask8 __U, __m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfnmsubph128_maskz((__v8hf)__A, (__v8hf)__B,
                                                    (__v8hf)__C, (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_pch(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmaddcph128((__v8hf)__A, (__v8hf)__B,
                                              (__v8hf)__C);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_pch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmaddcph128_mask((__v8hf)__A, (__v8hf)__C,
                                                   (__v8hf)__D, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_pch(__m128h __A, __m128h __B, __m128h __C, __mmask8 __D) {
  return (__m128h)__builtin_ia32_vfmaddcph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                    (__v8hf)__C, __D);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_pch(__mmask8 __A, __m128h __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmaddcph128_maskz((__v8hf)__B, (__v8hf)__C,
                                                    (__v8hf)__D, __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_pch(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmaddcph256((__v16hf)__A, (__v16hf)__B,
                                              (__v16hf)__C);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_pch(__m256h __A, __mmask8 __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfmaddcph256_mask((__v16hf)__A, (__v16hf)__C,
                                                   (__v16hf)__D, __B);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmadd_pch(__m256h __A, __m256h __B, __m256h __C, __mmask8 __D) {
  return (__m256h)__builtin_ia32_vfmaddcph256_mask3((__v16hf)__A, (__v16hf)__B,
                                                    (__v16hf)__C, __D);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmadd_pch(__mmask8 __A, __m256h __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfmaddcph256_maskz((__v16hf)__B, (__v16hf)__C,
                                                    (__v16hf)__D, __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fcmadd_pch(__m128h __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfcmaddcph128((__v8hf)__A, (__v8hf)__B,
                                               (__v8hf)__C);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fcmadd_pch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmaddcph128_mask((__v8hf)__A, (__v8hf)__C,
                                                    (__v8hf)__D, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fcmadd_pch(__m128h __A, __m128h __B, __m128h __C, __mmask8 __D) {
  return (__m128h)__builtin_ia32_vfcmaddcph128_mask3((__v8hf)__A, (__v8hf)__B,
                                                     (__v8hf)__C, __D);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fcmadd_pch(__mmask8 __A, __m128h __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmaddcph128_maskz((__v8hf)__B, (__v8hf)__C,
                                                     (__v8hf)__D, __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fcmadd_pch(__m256h __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfcmaddcph256((__v16hf)__A, (__v16hf)__B,
                                               (__v16hf)__C);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fcmadd_pch(__m256h __A, __mmask8 __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfcmaddcph256_mask((__v16hf)__A, (__v16hf)__C,
                                                    (__v16hf)__D, __B);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fcmadd_pch(__m256h __A, __m256h __B, __m256h __C, __mmask8 __D) {
  return (__m256h)__builtin_ia32_vfcmaddcph256_mask3((__v16hf)__A, (__v16hf)__B,
                                                     (__v16hf)__C, __D);
}

extern __inline __m256h __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fcmadd_pch(__mmask8 __A, __m256h __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfcmaddcph256_maskz((__v16hf)__B, (__v16hf)__C,
                                                     (__v16hf)__D, __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmul_pch(__m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfmulcph128((__v8hf)__A, (__v8hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmul_pch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfmulcph128_mask((__v8hf)__C, (__v8hf)__D,
                                                  (__v8hf)__A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmul_pch(__mmask8 __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfmulcph128_mask((__v8hf)__B, (__v8hf)__C,
                                                  _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmul_pch(__m256h __A, __m256h __B) {
  return (__m256h)__builtin_ia32_vfmulcph256((__v16hf)__A, (__v16hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmul_pch(__m256h __A, __mmask8 __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfmulcph256_mask((__v16hf)__C, (__v16hf)__D,
                                                  (__v16hf)__A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmul_pch(__mmask8 __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfmulcph256_mask((__v16hf)__B, (__v16hf)__C,
                                                  _mm256_setzero_ph(), __A);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fcmul_pch(__m128h __A, __m128h __B) {
  return (__m128h)__builtin_ia32_vfcmulcph128((__v8hf)__A, (__v8hf)__B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fcmul_pch(__m128h __A, __mmask8 __B, __m128h __C, __m128h __D) {
  return (__m128h)__builtin_ia32_vfcmulcph128_mask((__v8hf)__C, (__v8hf)__D,
                                                   (__v8hf)__A, __B);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fcmul_pch(__mmask8 __A, __m128h __B, __m128h __C) {
  return (__m128h)__builtin_ia32_vfcmulcph128_mask((__v8hf)__B, (__v8hf)__C,
                                                   _mm_setzero_ph(), __A);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fcmul_pch(__m256h __A, __m256h __B) {
  return (__m256h)__builtin_ia32_vfcmulcph256((__v16hf)__A, (__v16hf)__B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fcmul_pch(__m256h __A, __mmask8 __B, __m256h __C, __m256h __D) {
  return (__m256h)__builtin_ia32_vfcmulcph256_mask((__v16hf)__C, (__v16hf)__D,
                                                   (__v16hf)__A, __B);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fcmul_pch(__mmask8 __A, __m256h __B, __m256h __C) {
  return (__m256h)__builtin_ia32_vfcmulcph256_mask((__v16hf)__B, (__v16hf)__C,
                                                   _mm256_setzero_ph(), __A);
}
# 3159 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_add_ph(__m256h __A) {
  __m128h __T1 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(0)));
  __m128h __T2 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(1)));
  __m128h __T3 = (__T1 + __T2);
  __m128h __T4 =
      (__m128h)__builtin_shuffle(__T3, (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T5 = (__T3) + (__T4);
  __m128h __T6 =
      (__m128h)__builtin_shuffle(__T5, (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T7 = __T5 + __T6;
  return __T7[0] + __T7[1];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_mul_ph(__m256h __A) {
  __m128h __T1 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(0)));
  __m128h __T2 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(1)));
  __m128h __T3 = (__T1 * __T2);
  __m128h __T4 =
      (__m128h)__builtin_shuffle(__T3, (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T5 = (__T3) * (__T4);
  __m128h __T6 =
      (__m128h)__builtin_shuffle(__T5, (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T7 = __T5 * __T6;
  return __T7[0] * __T7[1];
}
# 3187 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_min_ph(__m256h __A) {
  __m128h __T1 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(0)));
  __m128h __T2 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(1)));
  __m128h __T3 = _mm_min_ph(__T1, __T2);
  __m128h __T4 =
      (__m128h)__builtin_shuffle(__T3, (__v8hi){2, 3, 0, 1, 6, 7, 4, 5});
  __m128h __T5 = _mm_min_ph(__T3, __T4);
  __m128h __T6 = (__m128h)__builtin_shuffle(__T5, (__v8hi){4, 5});
  __m128h __T7 = _mm_min_ph(__T5, __T6);
  __m128h __T8 = (__m128h)__builtin_shuffle(__T7, (__v8hi){1, 0});
  __m128h __T9 = _mm_min_ph(__T7, __T8);
  return __T9[0];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_max_ph(__m256h __A) {
  __m128h __T1 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(0)));
  __m128h __T2 = (__m128h)((__m128d)__builtin_ia32_vextractf128_pd256(
      (__v4df)(__m256d)((__m256d)__A), (int)(1)));
  __m128h __T3 = _mm_max_ph(__T1, __T2);
  __m128h __T4 =
      (__m128h)__builtin_shuffle(__T3, (__v8hi){2, 3, 0, 1, 6, 7, 4, 5});
  __m128h __T5 = _mm_max_ph(__T3, __T4);
  __m128h __T6 = (__m128h)__builtin_shuffle(__T5, (__v8hi){4, 5});
  __m128h __T7 = _mm_max_ph(__T5, __T6);
  __m128h __T8 = (__m128h)__builtin_shuffle(__T7, (__v8hi){1, 0});
  __m128h __T9 = _mm_max_ph(__T7, __T8);
  return __T9[0];
}
# 3210 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_add_ph(__m128h __A) {
  __m128h __T1 =
      (__m128h)__builtin_shuffle(__A, (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T2 = (__A) + (__T1);
  __m128h __T3 =
      (__m128h)__builtin_shuffle(__T2, (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T4 = __T2 + __T3;
  return __T4[0] + __T4[1];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_mul_ph(__m128h __A) {
  __m128h __T1 =
      (__m128h)__builtin_shuffle(__A, (__v8hi){4, 5, 6, 7, 0, 1, 2, 3});
  __m128h __T2 = (__A) * (__T1);
  __m128h __T3 =
      (__m128h)__builtin_shuffle(__T2, (__v8hi){2, 3, 0, 1, 4, 5, 6, 7});
  __m128h __T4 = __T2 * __T3;
  return __T4[0] * __T4[1];
}
# 3235 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_min_ph(__m128h __A) {
  __m128h __T1 =
      (__m128h)__builtin_shuffle(__A, (__v8hi){2, 3, 0, 1, 6, 7, 4, 5});
  __m128h __T2 = _mm_min_ph(__A, __T1);
  __m128h __T3 = (__m128h)__builtin_shuffle(__T2, (__v8hi){4, 5});
  __m128h __T4 = _mm_min_ph(__T2, __T3);
  __m128h __T5 = (__m128h)__builtin_shuffle(__T4, (__v8hi){1, 0});
  __m128h __T6 = _mm_min_ph(__T4, __T5);
  return __T6[0];
}

extern __inline _Float16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_max_ph(__m128h __A) {
  __m128h __T1 =
      (__m128h)__builtin_shuffle(__A, (__v8hi){2, 3, 0, 1, 6, 7, 4, 5});
  __m128h __T2 = _mm_max_ph(__A, __T1);
  __m128h __T3 = (__m128h)__builtin_shuffle(__T2, (__v8hi){4, 5});
  __m128h __T4 = _mm_max_ph(__T2, __T3);
  __m128h __T5 = (__m128h)__builtin_shuffle(__T4, (__v8hi){1, 0});
  __m128h __T6 = _mm_max_ph(__T4, __T5);
  return __T6[0];
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_ph(__mmask16 __U, __m256h __A, __m256h __W) {
  return (__m256h)__builtin_ia32_movdquhi256_mask((__v16hi)__W, (__v16hi)__A,
                                                  (__mmask16)__U);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_ph(__m256h __A, __m256i __I, __m256h __B) {
  return (__m256h)__builtin_ia32_vpermi2varhi256_mask(
      (__v16hi)__A, (__v16hi)__I, (__v16hi)__B, (__mmask16)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_ph(__m256i __A, __m256h __B) {
  return (__m256h)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)(_mm256_setzero_ph()),
      (__mmask16)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_ph(__mmask8 __U, __m128h __A, __m128h __W) {
  return (__m128h)__builtin_ia32_movdquhi128_mask((__v8hi)__W, (__v8hi)__A,
                                                  (__mmask8)__U);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_ph(__m128h __A, __m128i __I, __m128h __B) {
  return (__m128h)__builtin_ia32_vpermi2varhi128_mask(
      (__v8hi)__A, (__v8hi)__I, (__v8hi)__B, (__mmask8)-1);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutexvar_ph(__m128i __A, __m128h __B) {
  return (__m128h)__builtin_ia32_permvarhi128_mask(
      (__v8hi)__B, (__v8hi)__A, (__v8hi)(_mm_setzero_ph()), (__mmask8)-1);
}

extern __inline __m256h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_pch(_Float16 _Complex __A) {
  union {
    _Float16 _Complex __a;
    float __b;
  } __u = {.__a = __A};

  return (__m256h)_mm256_set1_ps(__u.__b);
}

extern __inline __m128h
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pch(_Float16 _Complex __A) {
  union {
    _Float16 _Complex __a;
    float __b;
  } __u = {.__a = __A};

  return (__m128h)_mm_set1_ps(__u.__b);
}
# 3359 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512fp16vlintrin.h" 3 4
#pragma GCC pop_options
# 105 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/shaintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/shaintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("sha")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1msg1_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1msg1((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1msg2_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1msg2((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1nexte_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1nexte((__v4si)__A, (__v4si)__B);
}
# 71 "/usr/lib/gcc/x86_64-linux-gnu/13/include/shaintrin.h" 3 4
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256msg1_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha256msg1((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256msg2_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha256msg2((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256rnds2_epu32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_sha256rnds2((__v4si)__A, (__v4si)__B,
                                             (__v4si)__C);
}

#pragma GCC pop_options
# 108 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/fmaintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/fmaintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("fma")

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B,
                                          (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B,
                                             (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B,
                                            (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B,
                                          (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B,
                                             (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B,
                                            (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubsd3((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubss3((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddsd3((__v2df)__A, (__v2df)__B,
                                            (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddss3((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubsd3((__v2df)__A, (__v2df)__B,
                                            (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubss3((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B,
                                             (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B,
                                                (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B,
                                               (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B,
                                             -(__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B,
                                                -(__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B,
                                            -(__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B,
                                               -(__v8sf)__C);
}

#pragma GCC pop_options
# 110 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/f16cintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/f16cintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("f16c")

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtsh_ss(unsigned short __S) {
  __v8hi __H = __extension__(__v8hi){(short)__S, 0, 0, 0, 0, 0, 0, 0};
  __v4sf __A = __builtin_ia32_vcvtph2ps(__H);
  return __builtin_ia32_vec_ext_v4sf(__A, 0);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_ps(__m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps((__v8hi)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_ps(__m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256((__v8hi)__A);
}
# 95 "/usr/lib/gcc/x86_64-linux-gnu/13/include/f16cintrin.h" 3 4
#pragma GCC pop_options
# 112 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/rtmintrin.h" 1 3 4
# 114 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("gfni,sse2")

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_gf2p8mul_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi((__v16qi)__A, (__v16qi)__B);
}
# 73 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("gfni,avx")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_gf2p8mul_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi((__v32qi)__A, (__v32qi)__B);
}
# 119 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("gfni,avx512vl")

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_gf2p8mul_epi8(__m128i __A, __mmask16 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi_mask(
      (__v16qi)__C, (__v16qi)__D, (__v16qi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_gf2p8mul_epi8(__mmask16 __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi_mask(
      (__v16qi)__B, (__v16qi)__C, (__v16qi)_mm_setzero_si128(), __A);
}
# 207 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("gfni,avx512vl,avx512bw")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_gf2p8mul_epi8(__m256i __A, __mmask32 __B, __m256i __C,
                              __m256i __D) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi_mask(
      (__v32qi)__C, (__v32qi)__D, (__v32qi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_gf2p8mul_epi8(__mmask32 __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi_mask(
      (__v32qi)__B, (__v32qi)__C, (__v32qi)_mm256_setzero_si256(), __A);
}
# 297 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("gfni,avx512f,avx512bw")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_gf2p8mul_epi8(__m512i __A, __mmask64 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi_mask(
      (__v64qi)__C, (__v64qi)__D, (__v64qi)__A, __B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_gf2p8mul_epi8(__mmask64 __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi_mask(
      (__v64qi)__B, (__v64qi)__C, (__v64qi)_mm512_setzero_si512(), __A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_gf2p8mul_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi((__v64qi)__A, (__v64qi)__B);
}
# 411 "/usr/lib/gcc/x86_64-linux-gnu/13/include/gfniintrin.h" 3 4
#pragma GCC pop_options
# 116 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vaesintrin.h" 1 3 4
# 28 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vaesintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("vaes,avx")

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesdec_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesdec_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesdeclast_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesdeclast_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesenc_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesenc_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesenclast_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesenclast_v32qi((__v32qi)__A, (__v32qi)__B);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("vaes,avx512f")

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesdec_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesdec_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesdeclast_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesdeclast_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesenc_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesenc_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesenclast_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesenclast_v64qi((__v64qi)__A, (__v64qi)__B);
}

#pragma GCC pop_options
# 118 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vpclmulqdqintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vpclmulqdqintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("vpclmulqdq,avx512f")
# 53 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vpclmulqdqintrin.h" 3 4
#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("vpclmulqdq,avx")
# 78 "/usr/lib/gcc/x86_64-linux-gnu/13/include/vpclmulqdqintrin.h" 3 4
#pragma GCC pop_options
# 120 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bf16vlintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bf16vlintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512bf16,avx512vl")

typedef __bf16 __v16bf __attribute__((__vector_size__(32)));
typedef __bf16 __v8bf __attribute__((__vector_size__(16)));

typedef __bf16 __m256bh __attribute__((__vector_size__(32), __may_alias__));
typedef __bf16 __m128bh __attribute__((__vector_size__(16), __may_alias__));

typedef __bf16 __bfloat16;
# 55 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bf16vlintrin.h" 3 4
extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtne2ps_pbh(__m256 __A, __m256 __B) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf(__A, __B);
}

extern __inline __m256bh __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm256_mask_cvtne2ps_pbh(__m256bh __A, __mmask16 __B, __m256 __C, __m256 __D) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf_mask(__C, __D, __A, __B);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtne2ps_pbh(__mmask16 __A, __m256 __B, __m256 __C) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16bf_maskz(__B, __C, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtne2ps_pbh(__m128 __A, __m128 __B) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf(__A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtne2ps_pbh(__m128bh __A, __mmask8 __B, __m128 __C, __m128 __D) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf_mask(__C, __D, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtne2ps_pbh(__mmask8 __A, __m128 __B, __m128 __C) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8bf_maskz(__B, __C, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtneps_pbh(__m128bh __A, __mmask8 __B, __m256 __C) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_mask(__C, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtneps_pbh(__mmask8 __A, __m256 __B) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_maskz(__B, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtneps_pbh(__m128bh __A, __mmask8 __B, __m128 __C) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_mask(__C, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtneps_pbh(__mmask8 __A, __m128 __B) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_maskz(__B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbf16_ps(__m256 __A, __m256bh __B, __m256bh __C) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf(__A, __B, __C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_dpbf16_ps(__m256 __A, __mmask8 __B, __m256bh __C, __m256bh __D) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf_mask(__A, __C, __D, __B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_maskz_dpbf16_ps(__mmask8 __A, __m256 __B, __m256bh __C, __m256bh __D) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf_maskz(__B, __C, __D, __A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbf16_ps(__m128 __A, __m128bh __B, __m128bh __C) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf(__A, __B, __C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpbf16_ps(__m128 __A, __mmask8 __B, __m128bh __C, __m128bh __D) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf_mask(__A, __C, __D, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_dpbf16_ps(__mmask8 __A, __m128 __B, __m128bh __C, __m128bh __D) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf_maskz(__B, __C, __D, __A);
}

extern __inline __bf16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtness_sbh(float __A) {
  __v4sf __V = {__A, 0, 0, 0};
  __v8bf __R = __builtin_ia32_cvtneps2bf16_v4sf_mask(
      (__v4sf)__V, (__v8bf)_mm_undefined_si128(), (__mmask8)-1);
  return __R[0];
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpbh_ps(__m128bh __A) {
  return (__m128)_mm_castsi128_ps(
      (__m128i)_mm_slli_epi32((__m128i)_mm_cvtepi16_epi32((__m128i)__A), 16));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpbh_ps(__m128bh __A) {
  return (__m256)_mm256_castsi256_ps((__m256i)_mm256_slli_epi32(
      (__m256i)_mm256_cvtepi16_epi32((__m128i)__A), 16));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpbh_ps(__mmask8 __U, __m128bh __A) {
  return (__m128)_mm_castsi128_ps((__m128i)_mm_slli_epi32(
      (__m128i)_mm_maskz_cvtepi16_epi32((__mmask8)__U, (__m128i)__A), 16));
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpbh_ps(__mmask8 __U, __m128bh __A) {
  return (__m256)_mm256_castsi256_ps((__m256i)_mm256_slli_epi32(
      (__m256i)_mm256_maskz_cvtepi16_epi32((__mmask8)__U, (__m128i)__A), 16));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpbh_ps(__m128 __S, __mmask8 __U, __m128bh __A) {
  return (__m128)_mm_castsi128_ps((
      __m128i)((__m128i)__builtin_ia32_pslldi128_mask(
      (__v4si)(__m128i)((__m128i)_mm_cvtepi16_epi32((__m128i)__A)), (int)(16),
      (__v4si)(__m128i)((__m128i)__S), (__mmask8)((__mmask8)__U)))

  );
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpbh_ps(__m256 __S, __mmask8 __U, __m128bh __A) {
  return (__m256)_mm256_castsi256_ps((
      __m256i)((__m256i)__builtin_ia32_pslldi256_mask(
      (__v8si)(__m256i)((__m256i)_mm256_cvtepi16_epi32((__m128i)__A)),
      (int)(16), (__v8si)(__m256i)((__m256i)__S), (__mmask8)((__mmask8)__U)))

  );
}

#pragma GCC pop_options
# 123 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bf16intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avx512bf16intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avx512bf16")

typedef __bf16 __v32bf __attribute__((__vector_size__(64)));

typedef __bf16 __m512bh __attribute__((__vector_size__(64), __may_alias__));

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsbh_ss(__bf16 __A) {
  return __builtin_ia32_cvtbf2sf(__A);
}

extern __inline __m512bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtne2ps_pbh(__m512 __A, __m512 __B) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf(__A, __B);
}

extern __inline __m512bh __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm512_mask_cvtne2ps_pbh(__m512bh __A, __mmask32 __B, __m512 __C, __m512 __D) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf_mask(__C, __D, __A, __B);
}

extern __inline __m512bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtne2ps_pbh(__mmask32 __A, __m512 __B, __m512 __C) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32bf_maskz(__B, __C, __A);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtneps_pbh(__m512 __A) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf(__A);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtneps_pbh(__m256bh __A, __mmask16 __B, __m512 __C) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_mask(__C, __A, __B);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtneps_pbh(__mmask16 __A, __m512 __B) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_maskz(__B, __A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbf16_ps(__m512 __A, __m512bh __B, __m512bh __C) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf(__A, __B, __C);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_dpbf16_ps(__m512 __A, __mmask16 __B, __m512bh __C, __m512bh __D) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf_mask(__A, __C, __D, __B);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_dpbf16_ps(__mmask16 __A, __m512 __B, __m512bh __C, __m512bh __D) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf_maskz(__B, __C, __D, __A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpbh_ps(__m256bh __A) {
  return (__m512)_mm512_castsi512_ps((
      __m512i)((__m512i)__builtin_ia32_pslldi512_mask(
      (__v16si)(__m512i)((__m512i)_mm512_cvtepi16_epi32((__m256i)__A)),
      (int)(16), (__v16si)(__m512i)_mm512_undefined_epi32(), (__mmask16)-1)));
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpbh_ps(__mmask16 __U, __m256bh __A) {
  return (__m512)_mm512_castsi512_ps(
      (__m512i)((__m512i)__builtin_ia32_pslldi512_mask(
          (__v16si)(__m512i)((__m512i)_mm512_maskz_cvtepi16_epi32(
              (__mmask16)__U, (__m256i)__A)),
          (int)(16), (__v16si)(__m512i)_mm512_undefined_epi32(), (__mmask16)-1))

  );
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpbh_ps(__m512 __S, __mmask16 __U, __m256bh __A) {
  return (__m512)_mm512_castsi512_ps((
      __m512i)(((__m512i)__builtin_ia32_pslldi512_mask(
      (__v16si)(__m512i)((__m512i)_mm512_cvtepi16_epi32((__m256i)__A)),
      (int)(16), (__v16si)(__m512i)((__m512i)__S), (__mmask16)((__mmask16)__U)))

                   ));
}

#pragma GCC pop_options
# 125 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxneconvertintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/avxneconvertintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("avxneconvert")

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bcstnebf16_ps(const void *__P) {
  return (__m128)__builtin_ia32_vbcstnebf162ps128((const __bf16 *)__P);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bcstnebf16_ps(const void *__P) {
  return (__m256)__builtin_ia32_vbcstnebf162ps256((const __bf16 *)__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bcstnesh_ps(const void *__P) {
  return (__m128)__builtin_ia32_vbcstnesh2ps128((const _Float16 *)__P);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bcstnesh_ps(const void *__P) {
  return (__m256)__builtin_ia32_vbcstnesh2ps256((const _Float16 *)__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneebf16_ps(const __m128bh *__A) {
  return (__m128)__builtin_ia32_vcvtneebf162ps128((const __v8bf *)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneebf16_ps(const __m256bh *__A) {
  return (__m256)__builtin_ia32_vcvtneebf162ps256((const __v16bf *)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneeph_ps(const __m128h *__A) {
  return (__m128)__builtin_ia32_vcvtneeph2ps128((const __v8hf *)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneeph_ps(const __m256h *__A) {
  return (__m256)__builtin_ia32_vcvtneeph2ps256((const __v16hf *)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneobf16_ps(const __m128bh *__A) {
  return (__m128)__builtin_ia32_vcvtneobf162ps128((const __v8bf *)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneobf16_ps(const __m256bh *__A) {
  return (__m256)__builtin_ia32_vcvtneobf162ps256((const __v16bf *)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneoph_ps(const __m128h *__A) {
  return (__m128)__builtin_ia32_vcvtneoph2ps128((const __v8hf *)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneoph_ps(const __m256h *__A) {
  return (__m256)__builtin_ia32_vcvtneoph2ps256((const __v16hf *)__A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneps_avx_pbh(__m128 __A) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf(__A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneps_avx_pbh(__m256 __A) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf(__A);
}

#pragma GCC pop_options
# 127 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxtileintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxtileintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("amx-tile")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_loadconfig(const void *__config) {
  __builtin_ia32_ldtilecfg(__config);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_storeconfig(void *__config) {
  __builtin_ia32_sttilecfg(__config);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_release(void) {
  __asm__ volatile("tilerelease" ::);
}
# 95 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxtileintrin.h" 3 4
#pragma GCC pop_options
# 130 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxint8intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxint8intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("amx-int8")
# 58 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxint8intrin.h" 3 4
#pragma GCC pop_options
# 132 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxbf16intrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxbf16intrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("amx-bf16")
# 49 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxbf16intrin.h" 3 4
#pragma GCC pop_options
# 134 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxcomplexintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxcomplexintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("amx-complex")
# 56 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxcomplexintrin.h" 3 4
#pragma GCC pop_options
# 136 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/prfchwintrin.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-linux-gnu/13/include/prfchwintrin.h" 3 4
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_prefetchw(void *__P) {
  __builtin_prefetch(__P, 1, 3);
}
# 138 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/keylockerintrin.h" 1 3 4
# 32 "/usr/lib/gcc/x86_64-linux-gnu/13/include/keylockerintrin.h" 3 4
#pragma GCC push_options
#pragma GCC target("kl")

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadiwkey(unsigned int __I, __m128i __A, __m128i __B, __m128i __C) {
  __builtin_ia32_loadiwkey((__v2di)__B, (__v2di)__C, (__v2di)__A, __I);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_encodekey128_u32(unsigned int __I, __m128i __A, void *__P) {
  return __builtin_ia32_encodekey128_u32(__I, (__v2di)__A, __P);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__,
                                            __artificial__))
_mm_encodekey256_u32(unsigned int __I, __m128i __A, __m128i __B, void *__P) {
  return __builtin_ia32_encodekey256_u32(__I, (__v2di)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec128kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesdec128kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec256kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesdec256kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc128kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesenc128kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc256kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesenc256kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

#pragma GCC pop_options

#pragma GCC push_options
#pragma GCC target("widekl")

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesdecwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesdecwide128kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesdecwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesdecwide256kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesencwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesencwide128kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesencwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesencwide256kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

#pragma GCC pop_options
# 140 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/13/include/amxfp16intrin.h" 1 3 4
# 142 "/usr/lib/gcc/x86_64-linux-gnu/13/include/immintrin.h" 2 3 4
# 18 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 2

# 19 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
typedef union {
  __m128i v;
  __int128_t i;
  Int128 s;
} X86Int128Union;
# 33 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
static inline Int128 atomic16_read_ro(const Int128 *ptr) {
  X86Int128Union r;

  do {
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 3 4
    ((void)sizeof((
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
                      __builtin_expect(!!(cpuinfo & (1u << 16)), 1)
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 3 4
                          )
                      ? 1
                      : 0),
     __extension__({
       if (
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
           __builtin_expect(!!(cpuinfo & (1u << 16)), 1)
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 3 4
       )
         ;
       else
         __assert_fail(
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
             "__builtin_expect(!!(cpuinfo & (1u << 16)), 1)"
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc" 3 4
             ,
             "/home/paulning/study/qemu/host/include/x86_64/host/"
             "atomic128-ldst.h.inc",
             37, __extension__ __PRETTY_FUNCTION__);
     }))
# 37 "/home/paulning/study/qemu/host/include/x86_64/host/atomic128-ldst.h.inc"
        ;
  } while (0);
  asm("vmovdqa %1, %0" : "=x"(r.v) : "m"(*ptr));

  return r.s;
}

static inline Int128 atomic16_read_rw(Int128 *ptr) {
  __int128_t *ptr_align = __builtin_assume_aligned(ptr, 16);
  X86Int128Union r;

  if (__builtin_expect(!!(cpuinfo & (1u << 16)), 1)) {
    asm("vmovdqa %1, %0" : "=x"(r.v) : "m"(*ptr_align));
  } else {
    r.i = __sync_val_compare_and_swap_16(ptr_align, 0, 0);
  }
  return r.s;
}

static inline void atomic16_set(Int128 *ptr, Int128 val) {
  __int128_t *ptr_align = __builtin_assume_aligned(ptr, 16);
  X86Int128Union new = {.s = val};

  if (__builtin_expect(!!(cpuinfo & (1u << 16)), 1)) {
    asm("vmovdqa %1, %0" : "=m"(*ptr_align) : "x"(new.v));
  } else {
    __int128_t old;
    do {
      old = *ptr_align;
    } while (!__sync_bool_compare_and_swap_16(ptr_align, old, new.i));
  }
}
# 64 "/home/paulning/study/qemu/include/qemu/atomic128.h" 2
# 11 "/home/paulning/study/qemu/include/exec/helper-proto-common.h" 2

# 1 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc" 1

# 1 "/home/paulning/study/qemu/include/exec/helper-head.h.inc" 1
# 9 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc" 2
# 56 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc"
# 1 "/home/paulning/study/qemu/accel/tcg/tcg-runtime.h" 1
int32_t helper_div_i32(int32_t, int32_t) __attribute__((noinline));
int32_t helper_rem_i32(int32_t, int32_t) __attribute__((noinline));
uint32_t helper_divu_i32(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_remu_i32(uint32_t, uint32_t) __attribute__((noinline));

int64_t helper_div_i64(int64_t, int64_t) __attribute__((noinline));
int64_t helper_rem_i64(int64_t, int64_t) __attribute__((noinline));
uint64_t helper_divu_i64(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_remu_i64(uint64_t, uint64_t) __attribute__((noinline));

uint64_t helper_shl_i64(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_shr_i64(uint64_t, uint64_t) __attribute__((noinline));
int64_t helper_sar_i64(int64_t, int64_t) __attribute__((noinline));

int64_t helper_mulsh_i64(int64_t, int64_t) __attribute__((noinline));
uint64_t helper_muluh_i64(uint64_t, uint64_t) __attribute__((noinline));

uint32_t helper_clz_i32(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_ctz_i32(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_clz_i64(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_ctz_i64(uint64_t, uint64_t) __attribute__((noinline));
uint32_t helper_clrsb_i32(uint32_t) __attribute__((noinline));
uint64_t helper_clrsb_i64(uint64_t) __attribute__((noinline));
uint32_t helper_ctpop_i32(uint32_t) __attribute__((noinline));
uint64_t helper_ctpop_i64(uint64_t) __attribute__((noinline));

const void *helper_lookup_tb_ptr(CPUArchState *) __attribute__((noinline));

__attribute__((__noreturn__)) void helper_exit_atomic(CPUArchState *)
    __attribute__((noinline));
# 42 "/home/paulning/study/qemu/accel/tcg/tcg-runtime.h"
Int128 helper_ld_i128(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_st_i128(CPUArchState *, uint64_t, Int128, uint32_t)
    __attribute__((noinline));

uint32_t helper_atomic_cmpxchgb(CPUArchState *, uint64_t, uint32_t, uint32_t,
                                uint32_t) __attribute__((noinline));

uint32_t helper_atomic_cmpxchgw_be(CPUArchState *, uint64_t, uint32_t, uint32_t,
                                   uint32_t) __attribute__((noinline));

uint32_t helper_atomic_cmpxchgw_le(CPUArchState *, uint64_t, uint32_t, uint32_t,
                                   uint32_t) __attribute__((noinline));

uint32_t helper_atomic_cmpxchgl_be(CPUArchState *, uint64_t, uint32_t, uint32_t,
                                   uint32_t) __attribute__((noinline));

uint32_t helper_atomic_cmpxchgl_le(CPUArchState *, uint64_t, uint32_t, uint32_t,
                                   uint32_t) __attribute__((noinline));

uint64_t helper_atomic_cmpxchgq_be(CPUArchState *, uint64_t, uint64_t, uint64_t,
                                   uint32_t) __attribute__((noinline));

uint64_t helper_atomic_cmpxchgq_le(CPUArchState *, uint64_t, uint64_t, uint64_t,
                                   uint32_t) __attribute__((noinline));

Int128 helper_atomic_cmpxchgo_be(CPUArchState *, uint64_t, Int128, Int128,
                                 uint32_t) __attribute__((noinline));

Int128 helper_atomic_cmpxchgo_le(CPUArchState *, uint64_t, Int128, Int128,
                                 uint32_t) __attribute__((noinline));

Int128 helper_nonatomic_cmpxchgo(CPUArchState *, uint64_t, Int128, Int128,
                                 uint32_t) __attribute__((noinline));
# 101 "/home/paulning/study/qemu/accel/tcg/tcg-runtime.h"
uint32_t helper_atomic_fetch_addb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_addw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_addw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_addl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_addl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_addq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_addq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_andb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_andw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_andw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_andl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_andl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_andq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_andq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_orb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_orw_le(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_orw_be(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_orl_le(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_orl_be(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_orq_le(CPUArchState *, uint64_t, uint64_t,
                                    uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_orq_be(CPUArchState *, uint64_t, uint64_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_xorb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_xorw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_xorw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_xorl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_xorl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_xorq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_xorq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_sminb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_sminw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_sminw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_sminl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_sminl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_sminq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_sminq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_uminb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_uminw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_uminw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_uminl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_uminl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_uminq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_uminq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_smaxb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_smaxw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_smaxw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_smaxl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_smaxl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_smaxq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_smaxq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_umaxb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_fetch_umaxw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_umaxw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_umaxl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_fetch_umaxl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_umaxq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_fetch_umaxq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));

uint32_t helper_atomic_add_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_add_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_add_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_add_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_add_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_add_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_add_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_and_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_and_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_and_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_and_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_and_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_and_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_and_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_or_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_or_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_or_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_or_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_or_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                    uint32_t) __attribute__((noinline));
uint64_t helper_atomic_or_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                    uint32_t) __attribute__((noinline));
uint64_t helper_atomic_or_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                    uint32_t) __attribute__((noinline));
uint32_t helper_atomic_xor_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_xor_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_xor_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_xor_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_xor_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_xor_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint64_t helper_atomic_xor_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                     uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smin_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_smin_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smin_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smin_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smin_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_smin_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_smin_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umin_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_umin_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umin_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umin_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umin_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_umin_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_umin_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smax_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_smax_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smax_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smax_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_smax_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_smax_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_smax_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umax_fetchb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_umax_fetchw_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umax_fetchw_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umax_fetchl_le(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint32_t helper_atomic_umax_fetchl_be(CPUArchState *, uint64_t, uint32_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_umax_fetchq_le(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));
uint64_t helper_atomic_umax_fetchq_be(CPUArchState *, uint64_t, uint64_t,
                                      uint32_t) __attribute__((noinline));

uint32_t helper_atomic_xchgb(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_xchgw_le(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_xchgw_be(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_xchgl_le(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_atomic_xchgl_be(CPUArchState *, uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_atomic_xchgq_le(CPUArchState *, uint64_t, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_atomic_xchgq_be(CPUArchState *, uint64_t, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_mov(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_dup8(void *, uint32_t, uint32_t) __attribute__((noinline));
void helper_gvec_dup16(void *, uint32_t, uint32_t) __attribute__((noinline));
void helper_gvec_dup32(void *, uint32_t, uint32_t) __attribute__((noinline));
void helper_gvec_dup64(void *, uint32_t, uint64_t) __attribute__((noinline));

void helper_gvec_add8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_add16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_add32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_add64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_adds8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_adds16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_adds32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_adds64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_sub8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sub16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sub32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sub64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_subs8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_subs16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_subs32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_subs64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_mul8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_mul16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_mul32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_mul64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_muls8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_muls16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_muls32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_muls64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_ssadd8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ssadd16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ssadd32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ssadd64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sssub8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sssub16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sssub32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sssub64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usadd8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_usadd16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_usadd32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_usadd64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ussub8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ussub16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ussub32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ussub64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_smin8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smin16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smin32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smin64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_smax8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smax16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smax32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smax64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_umin8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umin16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umin32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umin64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_umax8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umax16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umax32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umax64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_neg8(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_neg16(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_neg32(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_neg64(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_abs8(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_abs16(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_abs32(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_abs64(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_not(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_and(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_or(void *, void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_xor(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_andc(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_orc(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_nand(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_nor(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_eqv(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ands(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_andcs(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_xors(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_ors(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_shl8i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shl16i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shl32i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shl64i(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_shr8i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shr16i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shr32i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_shr64i(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_sar8i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sar16i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sar32i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sar64i(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_rotl8i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_rotl16i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_rotl32i(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_rotl64i(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_shl8v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shl16v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shl32v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shl64v(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_shr8v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shr16v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shr32v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_shr64v(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sar8v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sar16v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sar32v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sar64v(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_rotl8v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotl16v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotl32v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotl64v(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_rotr8v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotr16v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotr32v(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rotr64v(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_eq8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_eq16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_eq32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_eq64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ne8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ne16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ne32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ne64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_lt8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_lt16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_lt32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_lt64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_le8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_le16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_le32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_le64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ltu8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltu16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltu32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltu64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_leu8(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_leu16(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_leu32(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_leu64(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_eqs8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_eqs16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_eqs32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_eqs64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_lts8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_lts16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_lts32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_lts64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_les8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_les16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_les32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_les64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_ltus8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltus16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltus32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_ltus64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_leus8(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_leus16(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_leus32(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));
void helper_gvec_leus64(void *, void *, uint64_t, uint32_t)
    __attribute__((noinline));

void helper_gvec_bitsel(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));
# 57 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc" 2
# 14 "/home/paulning/study/qemu/include/exec/helper-proto-common.h" 2
# 11 "/home/paulning/study/qemu/include/exec/helper-proto.h" 2

# 1 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc" 1
# 56 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc"
# 1 "../../../target/arm/helper.h" 1
uint32_t helper_sxtb16(uint32_t) __attribute__((noinline));
uint32_t helper_uxtb16(uint32_t) __attribute__((noinline));

uint32_t helper_add_setq(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_add_saturate(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_sub_saturate(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_add_usaturate(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_sub_usaturate(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
int32_t helper_sdiv(CPUArchState *, int32_t, int32_t) __attribute__((noinline));
uint32_t helper_udiv(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_rbit(uint32_t) __attribute__((noinline));
# 21 "../../../target/arm/helper.h"
uint32_t helper_sadd8(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_ssub8(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_ssub16(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_sadd16(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_saddsubx(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_ssubaddx(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_uadd8(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_usub8(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_usub16(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_uadd16(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_uaddsubx(uint32_t, uint32_t, void *) __attribute__((noinline));
uint32_t helper_usubaddx(uint32_t, uint32_t, void *) __attribute__((noinline));
# 32 "../../../target/arm/helper.h"
uint32_t helper_qadd8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_qsub8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_qsub16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_qadd16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_qaddsubx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_qsubaddx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shadd8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shsub8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shsub16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shadd16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shaddsubx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_shsubaddx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqadd8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqsub8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqsub16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqadd16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqaddsubx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uqsubaddx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhadd8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhsub8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhsub16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhadd16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhaddsubx(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_uhsubaddx(uint32_t, uint32_t) __attribute__((noinline));

uint32_t helper_ssat(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_usat(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_ssat16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_usat16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_usad8(uint32_t, uint32_t) __attribute__((noinline));

uint32_t helper_sel_flags(uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));

__attribute__((__noreturn__)) void helper_exception_internal(CPUArchState *,
                                                             uint32_t)
    __attribute__((noinline));
__attribute__((__noreturn__)) void
helper_exception_with_syndrome(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
__attribute__((__noreturn__)) void
helper_exception_with_syndrome_el(CPUArchState *, uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));
__attribute__((__noreturn__)) void helper_exception_bkpt_insn(CPUArchState *,
                                                              uint32_t)
    __attribute__((noinline));
__attribute__((__noreturn__)) void helper_exception_swstep(CPUArchState *,
                                                           uint32_t)
    __attribute__((noinline));
__attribute__((__noreturn__)) void helper_exception_pc_alignment(CPUArchState *,
                                                                 target_ulong)
    __attribute__((noinline));
void helper_setend(CPUArchState *) __attribute__((noinline));
void helper_wfi(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_wfe(CPUArchState *) __attribute__((noinline));
void helper_wfit(CPUArchState *, uint64_t) __attribute__((noinline));
void helper_yield(CPUArchState *) __attribute__((noinline));
void helper_pre_hvc(CPUArchState *) __attribute__((noinline));
void helper_pre_smc(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_vesb(CPUArchState *) __attribute__((noinline));

void helper_cpsr_write(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_cpsr_write_eret(CPUArchState *, uint32_t) __attribute__((noinline));
uint32_t helper_cpsr_read(CPUArchState *) __attribute__((noinline));

void helper_v7m_msr(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_v7m_mrs(CPUArchState *, uint32_t) __attribute__((noinline));

void helper_v7m_bxns(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_v7m_blxns(CPUArchState *, uint32_t) __attribute__((noinline));

uint32_t helper_v7m_tt(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_v7m_preserve_fp_state(CPUArchState *) __attribute__((noinline));

void helper_v7m_vlstm(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_v7m_vlldm(CPUArchState *, uint32_t) __attribute__((noinline));

void helper_v8m_stackcheck(CPUArchState *, uint32_t) __attribute__((noinline));

void helper_check_bxj_trap(CPUArchState *, uint32_t) __attribute__((noinline));

const void *helper_access_check_cp_reg(CPUArchState *, uint32_t, uint32_t,
                                       uint32_t) __attribute__((noinline));
const void *helper_lookup_cp_reg(CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_tidcp_el0(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_tidcp_el1(CPUArchState *, uint32_t) __attribute__((noinline));
void helper_set_cp_reg(CPUArchState *, const void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_get_cp_reg(CPUArchState *, const void *)
    __attribute__((noinline));
void helper_set_cp_reg64(CPUArchState *, const void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_get_cp_reg64(CPUArchState *, const void *)
    __attribute__((noinline));

uint32_t helper_get_r13_banked(CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_set_r13_banked(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_mrs_banked(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_msr_banked(CPUArchState *, uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_get_user_reg(CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_set_user_reg(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_rebuild_hflags_m32_newel(CPUArchState *) __attribute__((noinline));
void helper_rebuild_hflags_m32(CPUArchState *, int) __attribute__((noinline));
void helper_rebuild_hflags_a32_newel(CPUArchState *) __attribute__((noinline));
void helper_rebuild_hflags_a32(CPUArchState *, int) __attribute__((noinline));
void helper_rebuild_hflags_a64(CPUArchState *, int) __attribute__((noinline));

void helper_probe_access(CPUArchState *, target_ulong, uint32_t, uint32_t,
                         uint32_t) __attribute__((noinline));

uint32_t helper_vfp_get_fpscr(CPUArchState *) __attribute__((noinline));
void helper_vfp_set_fpscr(CPUArchState *, uint32_t) __attribute__((noinline));

uint32_t helper_vfp_addh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_adds(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_addd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_subh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_subs(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_subd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_mulh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_muls(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_muld(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_divh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_divs(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_divd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_maxh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_maxs(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_maxd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_minh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_mins(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_mind(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_maxnumh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_maxnums(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_maxnumd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_minnumh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_minnums(float32, float32, float_status *)
    __attribute__((noinline));
float64 helper_vfp_minnumd(float64, float64, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_sqrth(uint32_t, float_status *) __attribute__((noinline));
float32 helper_vfp_sqrts(float32, float_status *) __attribute__((noinline));
float64 helper_vfp_sqrtd(float64, float_status *) __attribute__((noinline));
void helper_vfp_cmph(uint32_t, uint32_t, CPUArchState *)
    __attribute__((noinline));
void helper_vfp_cmps(float32, float32, CPUArchState *)
    __attribute__((noinline));
void helper_vfp_cmpd(float64, float64, CPUArchState *)
    __attribute__((noinline));
void helper_vfp_cmpeh(uint32_t, uint32_t, CPUArchState *)
    __attribute__((noinline));
void helper_vfp_cmpes(float32, float32, CPUArchState *)
    __attribute__((noinline));
void helper_vfp_cmped(float64, float64, CPUArchState *)
    __attribute__((noinline));

float64 helper_vfp_fcvtds(float32, float_status *) __attribute__((noinline));
float32 helper_vfp_fcvtsd(float64, float_status *) __attribute__((noinline));
uint32_t helper_bfcvt(float32, float_status *) __attribute__((noinline));
uint32_t helper_bfcvt_pair(uint64_t, float_status *) __attribute__((noinline));

uint32_t helper_vfp_uitoh(uint32_t, float_status *) __attribute__((noinline));
float32 helper_vfp_uitos(uint32_t, float_status *) __attribute__((noinline));
float64 helper_vfp_uitod(uint32_t, float_status *) __attribute__((noinline));
uint32_t helper_vfp_sitoh(uint32_t, float_status *) __attribute__((noinline));
float32 helper_vfp_sitos(uint32_t, float_status *) __attribute__((noinline));
float64 helper_vfp_sitod(uint32_t, float_status *) __attribute__((noinline));

uint32_t helper_vfp_touih(uint32_t, float_status *) __attribute__((noinline));
uint32_t helper_vfp_touis(float32, float_status *) __attribute__((noinline));
uint32_t helper_vfp_touid(float64, float_status *) __attribute__((noinline));
uint32_t helper_vfp_touizh(uint32_t, float_status *) __attribute__((noinline));
uint32_t helper_vfp_touizs(float32, float_status *) __attribute__((noinline));
uint32_t helper_vfp_touizd(float64, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosih(uint32_t, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosis(float32, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosid(float64, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosizh(uint32_t, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosizs(float32, float_status *) __attribute__((noinline));
int32_t helper_vfp_tosizd(float64, float_status *) __attribute__((noinline));

uint32_t helper_vfp_toshh_round_to_zero(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toslh_round_to_zero(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touhh_round_to_zero(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toulh_round_to_zero(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toshs_round_to_zero(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_tosls_round_to_zero(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touhs_round_to_zero(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touls_round_to_zero(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_toshd_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosld_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosqd_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touhd_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tould_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touqd_round_to_zero(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touhh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toshh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toulh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toslh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touqh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosqh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_toshs(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_tosls(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosqs(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touhs(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_touls(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touqs(float32, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_toshd(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosld(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tosqd(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touhd(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_tould(float64, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_vfp_touqd(float64, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_shtos(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_sltos(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_sqtos(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_uhtos(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_ultos(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_uqtos(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_shtod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_sltod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_sqtod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_uhtod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_ultod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_uqtod(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_shtoh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_uhtoh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_sltoh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_ultoh(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_sqtoh(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_uqtoh(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));

float32 helper_vfp_shtos_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_sltos_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_uhtos_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float32 helper_vfp_ultos_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_shtod_round_to_nearest(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_sltod_round_to_nearest(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_uhtod_round_to_nearest(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
float64 helper_vfp_ultod_round_to_nearest(uint64_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_shtoh_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_uhtoh_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_sltoh_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_ultoh_round_to_nearest(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));

uint32_t helper_set_rmode(uint32_t, float_status *) __attribute__((noinline));

float32 helper_vfp_fcvt_f16_to_f32(uint32_t, float_status *, uint32_t)
    __attribute__((noinline));
uint32_t helper_vfp_fcvt_f32_to_f16(float32, float_status *, uint32_t)
    __attribute__((noinline));
float64 helper_vfp_fcvt_f16_to_f64(uint32_t, float_status *, uint32_t)
    __attribute__((noinline));
uint32_t helper_vfp_fcvt_f64_to_f16(float64, float_status *, uint32_t)
    __attribute__((noinline));

float64 helper_vfp_muladdd(float64, float64, float64, float_status *)
    __attribute__((noinline));
float32 helper_vfp_muladds(float32, float32, float32, float_status *)
    __attribute__((noinline));
uint32_t helper_vfp_muladdh(uint32_t, uint32_t, uint32_t, float_status *)
    __attribute__((noinline));

uint32_t helper_recpe_f16(uint32_t, float_status *) __attribute__((noinline));
float32 helper_recpe_f32(float32, float_status *) __attribute__((noinline));
float32 helper_recpe_rpres_f32(float32, float_status *)
    __attribute__((noinline));
float64 helper_recpe_f64(float64, float_status *) __attribute__((noinline));
uint32_t helper_rsqrte_f16(uint32_t, float_status *) __attribute__((noinline));
float32 helper_rsqrte_f32(float32, float_status *) __attribute__((noinline));
float32 helper_rsqrte_rpres_f32(float32, float_status *)
    __attribute__((noinline));
float64 helper_rsqrte_f64(float64, float_status *) __attribute__((noinline));
uint32_t helper_recpe_u32(uint32_t) __attribute__((noinline));
uint32_t helper_rsqrte_u32(uint32_t) __attribute__((noinline));
uint64_t helper_neon_tbl(CPUArchState *, uint32_t, uint64_t, uint64_t)
    __attribute__((noinline));

uint32_t helper_shl_cc(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_shr_cc(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_sar_cc(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_ror_cc(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_rinth_exact(uint32_t, float_status *) __attribute__((noinline));
float32 helper_rints_exact(float32, float_status *) __attribute__((noinline));
float64 helper_rintd_exact(float64, float_status *) __attribute__((noinline));
uint32_t helper_rinth(uint32_t, float_status *) __attribute__((noinline));
float32 helper_rints(float32, float_status *) __attribute__((noinline));
float64 helper_rintd(float64, float_status *) __attribute__((noinline));

uint32_t helper_vjcvt(float64, CPUArchState *) __attribute__((noinline));
uint64_t helper_fjcvtzs(float64, float_status *) __attribute__((noinline));

void helper_check_hcr_el2_trap(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_neon_pmin_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmin_s8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmin_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmin_s16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmax_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmax_s8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmax_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_pmax_s16(uint32_t, uint32_t) __attribute__((noinline));

uint32_t helper_neon_shl_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_shl_s16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_s8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_s16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_u32(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_rshl_s32(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_rshl_u64(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_neon_rshl_s64(uint64_t, uint64_t) __attribute__((noinline));
uint32_t helper_neon_qshl_u8(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshl_s8(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshl_u16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshl_s16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshl_u32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshl_s32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_neon_qshl_u64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_qshl_s64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint32_t helper_neon_qshlu_s8(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshlu_s16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qshlu_s32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_neon_qshlu_s64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_u8(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_s8(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_u16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_s16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_u32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrshl_s32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_neon_qrshl_u64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_qrshl_s64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
void helper_neon_sqshl_b(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshl_h(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshl_s(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshl_d(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshl_b(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshl_h(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshl_s(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshl_d(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqrshl_b(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqrshl_h(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqrshl_s(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqrshl_d(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqrshl_b(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqrshl_h(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqrshl_s(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqrshl_d(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshli_b(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshli_h(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshli_s(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshli_d(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshli_b(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshli_h(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshli_s(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_uqshli_d(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshlui_b(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshlui_h(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshlui_s(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));
void helper_neon_sqshlui_d(void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

void helper_gvec_srshl_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_srshl_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_srshl_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_srshl_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_urshl_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_urshl_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_urshl_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_urshl_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_neon_add_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_add_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_sub_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_sub_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_mul_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_mul_u16(uint32_t, uint32_t) __attribute__((noinline));

uint32_t helper_neon_tst_u8(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_tst_u16(uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_neon_tst_u32(uint32_t, uint32_t) __attribute__((noinline));

uint32_t helper_neon_clz_u8(uint32_t) __attribute__((noinline));
uint32_t helper_neon_clz_u16(uint32_t) __attribute__((noinline));
uint32_t helper_neon_cls_s8(uint32_t) __attribute__((noinline));
uint32_t helper_neon_cls_s16(uint32_t) __attribute__((noinline));
uint32_t helper_neon_cls_s32(uint32_t) __attribute__((noinline));
void helper_gvec_cnt_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_rbit_b(void *, void *, uint32_t) __attribute__((noinline));

uint32_t helper_neon_qdmulh_s16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmulh_s16(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmlah_s16(CPUArchState *, uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmlsh_s16(CPUArchState *, uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qdmulh_s32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmulh_s32(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmlah_s32(CPUArchState *, int32_t, int32_t, int32_t)
    __attribute__((noinline));
uint32_t helper_neon_qrdmlsh_s32(CPUArchState *, int32_t, int32_t, int32_t)
    __attribute__((noinline));

uint64_t helper_neon_narrow_u8(uint64_t) __attribute__((noinline));
uint64_t helper_neon_narrow_u16(uint64_t) __attribute__((noinline));
uint64_t helper_neon_unarrow_sat8(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_u8(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_s8(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_unarrow_sat16(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_u16(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_s16(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_unarrow_sat32(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_u32(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_narrow_sat_s32(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint32_t helper_neon_narrow_high_u8(uint64_t) __attribute__((noinline));
uint32_t helper_neon_narrow_high_u16(uint64_t) __attribute__((noinline));
uint32_t helper_neon_narrow_round_high_u8(uint64_t) __attribute__((noinline));
uint32_t helper_neon_narrow_round_high_u16(uint64_t) __attribute__((noinline));
uint64_t helper_neon_widen_u8(uint32_t) __attribute__((noinline));
uint64_t helper_neon_widen_s8(uint32_t) __attribute__((noinline));
uint64_t helper_neon_widen_u16(uint32_t) __attribute__((noinline));
uint64_t helper_neon_widen_s16(uint32_t) __attribute__((noinline));

uint64_t helper_neon_addlp_s8(uint64_t) __attribute__((noinline));
uint64_t helper_neon_addlp_s16(uint64_t) __attribute__((noinline));
uint64_t helper_neon_addl_saturate_s32(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_addl_saturate_s64(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_neon_abdl_u16(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_abdl_s16(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_abdl_u32(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_abdl_s32(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_abdl_u64(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_abdl_s64(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_mull_u8(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_mull_s8(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_mull_u16(uint32_t, uint32_t) __attribute__((noinline));
uint64_t helper_neon_mull_s16(uint32_t, uint32_t) __attribute__((noinline));

uint64_t helper_neon_negl_u16(uint64_t) __attribute__((noinline));
uint64_t helper_neon_negl_u32(uint64_t) __attribute__((noinline));

uint32_t helper_neon_qabs_s8(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qabs_s16(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qabs_s32(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint64_t helper_neon_qabs_s64(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint32_t helper_neon_qneg_s8(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qneg_s16(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint32_t helper_neon_qneg_s32(CPUArchState *, uint32_t)
    __attribute__((noinline));
uint64_t helper_neon_qneg_s64(CPUArchState *, uint64_t)
    __attribute__((noinline));

uint32_t helper_neon_ceq_f32(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_neon_cge_f32(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_neon_cgt_f32(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_neon_acge_f32(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint32_t helper_neon_acgt_f32(uint32_t, uint32_t, float_status *)
    __attribute__((noinline));
uint64_t helper_neon_acge_f64(uint64_t, uint64_t, float_status *)
    __attribute__((noinline));
uint64_t helper_neon_acgt_f64(uint64_t, uint64_t, float_status *)
    __attribute__((noinline));

uint64_t helper_iwmmxt_maddsq(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_madduq(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_sadb(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_sadw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_mulslw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_mulshw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_mululw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_muluhw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_macsw(uint64_t, uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_macuw(uint64_t, uint64_t) __attribute__((noinline));
uint32_t helper_iwmmxt_setpsr_nz(uint64_t) __attribute__((noinline));

uint64_t helper_iwmmxt_unpacklb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpacklw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackll(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_unpacklub(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackluw(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpacklul(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhub(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhuw(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhul(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpacklsb(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpacklsw(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpacklsl(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhsb(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhsw(CPUArchState *, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_unpackhsl(CPUArchState *, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_cmpeqb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpeqw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpeql(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtub(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtuw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtsb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_cmpgtsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_minsb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_minsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_minsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_minub(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_minuw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_minul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxsb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxub(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxuw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_maxul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_subnb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subnw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subnl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addnb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addnw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addnl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subub(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subuw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addub(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_adduw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subsb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_subsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addsb(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_addsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_avgb0(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_avgb1(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_avgw0(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_avgw1(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_align(uint64_t, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_insr(uint64_t, uint32_t, uint32_t, uint32_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_bcstb(uint32_t) __attribute__((noinline));
uint64_t helper_iwmmxt_bcstw(uint32_t) __attribute__((noinline));
uint64_t helper_iwmmxt_bcstl(uint32_t) __attribute__((noinline));

uint64_t helper_iwmmxt_addcb(uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_addcw(uint64_t) __attribute__((noinline));
uint64_t helper_iwmmxt_addcl(uint64_t) __attribute__((noinline));

uint32_t helper_iwmmxt_msbb(uint64_t) __attribute__((noinline));
uint32_t helper_iwmmxt_msbw(uint64_t) __attribute__((noinline));
uint32_t helper_iwmmxt_msbl(uint64_t) __attribute__((noinline));

uint64_t helper_iwmmxt_srlw(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_srll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_srlq(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_sllw(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_slll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_sllq(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_sraw(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_sral(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_sraq(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_rorw(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_rorl(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_rorq(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_shufh(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_packuw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_packul(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_packuq(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_packsw(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_packsl(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_packsq(CPUArchState *, uint64_t, uint64_t)
    __attribute__((noinline));

uint64_t helper_iwmmxt_muladdsl(uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_muladdsw(uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_iwmmxt_muladdswl(uint64_t, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_neon_unzip8(void *, void *) __attribute__((noinline));
void helper_neon_unzip16(void *, void *) __attribute__((noinline));
void helper_neon_qunzip8(void *, void *) __attribute__((noinline));
void helper_neon_qunzip16(void *, void *) __attribute__((noinline));
void helper_neon_qunzip32(void *, void *) __attribute__((noinline));
void helper_neon_zip8(void *, void *) __attribute__((noinline));
void helper_neon_zip16(void *, void *) __attribute__((noinline));
void helper_neon_qzip8(void *, void *) __attribute__((noinline));
void helper_neon_qzip16(void *, void *) __attribute__((noinline));
void helper_neon_qzip32(void *, void *) __attribute__((noinline));

void helper_crypto_aese(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_aesd(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_aesmc(void *, void *, uint32_t) __attribute__((noinline));
void helper_crypto_aesimc(void *, void *, uint32_t) __attribute__((noinline));

void helper_crypto_sha1su0(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha1c(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha1p(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha1m(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha1h(void *, void *, uint32_t) __attribute__((noinline));
void helper_crypto_sha1su1(void *, void *, uint32_t) __attribute__((noinline));

void helper_crypto_sha256h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha256h2(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha256su0(void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha256su1(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_crypto_sha512h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha512h2(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha512su0(void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sha512su1(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_crypto_sm3tt1a(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sm3tt1b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sm3tt2a(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sm3tt2b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sm3partw1(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_crypto_sm3partw2(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_crypto_sm4e(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_crypto_sm4ekey(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_crypto_rax1(void *, void *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_crc32(uint32_t, uint32_t, uint32_t) __attribute__((noinline));
uint32_t helper_crc32c(uint32_t, uint32_t, uint32_t) __attribute__((noinline));

void helper_gvec_qrdmlah_s16(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_qrdmlsh_s16(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_qrdmlah_s32(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_qrdmlsh_s32(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlah_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlsh_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlah_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlsh_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlah_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlsh_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlah_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmlsh_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sdot_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_udot_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sdot_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_udot_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_usdot_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sdot_idx_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_udot_idx_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sdot_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_udot_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sudot_idx_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usdot_idx_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcaddh(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcadds(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcaddd(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcmlah(void *, void *, void *, void *, float_status *,
                        uint32_t) __attribute__((noinline));

void helper_gvec_fcmlah_idx(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fcmlas(void *, void *, void *, void *, float_status *,
                        uint32_t) __attribute__((noinline));

void helper_gvec_fcmlas_idx(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fcmlad(void *, void *, void *, void *, float_status *,
                        uint32_t) __attribute__((noinline));

void helper_gvec_sstoh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sitos(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ustoh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uitos(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_tosszh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_tosizs(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_touszh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_touizs(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vcvt_sf(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_uf(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_fs(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_fu(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vcvt_sh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_uh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_hs(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_hu(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vcvt_sd(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_ud(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_ds(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rz_du(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vcvt_rm_sd(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rm_ud(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rm_ss(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rm_us(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rm_sh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vcvt_rm_uh(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vrint_rm_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vrint_rm_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vrintx_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vrintx_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_frecpe_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frecpe_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frecpe_rpres_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frecpe_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_frsqrte_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frsqrte_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frsqrte_rpres_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_frsqrte_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcgt0_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcgt0_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcgt0_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcge0_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcge0_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcge0_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fceq0_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fceq0_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fceq0_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcle0_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcle0_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcle0_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fclt0_h(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fclt0_s(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fclt0_d(void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fadd_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fadd_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fadd_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fsub_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fsub_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fsub_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmul_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmul_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmul_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fabd_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fabd_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fabd_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ah_fabd_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ah_fabd_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ah_fabd_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fceq_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fceq_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fceq_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcge_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcge_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcge_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fcgt_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcgt_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fcgt_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_facge_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_facge_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_facge_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_facgt_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_facgt_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_facgt_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmax_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmax_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmax_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmin_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmin_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmin_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmaxnum_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxnum_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxnum_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fminnum_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminnum_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminnum_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_recps_nf_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_recps_nf_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_rsqrts_nf_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_rsqrts_nf_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmla_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmla_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmls_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmls_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vfma_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vfma_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vfma_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_vfms_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vfms_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_vfms_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ah_vfms_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ah_vfms_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ah_vfms_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ftsmul_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ftsmul_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ftsmul_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmul_idx_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmul_idx_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmul_idx_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmla_nf_idx_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmla_nf_idx_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmls_nf_idx_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmls_nf_idx_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmla_idx_h(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fmla_idx_s(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fmla_idx_d(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fmls_idx_h(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fmls_idx_s(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_fmls_idx_d(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_ah_fmls_idx_h(void *, void *, void *, void *, float_status *,
                               uint32_t) __attribute__((noinline));

void helper_gvec_ah_fmls_idx_s(void *, void *, void *, void *, float_status *,
                               uint32_t) __attribute__((noinline));

void helper_gvec_ah_fmls_idx_d(void *, void *, void *, void *, float_status *,
                               uint32_t) __attribute__((noinline));

void helper_gvec_uqadd_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqadd_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqadd_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqadd_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqadd_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqadd_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqadd_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqadd_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqsub_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqsub_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqsub_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uqsub_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqsub_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqsub_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqsub_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sqsub_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usqadd_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usqadd_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usqadd_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usqadd_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_suqadd_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_suqadd_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_suqadd_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_suqadd_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmlal_a32(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmlal_a64(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmlal_idx_a32(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmlal_idx_a64(void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

float32 helper_frint32_s(float32, float_status *) __attribute__((noinline));
float32 helper_frint64_s(float32, float_status *) __attribute__((noinline));
float64 helper_frint32_d(float64, float_status *) __attribute__((noinline));
float64 helper_frint64_d(float64, float_status *) __attribute__((noinline));

void helper_gvec_ceq0_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ceq0_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_clt0_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_clt0_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cle0_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cle0_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cgt0_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cgt0_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cge0_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_cge0_h(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_smulh_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smulh_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smulh_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smulh_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_umulh_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umulh_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umulh_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umulh_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sshl_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sshl_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ushl_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_ushl_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_pmul_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_pmull_q(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_pmull_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ssra_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ssra_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ssra_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ssra_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_usra_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_usra_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_usra_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_usra_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_srshr_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srshr_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srshr_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srshr_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_urshr_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_urshr_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_urshr_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_urshr_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_srsra_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srsra_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srsra_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_srsra_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_ursra_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ursra_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ursra_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ursra_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_sri_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sri_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sri_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sri_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_sli_b(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sli_h(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sli_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_sli_d(void *, void *, uint32_t) __attribute__((noinline));

void helper_gvec_sabd_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sabd_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sabd_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sabd_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uabd_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uabd_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uabd_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uabd_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_saba_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_saba_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_saba_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_saba_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uaba_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uaba_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uaba_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uaba_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mul_idx_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_mul_idx_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_mul_idx_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mla_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mla_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mla_idx_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mls_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mls_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_mls_idx_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqdmulh_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqdmulh_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmulh_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmulh_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqdmulh_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqdmulh_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmulh_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmulh_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmlah_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmlah_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmlsh_idx_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_neon_sqrdmlsh_idx_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqdmulh_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqdmulh_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqdmulh_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqdmulh_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmulh_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqrdmulh_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqrdmulh_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_sve2_sqrdmulh_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqdmulh_idx_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqdmulh_idx_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqdmulh_idx_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmulh_idx_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmulh_idx_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_sqrdmulh_idx_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_sve2_fmlal_zzzw_s(void *, void *, void *, void *, CPUArchState *,
                              uint32_t) __attribute__((noinline));

void helper_sve2_fmlal_zzxw_s(void *, void *, void *, void *, CPUArchState *,
                              uint32_t) __attribute__((noinline));

void helper_gvec_xar_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_smmla_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_ummla_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_usmmla_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_bfdot(void *, void *, void *, void *, CPUArchState *, uint32_t)
    __attribute__((noinline));

void helper_gvec_bfdot_idx(void *, void *, void *, void *, CPUArchState *,
                           uint32_t) __attribute__((noinline));

void helper_gvec_bfmmla(void *, void *, void *, void *, CPUArchState *,
                        uint32_t) __attribute__((noinline));

void helper_gvec_bfmlal(void *, void *, void *, void *, float_status *,
                        uint32_t) __attribute__((noinline));

void helper_gvec_bfmlal_idx(void *, void *, void *, void *, float_status *,
                            uint32_t) __attribute__((noinline));

void helper_gvec_sclamp_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sclamp_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sclamp_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sclamp_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uclamp_b(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uclamp_h(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uclamp_s(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uclamp_d(void *, void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_faddp_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_faddp_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_faddp_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmaxp_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxp_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxp_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fminp_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminp_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminp_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fmaxnump_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxnump_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fmaxnump_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_fminnump_h(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminnump_s(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));
void helper_gvec_fminnump_d(void *, void *, void *, float_status *, uint32_t)
    __attribute__((noinline));

void helper_gvec_addp_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_addp_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_addp_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_addp_d(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_smaxp_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smaxp_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_smaxp_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_sminp_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sminp_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_sminp_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_umaxp_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umaxp_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_umaxp_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_uminp_b(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uminp_h(void *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_gvec_uminp_s(void *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_gvec_urecpe_s(void *, void *, uint32_t) __attribute__((noinline));
void helper_gvec_ursqrte_s(void *, void *, uint32_t) __attribute__((noinline));

# 1 "../../../target/arm/tcg/helper-mve.h" 1
# 19 "../../../target/arm/tcg/helper-mve.h"
void helper_mve_vldrb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrb_sh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_sw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_uh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_uw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_sw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_uw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrb_h(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrb_w(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrh_w(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrb_sg_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_sg_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_sg_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrb_sg_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_sg_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrb_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_sg_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrw_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrd_sg_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vstrb_sg_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrb_sg_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrb_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrh_sg_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrh_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrw_sg_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrd_sg_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrh_sg_os_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrh_sg_os_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrh_sg_os_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrw_sg_os_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrd_sg_os_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vstrh_sg_os_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrh_sg_os_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrw_sg_os_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrd_sg_os_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vldrw_sg_wb_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vldrd_sg_wb_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrw_sg_wb_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vstrd_sg_wb_ud(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vld20b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld20h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld20w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vld21b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld21h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld21w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vld40b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld40h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld40w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vld41b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld41h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld41w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vld42b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld42h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld42w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vld43b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld43h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vld43w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst20b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst20h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst20w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst21b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst21h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst21w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst40b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst40h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst40w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst41b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst41h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst41w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst42b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst42h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst42w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vst43b(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst43h(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
void helper_mve_vst43w(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vdup(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vidupb(CPUArchState *, void *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_viduph(CPUArchState *, void *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vidupw(CPUArchState *, void *, uint32_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_viwdupb(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));
uint32_t helper_mve_viwduph(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));
uint32_t helper_mve_viwdupw(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));

uint32_t helper_mve_vdwdupb(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));
uint32_t helper_mve_vdwduph(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));
uint32_t helper_mve_vdwdupw(CPUArchState *, void *, uint32_t, uint32_t,
                            uint32_t) __attribute__((noinline));

void helper_mve_vclsb(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vclsh(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vclsw(CPUArchState *, void *, void *) __attribute__((noinline));

void helper_mve_vclzb(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vclzh(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vclzw(CPUArchState *, void *, void *) __attribute__((noinline));

void helper_mve_vrev16b(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrev32b(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrev32h(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrev64b(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrev64h(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrev64w(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmvn(CPUArchState *, void *, void *) __attribute__((noinline));

void helper_mve_vabsb(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vabsh(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vabsw(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vfabsh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfabss(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vnegb(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vnegh(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vnegw(CPUArchState *, void *, void *) __attribute__((noinline));
void helper_mve_vfnegh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfnegs(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqabsb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqabsh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqabsw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqnegb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqnegh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqnegw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmaxab(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxah(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxaw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vminab(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminah(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminaw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcvt_rm_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_rm_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_rm_ss(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_rm_us(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcvtb_sh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcvtt_sh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcvtb_hs(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcvtt_hs(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmovnbb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmovnbh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmovntb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmovnth(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqmovunbb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovunbh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovuntb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovunth(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqmovnbsb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovnbsh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovntsb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovntsh(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqmovnbub(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovnbuh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovntub(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqmovntuh(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vand(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vbic(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vorr(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vorn(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_veor(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vpsel(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vpnot(CPUArchState *) __attribute__((noinline));

void helper_mve_vctp(CPUArchState *, uint32_t) __attribute__((noinline));

void helper_mve_vaddb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vaddh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vaddw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vsubb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vsubh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vsubw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmulb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmulhsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulhsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulhsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulhub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulhuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulhuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vrmulhsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrmulhsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrmulhsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrmulhub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrmulhuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrmulhuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmaxsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vminsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vabdsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vabdsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vabdsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vabdub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vabduh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vabduw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vhaddsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhaddsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhaddsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhaddub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhadduh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhadduw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vhsubsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhsubsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhsubsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhsubub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhsubuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhsubuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmullbsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullbsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullbsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullbub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullbuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullbuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmulltsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulltsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulltsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulltub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulltuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmulltuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmullpbh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullpth(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullpbw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmullptw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmulhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmulhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmulhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrdmulhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmulhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmulhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqaddsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqaddsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqaddsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqaddub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqadduh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqadduw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqsubsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqsubsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqsubsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqsubub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqsubuh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqsubuw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vshlsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vshlsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vshlsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vshlub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vshluh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vshluw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vrshlsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrshlsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrshlsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vrshlub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrshluh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrshluw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqshlsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqshlsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqshlsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqshlub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqshluh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqshluw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrshlsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrshlsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrshlsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrshlub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrshluh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrshluw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmladhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmladhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmladhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmladhxb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmladhxh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmladhxw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrdmladhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmladhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmladhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrdmladhxb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmladhxh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmladhxw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmlsdhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmlsdhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmlsdhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmlsdhxb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmlsdhxh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmlsdhxw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrdmlsdhb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmlsdhh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmlsdhw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqrdmlsdhxb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmlsdhxh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqrdmlsdhxw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vqdmullbh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmullbw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmullth(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vqdmulltw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vrhaddsb(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrhaddsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrhaddsw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vrhaddub(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrhadduh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrhadduw(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vadc(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vadci(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vsbc(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vsbci(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcadd90b(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcadd90h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcadd90w(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcadd270b(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcadd270h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcadd270w(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vhcadd90b(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhcadd90h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhcadd90w(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vhcadd270b(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhcadd270h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vhcadd270w(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfaddh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfadds(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfsubh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfsubs(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfmulh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfmuls(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfabdh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfabds(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmaxnmh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxnms(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vminnmh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminnms(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vmaxnmah(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vmaxnmas(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vminnmah(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vminnmas(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcadd90h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcadd90s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcadd270h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcadd270s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfmah(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfmas(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfmsh(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfmss(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmul0h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul0s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul90h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul90s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul180h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul180s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul270h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmul270s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmla0h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla0s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla90h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla90s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla180h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla180s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla270h(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmla270s(CPUArchState *, void *, void *, void *)
    __attribute__((noinline));

void helper_mve_vadd_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vadd_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vadd_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vsub_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vsub_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vsub_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vmul_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmul_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmul_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vhadds_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhadds_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhadds_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vhaddu_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhaddu_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhaddu_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vhsubs_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhsubs_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhsubs_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vhsubu_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhsubu_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vhsubu_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqadds_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqadds_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqadds_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqaddu_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqaddu_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqaddu_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqsubs_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqsubs_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqsubs_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqsubu_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqsubu_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqsubu_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqdmulh_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmulh_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmulh_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrdmulh_scalarb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmulh_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmulh_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vbrsrb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vbrsrh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vbrsrw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqdmullb_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmullb_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmullt_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmullt_scalarw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vmlab(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmlah(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmlaw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vmlasb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmlash(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vmlasw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqdmlahb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmlahh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmlahw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrdmlahb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmlahh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmlahw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqdmlashb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmlashh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqdmlashw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrdmlashb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmlashh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrdmlashw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

uint64_t helper_mve_vmlaldavsh(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlaldavsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlaldavxsh(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlaldavxsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint64_t helper_mve_vmlaldavuh(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlaldavuw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint64_t helper_mve_vmlsldavsh(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlsldavsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlsldavxsh(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vmlsldavxsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint64_t helper_mve_vrmlaldavhsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vrmlaldavhxsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint64_t helper_mve_vrmlaldavhuw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint64_t helper_mve_vrmlsldavhsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vrmlsldavhxsw(CPUArchState *, void *, void *, uint64_t)
    __attribute__((noinline));

uint32_t helper_mve_vmladavsb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavsh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavsw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavuh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavuw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vmladavsxb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavsxh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmladavsxw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavxb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavxh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmlsdavxw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vaddvsb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vaddvub(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vaddvsh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vaddvuh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vaddvsw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vaddvuw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vmaxvsb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxvsh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxvsw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxvub(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxvuh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxvuw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxavb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxavh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxavw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vminvsb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminvsh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminvsw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminvub(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminvuh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminvuw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminavb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminavh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminavw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vmaxnmvh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxnmvs(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vminnmvh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminnmvs(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vmaxnmavh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vmaxnmavs(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vminnmavh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vminnmavs(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

uint64_t helper_mve_vaddlv_s(CPUArchState *, void *, uint64_t)
    __attribute__((noinline));
uint64_t helper_mve_vaddlv_u(CPUArchState *, void *, uint64_t)
    __attribute__((noinline));

uint32_t helper_mve_vabavsb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vabavsh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vabavsw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vabavub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vabavuh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_vabavuw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vmovi(CPUArchState *, void *, uint64_t)
    __attribute__((noinline));
void helper_mve_vandi(CPUArchState *, void *, uint64_t)
    __attribute__((noinline));
void helper_mve_vorri(CPUArchState *, void *, uint64_t)
    __attribute__((noinline));

void helper_mve_vshli_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshli_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshli_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vshli_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshli_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshli_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshli_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshli_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshli_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshli_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshli_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshli_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshlui_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshlui_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshlui_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vrshli_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshli_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshli_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vrshli_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshli_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshli_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrshli_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshli_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshli_sw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrshli_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshli_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshli_uw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vshllbsb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshllbsh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshllbub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshllbuh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshlltsb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshlltsh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshlltub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshlltuh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vsrib(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vsrih(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vsriw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vslib(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vslih(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vsliw(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vshrnbb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshrnbh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshrntb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vshrnth(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vrshrnbb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshrnbh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshrntb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrshrnth(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshrnb_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnb_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnt_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnt_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshrnb_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnb_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnt_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrnt_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqshrunbb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrunbh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshruntb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqshrunth(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrshrnb_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnb_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnt_sb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnt_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrshrnb_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnb_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnt_ub(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrnt_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vqrshrunbb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrunbh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshruntb(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vqrshrunth(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_vshlc(CPUArchState *, void *, uint32_t, uint32_t)
    __attribute__((noinline));

uint64_t helper_mve_sshrl(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_ushll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_sqshll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_uqshll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_sqrshrl(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_uqrshll(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_sqrshrl48(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));
uint64_t helper_mve_uqrshll48(CPUArchState *, uint64_t, uint32_t)
    __attribute__((noinline));

uint32_t helper_mve_uqshl(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_sqshl(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_uqrshl(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));
uint32_t helper_mve_sqrshr(CPUArchState *, uint32_t, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmpeqb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpeqh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpeqw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpneb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpneh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpnew(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpcsb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpcsh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpcsw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmphib(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmphih(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmphiw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpgeb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpgeh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpgew(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpltb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmplth(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpltw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpgtb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpgth(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpgtw(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpleb(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmpleh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vcmplew(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vcmpeq_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpeq_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpeq_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmpne_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpne_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpne_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmpcs_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpcs_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpcs_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmphi_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmphi_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmphi_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmpge_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpge_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpge_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmplt_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmplt_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmplt_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmpgt_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpgt_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmpgt_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcmple_scalarb(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmple_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcmple_scalarw(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmpeqh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmpeqs(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmpneh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmpnes(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmpgeh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmpges(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmplth(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmplts(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmpgth(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmpgts(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmpleh(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vfcmples(CPUArchState *, void *, void *)
    __attribute__((noinline));

void helper_mve_vfcmpeq_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmpeq_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmpne_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmpne_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmpge_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmpge_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmplt_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmplt_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmpgt_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmpgt_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfcmple_scalarh(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfcmple_scalars(CPUArchState *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfadd_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfadd_scalars(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfsub_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfsub_scalars(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfmul_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfmul_scalars(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfma_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfma_scalars(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vfmas_scalarh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vfmas_scalars(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vcvt_sh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_uh(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_hs(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_hu(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_sf(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_uf(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_fs(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vcvt_fu(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vrint_rm_h(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));
void helper_mve_vrint_rm_s(CPUArchState *, void *, void *, uint32_t)
    __attribute__((noinline));

void helper_mve_vrintx_h(CPUArchState *, void *, void *)
    __attribute__((noinline));
void helper_mve_vrintx_s(CPUArchState *, void *, void *)
    __attribute__((noinline));
# 1160 "../../../target/arm/helper.h" 2
# 57 "/home/paulning/study/qemu/include/exec/helper-proto.h.inc" 2
# 14 "/home/paulning/study/qemu/include/exec/helper-proto.h" 2
# 16 "../../../target/arm/helper.c" 2

# 1 "/home/paulning/study/qemu/include/qemu/main-loop.h" 1
# 28 "/home/paulning/study/qemu/include/qemu/main-loop.h"
# 1 "/home/paulning/study/qemu/include/block/aio.h" 1
# 20 "/home/paulning/study/qemu/include/block/aio.h"
# 1 "/home/paulning/study/qemu/include/qemu/coroutine-core.h" 1
# 57 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"
typedef struct Coroutine Coroutine;
typedef struct CoMutex CoMutex;
# 69 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"
typedef void CoroutineEntry(void *opaque);

Coroutine *qemu_coroutine_create(CoroutineEntry *entry, void *opaque);

void qemu_coroutine_enter(Coroutine *coroutine);

void qemu_coroutine_enter_if_inactive(Coroutine *co);

void qemu_aio_coroutine_enter(AioContext *ctx, Coroutine *co);

void qemu_coroutine_yield(void);

AioContext *qemu_coroutine_get_aio_context(Coroutine *co);

Coroutine *qemu_coroutine_self(void);
# 120 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"

# 120 "/home/paulning/study/qemu/include/qemu/coroutine-core.h" 3 4
_Bool
# 120 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"
    qemu_in_coroutine(void);
# 134 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"

# 134 "/home/paulning/study/qemu/include/qemu/coroutine-core.h" 3 4
_Bool
# 134 "/home/paulning/study/qemu/include/qemu/coroutine-core.h"
    qemu_coroutine_entered(Coroutine *co);

void qemu_co_mutex_init(CoMutex *mutex);

void qemu_co_mutex_lock(CoMutex *mutex);

void qemu_co_mutex_unlock(CoMutex *mutex);
# 21 "/home/paulning/study/qemu/include/block/aio.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/event_notifier.h" 1
# 21 "/home/paulning/study/qemu/include/qemu/event_notifier.h"
struct EventNotifier {

  int rfd;
  int wfd;

# 27 "/home/paulning/study/qemu/include/qemu/event_notifier.h" 3 4
  _Bool
# 27 "/home/paulning/study/qemu/include/qemu/event_notifier.h"
      initialized;
};

typedef void EventNotifierHandler(EventNotifier *);

int event_notifier_init(EventNotifier *, int active);
void event_notifier_cleanup(EventNotifier *);
int event_notifier_set(EventNotifier *);
int event_notifier_test_and_clear(EventNotifier *);

void event_notifier_init_fd(EventNotifier *, int fd);
int event_notifier_get_fd(const EventNotifier *);
int event_notifier_get_wfd(const EventNotifier *);
# 23 "/home/paulning/study/qemu/include/block/aio.h" 2

# 1 "/home/paulning/study/qemu/include/qemu/timer.h" 1
# 47 "/home/paulning/study/qemu/include/qemu/timer.h"
typedef enum {
  QEMU_CLOCK_REALTIME = 0,
  QEMU_CLOCK_VIRTUAL = 1,
  QEMU_CLOCK_HOST = 2,
  QEMU_CLOCK_VIRTUAL_RT = 3,
  QEMU_CLOCK_MAX
} QEMUClockType;
# 75 "/home/paulning/study/qemu/include/qemu/timer.h"
typedef struct QEMUTimerList QEMUTimerList;

struct QEMUTimerListGroup {
  QEMUTimerList *tl[QEMU_CLOCK_MAX];
};

typedef void QEMUTimerCB(void *opaque);
typedef void QEMUTimerListNotifyCB(void *opaque, QEMUClockType type);

struct QEMUTimer {
  int64_t expire_time;
  QEMUTimerList *timer_list;
  QEMUTimerCB *cb;
  void *opaque;
  QEMUTimer *next;
  int attributes;
  int scale;
};

extern QEMUTimerListGroup main_loop_tlg;
# 105 "/home/paulning/study/qemu/include/qemu/timer.h"
int64_t qemu_clock_get_ns(QEMUClockType type);
# 116 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline int64_t qemu_clock_get_ms(QEMUClockType type) {
  return qemu_clock_get_ns(type) / 1000000;
}
# 130 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline int64_t qemu_clock_get_us(QEMUClockType type) {
  return qemu_clock_get_ns(type) / 1000;
}
# 149 "/home/paulning/study/qemu/include/qemu/timer.h"

# 149 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 149 "/home/paulning/study/qemu/include/qemu/timer.h"
    qemu_clock_has_timers(QEMUClockType type);
# 161 "/home/paulning/study/qemu/include/qemu/timer.h"

# 161 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 161 "/home/paulning/study/qemu/include/qemu/timer.h"
    qemu_clock_expired(QEMUClockType type);
# 177 "/home/paulning/study/qemu/include/qemu/timer.h"

# 177 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 177 "/home/paulning/study/qemu/include/qemu/timer.h"
    qemu_clock_use_for_deadline(QEMUClockType type);
# 191 "/home/paulning/study/qemu/include/qemu/timer.h"
int64_t qemu_clock_deadline_ns_all(QEMUClockType type, int attr_mask);
# 200 "/home/paulning/study/qemu/include/qemu/timer.h"
void qemu_clock_notify(QEMUClockType type);
# 215 "/home/paulning/study/qemu/include/qemu/timer.h"
void qemu_clock_enable(QEMUClockType type,
# 215 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
                       _Bool
# 215 "/home/paulning/study/qemu/include/qemu/timer.h"
                           enabled);
# 226 "/home/paulning/study/qemu/include/qemu/timer.h"

# 226 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 226 "/home/paulning/study/qemu/include/qemu/timer.h"
    qemu_clock_run_timers(QEMUClockType type);
# 236 "/home/paulning/study/qemu/include/qemu/timer.h"

# 236 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 236 "/home/paulning/study/qemu/include/qemu/timer.h"
    qemu_clock_run_all_timers(void);
# 252 "/home/paulning/study/qemu/include/qemu/timer.h"
int64_t qemu_clock_advance_virtual_time(int64_t target_ns);
# 269 "/home/paulning/study/qemu/include/qemu/timer.h"
QEMUTimerList *timerlist_new(QEMUClockType type, QEMUTimerListNotifyCB *cb,
                             void *opaque);

void timerlist_free(QEMUTimerList *timer_list);
# 292 "/home/paulning/study/qemu/include/qemu/timer.h"

# 292 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 292 "/home/paulning/study/qemu/include/qemu/timer.h"
    timerlist_has_timers(QEMUTimerList *timer_list);
# 304 "/home/paulning/study/qemu/include/qemu/timer.h"

# 304 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 304 "/home/paulning/study/qemu/include/qemu/timer.h"
    timerlist_expired(QEMUTimerList *timer_list);
# 317 "/home/paulning/study/qemu/include/qemu/timer.h"
int64_t timerlist_deadline_ns(QEMUTimerList *timer_list);
# 327 "/home/paulning/study/qemu/include/qemu/timer.h"

# 327 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 327 "/home/paulning/study/qemu/include/qemu/timer.h"
    timerlist_run_timers(QEMUTimerList *timer_list);

void timerlist_notify(QEMUTimerList *timer_list);
# 354 "/home/paulning/study/qemu/include/qemu/timer.h"
void timerlistgroup_init(QEMUTimerListGroup *tlg, QEMUTimerListNotifyCB *cb,
                         void *opaque);
# 364 "/home/paulning/study/qemu/include/qemu/timer.h"
void timerlistgroup_deinit(QEMUTimerListGroup *tlg);
# 375 "/home/paulning/study/qemu/include/qemu/timer.h"

# 375 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 375 "/home/paulning/study/qemu/include/qemu/timer.h"
    timerlistgroup_run_timers(QEMUTimerListGroup *tlg);
# 389 "/home/paulning/study/qemu/include/qemu/timer.h"
int64_t timerlistgroup_deadline_ns(QEMUTimerListGroup *tlg);
# 413 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_init_full(QEMUTimer *ts, QEMUTimerListGroup *timer_list_group,
                     QEMUClockType type, int scale, int attributes,
                     QEMUTimerCB *cb, void *opaque);
# 430 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline void timer_init(QEMUTimer *ts, QEMUClockType type, int scale,
                              QEMUTimerCB *cb, void *opaque) {
  timer_init_full(ts,
# 433 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
                  ((void *)0)
# 433 "/home/paulning/study/qemu/include/qemu/timer.h"
                      ,
                  type, scale, 0, cb, opaque);
}
# 447 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline void timer_init_ns(QEMUTimer *ts, QEMUClockType type,
                                 QEMUTimerCB *cb, void *opaque) {
  timer_init(ts, type, 1, cb, opaque);
}
# 464 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline void timer_init_us(QEMUTimer *ts, QEMUClockType type,
                                 QEMUTimerCB *cb, void *opaque) {
  timer_init(ts, type, 1000, cb, opaque);
}
# 481 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline void timer_init_ms(QEMUTimer *ts, QEMUClockType type,
                                 QEMUTimerCB *cb, void *opaque) {
  timer_init(ts, type, 1000000, cb, opaque);
}
# 514 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline QEMUTimer *timer_new_full(QEMUTimerListGroup *timer_list_group,
                                        QEMUClockType type, int scale,
                                        int attributes, QEMUTimerCB *cb,
                                        void *opaque) {
  QEMUTimer *ts = ((QEMUTimer *)g_malloc0_n((1), sizeof(QEMUTimer)));
  timer_init_full(ts, timer_list_group, type, scale, attributes, cb, opaque);
  return ts;
}
# 539 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline QEMUTimer *timer_new(QEMUClockType type, int scale,
                                   QEMUTimerCB *cb, void *opaque) {
  return timer_new_full(
# 542 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
      ((void *)0)
# 542 "/home/paulning/study/qemu/include/qemu/timer.h"
          ,
      type, scale, 0, cb, opaque);
}
# 559 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline QEMUTimer *timer_new_ns(QEMUClockType type, QEMUTimerCB *cb,
                                      void *opaque) {
  return timer_new(type, 1, cb, opaque);
}
# 579 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline QEMUTimer *timer_new_us(QEMUClockType type, QEMUTimerCB *cb,
                                      void *opaque) {
  return timer_new(type, 1000, cb, opaque);
}
# 599 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline QEMUTimer *timer_new_ms(QEMUClockType type, QEMUTimerCB *cb,
                                      void *opaque) {
  return timer_new(type, 1000000, cb, opaque);
}
# 614 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_deinit(QEMUTimer *ts);
# 625 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_del(QEMUTimer *ts);
# 634 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline void timer_free(QEMUTimer *ts) {
  if (ts) {
    timer_del(ts);
    g_free(ts);
  }
}
# 652 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_mod_ns(QEMUTimer *ts, int64_t expire_time);
# 665 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_mod_anticipate_ns(QEMUTimer *ts, int64_t expire_time);
# 678 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_mod(QEMUTimer *ts, int64_t expire_timer);
# 691 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_mod_anticipate(QEMUTimer *ts, int64_t expire_time);
# 702 "/home/paulning/study/qemu/include/qemu/timer.h"

# 702 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 702 "/home/paulning/study/qemu/include/qemu/timer.h"
    timer_pending(QEMUTimer *ts);
# 713 "/home/paulning/study/qemu/include/qemu/timer.h"

# 713 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
_Bool
# 713 "/home/paulning/study/qemu/include/qemu/timer.h"
    timer_expired(QEMUTimer *timer_head, int64_t current_time);
# 723 "/home/paulning/study/qemu/include/qemu/timer.h"
uint64_t timer_expire_time_ns(QEMUTimer *ts);
# 732 "/home/paulning/study/qemu/include/qemu/timer.h"
void timer_get(QEMUFile *f, QEMUTimer *ts);

void timer_put(QEMUFile *f, QEMUTimer *ts);
# 754 "/home/paulning/study/qemu/include/qemu/timer.h"
int qemu_timeout_ns_to_ms(int64_t ns);
# 767 "/home/paulning/study/qemu/include/qemu/timer.h"
int qemu_poll_ns(GPollFD *fds, guint nfds, int64_t timeout);
# 779 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline int64_t qemu_soonest_timeout(int64_t timeout1, int64_t timeout2) {

  return ((uint64_t)timeout1 < (uint64_t)timeout2) ? timeout1 : timeout2;
}

void init_clocks(QEMUTimerListNotifyCB *notify_cb);

static inline int64_t get_max_clock_jump(void) { return 60 * 1000000000LL; }

static inline int64_t get_clock_realtime(void) {
  struct timeval tv;

  gettimeofday(&tv,
# 813 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
               ((void *)0)
# 813 "/home/paulning/study/qemu/include/qemu/timer.h"
  );
  return tv.tv_sec * 1000000000LL + (tv.tv_usec * 1000);
}

extern int64_t clock_start;
# 834 "/home/paulning/study/qemu/include/qemu/timer.h"
extern int use_rt_clock;

static inline int64_t get_clock(void) {
  if (use_rt_clock) {
    struct timespec ts;
    clock_gettime(
# 840 "/home/paulning/study/qemu/include/qemu/timer.h" 3 4
        1
# 840 "/home/paulning/study/qemu/include/qemu/timer.h"
        ,
        &ts);
    return ts.tv_sec * 1000000000LL + ts.tv_nsec;
  } else {

    return get_clock_realtime();
  }
}
# 890 "/home/paulning/study/qemu/include/qemu/timer.h"
static inline int64_t cpu_get_host_ticks(void) {
  uint32_t low, high;
  int64_t val;
  asm volatile("rdtsc" : "=a"(low), "=d"(high));
  val = high;
  val <<= 32;
  val |= low;
  return val;
}
# 26 "/home/paulning/study/qemu/include/block/aio.h" 2
# 1 "/home/paulning/study/qemu/include/block/graph-lock.h" 1
# 54 "/home/paulning/study/qemu/include/block/graph-lock.h"
typedef struct BdrvGraphRWlock BdrvGraphRWlock;

typedef struct BdrvGraphLock {
} BdrvGraphLock;

extern BdrvGraphLock graph_lock;
# 93 "/home/paulning/study/qemu/include/block/graph-lock.h"
void register_aiocontext(AioContext *ctx);

void unregister_aiocontext(AioContext *ctx);
# 112 "/home/paulning/study/qemu/include/block/graph-lock.h"
void bdrv_graph_wrlock(void);

void bdrv_graph_wrunlock(void);
# 145 "/home/paulning/study/qemu/include/block/graph-lock.h"
void bdrv_graph_co_rdlock(void);

void bdrv_graph_co_rdunlock(void);

void bdrv_graph_rdlock_main_loop(void);

void bdrv_graph_rdunlock_main_loop(void);

void assert_bdrv_graph_readable(void);

void assert_bdrv_graph_writable(void);

static inline void assume_graph_lock(void) {}

typedef struct GraphLockable {
} GraphLockable;
# 210 "/home/paulning/study/qemu/include/block/graph-lock.h"
static inline GraphLockable *graph_lockable_auto_lock(GraphLockable *x) {
  bdrv_graph_co_rdlock();
  return x;
}

static inline void graph_lockable_auto_unlock(GraphLockable **x) {
  bdrv_graph_co_rdunlock();
}
# 246 "/home/paulning/study/qemu/include/block/graph-lock.h"
typedef struct GraphLockableMainloop {
} GraphLockableMainloop;
# 261 "/home/paulning/study/qemu/include/block/graph-lock.h"
static inline GraphLockableMainloop *
graph_lockable_auto_lock_mainloop(GraphLockableMainloop *x) {
  bdrv_graph_rdlock_main_loop();
  return x;
}

static inline void
graph_lockable_auto_unlock_mainloop(GraphLockableMainloop *x) {
  bdrv_graph_rdunlock_main_loop();
}

typedef GraphLockableMainloop *GraphLockableMainloop_autoptr;
typedef GList *GraphLockableMainloop_listautoptr;
typedef GSList *GraphLockableMainloop_slistautoptr;
typedef GQueue *GraphLockableMainloop_queueautoptr;
# 274 "/home/paulning/study/qemu/include/block/graph-lock.h"
#pragma GCC diagnostic push
# 274 "/home/paulning/study/qemu/include/block/graph-lock.h"

# 274 "/home/paulning/study/qemu/include/block/graph-lock.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 274 "/home/paulning/study/qemu/include/block/graph-lock.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_GraphLockableMainloop(GraphLockableMainloop *_ptr) {
  if (_ptr)
    (graph_lockable_auto_unlock_mainloop)((GraphLockableMainloop *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_GraphLockableMainloop(GraphLockableMainloop **_ptr) {
  glib_autoptr_clear_GraphLockableMainloop(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_GraphLockableMainloop(GList **_l) {
  g_list_free_full(
      *_l, (GDestroyNotify)(void (*)(void))graph_lockable_auto_unlock_mainloop);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_GraphLockableMainloop(GSList **_l) {
  g_slist_free_full(
      *_l, (GDestroyNotify)(void (*)(void))graph_lockable_auto_unlock_mainloop);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_GraphLockableMainloop(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(
                               void))graph_lockable_auto_unlock_mainloop);
}
# 274 "/home/paulning/study/qemu/include/block/graph-lock.h"
#pragma GCC diagnostic pop
# 27 "/home/paulning/study/qemu/include/block/aio.h" 2

typedef struct BlockAIOCB BlockAIOCB;
typedef void BlockCompletionFunc(void *opaque, int ret);

typedef struct AIOCBInfo {
  void (*cancel_async)(BlockAIOCB *acb);
  size_t aiocb_size;
} AIOCBInfo;

struct BlockAIOCB {
  const AIOCBInfo *aiocb_info;
  BlockDriverState *bs;
  BlockCompletionFunc *cb;
  void *opaque;
  int refcnt;
};

void *qemu_aio_get(const AIOCBInfo *aiocb_info, BlockDriverState *bs,
                   BlockCompletionFunc *cb, void *opaque);
void qemu_aio_unref(void *p);
void qemu_aio_ref(void *p);

typedef struct AioHandler AioHandler;
typedef struct {
  struct AioHandler *lh_first;
} AioHandlerList;
typedef void QEMUBHFunc(void *opaque);
typedef
# 54 "/home/paulning/study/qemu/include/block/aio.h" 3 4
    _Bool
# 54 "/home/paulning/study/qemu/include/block/aio.h"
    AioPollFn(void *opaque);
typedef void IOHandler(void *opaque);

struct ThreadPoolAio;
struct LinuxAioState;
typedef struct LuringState LuringState;

# 62 "/home/paulning/study/qemu/include/block/aio.h" 3 4
_Bool
# 62 "/home/paulning/study/qemu/include/block/aio.h"
    aio_poll_disabled(AioContext *ctx);

typedef struct {
# 78 "/home/paulning/study/qemu/include/block/aio.h"
  void (*update)(AioContext *ctx, AioHandler *old_node, AioHandler *new_node);
# 92 "/home/paulning/study/qemu/include/block/aio.h"
  int (*wait)(AioContext *ctx, AioHandlerList *ready_list, int64_t timeout);
# 108 "/home/paulning/study/qemu/include/block/aio.h"

# 108 "/home/paulning/study/qemu/include/block/aio.h" 3 4
  _Bool
# 108 "/home/paulning/study/qemu/include/block/aio.h"
      (*need_wait)(AioContext *ctx);
} FDMonOps;

typedef struct {
  struct QEMUBH *slh_first;
} BHList;
typedef struct BHListSlice BHListSlice;
struct BHListSlice {
  BHList bh_list;
  struct {
    struct BHListSlice *sqe_next;
  } next;
};

typedef struct {
  struct AioHandler *slh_first;
} AioHandlerSList;

typedef struct AioPolledEvent {
  int64_t ns;
} AioPolledEvent;

struct AioContext {
  GSource source;

  QemuRecMutex lock;

  BdrvGraphRWlock *bdrv_graph;

  AioHandlerList aio_handlers;

  AioHandlerList deleted_aio_handlers;
# 177 "/home/paulning/study/qemu/include/block/aio.h"
  uint32_t notify_me;

  QemuLockCnt list_lock;

  BHList bh_list;

  struct {
    struct BHListSlice *sqh_first;
    struct BHListSlice **sqh_last;
  } bh_slice_list;
# 203 "/home/paulning/study/qemu/include/block/aio.h"

# 203 "/home/paulning/study/qemu/include/block/aio.h" 3 4
  _Bool
# 203 "/home/paulning/study/qemu/include/block/aio.h"
      notified;
  EventNotifier notifier;

  struct {
    struct Coroutine *slh_first;
  } scheduled_coroutines;
  QEMUBH *co_schedule_bh;

  int thread_pool_min;
  int thread_pool_max;

  struct ThreadPoolAio *thread_pool;
# 230 "/home/paulning/study/qemu/include/block/aio.h"
  QEMUTimerListGroup tlg;

  int poll_disable_cnt;

  int64_t poll_max_ns;
  int64_t poll_grow;
  int64_t poll_shrink;

  int64_t aio_max_batch;

  AioHandlerList poll_aio_handlers;

# 252 "/home/paulning/study/qemu/include/block/aio.h" 3 4
  _Bool
# 252 "/home/paulning/study/qemu/include/block/aio.h"
      poll_started;

  int epollfd;

  const FDMonOps *fdmon_ops;
};
# 267 "/home/paulning/study/qemu/include/block/aio.h"
AioContext *aio_context_new(Error **errp);

void aio_context_ref(AioContext *ctx);

void aio_context_unref(AioContext *ctx);

void aio_bh_schedule_oneshot_full(AioContext *ctx, QEMUBHFunc *cb, void *opaque,
                                  const char *name);
# 315 "/home/paulning/study/qemu/include/block/aio.h"
QEMUBH *aio_bh_new_full(AioContext *ctx, QEMUBHFunc *cb, void *opaque,
                        const char *name, MemReentrancyGuard *reentrancy_guard);
# 350 "/home/paulning/study/qemu/include/block/aio.h"
void aio_notify(AioContext *ctx);
# 368 "/home/paulning/study/qemu/include/block/aio.h"
void aio_notify_accept(AioContext *ctx);

void aio_bh_call(QEMUBH *bh);
# 382 "/home/paulning/study/qemu/include/block/aio.h"
int aio_bh_poll(AioContext *ctx);
# 396 "/home/paulning/study/qemu/include/block/aio.h"
void qemu_bh_schedule(QEMUBH *bh);
# 409 "/home/paulning/study/qemu/include/block/aio.h"
void qemu_bh_cancel(QEMUBH *bh);
# 422 "/home/paulning/study/qemu/include/block/aio.h"
void qemu_bh_delete(QEMUBH *bh);

# 429 "/home/paulning/study/qemu/include/block/aio.h" 3 4
_Bool
# 429 "/home/paulning/study/qemu/include/block/aio.h"
    aio_prepare(AioContext *ctx);

# 436 "/home/paulning/study/qemu/include/block/aio.h" 3 4
_Bool
# 436 "/home/paulning/study/qemu/include/block/aio.h"
    aio_pending(AioContext *ctx);

void aio_dispatch(AioContext *ctx);
# 457 "/home/paulning/study/qemu/include/block/aio.h"

# 457 "/home/paulning/study/qemu/include/block/aio.h" 3 4
_Bool
# 457 "/home/paulning/study/qemu/include/block/aio.h"
                    aio_poll(AioContext *ctx,
# 457 "/home/paulning/study/qemu/include/block/aio.h" 3 4
                                              _Bool
# 457 "/home/paulning/study/qemu/include/block/aio.h"
                                                   blocking);
# 466 "/home/paulning/study/qemu/include/block/aio.h"
void aio_set_fd_handler(AioContext *ctx, int fd, IOHandler *io_read,
                        IOHandler *io_write, AioPollFn *io_poll,
                        IOHandler *io_poll_ready, void *opaque);
# 481 "/home/paulning/study/qemu/include/block/aio.h"
void aio_set_event_notifier(AioContext *ctx, EventNotifier *notifier,
                            EventNotifierHandler *io_read, AioPollFn *io_poll,
                            EventNotifierHandler *io_poll_ready);
# 496 "/home/paulning/study/qemu/include/block/aio.h"
void aio_set_event_notifier_poll(AioContext *ctx, EventNotifier *notifier,
                                 EventNotifierHandler *io_poll_begin,
                                 EventNotifierHandler *io_poll_end);

GSource *aio_get_g_source(AioContext *ctx);

struct ThreadPoolAio *aio_get_thread_pool(AioContext *ctx);

struct LinuxAioState *aio_setup_linux_aio(AioContext *ctx, Error **errp);

struct LinuxAioState *aio_get_linux_aio(AioContext *ctx);

LuringState *aio_setup_linux_io_uring(AioContext *ctx, Error **errp);

LuringState *aio_get_linux_io_uring(AioContext *ctx);
# 538 "/home/paulning/study/qemu/include/block/aio.h"
static inline QEMUTimer *
aio_timer_new_with_attrs(AioContext *ctx, QEMUClockType type, int scale,
                         int attributes, QEMUTimerCB *cb, void *opaque) {
  return timer_new_full(&ctx->tlg, type, scale, attributes, cb, opaque);
}
# 559 "/home/paulning/study/qemu/include/block/aio.h"
static inline QEMUTimer *aio_timer_new(AioContext *ctx, QEMUClockType type,
                                       int scale, QEMUTimerCB *cb,
                                       void *opaque) {
  return timer_new_full(&ctx->tlg, type, scale, 0, cb, opaque);
}
# 580 "/home/paulning/study/qemu/include/block/aio.h"
static inline void aio_timer_init_with_attrs(AioContext *ctx, QEMUTimer *ts,
                                             QEMUClockType type, int scale,
                                             int attributes, QEMUTimerCB *cb,
                                             void *opaque) {
  timer_init_full(ts, &ctx->tlg, type, scale, attributes, cb, opaque);
}
# 600 "/home/paulning/study/qemu/include/block/aio.h"
static inline void aio_timer_init(AioContext *ctx, QEMUTimer *ts,
                                  QEMUClockType type, int scale,
                                  QEMUTimerCB *cb, void *opaque) {
  timer_init_full(ts, &ctx->tlg, type, scale, 0, cb, opaque);
}

int64_t aio_compute_timeout(AioContext *ctx);
# 628 "/home/paulning/study/qemu/include/block/aio.h"
void aio_co_schedule(AioContext *ctx, Coroutine *co);
# 640 "/home/paulning/study/qemu/include/block/aio.h"
void aio_co_reschedule_self(AioContext *new_ctx);
# 654 "/home/paulning/study/qemu/include/block/aio.h"
void aio_co_wake(Coroutine *co);
# 663 "/home/paulning/study/qemu/include/block/aio.h"
void aio_co_enter(AioContext *ctx, Coroutine *co);
# 675 "/home/paulning/study/qemu/include/block/aio.h"
AioContext *qemu_get_current_aio_context(void);

void qemu_set_current_aio_context(AioContext *ctx);

void aio_context_setup(AioContext *ctx);

void aio_context_destroy(AioContext *ctx);

void aio_context_use_g_source(AioContext *ctx);
# 707 "/home/paulning/study/qemu/include/block/aio.h"
void aio_context_set_poll_params(AioContext *ctx, int64_t max_ns, int64_t grow,
                                 int64_t shrink, Error **errp);

void aio_context_set_aio_params(AioContext *ctx, int64_t max_batch);

void aio_context_set_thread_pool_params(AioContext *ctx, int64_t min,
                                        int64_t max, Error **errp);
# 29 "/home/paulning/study/qemu/include/qemu/main-loop.h" 2

# 1 "/home/paulning/study/qemu/include/system/event-loop-base.h" 1
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
typedef struct EventLoopBase EventLoopBase;
typedef struct EventLoopBaseClass EventLoopBaseClass;
typedef EventLoopBase *EventLoopBase_autoptr;
typedef GList *EventLoopBase_listautoptr;
typedef GSList *EventLoopBase_slistautoptr;
typedef GQueue *EventLoopBase_queueautoptr;
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
#pragma GCC diagnostic push
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"

# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_EventLoopBase(EventLoopBase *_ptr) {
  if (_ptr)
    (object_unref)((EventLoopBase *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_EventLoopBase(EventLoopBase **_ptr) {
  glib_autoptr_clear_EventLoopBase(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_EventLoopBase(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_EventLoopBase(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_EventLoopBase(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
#pragma GCC diagnostic pop
# 19 "/home/paulning/study/qemu/include/system/event-loop-base.h"
static inline __attribute__((__unused__)) EventLoopBase *
EVENT_LOOP_BASE(const void *obj) {
  return ((EventLoopBase *)object_dynamic_cast_assert(
      ((Object *)(obj)), ("event-loop-base"),
      "/home/paulning/study/qemu/include/system/event-loop-base.h", 19,
      __func__));
}
static inline __attribute__((__unused__)) EventLoopBaseClass *
EVENT_LOOP_BASE_GET_CLASS(const void *obj) {
  return ((EventLoopBaseClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))),
      ("event-loop-base"),
      "/home/paulning/study/qemu/include/system/event-loop-base.h", 19,
      __func__));
}
static inline __attribute__((__unused__)) EventLoopBaseClass *
EVENT_LOOP_BASE_CLASS(const void *klass) {
  return ((EventLoopBaseClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("event-loop-base"),
      "/home/paulning/study/qemu/include/system/event-loop-base.h", 19,
      __func__));
}

struct EventLoopBaseClass {
  ObjectClass parent_class;

  void (*init)(EventLoopBase *base, Error **errp);
  void (*update_params)(EventLoopBase *base, Error **errp);

# 27 "/home/paulning/study/qemu/include/system/event-loop-base.h" 3 4
  _Bool
# 27 "/home/paulning/study/qemu/include/system/event-loop-base.h"
      (*can_be_deleted)(EventLoopBase *base);
};

struct EventLoopBase {
  Object parent;

  int64_t aio_max_batch;

  int64_t thread_pool_min;
  int64_t thread_pool_max;
};
# 31 "/home/paulning/study/qemu/include/qemu/main-loop.h" 2

typedef struct MainLoop MainLoop;
typedef struct MainLoopClass MainLoopClass;
typedef MainLoop *MainLoop_autoptr;
typedef GList *MainLoop_listautoptr;
typedef GSList *MainLoop_slistautoptr;
typedef GQueue *MainLoop_queueautoptr;
# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic push
# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"

# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_MainLoop(MainLoop *_ptr) {
  if (_ptr)
    (object_unref)((MainLoop *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_MainLoop(MainLoop **_ptr) {
  glib_autoptr_clear_MainLoop(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_MainLoop(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_MainLoop(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_MainLoop(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic pop
# 35 "/home/paulning/study/qemu/include/qemu/main-loop.h"
static inline __attribute__((__unused__)) MainLoop *MAIN_LOOP(const void *obj) {
  return ((MainLoop *)object_dynamic_cast_assert(
      ((Object *)(obj)), ("main-loop"),
      "/home/paulning/study/qemu/include/qemu/main-loop.h", 35, __func__));
}
static inline __attribute__((__unused__)) MainLoopClass *
MAIN_LOOP_GET_CLASS(const void *obj) {
  return ((MainLoopClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(object_get_class(((Object *)(obj))))), ("main-loop"),
      "/home/paulning/study/qemu/include/qemu/main-loop.h", 35, __func__));
}
static inline __attribute__((__unused__)) MainLoopClass *
MAIN_LOOP_CLASS(const void *klass) {
  return ((MainLoopClass *)object_class_dynamic_cast_assert(
      ((ObjectClass *)(klass)), ("main-loop"),
      "/home/paulning/study/qemu/include/qemu/main-loop.h", 35, __func__));
}

struct MainLoop {
  EventLoopBase parent_obj;
};
typedef struct MainLoop MainLoop;
# 55 "/home/paulning/study/qemu/include/qemu/main-loop.h"
int qemu_init_main_loop(Error **errp);
# 92 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void main_loop_wait(int nonblocking);

AioContext *qemu_get_aio_context(void);
# 111 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void qemu_notify_event(void);
# 182 "/home/paulning/study/qemu/include/qemu/main-loop.h"
typedef void IOReadHandler(void *opaque, const uint8_t *buf, int size);
# 197 "/home/paulning/study/qemu/include/qemu/main-loop.h"
typedef int IOCanReadHandler(void *opaque);
# 227 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void qemu_set_fd_handler(int fd, IOHandler *fd_read, IOHandler *fd_write,
                         void *opaque);
# 244 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void event_notifier_set_handler(EventNotifier *e,
                                EventNotifierHandler *handler);

GSource *iohandler_get_g_source(void);
AioContext *iohandler_get_aio_context(void);

void rust_bql_mock_lock(void);
# 271 "/home/paulning/study/qemu/include/qemu/main-loop.h"

# 271 "/home/paulning/study/qemu/include/qemu/main-loop.h" 3 4
_Bool
# 271 "/home/paulning/study/qemu/include/qemu/main-loop.h"
    bql_locked(void);
# 286 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void bql_block_unlock(
# 286 "/home/paulning/study/qemu/include/qemu/main-loop.h" 3 4
    _Bool
# 286 "/home/paulning/study/qemu/include/qemu/main-loop.h"
        increase);
# 305 "/home/paulning/study/qemu/include/qemu/main-loop.h"

# 305 "/home/paulning/study/qemu/include/qemu/main-loop.h" 3 4
_Bool
# 305 "/home/paulning/study/qemu/include/qemu/main-loop.h"
    qemu_in_main_thread(void);
# 351 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void bql_lock_impl(const char *file, int line);
# 366 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void bql_unlock(void);

typedef struct BQLLockAuto BQLLockAuto;

static inline BQLLockAuto *bql_auto_lock(const char *file, int line) {
  if (bql_locked()) {
    return
# 378 "/home/paulning/study/qemu/include/qemu/main-loop.h" 3 4
        ((void *)0)
# 378 "/home/paulning/study/qemu/include/qemu/main-loop.h"
            ;
  }
  bql_lock_impl(file, line);

  return (BQLLockAuto *)(uintptr_t)1;
}

static inline void bql_auto_unlock(BQLLockAuto *l) { bql_unlock(); }

typedef BQLLockAuto *BQLLockAuto_autoptr;
typedef GList *BQLLockAuto_listautoptr;
typedef GSList *BQLLockAuto_slistautoptr;
typedef GQueue *BQLLockAuto_queueautoptr;
# 390 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic push
# 390 "/home/paulning/study/qemu/include/qemu/main-loop.h"

# 390 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 390 "/home/paulning/study/qemu/include/qemu/main-loop.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_BQLLockAuto(BQLLockAuto *_ptr) {
  if (_ptr)
    (bql_auto_unlock)((BQLLockAuto *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_BQLLockAuto(BQLLockAuto **_ptr) {
  glib_autoptr_clear_BQLLockAuto(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_BQLLockAuto(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))bql_auto_unlock);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_BQLLockAuto(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))bql_auto_unlock);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_BQLLockAuto(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))bql_auto_unlock);
}
# 390 "/home/paulning/study/qemu/include/qemu/main-loop.h"
#pragma GCC diagnostic pop
# 402 "/home/paulning/study/qemu/include/qemu/main-loop.h"
void qemu_cond_wait_bql(QemuCond *cond);

void qemu_cond_timedwait_bql(QemuCond *cond, int ms);

QEMUBH *qemu_bh_new_full(QEMUBHFunc *cb, void *opaque, const char *name,
                         MemReentrancyGuard *reentrancy_guard);
void qemu_bh_schedule_idle(QEMUBH *bh);

enum {
  MAIN_LOOP_POLL_FILL,
  MAIN_LOOP_POLL_ERR,
  MAIN_LOOP_POLL_OK,
};

typedef struct MainLoopPoll {
  int state;
  uint32_t timeout;
  GArray *pollfds;
} MainLoopPoll;

void main_loop_poll_add_notifier(Notifier *notify);
void main_loop_poll_remove_notifier(Notifier *notify);
# 18 "../../../target/arm/helper.c" 2

# 1 "/home/paulning/study/qemu/include/qemu/qemu-print.h" 1
# 16 "/home/paulning/study/qemu/include/qemu/qemu-print.h"
int qemu_vprintf(const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 1, 0)));
int qemu_printf(const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 1, 2)));

int qemu_vfprintf(FILE *stream, const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 2, 0)));
int qemu_fprintf(FILE *stream, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
# 21 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/exec/cputlb.h" 1
# 57 "/home/paulning/study/qemu/include/exec/cputlb.h"
void tlb_set_page_full(CPUState *cpu, int mmu_idx, vaddr addr,
                       CPUTLBEntryFull *full);
# 82 "/home/paulning/study/qemu/include/exec/cputlb.h"
void tlb_set_page_with_attrs(CPUState *cpu, vaddr addr, hwaddr paddr,
                             MemTxAttrs attrs, int prot, int mmu_idx,
                             vaddr size);
# 93 "/home/paulning/study/qemu/include/exec/cputlb.h"
void tlb_set_page(CPUState *cpu, vaddr addr, hwaddr paddr, int prot,
                  int mmu_idx, vaddr size);
# 233 "/home/paulning/study/qemu/include/exec/cputlb.h"
static inline void tlb_flush_page(CPUState *cpu, vaddr addr) {}
static inline void tlb_flush_page_all_cpus_synced(CPUState *src, vaddr addr) {}
static inline void tlb_flush(CPUState *cpu) {}
static inline void tlb_flush_all_cpus_synced(CPUState *src_cpu) {}
static inline void tlb_flush_page_by_mmuidx(CPUState *cpu, vaddr addr,
                                            uint16_t idxmap) {}

static inline void tlb_flush_by_mmuidx(CPUState *cpu, uint16_t idxmap) {}
static inline void tlb_flush_page_by_mmuidx_all_cpus_synced(CPUState *cpu,
                                                            vaddr addr,
                                                            uint16_t idxmap) {}
static inline void tlb_flush_by_mmuidx_all_cpus_synced(CPUState *cpu,
                                                       uint16_t idxmap) {}
static inline void tlb_flush_page_bits_by_mmuidx(CPUState *cpu, vaddr addr,
                                                 uint16_t idxmap,
                                                 unsigned bits) {}
static inline void
tlb_flush_page_bits_by_mmuidx_all_cpus_synced(CPUState *cpu, vaddr addr,
                                              uint16_t idxmap, unsigned bits) {}
static inline void tlb_flush_range_by_mmuidx(CPUState *cpu, vaddr addr,
                                             vaddr len, uint16_t idxmap,
                                             unsigned bits) {}
static inline void
tlb_flush_range_by_mmuidx_all_cpus_synced(CPUState *cpu, vaddr addr, vaddr len,
                                          uint16_t idxmap, unsigned bits) {}
# 22 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/exec/exec-all.h" 1
# 25 "/home/paulning/study/qemu/include/exec/exec-all.h"
# 1 "/home/paulning/study/qemu/include/exec/cpu_ldst.h" 1
# 69 "/home/paulning/study/qemu/include/exec/cpu_ldst.h"
# 1 "/home/paulning/study/qemu/include/exec/memopidx.h" 1
# 14 "/home/paulning/study/qemu/include/exec/memopidx.h"
# 1 "/home/paulning/study/qemu/include/exec/memop.h" 1
# 17 "/home/paulning/study/qemu/include/exec/memop.h"
typedef enum MemOp {
  MO_8 = 0,
  MO_16 = 1,
  MO_32 = 2,
  MO_64 = 3,
  MO_128 = 4,
  MO_256 = 5,
  MO_512 = 6,
  MO_1024 = 7,
  MO_SIZE = 0x07,

  MO_SIGN = 0x08,

  MO_BSWAP = 0x10,

  MO_LE = 0,
  MO_BE = MO_BSWAP,

  MO_TE = MO_LE,
# 64 "/home/paulning/study/qemu/include/exec/memop.h"
  MO_ASHIFT = 5,
  MO_AMASK = 0x7 << MO_ASHIFT,
  MO_UNALN = 0,
  MO_ALIGN_2 = 1 << MO_ASHIFT,
  MO_ALIGN_4 = 2 << MO_ASHIFT,
  MO_ALIGN_8 = 3 << MO_ASHIFT,
  MO_ALIGN_16 = 4 << MO_ASHIFT,
  MO_ALIGN_32 = 5 << MO_ASHIFT,
  MO_ALIGN_64 = 6 << MO_ASHIFT,
  MO_ALIGN = MO_AMASK,
# 107 "/home/paulning/study/qemu/include/exec/memop.h"
  MO_ATOM_SHIFT = 8,
  MO_ATOM_IFALIGN = 0 << MO_ATOM_SHIFT,
  MO_ATOM_IFALIGN_PAIR = 1 << MO_ATOM_SHIFT,
  MO_ATOM_WITHIN16 = 2 << MO_ATOM_SHIFT,
  MO_ATOM_WITHIN16_PAIR = 3 << MO_ATOM_SHIFT,
  MO_ATOM_SUBALIGN = 4 << MO_ATOM_SHIFT,
  MO_ATOM_NONE = 5 << MO_ATOM_SHIFT,
  MO_ATOM_MASK = 7 << MO_ATOM_SHIFT,

  MO_UB = MO_8,
  MO_UW = MO_16,
  MO_UL = MO_32,
  MO_UQ = MO_64,
  MO_UO = MO_128,
  MO_SB = MO_SIGN | MO_8,
  MO_SW = MO_SIGN | MO_16,
  MO_SL = MO_SIGN | MO_32,
  MO_SQ = MO_SIGN | MO_64,
  MO_SO = MO_SIGN | MO_128,

  MO_LEUW = MO_LE | MO_UW,
  MO_LEUL = MO_LE | MO_UL,
  MO_LEUQ = MO_LE | MO_UQ,
  MO_LESW = MO_LE | MO_SW,
  MO_LESL = MO_LE | MO_SL,
  MO_LESQ = MO_LE | MO_SQ,

  MO_BEUW = MO_BE | MO_UW,
  MO_BEUL = MO_BE | MO_UL,
  MO_BEUQ = MO_BE | MO_UQ,
  MO_BESW = MO_BE | MO_SW,
  MO_BESL = MO_BE | MO_SL,
  MO_BESQ = MO_BE | MO_SQ,

  MO_TEUW = MO_TE | MO_UW,
  MO_TEUL = MO_TE | MO_UL,
  MO_TEUQ = MO_TE | MO_UQ,
  MO_TEUO = MO_TE | MO_UO,
  MO_TESW = MO_TE | MO_SW,
  MO_TESL = MO_TE | MO_SL,
  MO_TESQ = MO_TE | MO_SQ,

  MO_SSIZE = MO_SIZE | MO_SIGN,
} MemOp;

static inline unsigned memop_size(MemOp op) { return 1 << (op & MO_SIZE); }

static inline MemOp size_memop(unsigned size) {

# 166 "/home/paulning/study/qemu/include/exec/memop.h" 3 4
  ((void)sizeof((
# 166 "/home/paulning/study/qemu/include/exec/memop.h"
                    (size & (size - 1)) == 0 && size >= 1 && size <= 8
# 166 "/home/paulning/study/qemu/include/exec/memop.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 166 "/home/paulning/study/qemu/include/exec/memop.h"
         (size & (size - 1)) == 0 && size >= 1 && size <= 8
# 166 "/home/paulning/study/qemu/include/exec/memop.h" 3 4
     )
       ;
     else
       __assert_fail(
# 166 "/home/paulning/study/qemu/include/exec/memop.h"
           "(size & (size - 1)) == 0 && size >= 1 && size <= 8"
# 166 "/home/paulning/study/qemu/include/exec/memop.h" 3 4
           ,
           "/home/paulning/study/qemu/include/exec/memop.h", 166,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 166 "/home/paulning/study/qemu/include/exec/memop.h"
      ;

  return (MemOp)ctz32(size);
}

static inline unsigned memop_alignment_bits(MemOp memop) {
  unsigned a = memop & MO_AMASK;

  if (a == MO_UNALN) {

    a = 0;
  } else if (a == MO_ALIGN) {

    a = memop & MO_SIZE;
  } else {

    a = a >> MO_ASHIFT;
  }
  return a;
}

static inline unsigned memop_atomicity_bits(MemOp memop) {
  unsigned size = memop & MO_SIZE;

  switch (memop & MO_ATOM_MASK) {
  case MO_ATOM_NONE:
    size = MO_8;
    break;
  case MO_ATOM_IFALIGN_PAIR:
  case MO_ATOM_WITHIN16_PAIR:
    size = size ? size - 1 : 0;
    break;
  default:
    break;
  }
  return size;
}
# 15 "/home/paulning/study/qemu/include/exec/memopidx.h" 2

typedef uint32_t MemOpIdx;
# 25 "/home/paulning/study/qemu/include/exec/memopidx.h"
static inline MemOpIdx make_memop_idx(MemOp op, unsigned idx) {

# 28 "/home/paulning/study/qemu/include/exec/memopidx.h" 3 4
  ((void)sizeof((
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h"
                    idx <= 15
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h"
         idx <= 15
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h" 3 4
     )
       ;
     else
       __assert_fail(
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h"
           "idx <= 15"
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h" 3 4
           ,
           "/home/paulning/study/qemu/include/exec/memopidx.h", 28,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 28 "/home/paulning/study/qemu/include/exec/memopidx.h"
      ;

  return (op << 4) | idx;
}

static inline MemOp get_memop(MemOpIdx oi) { return oi >> 4; }

static inline unsigned get_mmuidx(MemOpIdx oi) { return oi & 15; }
# 70 "/home/paulning/study/qemu/include/exec/cpu_ldst.h" 2

# 1 "/home/paulning/study/qemu/include/exec/abi_ptr.h" 1
# 17 "/home/paulning/study/qemu/include/exec/abi_ptr.h"
typedef uint32_t abi_ptr;
# 72 "/home/paulning/study/qemu/include/exec/cpu_ldst.h" 2

# 1 "/home/paulning/study/qemu/include/user/guest-host.h" 1
# 11 "/home/paulning/study/qemu/include/user/guest-host.h"
# 1 "/home/paulning/study/qemu/include/user/abitypes.h" 1
# 10 "/home/paulning/study/qemu/include/user/abitypes.h"
# 1 "/home/paulning/study/qemu/include/user/tswap-target.h" 1
# 11 "/home/paulning/study/qemu/include/user/abitypes.h" 2
# 44 "/home/paulning/study/qemu/include/user/abitypes.h"
typedef int16_t abi_short __attribute__((aligned(2)));
typedef uint16_t abi_ushort __attribute__((aligned(2)));
typedef int32_t abi_int __attribute__((aligned(4)));
typedef uint32_t abi_uint __attribute__((aligned(4)));
typedef int64_t abi_llong __attribute__((aligned(8)));
typedef uint64_t abi_ullong __attribute__((aligned(8)));
# 64 "/home/paulning/study/qemu/include/user/abitypes.h"
typedef target_ulong abi_ulong __attribute__((aligned((32 / 8))));
typedef target_long abi_long __attribute__((aligned((32 / 8))));
# 74 "/home/paulning/study/qemu/include/user/abitypes.h"
static inline abi_ulong tswapal(abi_ulong v) { return tswap32(v); }
# 12 "/home/paulning/study/qemu/include/user/guest-host.h" 2
# 1 "/home/paulning/study/qemu/include/user/guest-base.h" 1
# 14 "/home/paulning/study/qemu/include/user/guest-base.h"
extern uintptr_t guest_base;

extern
# 16 "/home/paulning/study/qemu/include/user/guest-base.h" 3 4
    _Bool
# 16 "/home/paulning/study/qemu/include/user/guest-base.h"
        have_guest_base;
# 13 "/home/paulning/study/qemu/include/user/guest-host.h" 2
# 23 "/home/paulning/study/qemu/include/user/guest-host.h"
extern unsigned long reserved_va;
# 45 "/home/paulning/study/qemu/include/user/guest-host.h"
static inline abi_ptr cpu_untagged_addr(CPUState *cs, abi_ptr x) { return x; }

static inline void *g2h_untagged(abi_ptr x) {
  return (void *)((uintptr_t)(x) + guest_base);
}

static inline void *g2h(CPUState *cs, abi_ptr x) {
  return g2h_untagged(cpu_untagged_addr(cs, x));
}

static inline
# 62 "/home/paulning/study/qemu/include/user/guest-host.h" 3 4
    _Bool
# 62 "/home/paulning/study/qemu/include/user/guest-host.h"
    guest_addr_valid_untagged(abi_ulong x) {
  return x <=
         (reserved_va
              ?: ((__builtin_choose_expr(
                       __builtin_constant_p(32) && __builtin_constant_p(32),
                       (32) < (32) ? (32) : (32), ((void)0)) <= 32)
                      ?
# 64 "/home/paulning/study/qemu/include/user/guest-host.h" 3 4
                      (4294967295U)
# 64 "/home/paulning/study/qemu/include/user/guest-host.h"
                      : ~0ul));
}

static inline
# 67 "/home/paulning/study/qemu/include/user/guest-host.h" 3 4
    _Bool
# 67 "/home/paulning/study/qemu/include/user/guest-host.h"
    guest_range_valid_untagged(abi_ulong start, abi_ulong len) {
  return len - 1 <=
             (reserved_va
                  ?: ((__builtin_choose_expr(
                           __builtin_constant_p(32) && __builtin_constant_p(32),
                           (32) < (32) ? (32) : (32), ((void)0)) <= 32)
                          ?
# 69 "/home/paulning/study/qemu/include/user/guest-host.h" 3 4
                          (4294967295U)
# 69 "/home/paulning/study/qemu/include/user/guest-host.h"
                          : ~0ul)) &&
         start <=
             (reserved_va
                  ?: ((__builtin_choose_expr(
                           __builtin_constant_p(32) && __builtin_constant_p(32),
                           (32) < (32) ? (32) : (32), ((void)0)) <= 32)
                          ?
# 69 "/home/paulning/study/qemu/include/user/guest-host.h" 3 4
                          (4294967295U)
# 69 "/home/paulning/study/qemu/include/user/guest-host.h"
                          : ~0ul)) -
                 len + 1;
}
# 77 "/home/paulning/study/qemu/include/exec/cpu_ldst.h" 2

uint32_t cpu_ldub_data(CPUArchState *env, abi_ptr ptr);
int cpu_ldsb_data(CPUArchState *env, abi_ptr ptr);
uint32_t cpu_lduw_be_data(CPUArchState *env, abi_ptr ptr);
int cpu_ldsw_be_data(CPUArchState *env, abi_ptr ptr);
uint32_t cpu_ldl_be_data(CPUArchState *env, abi_ptr ptr);
uint64_t cpu_ldq_be_data(CPUArchState *env, abi_ptr ptr);
uint32_t cpu_lduw_le_data(CPUArchState *env, abi_ptr ptr);
int cpu_ldsw_le_data(CPUArchState *env, abi_ptr ptr);
uint32_t cpu_ldl_le_data(CPUArchState *env, abi_ptr ptr);
uint64_t cpu_ldq_le_data(CPUArchState *env, abi_ptr ptr);

uint32_t cpu_ldub_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
int cpu_ldsb_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint32_t cpu_lduw_be_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
int cpu_ldsw_be_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint32_t cpu_ldl_be_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint64_t cpu_ldq_be_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint32_t cpu_lduw_le_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
int cpu_ldsw_le_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint32_t cpu_ldl_le_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);
uint64_t cpu_ldq_le_data_ra(CPUArchState *env, abi_ptr ptr, uintptr_t ra);

void cpu_stb_data(CPUArchState *env, abi_ptr ptr, uint32_t val);
void cpu_stw_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val);
void cpu_stl_be_data(CPUArchState *env, abi_ptr ptr, uint32_t val);
void cpu_stq_be_data(CPUArchState *env, abi_ptr ptr, uint64_t val);
void cpu_stw_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val);
void cpu_stl_le_data(CPUArchState *env, abi_ptr ptr, uint32_t val);
void cpu_stq_le_data(CPUArchState *env, abi_ptr ptr, uint64_t val);

void cpu_stb_data_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                     uintptr_t ra);
void cpu_stw_be_data_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                        uintptr_t ra);
void cpu_stl_be_data_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                        uintptr_t ra);
void cpu_stq_be_data_ra(CPUArchState *env, abi_ptr ptr, uint64_t val,
                        uintptr_t ra);
void cpu_stw_le_data_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                        uintptr_t ra);
void cpu_stl_le_data_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                        uintptr_t ra);
void cpu_stq_le_data_ra(CPUArchState *env, abi_ptr ptr, uint64_t val,
                        uintptr_t ra);

uint32_t cpu_ldub_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                            uintptr_t ra);
int cpu_ldsb_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                       uintptr_t ra);
uint32_t cpu_lduw_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                               uintptr_t ra);
int cpu_ldsw_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                          uintptr_t ra);
uint32_t cpu_ldl_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                              uintptr_t ra);
uint64_t cpu_ldq_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                              uintptr_t ra);
uint32_t cpu_lduw_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                               uintptr_t ra);
int cpu_ldsw_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                          uintptr_t ra);
uint32_t cpu_ldl_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                              uintptr_t ra);
uint64_t cpu_ldq_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, int mmu_idx,
                              uintptr_t ra);

void cpu_stb_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                       int mmu_idx, uintptr_t ra);
void cpu_stw_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                          int mmu_idx, uintptr_t ra);
void cpu_stl_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                          int mmu_idx, uintptr_t ra);
void cpu_stq_be_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint64_t val,
                          int mmu_idx, uintptr_t ra);
void cpu_stw_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                          int mmu_idx, uintptr_t ra);
void cpu_stl_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint32_t val,
                          int mmu_idx, uintptr_t ra);
void cpu_stq_le_mmuidx_ra(CPUArchState *env, abi_ptr ptr, uint64_t val,
                          int mmu_idx, uintptr_t ra);

uint8_t cpu_ldb_mmu(CPUArchState *env, abi_ptr ptr, MemOpIdx oi, uintptr_t ra);
uint16_t cpu_ldw_mmu(CPUArchState *env, abi_ptr ptr, MemOpIdx oi, uintptr_t ra);
uint32_t cpu_ldl_mmu(CPUArchState *env, abi_ptr ptr, MemOpIdx oi, uintptr_t ra);
uint64_t cpu_ldq_mmu(CPUArchState *env, abi_ptr ptr, MemOpIdx oi, uintptr_t ra);
Int128 cpu_ld16_mmu(CPUArchState *env, abi_ptr addr, MemOpIdx oi, uintptr_t ra);

void cpu_stb_mmu(CPUArchState *env, abi_ptr ptr, uint8_t val, MemOpIdx oi,
                 uintptr_t ra);
void cpu_stw_mmu(CPUArchState *env, abi_ptr ptr, uint16_t val, MemOpIdx oi,
                 uintptr_t ra);
void cpu_stl_mmu(CPUArchState *env, abi_ptr ptr, uint32_t val, MemOpIdx oi,
                 uintptr_t ra);
void cpu_stq_mmu(CPUArchState *env, abi_ptr ptr, uint64_t val, MemOpIdx oi,
                 uintptr_t ra);
void cpu_st16_mmu(CPUArchState *env, abi_ptr addr, Int128 val, MemOpIdx oi,
                  uintptr_t ra);

uint32_t cpu_atomic_cmpxchgb_mmu(CPUArchState *env, abi_ptr addr, uint32_t cmpv,
                                 uint32_t newv, MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_cmpxchgw_le_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t cmpv, uint32_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_cmpxchgl_le_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t cmpv, uint32_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
uint64_t cpu_atomic_cmpxchgq_le_mmu(CPUArchState *env, abi_ptr addr,
                                    uint64_t cmpv, uint64_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_cmpxchgw_be_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t cmpv, uint32_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_cmpxchgl_be_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t cmpv, uint32_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
uint64_t cpu_atomic_cmpxchgq_be_mmu(CPUArchState *env, abi_ptr addr,
                                    uint64_t cmpv, uint64_t newv, MemOpIdx oi,
                                    uintptr_t retaddr);
# 222 "/home/paulning/study/qemu/include/exec/cpu_ldst.h"
uint32_t cpu_atomic_fetch_addb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_fetch_addw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_addw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_addl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_addl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_addq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_addq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_subb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_fetch_subw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_subw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_subl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_subl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_subq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_subq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_andb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_fetch_andw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_andw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_andl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_andl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_andq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_andq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_orb_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                  MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_fetch_orw_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_fetch_orw_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_fetch_orl_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_fetch_orl_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint64_t cpu_atomic_fetch_orq_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint64_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint64_t cpu_atomic_fetch_orq_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint64_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_fetch_xorb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_fetch_xorw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_xorw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_xorl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_xorl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_xorq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_fetch_xorq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_fetch_sminb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_fetch_sminw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_sminw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_sminl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_sminl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_sminq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_sminq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_uminb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_fetch_uminw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_uminw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_uminl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_uminl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_uminq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_uminq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_smaxb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_fetch_smaxw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_smaxw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_smaxl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_smaxl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_smaxq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_smaxq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_umaxb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_fetch_umaxw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_umaxw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_umaxl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_fetch_umaxl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_umaxq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_fetch_umaxq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);

uint32_t cpu_atomic_add_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_add_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_add_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_add_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_add_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_add_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_add_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_sub_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_sub_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_sub_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_sub_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_sub_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_sub_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_sub_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_and_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_and_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_and_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_and_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_and_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_and_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_and_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_or_fetchb_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                  MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_or_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_or_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_or_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_or_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint32_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint64_t cpu_atomic_or_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                     uint64_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint64_t cpu_atomic_or_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                     uint64_t val, MemOpIdx oi,
                                     uintptr_t retaddr);
uint32_t cpu_atomic_xor_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                   uint32_t val, MemOpIdx oi,
                                   uintptr_t retaddr);
uint32_t cpu_atomic_xor_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_xor_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_xor_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_xor_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint32_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_xor_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint64_t cpu_atomic_xor_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                      uint64_t val, MemOpIdx oi,
                                      uintptr_t retaddr);
uint32_t cpu_atomic_smin_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_smin_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smin_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smin_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smin_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_smin_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_smin_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umin_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_umin_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umin_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umin_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umin_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_umin_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_umin_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smax_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_smax_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smax_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smax_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_smax_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_smax_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_smax_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umax_fetchb_mmu(CPUArchState *env, abi_ptr addr,
                                    uint32_t val, MemOpIdx oi,
                                    uintptr_t retaddr);
uint32_t cpu_atomic_umax_fetchw_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umax_fetchw_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umax_fetchl_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint32_t cpu_atomic_umax_fetchl_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint32_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_umax_fetchq_le_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);
uint64_t cpu_atomic_umax_fetchq_be_mmu(CPUArchState *env, abi_ptr addr,
                                       uint64_t val, MemOpIdx oi,
                                       uintptr_t retaddr);

uint32_t cpu_atomic_xchgb_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                              MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_xchgw_le_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                 MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_xchgw_be_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                 MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_xchgl_le_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                 MemOpIdx oi, uintptr_t retaddr);
uint32_t cpu_atomic_xchgl_be_mmu(CPUArchState *env, abi_ptr addr, uint32_t val,
                                 MemOpIdx oi, uintptr_t retaddr);
uint64_t cpu_atomic_xchgq_le_mmu(CPUArchState *env, abi_ptr addr, uint64_t val,
                                 MemOpIdx oi, uintptr_t retaddr);
uint64_t cpu_atomic_xchgq_be_mmu(CPUArchState *env, abi_ptr addr, uint64_t val,
                                 MemOpIdx oi, uintptr_t retaddr);

Int128 cpu_atomic_cmpxchgo_le_mmu(CPUArchState *env, abi_ptr addr, Int128 cmpv,
                                  Int128 newv, MemOpIdx oi, uintptr_t retaddr);
Int128 cpu_atomic_cmpxchgo_be_mmu(CPUArchState *env, abi_ptr addr, Int128 cmpv,
                                  Int128 newv, MemOpIdx oi, uintptr_t retaddr);
# 300 "/home/paulning/study/qemu/include/exec/cpu_ldst.h"
uint8_t cpu_ldb_code_mmu(CPUArchState *env, abi_ptr addr, MemOpIdx oi,
                         uintptr_t ra);
uint16_t cpu_ldw_code_mmu(CPUArchState *env, abi_ptr addr, MemOpIdx oi,
                          uintptr_t ra);
uint32_t cpu_ldl_code_mmu(CPUArchState *env, abi_ptr addr, MemOpIdx oi,
                          uintptr_t ra);
uint64_t cpu_ldq_code_mmu(CPUArchState *env, abi_ptr addr, MemOpIdx oi,
                          uintptr_t ra);

uint32_t cpu_ldub_code(CPUArchState *env, abi_ptr addr);
uint32_t cpu_lduw_code(CPUArchState *env, abi_ptr addr);
uint32_t cpu_ldl_code(CPUArchState *env, abi_ptr addr);
uint64_t cpu_ldq_code(CPUArchState *env, abi_ptr addr);
# 328 "/home/paulning/study/qemu/include/exec/cpu_ldst.h"
static inline void *tlb_vaddr_to_host(CPUArchState *env, abi_ptr addr,
                                      MMUAccessType access_type, int mmu_idx) {
  return g2h(env_cpu(env), addr);
}
# 346 "/home/paulning/study/qemu/include/exec/cpu_ldst.h"
extern __thread uintptr_t helper_retaddr;

static inline void set_helper_retaddr(uintptr_t ra) {
  helper_retaddr = ra;

  __atomic_signal_fence(5);
}

static inline void clear_helper_retaddr(void) {

  __atomic_signal_fence(5);
  helper_retaddr = 0;
}
# 26 "/home/paulning/study/qemu/include/exec/exec-all.h" 2

# 1 "/home/paulning/study/qemu/include/exec/translation-block.h" 1
# 15 "/home/paulning/study/qemu/include/exec/translation-block.h"
# 1 "/home/paulning/study/qemu/include/qemu/interval-tree.h" 1
# 16 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
typedef struct RBNode {

  uintptr_t rb_parent_color;
  struct RBNode *rb_right;
  struct RBNode *rb_left;
} RBNode;

typedef struct RBRoot {
  RBNode *rb_node;
} RBRoot;

typedef struct RBRootLeftCached {
  RBRoot rb_root;
  RBNode *rb_leftmost;
} RBRootLeftCached;

typedef struct IntervalTreeNode {
  RBNode rb;

  uint64_t start;
  uint64_t last;
  uint64_t subtree_last;
} IntervalTreeNode;

typedef RBRootLeftCached IntervalTreeRoot;

static inline
# 51 "/home/paulning/study/qemu/include/qemu/interval-tree.h" 3 4
    _Bool
# 51 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
    interval_tree_is_empty(const IntervalTreeRoot *root) {
  return root->rb_root.rb_node ==
# 53 "/home/paulning/study/qemu/include/qemu/interval-tree.h" 3 4
         ((void *)0)
# 53 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
      ;
}
# 63 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
void interval_tree_insert(IntervalTreeNode *node, IntervalTreeRoot *root);
# 72 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
void interval_tree_remove(IntervalTreeNode *node, IntervalTreeRoot *root);
# 83 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
IntervalTreeNode *interval_tree_iter_first(IntervalTreeRoot *root,
                                           uint64_t start, uint64_t last);
# 96 "/home/paulning/study/qemu/include/qemu/interval-tree.h"
IntervalTreeNode *interval_tree_iter_next(IntervalTreeNode *node,
                                          uint64_t start, uint64_t last);
# 16 "/home/paulning/study/qemu/include/exec/translation-block.h" 2
# 24 "/home/paulning/study/qemu/include/exec/translation-block.h"
typedef vaddr tb_page_addr_t;
# 38 "/home/paulning/study/qemu/include/exec/translation-block.h"
struct tb_tc {
  const void *ptr;
  size_t size;
};

struct TranslationBlock {
# 57 "/home/paulning/study/qemu/include/exec/translation-block.h"
  vaddr pc;
# 66 "/home/paulning/study/qemu/include/exec/translation-block.h"
  uint64_t cs_base;

  uint32_t flags;
  uint32_t cflags;
# 91 "/home/paulning/study/qemu/include/exec/translation-block.h"
  uint16_t size;
  uint16_t icount;

  struct tb_tc tc;
# 105 "/home/paulning/study/qemu/include/exec/translation-block.h"
  IntervalTreeNode itree;

  QemuSpin jmp_lock;
# 122 "/home/paulning/study/qemu/include/exec/translation-block.h"
  uint16_t jmp_reset_offset[2];
  uint16_t jmp_insn_offset[2];
  uintptr_t jmp_target_addr[2];
# 143 "/home/paulning/study/qemu/include/exec/translation-block.h"
  uintptr_t jmp_list_head;
  uintptr_t jmp_list_next[2];
  uintptr_t jmp_dest[2];
};

static inline uint32_t tb_cflags(const TranslationBlock *tb) {
  return ({
    while (!(sizeof(*&tb->cflags) <= sizeof(void *)))
      do {
        g_assertion_message_expr(
            ((gchar *)0),
            "/home/paulning/study/qemu/include/exec/translation-block.h", 154,
            ((const char *)(__func__)),
# 154 "/home/paulning/study/qemu/include/exec/translation-block.h" 3 4
            ((void *)0)
# 154 "/home/paulning/study/qemu/include/exec/translation-block.h"
        );
      } while (0);
    __atomic_load_n(&tb->cflags, 0);
  });
}

# 157 "/home/paulning/study/qemu/include/exec/translation-block.h" 3 4
_Bool
# 157 "/home/paulning/study/qemu/include/exec/translation-block.h"
    tcg_cflags_has(CPUState *cpu, uint32_t flags);
void tcg_cflags_set(CPUState *cpu, uint32_t flags);
# 29 "/home/paulning/study/qemu/include/exec/exec-all.h" 2

# 1 "/home/paulning/study/qemu/include/accel/tcg/getpc.h" 1
# 17 "/home/paulning/study/qemu/include/accel/tcg/getpc.h"
extern __thread uintptr_t tci_tb_ptr;
# 32 "/home/paulning/study/qemu/include/exec/exec-all.h" 2
# 50 "/home/paulning/study/qemu/include/exec/exec-all.h"
void *probe_access(CPUArchState *env, vaddr addr, int size,
                   MMUAccessType access_type, int mmu_idx, uintptr_t retaddr);

static inline void *probe_write(CPUArchState *env, vaddr addr, int size,
                                int mmu_idx, uintptr_t retaddr) {
  return probe_access(env, addr, size, MMU_DATA_STORE, mmu_idx, retaddr);
}

static inline void *probe_read(CPUArchState *env, vaddr addr, int size,
                               int mmu_idx, uintptr_t retaddr) {
  return probe_access(env, addr, size, MMU_DATA_LOAD, mmu_idx, retaddr);
}
# 84 "/home/paulning/study/qemu/include/exec/exec-all.h"
int probe_access_flags(CPUArchState *env, vaddr addr, int size,
                       MMUAccessType access_type, int mmu_idx,

# 86 "/home/paulning/study/qemu/include/exec/exec-all.h" 3 4
                       _Bool
# 86 "/home/paulning/study/qemu/include/exec/exec-all.h"
                           nonfault,
                       void **phost, uintptr_t retaddr);
# 127 "/home/paulning/study/qemu/include/exec/exec-all.h"
static inline tb_page_addr_t tb_page_addr0(const TranslationBlock *tb) {

  return tb->itree.start;
}

static inline tb_page_addr_t tb_page_addr1(const TranslationBlock *tb) {

  tb_page_addr_t next = tb->itree.last & ((target_long)-1 << 12);
  return next == (tb->itree.start & ((target_long)-1 << 12)) ? -1 : next;
}

static inline void tb_set_page_addr0(TranslationBlock *tb,
                                     tb_page_addr_t addr) {

  tb->itree.start = addr;
# 159 "/home/paulning/study/qemu/include/exec/exec-all.h"
  tb->itree.last = addr;
}

static inline void tb_set_page_addr1(TranslationBlock *tb,
                                     tb_page_addr_t addr) {

  tb->itree.last = addr;
}

void tb_phys_invalidate(TranslationBlock *tb, tb_page_addr_t page_addr);
void tb_invalidate_phys_range(tb_page_addr_t start, tb_page_addr_t last);
void tb_set_jmp_target(TranslationBlock *tb, int n, uintptr_t addr);
# 210 "/home/paulning/study/qemu/include/exec/exec-all.h"
tb_page_addr_t get_page_addr_code_hostp(CPUArchState *env, vaddr addr,
                                        void **hostp);
# 224 "/home/paulning/study/qemu/include/exec/exec-all.h"
static inline tb_page_addr_t get_page_addr_code(CPUArchState *env, vaddr addr) {
  return get_page_addr_code_hostp(env, addr,
# 227 "/home/paulning/study/qemu/include/exec/exec-all.h" 3 4
                                  ((void *)0)
# 227 "/home/paulning/study/qemu/include/exec/exec-all.h"
  );
}
# 23 "../../../target/arm/helper.c" 2

# 1 "/home/paulning/study/qemu/include/hw/irq.h" 1
# 9 "/home/paulning/study/qemu/include/hw/irq.h"
typedef struct IRQState IRQState;
typedef IRQState *IRQState_autoptr;
typedef GList *IRQState_listautoptr;
typedef GSList *IRQState_slistautoptr;
typedef GQueue *IRQState_queueautoptr;
# 9 "/home/paulning/study/qemu/include/hw/irq.h"
#pragma GCC diagnostic push
# 9 "/home/paulning/study/qemu/include/hw/irq.h"

# 9 "/home/paulning/study/qemu/include/hw/irq.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 9 "/home/paulning/study/qemu/include/hw/irq.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_IRQState(IRQState *_ptr) {
  if (_ptr)
    (object_unref)((IRQState *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_IRQState(IRQState **_ptr) {
  glib_autoptr_clear_IRQState(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_IRQState(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_IRQState(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))object_unref);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_IRQState(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))object_unref);
}
# 9 "/home/paulning/study/qemu/include/hw/irq.h"
#pragma GCC diagnostic pop
# 9 "/home/paulning/study/qemu/include/hw/irq.h"
static inline __attribute__((__unused__)) IRQState *IRQ(const void *obj) {
  return ((IRQState *)object_dynamic_cast_assert(
      ((Object *)(obj)), ("irq"), "/home/paulning/study/qemu/include/hw/irq.h",
      9, __func__));
}

struct IRQState {
  Object parent_obj;

  qemu_irq_handler handler;
  void *opaque;
  int n;
};

void qemu_set_irq(qemu_irq irq, int level);

static inline void qemu_irq_raise(qemu_irq irq) { qemu_set_irq(irq, 1); }

static inline void qemu_irq_lower(qemu_irq irq) { qemu_set_irq(irq, 0); }

static inline void qemu_irq_pulse(qemu_irq irq) {
  qemu_set_irq(irq, 1);
  qemu_set_irq(irq, 0);
}

void qemu_init_irq(IRQState *irq, qemu_irq_handler handler, void *opaque,
                   int n);
# 52 "/home/paulning/study/qemu/include/hw/irq.h"
void qemu_init_irqs(IRQState irq[], size_t count, qemu_irq_handler handler,
                    void *opaque);

qemu_irq *qemu_allocate_irqs(qemu_irq_handler handler, void *opaque, int n);

qemu_irq qemu_allocate_irq(qemu_irq_handler handler, void *opaque, int n);

qemu_irq *qemu_extend_irqs(qemu_irq *old, int n_old, qemu_irq_handler handler,
                           void *opaque, int n);

void qemu_free_irqs(qemu_irq *s, int n);
void qemu_free_irq(qemu_irq irq);

qemu_irq qemu_irq_invert(qemu_irq irq);

void qemu_irq_intercept_in(qemu_irq *gpio_in, qemu_irq_handler handler, int n);
# 95 "/home/paulning/study/qemu/include/hw/irq.h"
static inline
# 95 "/home/paulning/study/qemu/include/hw/irq.h" 3 4
    _Bool
# 95 "/home/paulning/study/qemu/include/hw/irq.h"
    qemu_irq_is_connected(qemu_irq irq) {
  return irq !=
# 97 "/home/paulning/study/qemu/include/hw/irq.h" 3 4
         ((void *)0)
# 97 "/home/paulning/study/qemu/include/hw/irq.h"
      ;
}
# 25 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/system/cpu-timers.h" 1
# 16 "/home/paulning/study/qemu/include/system/cpu-timers.h"
void cpu_timers_init(void);
# 27 "/home/paulning/study/qemu/include/system/cpu-timers.h"
typedef enum {
  ICOUNT_DISABLED = 0,
  ICOUNT_PRECISE,
  ICOUNT_ADAPTATIVE,
} ICountMode;
# 44 "/home/paulning/study/qemu/include/system/cpu-timers.h"
void icount_update(CPUState *cpu);

int64_t icount_get_raw(void);

int64_t icount_get(void);

int64_t icount_to_ns(int64_t icount);
# 66 "/home/paulning/study/qemu/include/system/cpu-timers.h"

# 66 "/home/paulning/study/qemu/include/system/cpu-timers.h" 3 4
_Bool
# 66 "/home/paulning/study/qemu/include/system/cpu-timers.h"
    icount_configure(QemuOpts *opts, Error **errp);

int64_t icount_round(int64_t count);

void icount_start_warp_timer(void);
void icount_account_warp_timer(void);
void icount_notify_exit(void);

void cpu_enable_ticks(void);

void cpu_disable_ticks(void);

int64_t cpu_get_ticks(void);

int64_t cpu_get_clock(void);

void qemu_timer_notify_cb(void *opaque, QEMUClockType type);

int64_t cpus_get_virtual_clock(void);
void cpus_set_virtual_clock(int64_t new_time);
int64_t cpus_get_elapsed_ticks(void);
# 26 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/system/kvm.h" 1
# 20 "/home/paulning/study/qemu/include/system/kvm.h"
# 1 "/home/paulning/study/qemu/include/qemu/accel.h" 1
# 29 "/home/paulning/study/qemu/include/qemu/accel.h"
struct AccelState {

  Object parent_obj;
};

typedef struct AccelClass {

  ObjectClass parent_class;

  const char *name;
  int (*init_machine)(MachineState *ms);

# 46 "/home/paulning/study/qemu/include/qemu/accel.h" 3 4
  _Bool
# 46 "/home/paulning/study/qemu/include/qemu/accel.h"
      (*cpu_common_realize)(CPUState *cpu, Error **errp);
  void (*cpu_common_unrealize)(CPUState *cpu);

  int (*gdbstub_supported_sstep_flags)(void);

# 52 "/home/paulning/study/qemu/include/qemu/accel.h" 3 4
  _Bool
# 52 "/home/paulning/study/qemu/include/qemu/accel.h"
      *allowed;

  GPtrArray *compat_props;
} AccelClass;
# 75 "/home/paulning/study/qemu/include/qemu/accel.h"
AccelClass *accel_find(const char *opt_name);
AccelState *current_accel(void);
const char *current_accel_name(void);

void accel_init_interfaces(AccelClass *ac);
# 92 "/home/paulning/study/qemu/include/qemu/accel.h"
void accel_cpu_instance_init(CPUState *cpu);

# 99 "/home/paulning/study/qemu/include/qemu/accel.h" 3 4
_Bool
# 99 "/home/paulning/study/qemu/include/qemu/accel.h"
    accel_cpu_common_realize(CPUState *cpu, Error **errp);

void accel_cpu_common_unrealize(CPUState *cpu);

int accel_supported_gdbstub_sstep_flags(void);
# 21 "/home/paulning/study/qemu/include/system/kvm.h" 2
# 163 "/home/paulning/study/qemu/include/system/kvm.h"
struct kvm_run;
struct kvm_irq_routing_entry;

typedef struct KVMCapabilityInfo {
  const char *name;
  int value;
} KVMCapabilityInfo;

struct KVMState;

typedef struct KVMState KVMState;
static inline __attribute__((__unused__)) KVMState *KVM_STATE(const void *obj) {
  return ((KVMState *)object_dynamic_cast_assert(
      ((Object *)(obj)),
      (("kvm"
        "-"
        "accel")),
      "/home/paulning/study/qemu/include/system/kvm.h", 178, __func__));
}

extern KVMState *kvm_state;
typedef struct Notifier Notifier;

typedef struct KVMRouteChange {
  KVMState *s;
  int changes;
} KVMRouteChange;

unsigned int kvm_get_max_memslots(void);
unsigned int kvm_get_free_memslots(void);

# 193 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 193 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_has_sync_mmu(void);
int kvm_has_vcpu_events(void);
int kvm_max_nested_state_length(void);
int kvm_has_gsi_routing(void);
# 207 "/home/paulning/study/qemu/include/system/kvm.h"

# 207 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 207 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_arm_supports_user_irq(void);

int kvm_on_sigbus_vcpu(CPUState *cpu, int code, void *addr);
int kvm_on_sigbus(int code, void *addr);

void kvm_flush_coalesced_mmio_buffer(void);
# 230 "/home/paulning/study/qemu/include/system/kvm.h"
static inline int kvm_update_guest_debug(CPUState *cpu,
                                         unsigned long reinject_trap) {
  return -
# 232 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
      22
# 232 "/home/paulning/study/qemu/include/system/kvm.h"
      ;
}

int kvm_ioctl(KVMState *s, unsigned long type, ...);

int kvm_vm_ioctl(KVMState *s, unsigned long type, ...);

int kvm_vcpu_ioctl(CPUState *cpu, unsigned long type, ...);
# 251 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_device_ioctl(int fd, unsigned long type, ...);
# 263 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_vm_check_attr(KVMState *s, uint32_t group, uint64_t attr);
# 275 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_device_check_attr(int fd, uint32_t group, uint64_t attr);
# 291 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_device_access(int fd, int group, uint64_t attr, void *val,
# 292 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
                      _Bool
# 292 "/home/paulning/study/qemu/include/system/kvm.h"
                          write,
                      Error **errp);
# 304 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_create_device(KVMState *s, uint64_t type,
# 304 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
                      _Bool
# 304 "/home/paulning/study/qemu/include/system/kvm.h"
                          test);
# 314 "/home/paulning/study/qemu/include/system/kvm.h"

# 314 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 314 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_device_supported(int vmfd, uint64_t type);

int kvm_create_vcpu(CPUState *cpu);

void kvm_park_vcpu(CPUState *cpu);
# 339 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_unpark_vcpu(KVMState *s, unsigned long vcpu_id);

int kvm_create_and_park_vcpu(CPUState *cpu);

extern const KVMCapabilityInfo kvm_arch_required_capabilities[];

void kvm_arch_accel_class_init(ObjectClass *oc);

void kvm_arch_pre_run(CPUState *cpu, struct kvm_run *run);
MemTxAttrs kvm_arch_post_run(CPUState *cpu, struct kvm_run *run);

int kvm_arch_handle_exit(CPUState *cpu, struct kvm_run *run);

int kvm_arch_process_async_events(CPUState *cpu);

int kvm_arch_get_registers(CPUState *cpu, Error **errp);
# 371 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_arch_put_registers(CPUState *cpu, int level, Error **errp);

int kvm_arch_get_default_type(MachineState *ms);

int kvm_arch_init(MachineState *ms, KVMState *s);

int kvm_arch_init_vcpu(CPUState *cpu);
int kvm_arch_destroy_vcpu(CPUState *cpu);

static inline void kvm_arch_reset_parked_vcpu(unsigned long vcpu_id,
                                              int kvm_fd) {}

# 388 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 388 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_vcpu_id_is_valid(int vcpu_id);

unsigned long kvm_arch_vcpu_id(CPUState *cpu);

void kvm_arch_init_irq_routing(KVMState *s);

int kvm_arch_fixup_msi_route(struct kvm_irq_routing_entry *route,
                             uint64_t address, uint32_t data, PCIDevice *dev);

int kvm_arch_add_msi_route_post(struct kvm_irq_routing_entry *route, int vector,
                                PCIDevice *dev);

int kvm_arch_release_virq_post(int virq);

int kvm_arch_msi_data_to_gsi(uint32_t data);

int kvm_set_irq(KVMState *s, int irq, int level);
int kvm_irqchip_send_msi(KVMState *s, MSIMessage msg);

void kvm_irqchip_add_irq_route(KVMState *s, int gsi, int irqchip, int pin);

void kvm_irqchip_add_change_notifier(Notifier *n);
void kvm_irqchip_remove_change_notifier(Notifier *n);
void kvm_irqchip_change_notify(void);

struct kvm_guest_debug;
struct kvm_debug_exit_arch;

struct kvm_sw_breakpoint {
  vaddr pc;
  vaddr saved_insn;
  int use_count;
  union {
    struct kvm_sw_breakpoint *tqe_next;
    QTailQLink tqe_circ;
  } entry;
};

struct kvm_sw_breakpoint *kvm_find_sw_breakpoint(CPUState *cpu, vaddr pc);

int kvm_sw_breakpoints_active(CPUState *cpu);

int kvm_arch_insert_sw_breakpoint(CPUState *cpu, struct kvm_sw_breakpoint *bp);
int kvm_arch_remove_sw_breakpoint(CPUState *cpu, struct kvm_sw_breakpoint *bp);
int kvm_arch_insert_hw_breakpoint(vaddr addr, vaddr len, int type);
int kvm_arch_remove_hw_breakpoint(vaddr addr, vaddr len, int type);
void kvm_arch_remove_all_hw_breakpoints(void);

void kvm_arch_update_guest_debug(CPUState *cpu, struct kvm_guest_debug *dbg);

# 444 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 444 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_arch_stop_on_emulation_error(CPUState *cpu);

int kvm_check_extension(KVMState *s, unsigned int extension);

int kvm_vm_check_extension(KVMState *s, unsigned int extension);
# 474 "/home/paulning/study/qemu/include/system/kvm.h"
void kvm_set_sigmask_len(KVMState *s, unsigned int sigmask_len);

int kvm_physical_memory_addr_from_host(KVMState *s, void *ram_addr,
                                       hwaddr *phys_addr);

void kvm_cpu_synchronize_state(CPUState *cpu);

void kvm_init_cpu_signals(CPUState *cpu);
# 496 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_irqchip_add_msi_route(KVMRouteChange *c, int vector, PCIDevice *dev);
int kvm_irqchip_update_msi_route(KVMState *s, int virq, MSIMessage msg,
                                 PCIDevice *dev);
void kvm_irqchip_commit_routes(KVMState *s);

static inline KVMRouteChange kvm_irqchip_begin_route_changes(KVMState *s) {
  return (KVMRouteChange){.s = s, .changes = 0};
}

static inline void kvm_irqchip_commit_route_changes(KVMRouteChange *c) {
  if (c->changes) {
    kvm_irqchip_commit_routes(c->s);
    c->changes = 0;
  }
}

int kvm_irqchip_get_virq(KVMState *s);
void kvm_irqchip_release_virq(KVMState *s, int virq);

void kvm_add_routing_entry(KVMState *s, struct kvm_irq_routing_entry *entry);

int kvm_irqchip_add_irqfd_notifier_gsi(KVMState *s, EventNotifier *n,
                                       EventNotifier *rn, int virq);
int kvm_irqchip_remove_irqfd_notifier_gsi(KVMState *s, EventNotifier *n,
                                          int virq);
int kvm_irqchip_add_irqfd_notifier(KVMState *s, EventNotifier *n,
                                   EventNotifier *rn, qemu_irq irq);
int kvm_irqchip_remove_irqfd_notifier(KVMState *s, EventNotifier *n,
                                      qemu_irq irq);
void kvm_irqchip_set_qemuirq_gsi(KVMState *s, qemu_irq irq, int gsi);
void kvm_init_irq_routing(KVMState *s);

# 531 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 531 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_kernel_irqchip_allowed(void);

# 532 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 532 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_kernel_irqchip_required(void);

# 533 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 533 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_kernel_irqchip_split(void);
# 545 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_arch_irqchip_create(KVMState *s);
# 555 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_set_one_reg(CPUState *cs, uint64_t id, void *source);
# 565 "/home/paulning/study/qemu/include/system/kvm.h"
int kvm_get_one_reg(CPUState *cs, uint64_t id, void *target);

void kvm_resample_fd_notify(int gsi);

# 570 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 570 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_dirty_ring_enabled(void);

uint32_t kvm_dirty_ring_size(void);

void kvm_mark_guest_state_protected(void);

# 580 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
_Bool
# 580 "/home/paulning/study/qemu/include/system/kvm.h"
    kvm_hwpoisoned_mem(void);

int kvm_create_guest_memfd(uint64_t size, uint64_t flags, Error **errp);

int kvm_set_memory_attributes_private(hwaddr start, uint64_t size);
int kvm_set_memory_attributes_shared(hwaddr start, uint64_t size);

int kvm_convert_memory(hwaddr start, hwaddr size,
# 587 "/home/paulning/study/qemu/include/system/kvm.h" 3 4
                       _Bool
# 587 "/home/paulning/study/qemu/include/system/kvm.h"
                           to_private);
# 27 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/system/tcg.h" 1
# 14 "/home/paulning/study/qemu/include/system/tcg.h"
extern
# 14 "/home/paulning/study/qemu/include/system/tcg.h" 3 4
    _Bool
# 14 "/home/paulning/study/qemu/include/system/tcg.h"
        tcg_allowed;
# 28 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/qapi/error.h" 1
# 275 "/home/paulning/study/qemu/include/qapi/error.h"
# 1 "./qapi/qapi-types-error.h" 1
# 18 "./qapi/qapi-types-error.h"
typedef enum QapiErrorClass {
  QAPI_ERROR_CLASS_GENERICERROR,
  QAPI_ERROR_CLASS_COMMANDNOTFOUND,
  QAPI_ERROR_CLASS_DEVICENOTACTIVE,
  QAPI_ERROR_CLASS_DEVICENOTFOUND,
  QAPI_ERROR_CLASS_KVMMISSINGCAP,
  QAPI_ERROR_CLASS__MAX,
} QapiErrorClass;

extern const QEnumLookup QapiErrorClass_lookup;
# 276 "/home/paulning/study/qemu/include/qapi/error.h" 2

typedef enum ErrorClass {
  ERROR_CLASS_GENERIC_ERROR = QAPI_ERROR_CLASS_GENERICERROR,
  ERROR_CLASS_COMMAND_NOT_FOUND = QAPI_ERROR_CLASS_COMMANDNOTFOUND,
  ERROR_CLASS_DEVICE_NOT_ACTIVE = QAPI_ERROR_CLASS_DEVICENOTACTIVE,
  ERROR_CLASS_DEVICE_NOT_FOUND = QAPI_ERROR_CLASS_DEVICENOTFOUND,
  ERROR_CLASS_KVM_MISSING_CAP = QAPI_ERROR_CLASS_KVMMISSINGCAP,
} ErrorClass;

const char *error_get_pretty(const Error *err);

ErrorClass error_get_class(const Error *err);
# 320 "/home/paulning/study/qemu/include/qapi/error.h"
void error_setg_internal(Error **errp, const char *src, int line,
                         const char *func, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 5, 6)));
# 336 "/home/paulning/study/qemu/include/qapi/error.h"
void error_setg_errno_internal(Error **errp, const char *fname, int line,
                               const char *func, int os_error, const char *fmt,
                               ...)
    __attribute__((__format__(gnu_printf, 6, 7)));
# 374 "/home/paulning/study/qemu/include/qapi/error.h"
void error_propagate(Error **dst_errp, Error *local_err);
# 384 "/home/paulning/study/qemu/include/qapi/error.h"
void error_propagate_prepend(Error **dst_errp, Error *local_err,
                             const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 3, 4)));

void error_vprepend(Error *const *errp, const char *fmt, va_list ap)
    __attribute__((__format__(gnu_printf, 2, 0)));

void error_prepend(Error *const *errp, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));
# 416 "/home/paulning/study/qemu/include/qapi/error.h"
void error_append_hint(Error *const *errp, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

void error_setg_file_open_internal(Error **errp, const char *src, int line,
                                   const char *func, int os_errno,
                                   const char *filename);

Error *error_copy(const Error *err);

void error_free(Error *err);

typedef Error *Error_autoptr;
typedef GList *Error_listautoptr;
typedef GSList *Error_slistautoptr;
typedef GQueue *Error_queueautoptr;
# 440 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic push
# 440 "/home/paulning/study/qemu/include/qapi/error.h"

# 440 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 440 "/home/paulning/study/qemu/include/qapi/error.h"
static __attribute__((__unused__)) inline void
glib_autoptr_clear_Error(Error *_ptr) {
  if (_ptr)
    (error_free)((Error *)_ptr);
}
static __attribute__((__unused__)) inline void
glib_autoptr_cleanup_Error(Error **_ptr) {
  glib_autoptr_clear_Error(*_ptr);
}
static __attribute__((__unused__)) inline void
glib_listautoptr_cleanup_Error(GList **_l) {
  g_list_free_full(*_l, (GDestroyNotify)(void (*)(void))error_free);
}
static __attribute__((__unused__)) inline void
glib_slistautoptr_cleanup_Error(GSList **_l) {
  g_slist_free_full(*_l, (GDestroyNotify)(void (*)(void))error_free);
}
static __attribute__((__unused__)) inline void
glib_queueautoptr_cleanup_Error(GQueue **_q) {
  if (*_q)
    g_queue_free_full(*_q, (GDestroyNotify)(void (*)(void))error_free);
}
# 440 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic pop

void error_free_or_abort(Error **errp);

void warn_report_err(Error *err);

void error_report_err(Error *err);

void warn_reportf_err(Error *err, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

void error_reportf_err(Error *err, const char *fmt, ...)
    __attribute__((__format__(gnu_printf, 2, 3)));

# 475 "/home/paulning/study/qemu/include/qapi/error.h" 3 4
_Bool
# 475 "/home/paulning/study/qemu/include/qapi/error.h"
    warn_report_err_once_cond(
# 475 "/home/paulning/study/qemu/include/qapi/error.h" 3 4
                              _Bool
# 475 "/home/paulning/study/qemu/include/qapi/error.h"
                                   *printed, Error *err);
# 491 "/home/paulning/study/qemu/include/qapi/error.h"
void error_set_internal(Error **errp, const char *src, int line,
                        const char *func, ErrorClass err_class, const char *fmt,
                        ...) __attribute__((__format__(gnu_printf, 6, 7)));
# 524 "/home/paulning/study/qemu/include/qapi/error.h"
typedef struct ErrorPropagator {
  Error *local_err;
  Error **errp;
} ErrorPropagator;

static inline void error_propagator_cleanup(ErrorPropagator *prop) {
  error_propagate(prop->errp, prop->local_err);
}

# 534 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic push
# 534 "/home/paulning/study/qemu/include/qapi/error.h"

# 534 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 534 "/home/paulning/study/qemu/include/qapi/error.h"
static __attribute__((__unused__)) inline void
glib_auto_cleanup_ErrorPropagator(ErrorPropagator *_ptr) {
  (error_propagator_cleanup)(_ptr);
}
# 534 "/home/paulning/study/qemu/include/qapi/error.h"
#pragma GCC diagnostic pop
# 534 "/home/paulning/study/qemu/include/qapi/error.h"
;

extern Error *error_warn;

extern Error *error_abort;

extern Error *error_fatal;
# 29 "../../../target/arm/helper.c" 2
# 1 "/home/paulning/study/qemu/include/qemu/guest-random.h" 1
# 25 "/home/paulning/study/qemu/include/qemu/guest-random.h"
int qemu_guest_random_seed_main(const char *seedstr, Error **errp);

uint64_t qemu_guest_random_seed_thread_part1(void);
# 42 "/home/paulning/study/qemu/include/qemu/guest-random.h"
void qemu_guest_random_seed_thread_part2(uint64_t seed);
# 56 "/home/paulning/study/qemu/include/qemu/guest-random.h"
int qemu_guest_getrandom(void *buf, size_t len, Error **errp);
# 66 "/home/paulning/study/qemu/include/qemu/guest-random.h"
void qemu_guest_getrandom_nofail(void *buf, size_t len);
# 30 "../../../target/arm/helper.c" 2

# 1 "/home/paulning/study/qemu/include/semihosting/common-semi.h" 1
# 37 "/home/paulning/study/qemu/include/semihosting/common-semi.h"
void do_common_semihosting(CPUState *cs);
# 32 "../../../target/arm/helper.c" 2

# 1 "../../../target/arm/cpregs.h" 1
# 25 "../../../target/arm/cpregs.h"
# 1 "/home/paulning/study/qemu/target/arm/kvm-consts.h" 1
# 26 "../../../target/arm/cpregs.h" 2

enum {

  ARM_CP_SPECIAL_MASK = 0x000f,

  ARM_CP_NOP = 0x0001,

  ARM_CP_WFI = 0x0002,

  ARM_CP_NZCV = 0x0003,

  ARM_CP_CURRENTEL = 0x0004,

  ARM_CP_DC_ZVA = 0x0005,
  ARM_CP_DC_GVA = 0x0006,
  ARM_CP_DC_GZVA = 0x0007,

  ARM_CP_CONST = 1 << 4,

  ARM_CP_64BIT = 1 << 5,

  ARM_CP_SUPPRESS_TB_END = 1 << 6,

  ARM_CP_OVERRIDE = 1 << 7,

  ARM_CP_ALIAS = 1 << 8,

  ARM_CP_IO = 1 << 9,

  ARM_CP_NO_RAW = 1 << 10,

  ARM_CP_RAISES_EXC = 1 << 11,

  ARM_CP_NEWEL = 1 << 12,

  ARM_CP_FPU = 1 << 13,

  ARM_CP_SVE = 1 << 14,

  ARM_CP_NO_GDB = 1 << 15,
# 116 "../../../target/arm/cpregs.h"
  ARM_CP_EL3_NO_EL2_UNDEF = 1 << 16,
  ARM_CP_EL3_NO_EL2_KEEP = 1 << 17,
  ARM_CP_EL3_NO_EL2_C_NZ = 1 << 18,

  ARM_CP_SME = 1 << 19,

  ARM_CP_NV2_REDIRECT = 1 << 20,

  ARM_CP_ADD_TLBI_NXS = 1 << 21,
};
# 196 "../../../target/arm/cpregs.h"
static inline uint32_t kvm_to_cpreg_id(uint64_t kvmid) {
  uint32_t cpregid = kvmid;
  if ((kvmid & 0xff00000000000000ULL) == 0x6000000000000000ULL) {
    cpregid |= (1 << 28);
  } else {
    if ((kvmid & 0x00f0000000000000ULL) == 0x0030000000000000ULL) {
      cpregid |= (1 << 15);
    }

    cpregid |= 1 << 29;
  }
  return cpregid;
}

static inline uint64_t cpreg_to_kvm_id(uint32_t cpregid) {
  uint64_t kvmid;

  if (cpregid & (1 << 28)) {
    kvmid = cpregid & ~(1 << 28);
    kvmid |= 0x0030000000000000ULL | 0x6000000000000000ULL;
  } else {
    kvmid = cpregid & ~(1 << 15);
    if (cpregid & (1 << 15)) {
      kvmid |= 0x0030000000000000ULL | 0x4000000000000000ULL;
    } else {
      kvmid |= 0x0020000000000000ULL | 0x4000000000000000ULL;
    }
  }
  return kvmid;
}
# 247 "../../../target/arm/cpregs.h"
typedef enum {
  ARM_CP_STATE_AA32 = 0,
  ARM_CP_STATE_AA64 = 1,
  ARM_CP_STATE_BOTH = 2,
} CPState;
# 264 "../../../target/arm/cpregs.h"
typedef enum {
  ARM_CP_SECSTATE_BOTH = 0,
  ARM_CP_SECSTATE_S = (1 << 0),
  ARM_CP_SECSTATE_NS = (1 << 1),
} CPSecureState;
# 288 "../../../target/arm/cpregs.h"
typedef enum {
  PL3_R = 0x80,
  PL3_W = 0x40,
  PL2_R = 0x20 | PL3_R,
  PL2_W = 0x10 | PL3_W,
  PL1_R = 0x08 | PL2_R,
  PL1_W = 0x04 | PL2_W,
  PL0_R = 0x02 | PL1_R,
  PL0_W = 0x01 | PL1_W,
# 305 "../../../target/arm/cpregs.h"
  PL0U_R = PL0_R,

  PL3_RW = PL3_R | PL3_W,
  PL2_RW = PL2_R | PL2_W,
  PL1_RW = PL1_R | PL1_W,
  PL0_RW = PL0_R | PL0_W,
} CPAccessRights;

typedef enum CPAccessResult {

  CP_ACCESS_OK = 0,

  CP_ACCESS_EL_MASK = 3,
# 334 "../../../target/arm/cpregs.h"
  CP_ACCESS_TRAP_BIT = (1 << 2),
  CP_ACCESS_TRAP_EL1 = CP_ACCESS_TRAP_BIT | 1,
  CP_ACCESS_TRAP_EL2 = CP_ACCESS_TRAP_BIT | 2,
  CP_ACCESS_TRAP_EL3 = CP_ACCESS_TRAP_BIT | 3,
# 347 "../../../target/arm/cpregs.h"
  CP_ACCESS_UNDEFINED = (2 << 2),
} CPAccessResult;
# 359 "../../../target/arm/cpregs.h"
enum { R_HFGRTR_EL2_AFSR0_EL1_SHIFT = (0) };
enum { R_HFGRTR_EL2_AFSR0_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_AFSR0_EL1_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_HFGRTR_EL2_AFSR1_EL1_SHIFT = (1) };
enum { R_HFGRTR_EL2_AFSR1_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_AFSR1_EL1_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_HFGRTR_EL2_AIDR_EL1_SHIFT = (2) };
enum { R_HFGRTR_EL2_AIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_AIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_HFGRTR_EL2_AMAIR_EL1_SHIFT = (3) };
enum { R_HFGRTR_EL2_AMAIR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_AMAIR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_HFGRTR_EL2_APDAKEY_SHIFT = (4) };
enum { R_HFGRTR_EL2_APDAKEY_LENGTH = (1) };
enum { R_HFGRTR_EL2_APDAKEY_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_HFGRTR_EL2_APDBKEY_SHIFT = (5) };
enum { R_HFGRTR_EL2_APDBKEY_LENGTH = (1) };
enum { R_HFGRTR_EL2_APDBKEY_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_HFGRTR_EL2_APGAKEY_SHIFT = (6) };
enum { R_HFGRTR_EL2_APGAKEY_LENGTH = (1) };
enum { R_HFGRTR_EL2_APGAKEY_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_HFGRTR_EL2_APIAKEY_SHIFT = (7) };
enum { R_HFGRTR_EL2_APIAKEY_LENGTH = (1) };
enum { R_HFGRTR_EL2_APIAKEY_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_HFGRTR_EL2_APIBKEY_SHIFT = (8) };
enum { R_HFGRTR_EL2_APIBKEY_LENGTH = (1) };
enum { R_HFGRTR_EL2_APIBKEY_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_HFGRTR_EL2_CCSIDR_EL1_SHIFT = (9) };
enum { R_HFGRTR_EL2_CCSIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_CCSIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_HFGRTR_EL2_CLIDR_EL1_SHIFT = (10) };
enum { R_HFGRTR_EL2_CLIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_CLIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_HFGRTR_EL2_CONTEXTIDR_EL1_SHIFT = (11) };
enum { R_HFGRTR_EL2_CONTEXTIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_CONTEXTIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HFGRTR_EL2_CPACR_EL1_SHIFT = (12) };
enum { R_HFGRTR_EL2_CPACR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_CPACR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_HFGRTR_EL2_CSSELR_EL1_SHIFT = (13) };
enum { R_HFGRTR_EL2_CSSELR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_CSSELR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_HFGRTR_EL2_CTR_EL0_SHIFT = (14) };
enum { R_HFGRTR_EL2_CTR_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_CTR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_HFGRTR_EL2_DCZID_EL0_SHIFT = (15) };
enum { R_HFGRTR_EL2_DCZID_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_DCZID_EL0_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_HFGRTR_EL2_ESR_EL1_SHIFT = (16) };
enum { R_HFGRTR_EL2_ESR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ESR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_HFGRTR_EL2_FAR_EL1_SHIFT = (17) };
enum { R_HFGRTR_EL2_FAR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_FAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_HFGRTR_EL2_ISR_EL1_SHIFT = (18) };
enum { R_HFGRTR_EL2_ISR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ISR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_HFGRTR_EL2_LORC_EL1_SHIFT = (19) };
enum { R_HFGRTR_EL2_LORC_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_LORC_EL1_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_HFGRTR_EL2_LOREA_EL1_SHIFT = (20) };
enum { R_HFGRTR_EL2_LOREA_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_LOREA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_HFGRTR_EL2_LORID_EL1_SHIFT = (21) };
enum { R_HFGRTR_EL2_LORID_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_LORID_EL1_MASK = (((~0ULL) >> (64 - (1))) << (21)) };
enum { R_HFGRTR_EL2_LORN_EL1_SHIFT = (22) };
enum { R_HFGRTR_EL2_LORN_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_LORN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_HFGRTR_EL2_LORSA_EL1_SHIFT = (23) };
enum { R_HFGRTR_EL2_LORSA_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_LORSA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_HFGRTR_EL2_MAIR_EL1_SHIFT = (24) };
enum { R_HFGRTR_EL2_MAIR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_MAIR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (24)) };
enum { R_HFGRTR_EL2_MIDR_EL1_SHIFT = (25) };
enum { R_HFGRTR_EL2_MIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_MIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (25)) };
enum { R_HFGRTR_EL2_MPIDR_EL1_SHIFT = (26) };
enum { R_HFGRTR_EL2_MPIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_MPIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_HFGRTR_EL2_PAR_EL1_SHIFT = (27) };
enum { R_HFGRTR_EL2_PAR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_PAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_HFGRTR_EL2_REVIDR_EL1_SHIFT = (28) };
enum { R_HFGRTR_EL2_REVIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_REVIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_HFGRTR_EL2_SCTLR_EL1_SHIFT = (29) };
enum { R_HFGRTR_EL2_SCTLR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_SCTLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_HFGRTR_EL2_SCXTNUM_EL1_SHIFT = (30) };
enum { R_HFGRTR_EL2_SCXTNUM_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_SCXTNUM_EL1_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_HFGRTR_EL2_SCXTNUM_EL0_SHIFT = (31) };
enum { R_HFGRTR_EL2_SCXTNUM_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_SCXTNUM_EL0_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_HFGRTR_EL2_TCR_EL1_SHIFT = (32) };
enum { R_HFGRTR_EL2_TCR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_TCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_HFGRTR_EL2_TPIDR_EL1_SHIFT = (33) };
enum { R_HFGRTR_EL2_TPIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_TPIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_HFGRTR_EL2_TPIDRRO_EL0_SHIFT = (34) };
enum { R_HFGRTR_EL2_TPIDRRO_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_TPIDRRO_EL0_MASK = (((~0ULL) >> (64 - (1))) << (34)) };
enum { R_HFGRTR_EL2_TPIDR_EL0_SHIFT = (35) };
enum { R_HFGRTR_EL2_TPIDR_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_TPIDR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_HFGRTR_EL2_TTBR0_EL1_SHIFT = (36) };
enum { R_HFGRTR_EL2_TTBR0_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_TTBR0_EL1_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_HFGRTR_EL2_TTBR1_EL1_SHIFT = (37) };
enum { R_HFGRTR_EL2_TTBR1_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_TTBR1_EL1_MASK = (((~0ULL) >> (64 - (1))) << (37)) };
enum { R_HFGRTR_EL2_VBAR_EL1_SHIFT = (38) };
enum { R_HFGRTR_EL2_VBAR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_VBAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (38)) };
enum { R_HFGRTR_EL2_ICC_IGRPENN_EL1_SHIFT = (39) };
enum { R_HFGRTR_EL2_ICC_IGRPENN_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ICC_IGRPENN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (39)) };
enum { R_HFGRTR_EL2_ERRIDR_EL1_SHIFT = (40) };
enum { R_HFGRTR_EL2_ERRIDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERRIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (40)) };
enum { R_HFGRTR_EL2_ERRSELR_EL1_SHIFT = (41) };
enum { R_HFGRTR_EL2_ERRSELR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERRSELR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (41)) };
enum { R_HFGRTR_EL2_ERXFR_EL1_SHIFT = (42) };
enum { R_HFGRTR_EL2_ERXFR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (42)) };
enum { R_HFGRTR_EL2_ERXCTLR_EL1_SHIFT = (43) };
enum { R_HFGRTR_EL2_ERXCTLR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXCTLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (43)) };
enum { R_HFGRTR_EL2_ERXSTATUS_EL1_SHIFT = (44) };
enum { R_HFGRTR_EL2_ERXSTATUS_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXSTATUS_EL1_MASK = (((~0ULL) >> (64 - (1))) << (44)) };
enum { R_HFGRTR_EL2_ERXMISCN_EL1_SHIFT = (45) };
enum { R_HFGRTR_EL2_ERXMISCN_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXMISCN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (45)) };
enum { R_HFGRTR_EL2_ERXPFGF_EL1_SHIFT = (46) };
enum { R_HFGRTR_EL2_ERXPFGF_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXPFGF_EL1_MASK = (((~0ULL) >> (64 - (1))) << (46)) };
enum { R_HFGRTR_EL2_ERXPFGCTL_EL1_SHIFT = (47) };
enum { R_HFGRTR_EL2_ERXPFGCTL_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXPFGCTL_EL1_MASK = (((~0ULL) >> (64 - (1))) << (47)) };
enum { R_HFGRTR_EL2_ERXPFGCDN_EL1_SHIFT = (48) };
enum { R_HFGRTR_EL2_ERXPFGCDN_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXPFGCDN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (48)) };
enum { R_HFGRTR_EL2_ERXADDR_EL1_SHIFT = (49) };
enum { R_HFGRTR_EL2_ERXADDR_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_ERXADDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (49)) };
enum { R_HFGRTR_EL2_NACCDATA_EL1_SHIFT = (50) };
enum { R_HFGRTR_EL2_NACCDATA_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_NACCDATA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (50)) };

enum { R_HFGRTR_EL2_NSMPRI_EL1_SHIFT = (54) };
enum { R_HFGRTR_EL2_NSMPRI_EL1_LENGTH = (1) };
enum { R_HFGRTR_EL2_NSMPRI_EL1_MASK = (((~0ULL) >> (64 - (1))) << (54)) };
enum { R_HFGRTR_EL2_NTPIDR2_EL0_SHIFT = (55) };
enum { R_HFGRTR_EL2_NTPIDR2_EL0_LENGTH = (1) };
enum { R_HFGRTR_EL2_NTPIDR2_EL0_MASK = (((~0ULL) >> (64 - (1))) << (55)) };

enum { R_HFGWTR_EL2_AFSR0_EL1_SHIFT = (0) };
enum { R_HFGWTR_EL2_AFSR0_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_AFSR0_EL1_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_HFGWTR_EL2_AFSR1_EL1_SHIFT = (1) };
enum { R_HFGWTR_EL2_AFSR1_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_AFSR1_EL1_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_HFGWTR_EL2_AMAIR_EL1_SHIFT = (3) };
enum { R_HFGWTR_EL2_AMAIR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_AMAIR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_HFGWTR_EL2_APDAKEY_SHIFT = (4) };
enum { R_HFGWTR_EL2_APDAKEY_LENGTH = (1) };
enum { R_HFGWTR_EL2_APDAKEY_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_HFGWTR_EL2_APDBKEY_SHIFT = (5) };
enum { R_HFGWTR_EL2_APDBKEY_LENGTH = (1) };
enum { R_HFGWTR_EL2_APDBKEY_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_HFGWTR_EL2_APGAKEY_SHIFT = (6) };
enum { R_HFGWTR_EL2_APGAKEY_LENGTH = (1) };
enum { R_HFGWTR_EL2_APGAKEY_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_HFGWTR_EL2_APIAKEY_SHIFT = (7) };
enum { R_HFGWTR_EL2_APIAKEY_LENGTH = (1) };
enum { R_HFGWTR_EL2_APIAKEY_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_HFGWTR_EL2_APIBKEY_SHIFT = (8) };
enum { R_HFGWTR_EL2_APIBKEY_LENGTH = (1) };
enum { R_HFGWTR_EL2_APIBKEY_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_HFGWTR_EL2_CONTEXTIDR_EL1_SHIFT = (11) };
enum { R_HFGWTR_EL2_CONTEXTIDR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_CONTEXTIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HFGWTR_EL2_CPACR_EL1_SHIFT = (12) };
enum { R_HFGWTR_EL2_CPACR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_CPACR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_HFGWTR_EL2_CSSELR_EL1_SHIFT = (13) };
enum { R_HFGWTR_EL2_CSSELR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_CSSELR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_HFGWTR_EL2_ESR_EL1_SHIFT = (16) };
enum { R_HFGWTR_EL2_ESR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ESR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_HFGWTR_EL2_FAR_EL1_SHIFT = (17) };
enum { R_HFGWTR_EL2_FAR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_FAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_HFGWTR_EL2_LORC_EL1_SHIFT = (19) };
enum { R_HFGWTR_EL2_LORC_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_LORC_EL1_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_HFGWTR_EL2_LOREA_EL1_SHIFT = (20) };
enum { R_HFGWTR_EL2_LOREA_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_LOREA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_HFGWTR_EL2_LORN_EL1_SHIFT = (22) };
enum { R_HFGWTR_EL2_LORN_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_LORN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_HFGWTR_EL2_LORSA_EL1_SHIFT = (23) };
enum { R_HFGWTR_EL2_LORSA_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_LORSA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_HFGWTR_EL2_MAIR_EL1_SHIFT = (24) };
enum { R_HFGWTR_EL2_MAIR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_MAIR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (24)) };
enum { R_HFGWTR_EL2_PAR_EL1_SHIFT = (27) };
enum { R_HFGWTR_EL2_PAR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_PAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_HFGWTR_EL2_SCTLR_EL1_SHIFT = (29) };
enum { R_HFGWTR_EL2_SCTLR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_SCTLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_HFGWTR_EL2_SCXTNUM_EL1_SHIFT = (30) };
enum { R_HFGWTR_EL2_SCXTNUM_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_SCXTNUM_EL1_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_HFGWTR_EL2_SCXTNUM_EL0_SHIFT = (31) };
enum { R_HFGWTR_EL2_SCXTNUM_EL0_LENGTH = (1) };
enum { R_HFGWTR_EL2_SCXTNUM_EL0_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_HFGWTR_EL2_TCR_EL1_SHIFT = (32) };
enum { R_HFGWTR_EL2_TCR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_TCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_HFGWTR_EL2_TPIDR_EL1_SHIFT = (33) };
enum { R_HFGWTR_EL2_TPIDR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_TPIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_HFGWTR_EL2_TPIDRRO_EL0_SHIFT = (34) };
enum { R_HFGWTR_EL2_TPIDRRO_EL0_LENGTH = (1) };
enum { R_HFGWTR_EL2_TPIDRRO_EL0_MASK = (((~0ULL) >> (64 - (1))) << (34)) };
enum { R_HFGWTR_EL2_TPIDR_EL0_SHIFT = (35) };
enum { R_HFGWTR_EL2_TPIDR_EL0_LENGTH = (1) };
enum { R_HFGWTR_EL2_TPIDR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_HFGWTR_EL2_TTBR0_EL1_SHIFT = (36) };
enum { R_HFGWTR_EL2_TTBR0_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_TTBR0_EL1_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_HFGWTR_EL2_TTBR1_EL1_SHIFT = (37) };
enum { R_HFGWTR_EL2_TTBR1_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_TTBR1_EL1_MASK = (((~0ULL) >> (64 - (1))) << (37)) };
enum { R_HFGWTR_EL2_VBAR_EL1_SHIFT = (38) };
enum { R_HFGWTR_EL2_VBAR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_VBAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (38)) };
enum { R_HFGWTR_EL2_ICC_IGRPENN_EL1_SHIFT = (39) };
enum { R_HFGWTR_EL2_ICC_IGRPENN_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ICC_IGRPENN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (39)) };
enum { R_HFGWTR_EL2_ERRSELR_EL1_SHIFT = (41) };
enum { R_HFGWTR_EL2_ERRSELR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERRSELR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (41)) };
enum { R_HFGWTR_EL2_ERXCTLR_EL1_SHIFT = (43) };
enum { R_HFGWTR_EL2_ERXCTLR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXCTLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (43)) };
enum { R_HFGWTR_EL2_ERXSTATUS_EL1_SHIFT = (44) };
enum { R_HFGWTR_EL2_ERXSTATUS_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXSTATUS_EL1_MASK = (((~0ULL) >> (64 - (1))) << (44)) };
enum { R_HFGWTR_EL2_ERXMISCN_EL1_SHIFT = (45) };
enum { R_HFGWTR_EL2_ERXMISCN_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXMISCN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (45)) };
enum { R_HFGWTR_EL2_ERXPFGCTL_EL1_SHIFT = (47) };
enum { R_HFGWTR_EL2_ERXPFGCTL_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXPFGCTL_EL1_MASK = (((~0ULL) >> (64 - (1))) << (47)) };
enum { R_HFGWTR_EL2_ERXPFGCDN_EL1_SHIFT = (48) };
enum { R_HFGWTR_EL2_ERXPFGCDN_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXPFGCDN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (48)) };
enum { R_HFGWTR_EL2_ERXADDR_EL1_SHIFT = (49) };
enum { R_HFGWTR_EL2_ERXADDR_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_ERXADDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (49)) };
enum { R_HFGWTR_EL2_NACCDATA_EL1_SHIFT = (50) };
enum { R_HFGWTR_EL2_NACCDATA_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_NACCDATA_EL1_MASK = (((~0ULL) >> (64 - (1))) << (50)) };
enum { R_HFGWTR_EL2_NSMPRI_EL1_SHIFT = (54) };
enum { R_HFGWTR_EL2_NSMPRI_EL1_LENGTH = (1) };
enum { R_HFGWTR_EL2_NSMPRI_EL1_MASK = (((~0ULL) >> (64 - (1))) << (54)) };
enum { R_HFGWTR_EL2_NTPIDR2_EL0_SHIFT = (55) };
enum { R_HFGWTR_EL2_NTPIDR2_EL0_LENGTH = (1) };
enum { R_HFGWTR_EL2_NTPIDR2_EL0_MASK = (((~0ULL) >> (64 - (1))) << (55)) };

enum { R_HFGITR_EL2_ICIALLUIS_SHIFT = (0) };
enum { R_HFGITR_EL2_ICIALLUIS_LENGTH = (1) };
enum { R_HFGITR_EL2_ICIALLUIS_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_HFGITR_EL2_ICIALLU_SHIFT = (1) };
enum { R_HFGITR_EL2_ICIALLU_LENGTH = (1) };
enum { R_HFGITR_EL2_ICIALLU_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_HFGITR_EL2_ICIVAU_SHIFT = (2) };
enum { R_HFGITR_EL2_ICIVAU_LENGTH = (1) };
enum { R_HFGITR_EL2_ICIVAU_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_HFGITR_EL2_DCIVAC_SHIFT = (3) };
enum { R_HFGITR_EL2_DCIVAC_LENGTH = (1) };
enum { R_HFGITR_EL2_DCIVAC_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_HFGITR_EL2_DCISW_SHIFT = (4) };
enum { R_HFGITR_EL2_DCISW_LENGTH = (1) };
enum { R_HFGITR_EL2_DCISW_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_HFGITR_EL2_DCCSW_SHIFT = (5) };
enum { R_HFGITR_EL2_DCCSW_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCSW_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_HFGITR_EL2_DCCISW_SHIFT = (6) };
enum { R_HFGITR_EL2_DCCISW_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCISW_MASK = (((~0ULL) >> (64 - (1))) << (6)) };
enum { R_HFGITR_EL2_DCCVAU_SHIFT = (7) };
enum { R_HFGITR_EL2_DCCVAU_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCVAU_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_HFGITR_EL2_DCCVAP_SHIFT = (8) };
enum { R_HFGITR_EL2_DCCVAP_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCVAP_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_HFGITR_EL2_DCCVADP_SHIFT = (9) };
enum { R_HFGITR_EL2_DCCVADP_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCVADP_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_HFGITR_EL2_DCCIVAC_SHIFT = (10) };
enum { R_HFGITR_EL2_DCCIVAC_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCIVAC_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_HFGITR_EL2_DCZVA_SHIFT = (11) };
enum { R_HFGITR_EL2_DCZVA_LENGTH = (1) };
enum { R_HFGITR_EL2_DCZVA_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HFGITR_EL2_ATS1E1R_SHIFT = (12) };
enum { R_HFGITR_EL2_ATS1E1R_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E1R_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_HFGITR_EL2_ATS1E1W_SHIFT = (13) };
enum { R_HFGITR_EL2_ATS1E1W_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E1W_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_HFGITR_EL2_ATS1E0R_SHIFT = (14) };
enum { R_HFGITR_EL2_ATS1E0R_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E0R_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_HFGITR_EL2_ATS1E0W_SHIFT = (15) };
enum { R_HFGITR_EL2_ATS1E0W_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E0W_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_HFGITR_EL2_ATS1E1RP_SHIFT = (16) };
enum { R_HFGITR_EL2_ATS1E1RP_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E1RP_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_HFGITR_EL2_ATS1E1WP_SHIFT = (17) };
enum { R_HFGITR_EL2_ATS1E1WP_LENGTH = (1) };
enum { R_HFGITR_EL2_ATS1E1WP_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_HFGITR_EL2_TLBIVMALLE1OS_SHIFT = (18) };
enum { R_HFGITR_EL2_TLBIVMALLE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVMALLE1OS_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_HFGITR_EL2_TLBIVAE1OS_SHIFT = (19) };
enum { R_HFGITR_EL2_TLBIVAE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAE1OS_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_HFGITR_EL2_TLBIASIDE1OS_SHIFT = (20) };
enum { R_HFGITR_EL2_TLBIASIDE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIASIDE1OS_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_HFGITR_EL2_TLBIVAAE1OS_SHIFT = (21) };
enum { R_HFGITR_EL2_TLBIVAAE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAAE1OS_MASK = (((~0ULL) >> (64 - (1))) << (21)) };
enum { R_HFGITR_EL2_TLBIVALE1OS_SHIFT = (22) };
enum { R_HFGITR_EL2_TLBIVALE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVALE1OS_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_HFGITR_EL2_TLBIVAALE1OS_SHIFT = (23) };
enum { R_HFGITR_EL2_TLBIVAALE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAALE1OS_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_HFGITR_EL2_TLBIRVAE1OS_SHIFT = (24) };
enum { R_HFGITR_EL2_TLBIRVAE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAE1OS_MASK = (((~0ULL) >> (64 - (1))) << (24)) };
enum { R_HFGITR_EL2_TLBIRVAAE1OS_SHIFT = (25) };
enum { R_HFGITR_EL2_TLBIRVAAE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAAE1OS_MASK = (((~0ULL) >> (64 - (1))) << (25)) };
enum { R_HFGITR_EL2_TLBIRVALE1OS_SHIFT = (26) };
enum { R_HFGITR_EL2_TLBIRVALE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVALE1OS_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_HFGITR_EL2_TLBIRVAALE1OS_SHIFT = (27) };
enum { R_HFGITR_EL2_TLBIRVAALE1OS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAALE1OS_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_HFGITR_EL2_TLBIVMALLE1IS_SHIFT = (28) };
enum { R_HFGITR_EL2_TLBIVMALLE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVMALLE1IS_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_HFGITR_EL2_TLBIVAE1IS_SHIFT = (29) };
enum { R_HFGITR_EL2_TLBIVAE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAE1IS_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_HFGITR_EL2_TLBIASIDE1IS_SHIFT = (30) };
enum { R_HFGITR_EL2_TLBIASIDE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIASIDE1IS_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_HFGITR_EL2_TLBIVAAE1IS_SHIFT = (31) };
enum { R_HFGITR_EL2_TLBIVAAE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAAE1IS_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_HFGITR_EL2_TLBIVALE1IS_SHIFT = (32) };
enum { R_HFGITR_EL2_TLBIVALE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVALE1IS_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_HFGITR_EL2_TLBIVAALE1IS_SHIFT = (33) };
enum { R_HFGITR_EL2_TLBIVAALE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAALE1IS_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_HFGITR_EL2_TLBIRVAE1IS_SHIFT = (34) };
enum { R_HFGITR_EL2_TLBIRVAE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAE1IS_MASK = (((~0ULL) >> (64 - (1))) << (34)) };
enum { R_HFGITR_EL2_TLBIRVAAE1IS_SHIFT = (35) };
enum { R_HFGITR_EL2_TLBIRVAAE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAAE1IS_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_HFGITR_EL2_TLBIRVALE1IS_SHIFT = (36) };
enum { R_HFGITR_EL2_TLBIRVALE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVALE1IS_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_HFGITR_EL2_TLBIRVAALE1IS_SHIFT = (37) };
enum { R_HFGITR_EL2_TLBIRVAALE1IS_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAALE1IS_MASK = (((~0ULL) >> (64 - (1))) << (37)) };
enum { R_HFGITR_EL2_TLBIRVAE1_SHIFT = (38) };
enum { R_HFGITR_EL2_TLBIRVAE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAE1_MASK = (((~0ULL) >> (64 - (1))) << (38)) };
enum { R_HFGITR_EL2_TLBIRVAAE1_SHIFT = (39) };
enum { R_HFGITR_EL2_TLBIRVAAE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAAE1_MASK = (((~0ULL) >> (64 - (1))) << (39)) };
enum { R_HFGITR_EL2_TLBIRVALE1_SHIFT = (40) };
enum { R_HFGITR_EL2_TLBIRVALE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVALE1_MASK = (((~0ULL) >> (64 - (1))) << (40)) };
enum { R_HFGITR_EL2_TLBIRVAALE1_SHIFT = (41) };
enum { R_HFGITR_EL2_TLBIRVAALE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIRVAALE1_MASK = (((~0ULL) >> (64 - (1))) << (41)) };
enum { R_HFGITR_EL2_TLBIVMALLE1_SHIFT = (42) };
enum { R_HFGITR_EL2_TLBIVMALLE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVMALLE1_MASK = (((~0ULL) >> (64 - (1))) << (42)) };
enum { R_HFGITR_EL2_TLBIVAE1_SHIFT = (43) };
enum { R_HFGITR_EL2_TLBIVAE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAE1_MASK = (((~0ULL) >> (64 - (1))) << (43)) };
enum { R_HFGITR_EL2_TLBIASIDE1_SHIFT = (44) };
enum { R_HFGITR_EL2_TLBIASIDE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIASIDE1_MASK = (((~0ULL) >> (64 - (1))) << (44)) };
enum { R_HFGITR_EL2_TLBIVAAE1_SHIFT = (45) };
enum { R_HFGITR_EL2_TLBIVAAE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAAE1_MASK = (((~0ULL) >> (64 - (1))) << (45)) };
enum { R_HFGITR_EL2_TLBIVALE1_SHIFT = (46) };
enum { R_HFGITR_EL2_TLBIVALE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVALE1_MASK = (((~0ULL) >> (64 - (1))) << (46)) };
enum { R_HFGITR_EL2_TLBIVAALE1_SHIFT = (47) };
enum { R_HFGITR_EL2_TLBIVAALE1_LENGTH = (1) };
enum { R_HFGITR_EL2_TLBIVAALE1_MASK = (((~0ULL) >> (64 - (1))) << (47)) };
enum { R_HFGITR_EL2_CFPRCTX_SHIFT = (48) };
enum { R_HFGITR_EL2_CFPRCTX_LENGTH = (1) };
enum { R_HFGITR_EL2_CFPRCTX_MASK = (((~0ULL) >> (64 - (1))) << (48)) };
enum { R_HFGITR_EL2_DVPRCTX_SHIFT = (49) };
enum { R_HFGITR_EL2_DVPRCTX_LENGTH = (1) };
enum { R_HFGITR_EL2_DVPRCTX_MASK = (((~0ULL) >> (64 - (1))) << (49)) };
enum { R_HFGITR_EL2_CPPRCTX_SHIFT = (50) };
enum { R_HFGITR_EL2_CPPRCTX_LENGTH = (1) };
enum { R_HFGITR_EL2_CPPRCTX_MASK = (((~0ULL) >> (64 - (1))) << (50)) };
enum { R_HFGITR_EL2_ERET_SHIFT = (51) };
enum { R_HFGITR_EL2_ERET_LENGTH = (1) };
enum { R_HFGITR_EL2_ERET_MASK = (((~0ULL) >> (64 - (1))) << (51)) };
enum { R_HFGITR_EL2_SVC_EL0_SHIFT = (52) };
enum { R_HFGITR_EL2_SVC_EL0_LENGTH = (1) };
enum { R_HFGITR_EL2_SVC_EL0_MASK = (((~0ULL) >> (64 - (1))) << (52)) };
enum { R_HFGITR_EL2_SVC_EL1_SHIFT = (53) };
enum { R_HFGITR_EL2_SVC_EL1_LENGTH = (1) };
enum { R_HFGITR_EL2_SVC_EL1_MASK = (((~0ULL) >> (64 - (1))) << (53)) };
enum { R_HFGITR_EL2_DCCVAC_SHIFT = (54) };
enum { R_HFGITR_EL2_DCCVAC_LENGTH = (1) };
enum { R_HFGITR_EL2_DCCVAC_MASK = (((~0ULL) >> (64 - (1))) << (54)) };
enum { R_HFGITR_EL2_NBRBINJ_SHIFT = (55) };
enum { R_HFGITR_EL2_NBRBINJ_LENGTH = (1) };
enum { R_HFGITR_EL2_NBRBINJ_MASK = (((~0ULL) >> (64 - (1))) << (55)) };
enum { R_HFGITR_EL2_NBRBIALL_SHIFT = (56) };
enum { R_HFGITR_EL2_NBRBIALL_LENGTH = (1) };
enum { R_HFGITR_EL2_NBRBIALL_MASK = (((~0ULL) >> (64 - (1))) << (56)) };

enum { R_HDFGRTR_EL2_DBGBCRN_EL1_SHIFT = (0) };
enum { R_HDFGRTR_EL2_DBGBCRN_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGBCRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_HDFGRTR_EL2_DBGBVRN_EL1_SHIFT = (1) };
enum { R_HDFGRTR_EL2_DBGBVRN_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGBVRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_HDFGRTR_EL2_DBGWCRN_EL1_SHIFT = (2) };
enum { R_HDFGRTR_EL2_DBGWCRN_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGWCRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_HDFGRTR_EL2_DBGWVRN_EL1_SHIFT = (3) };
enum { R_HDFGRTR_EL2_DBGWVRN_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGWVRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_HDFGRTR_EL2_MDSCR_EL1_SHIFT = (4) };
enum { R_HDFGRTR_EL2_MDSCR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_MDSCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_HDFGRTR_EL2_DBGCLAIM_SHIFT = (5) };
enum { R_HDFGRTR_EL2_DBGCLAIM_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGCLAIM_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_HDFGRTR_EL2_DBGAUTHSTATUS_EL1_SHIFT = (6) };
enum { R_HDFGRTR_EL2_DBGAUTHSTATUS_EL1_LENGTH = (1) };
enum {
  R_HDFGRTR_EL2_DBGAUTHSTATUS_EL1_MASK = (((~0ULL) >> (64 - (1))) << (6))
};
enum { R_HDFGRTR_EL2_DBGPRCR_EL1_SHIFT = (7) };
enum { R_HDFGRTR_EL2_DBGPRCR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_DBGPRCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (7)) };

enum { R_HDFGRTR_EL2_OSLSR_EL1_SHIFT = (9) };
enum { R_HDFGRTR_EL2_OSLSR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_OSLSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_HDFGRTR_EL2_OSECCR_EL1_SHIFT = (10) };
enum { R_HDFGRTR_EL2_OSECCR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_OSECCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_HDFGRTR_EL2_OSDLR_EL1_SHIFT = (11) };
enum { R_HDFGRTR_EL2_OSDLR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_OSDLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HDFGRTR_EL2_PMEVCNTRN_EL0_SHIFT = (12) };
enum { R_HDFGRTR_EL2_PMEVCNTRN_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMEVCNTRN_EL0_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_HDFGRTR_EL2_PMEVTYPERN_EL0_SHIFT = (13) };
enum { R_HDFGRTR_EL2_PMEVTYPERN_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMEVTYPERN_EL0_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_HDFGRTR_EL2_PMCCFILTR_EL0_SHIFT = (14) };
enum { R_HDFGRTR_EL2_PMCCFILTR_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMCCFILTR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_HDFGRTR_EL2_PMCCNTR_EL0_SHIFT = (15) };
enum { R_HDFGRTR_EL2_PMCCNTR_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMCCNTR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_HDFGRTR_EL2_PMCNTEN_SHIFT = (16) };
enum { R_HDFGRTR_EL2_PMCNTEN_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMCNTEN_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_HDFGRTR_EL2_PMINTEN_SHIFT = (17) };
enum { R_HDFGRTR_EL2_PMINTEN_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMINTEN_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_HDFGRTR_EL2_PMOVS_SHIFT = (18) };
enum { R_HDFGRTR_EL2_PMOVS_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMOVS_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_HDFGRTR_EL2_PMSELR_EL0_SHIFT = (19) };
enum { R_HDFGRTR_EL2_PMSELR_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSELR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (19)) };

enum { R_HDFGRTR_EL2_PMMIR_EL1_SHIFT = (22) };
enum { R_HDFGRTR_EL2_PMMIR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMMIR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (22)) };
enum { R_HDFGRTR_EL2_PMBLIMITR_EL1_SHIFT = (23) };
enum { R_HDFGRTR_EL2_PMBLIMITR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMBLIMITR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_HDFGRTR_EL2_PMBPTR_EL1_SHIFT = (24) };
enum { R_HDFGRTR_EL2_PMBPTR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMBPTR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (24)) };
enum { R_HDFGRTR_EL2_PMBSR_EL1_SHIFT = (25) };
enum { R_HDFGRTR_EL2_PMBSR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMBSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (25)) };
enum { R_HDFGRTR_EL2_PMSCR_EL1_SHIFT = (26) };
enum { R_HDFGRTR_EL2_PMSCR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_HDFGRTR_EL2_PMSEVFR_EL1_SHIFT = (27) };
enum { R_HDFGRTR_EL2_PMSEVFR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSEVFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_HDFGRTR_EL2_PMSFCR_EL1_SHIFT = (28) };
enum { R_HDFGRTR_EL2_PMSFCR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSFCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_HDFGRTR_EL2_PMSICR_EL1_SHIFT = (29) };
enum { R_HDFGRTR_EL2_PMSICR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSICR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_HDFGRTR_EL2_PMSIDR_EL1_SHIFT = (30) };
enum { R_HDFGRTR_EL2_PMSIDR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (30)) };
enum { R_HDFGRTR_EL2_PMSIRR_EL1_SHIFT = (31) };
enum { R_HDFGRTR_EL2_PMSIRR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSIRR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_HDFGRTR_EL2_PMSLATFR_EL1_SHIFT = (32) };
enum { R_HDFGRTR_EL2_PMSLATFR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMSLATFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_HDFGRTR_EL2_TRC_SHIFT = (33) };
enum { R_HDFGRTR_EL2_TRC_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRC_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_HDFGRTR_EL2_TRCAUTHSTATUS_SHIFT = (34) };
enum { R_HDFGRTR_EL2_TRCAUTHSTATUS_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCAUTHSTATUS_MASK = (((~0ULL) >> (64 - (1))) << (34)) };
enum { R_HDFGRTR_EL2_TRCAUXCTLR_SHIFT = (35) };
enum { R_HDFGRTR_EL2_TRCAUXCTLR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCAUXCTLR_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_HDFGRTR_EL2_TRCCLAIM_SHIFT = (36) };
enum { R_HDFGRTR_EL2_TRCCLAIM_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCCLAIM_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_HDFGRTR_EL2_TRCCNTVRn_SHIFT = (37) };
enum { R_HDFGRTR_EL2_TRCCNTVRn_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCCNTVRn_MASK = (((~0ULL) >> (64 - (1))) << (37)) };

enum { R_HDFGRTR_EL2_TRCID_SHIFT = (40) };
enum { R_HDFGRTR_EL2_TRCID_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCID_MASK = (((~0ULL) >> (64 - (1))) << (40)) };
enum { R_HDFGRTR_EL2_TRCIMSPECN_SHIFT = (41) };
enum { R_HDFGRTR_EL2_TRCIMSPECN_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCIMSPECN_MASK = (((~0ULL) >> (64 - (1))) << (41)) };

enum { R_HDFGRTR_EL2_TRCOSLSR_SHIFT = (43) };
enum { R_HDFGRTR_EL2_TRCOSLSR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCOSLSR_MASK = (((~0ULL) >> (64 - (1))) << (43)) };
enum { R_HDFGRTR_EL2_TRCPRGCTLR_SHIFT = (44) };
enum { R_HDFGRTR_EL2_TRCPRGCTLR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCPRGCTLR_MASK = (((~0ULL) >> (64 - (1))) << (44)) };
enum { R_HDFGRTR_EL2_TRCSEQSTR_SHIFT = (45) };
enum { R_HDFGRTR_EL2_TRCSEQSTR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCSEQSTR_MASK = (((~0ULL) >> (64 - (1))) << (45)) };
enum { R_HDFGRTR_EL2_TRCSSCSRN_SHIFT = (46) };
enum { R_HDFGRTR_EL2_TRCSSCSRN_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCSSCSRN_MASK = (((~0ULL) >> (64 - (1))) << (46)) };
enum { R_HDFGRTR_EL2_TRCSTATR_SHIFT = (47) };
enum { R_HDFGRTR_EL2_TRCSTATR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCSTATR_MASK = (((~0ULL) >> (64 - (1))) << (47)) };
enum { R_HDFGRTR_EL2_TRCVICTLR_SHIFT = (48) };
enum { R_HDFGRTR_EL2_TRCVICTLR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRCVICTLR_MASK = (((~0ULL) >> (64 - (1))) << (48)) };

enum { R_HDFGRTR_EL2_TRBBASER_EL1_SHIFT = (50) };
enum { R_HDFGRTR_EL2_TRBBASER_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBBASER_EL1_MASK = (((~0ULL) >> (64 - (1))) << (50)) };
enum { R_HDFGRTR_EL2_TRBIDR_EL1_SHIFT = (51) };
enum { R_HDFGRTR_EL2_TRBIDR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (51)) };
enum { R_HDFGRTR_EL2_TRBLIMITR_EL1_SHIFT = (52) };
enum { R_HDFGRTR_EL2_TRBLIMITR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBLIMITR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (52)) };
enum { R_HDFGRTR_EL2_TRBMAR_EL1_SHIFT = (53) };
enum { R_HDFGRTR_EL2_TRBMAR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBMAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (53)) };
enum { R_HDFGRTR_EL2_TRBPTR_EL1_SHIFT = (54) };
enum { R_HDFGRTR_EL2_TRBPTR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBPTR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (54)) };
enum { R_HDFGRTR_EL2_TRBSR_EL1_SHIFT = (55) };
enum { R_HDFGRTR_EL2_TRBSR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (55)) };
enum { R_HDFGRTR_EL2_TRBTRG_EL1_SHIFT = (56) };
enum { R_HDFGRTR_EL2_TRBTRG_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_TRBTRG_EL1_MASK = (((~0ULL) >> (64 - (1))) << (56)) };
enum { R_HDFGRTR_EL2_PMUSERENR_EL0_SHIFT = (57) };
enum { R_HDFGRTR_EL2_PMUSERENR_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMUSERENR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (57)) };
enum { R_HDFGRTR_EL2_PMCEIDN_EL0_SHIFT = (58) };
enum { R_HDFGRTR_EL2_PMCEIDN_EL0_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMCEIDN_EL0_MASK = (((~0ULL) >> (64 - (1))) << (58)) };
enum { R_HDFGRTR_EL2_NBRBIDR_SHIFT = (59) };
enum { R_HDFGRTR_EL2_NBRBIDR_LENGTH = (1) };
enum { R_HDFGRTR_EL2_NBRBIDR_MASK = (((~0ULL) >> (64 - (1))) << (59)) };
enum { R_HDFGRTR_EL2_NBRBCTL_SHIFT = (60) };
enum { R_HDFGRTR_EL2_NBRBCTL_LENGTH = (1) };
enum { R_HDFGRTR_EL2_NBRBCTL_MASK = (((~0ULL) >> (64 - (1))) << (60)) };
enum { R_HDFGRTR_EL2_NBRBDATA_SHIFT = (61) };
enum { R_HDFGRTR_EL2_NBRBDATA_LENGTH = (1) };
enum { R_HDFGRTR_EL2_NBRBDATA_MASK = (((~0ULL) >> (64 - (1))) << (61)) };
enum { R_HDFGRTR_EL2_NPMSNEVFR_EL1_SHIFT = (62) };
enum { R_HDFGRTR_EL2_NPMSNEVFR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_NPMSNEVFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (62)) };
enum { R_HDFGRTR_EL2_PMBIDR_EL1_SHIFT = (63) };
enum { R_HDFGRTR_EL2_PMBIDR_EL1_LENGTH = (1) };
enum { R_HDFGRTR_EL2_PMBIDR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (63)) };

enum { R_HDFGWTR_EL2_DBGBCRN_EL1_SHIFT = (0) };
enum { R_HDFGWTR_EL2_DBGBCRN_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGBCRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (0)) };
enum { R_HDFGWTR_EL2_DBGBVRN_EL1_SHIFT = (1) };
enum { R_HDFGWTR_EL2_DBGBVRN_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGBVRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (1)) };
enum { R_HDFGWTR_EL2_DBGWCRN_EL1_SHIFT = (2) };
enum { R_HDFGWTR_EL2_DBGWCRN_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGWCRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (2)) };
enum { R_HDFGWTR_EL2_DBGWVRN_EL1_SHIFT = (3) };
enum { R_HDFGWTR_EL2_DBGWVRN_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGWVRN_EL1_MASK = (((~0ULL) >> (64 - (1))) << (3)) };
enum { R_HDFGWTR_EL2_MDSCR_EL1_SHIFT = (4) };
enum { R_HDFGWTR_EL2_MDSCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_MDSCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (4)) };
enum { R_HDFGWTR_EL2_DBGCLAIM_SHIFT = (5) };
enum { R_HDFGWTR_EL2_DBGCLAIM_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGCLAIM_MASK = (((~0ULL) >> (64 - (1))) << (5)) };
enum { R_HDFGWTR_EL2_DBGPRCR_EL1_SHIFT = (7) };
enum { R_HDFGWTR_EL2_DBGPRCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_DBGPRCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (7)) };
enum { R_HDFGWTR_EL2_OSLAR_EL1_SHIFT = (8) };
enum { R_HDFGWTR_EL2_OSLAR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_OSLAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (8)) };
enum { R_HDFGWTR_EL2_OSLSR_EL1_SHIFT = (9) };
enum { R_HDFGWTR_EL2_OSLSR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_OSLSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_HDFGWTR_EL2_OSECCR_EL1_SHIFT = (10) };
enum { R_HDFGWTR_EL2_OSECCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_OSECCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (10)) };
enum { R_HDFGWTR_EL2_OSDLR_EL1_SHIFT = (11) };
enum { R_HDFGWTR_EL2_OSDLR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_OSDLR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (11)) };
enum { R_HDFGWTR_EL2_PMEVCNTRN_EL0_SHIFT = (12) };
enum { R_HDFGWTR_EL2_PMEVCNTRN_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMEVCNTRN_EL0_MASK = (((~0ULL) >> (64 - (1))) << (12)) };
enum { R_HDFGWTR_EL2_PMEVTYPERN_EL0_SHIFT = (13) };
enum { R_HDFGWTR_EL2_PMEVTYPERN_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMEVTYPERN_EL0_MASK = (((~0ULL) >> (64 - (1))) << (13)) };
enum { R_HDFGWTR_EL2_PMCCFILTR_EL0_SHIFT = (14) };
enum { R_HDFGWTR_EL2_PMCCFILTR_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMCCFILTR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (14)) };
enum { R_HDFGWTR_EL2_PMCCNTR_EL0_SHIFT = (15) };
enum { R_HDFGWTR_EL2_PMCCNTR_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMCCNTR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (15)) };
enum { R_HDFGWTR_EL2_PMCNTEN_SHIFT = (16) };
enum { R_HDFGWTR_EL2_PMCNTEN_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMCNTEN_MASK = (((~0ULL) >> (64 - (1))) << (16)) };
enum { R_HDFGWTR_EL2_PMINTEN_SHIFT = (17) };
enum { R_HDFGWTR_EL2_PMINTEN_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMINTEN_MASK = (((~0ULL) >> (64 - (1))) << (17)) };
enum { R_HDFGWTR_EL2_PMOVS_SHIFT = (18) };
enum { R_HDFGWTR_EL2_PMOVS_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMOVS_MASK = (((~0ULL) >> (64 - (1))) << (18)) };
enum { R_HDFGWTR_EL2_PMSELR_EL0_SHIFT = (19) };
enum { R_HDFGWTR_EL2_PMSELR_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSELR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (19)) };
enum { R_HDFGWTR_EL2_PMSWINC_EL0_SHIFT = (20) };
enum { R_HDFGWTR_EL2_PMSWINC_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSWINC_EL0_MASK = (((~0ULL) >> (64 - (1))) << (20)) };
enum { R_HDFGWTR_EL2_PMCR_EL0_SHIFT = (21) };
enum { R_HDFGWTR_EL2_PMCR_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMCR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (21)) };
enum { R_HDFGWTR_EL2_PMBLIMITR_EL1_SHIFT = (23) };
enum { R_HDFGWTR_EL2_PMBLIMITR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMBLIMITR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (23)) };
enum { R_HDFGWTR_EL2_PMBPTR_EL1_SHIFT = (24) };
enum { R_HDFGWTR_EL2_PMBPTR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMBPTR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (24)) };
enum { R_HDFGWTR_EL2_PMBSR_EL1_SHIFT = (25) };
enum { R_HDFGWTR_EL2_PMBSR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMBSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (25)) };
enum { R_HDFGWTR_EL2_PMSCR_EL1_SHIFT = (26) };
enum { R_HDFGWTR_EL2_PMSCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (26)) };
enum { R_HDFGWTR_EL2_PMSEVFR_EL1_SHIFT = (27) };
enum { R_HDFGWTR_EL2_PMSEVFR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSEVFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (27)) };
enum { R_HDFGWTR_EL2_PMSFCR_EL1_SHIFT = (28) };
enum { R_HDFGWTR_EL2_PMSFCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSFCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (28)) };
enum { R_HDFGWTR_EL2_PMSICR_EL1_SHIFT = (29) };
enum { R_HDFGWTR_EL2_PMSICR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSICR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (29)) };
enum { R_HDFGWTR_EL2_PMSIRR_EL1_SHIFT = (31) };
enum { R_HDFGWTR_EL2_PMSIRR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSIRR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (31)) };
enum { R_HDFGWTR_EL2_PMSLATFR_EL1_SHIFT = (32) };
enum { R_HDFGWTR_EL2_PMSLATFR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMSLATFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (32)) };
enum { R_HDFGWTR_EL2_TRC_SHIFT = (33) };
enum { R_HDFGWTR_EL2_TRC_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRC_MASK = (((~0ULL) >> (64 - (1))) << (33)) };
enum { R_HDFGWTR_EL2_TRCAUXCTLR_SHIFT = (35) };
enum { R_HDFGWTR_EL2_TRCAUXCTLR_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCAUXCTLR_MASK = (((~0ULL) >> (64 - (1))) << (35)) };
enum { R_HDFGWTR_EL2_TRCCLAIM_SHIFT = (36) };
enum { R_HDFGWTR_EL2_TRCCLAIM_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCCLAIM_MASK = (((~0ULL) >> (64 - (1))) << (36)) };
enum { R_HDFGWTR_EL2_TRCCNTVRn_SHIFT = (37) };
enum { R_HDFGWTR_EL2_TRCCNTVRn_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCCNTVRn_MASK = (((~0ULL) >> (64 - (1))) << (37)) };
enum { R_HDFGWTR_EL2_TRCIMSPECN_SHIFT = (41) };
enum { R_HDFGWTR_EL2_TRCIMSPECN_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCIMSPECN_MASK = (((~0ULL) >> (64 - (1))) << (41)) };
enum { R_HDFGWTR_EL2_TRCOSLAR_SHIFT = (42) };
enum { R_HDFGWTR_EL2_TRCOSLAR_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCOSLAR_MASK = (((~0ULL) >> (64 - (1))) << (42)) };
enum { R_HDFGWTR_EL2_TRCPRGCTLR_SHIFT = (44) };
enum { R_HDFGWTR_EL2_TRCPRGCTLR_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCPRGCTLR_MASK = (((~0ULL) >> (64 - (1))) << (44)) };
enum { R_HDFGWTR_EL2_TRCSEQSTR_SHIFT = (45) };
enum { R_HDFGWTR_EL2_TRCSEQSTR_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCSEQSTR_MASK = (((~0ULL) >> (64 - (1))) << (45)) };
enum { R_HDFGWTR_EL2_TRCSSCSRN_SHIFT = (46) };
enum { R_HDFGWTR_EL2_TRCSSCSRN_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCSSCSRN_MASK = (((~0ULL) >> (64 - (1))) << (46)) };
enum { R_HDFGWTR_EL2_TRCVICTLR_SHIFT = (48) };
enum { R_HDFGWTR_EL2_TRCVICTLR_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRCVICTLR_MASK = (((~0ULL) >> (64 - (1))) << (48)) };
enum { R_HDFGWTR_EL2_TRFCR_EL1_SHIFT = (49) };
enum { R_HDFGWTR_EL2_TRFCR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRFCR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (49)) };
enum { R_HDFGWTR_EL2_TRBBASER_EL1_SHIFT = (50) };
enum { R_HDFGWTR_EL2_TRBBASER_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBBASER_EL1_MASK = (((~0ULL) >> (64 - (1))) << (50)) };
enum { R_HDFGWTR_EL2_TRBLIMITR_EL1_SHIFT = (52) };
enum { R_HDFGWTR_EL2_TRBLIMITR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBLIMITR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (52)) };
enum { R_HDFGWTR_EL2_TRBMAR_EL1_SHIFT = (53) };
enum { R_HDFGWTR_EL2_TRBMAR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBMAR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (53)) };
enum { R_HDFGWTR_EL2_TRBPTR_EL1_SHIFT = (54) };
enum { R_HDFGWTR_EL2_TRBPTR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBPTR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (54)) };
enum { R_HDFGWTR_EL2_TRBSR_EL1_SHIFT = (55) };
enum { R_HDFGWTR_EL2_TRBSR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBSR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (55)) };
enum { R_HDFGWTR_EL2_TRBTRG_EL1_SHIFT = (56) };
enum { R_HDFGWTR_EL2_TRBTRG_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_TRBTRG_EL1_MASK = (((~0ULL) >> (64 - (1))) << (56)) };
enum { R_HDFGWTR_EL2_PMUSERENR_EL0_SHIFT = (57) };
enum { R_HDFGWTR_EL2_PMUSERENR_EL0_LENGTH = (1) };
enum { R_HDFGWTR_EL2_PMUSERENR_EL0_MASK = (((~0ULL) >> (64 - (1))) << (57)) };
enum { R_HDFGWTR_EL2_NBRBCTL_SHIFT = (60) };
enum { R_HDFGWTR_EL2_NBRBCTL_LENGTH = (1) };
enum { R_HDFGWTR_EL2_NBRBCTL_MASK = (((~0ULL) >> (64 - (1))) << (60)) };
enum { R_HDFGWTR_EL2_NBRBDATA_SHIFT = (61) };
enum { R_HDFGWTR_EL2_NBRBDATA_LENGTH = (1) };
enum { R_HDFGWTR_EL2_NBRBDATA_MASK = (((~0ULL) >> (64 - (1))) << (61)) };
enum { R_HDFGWTR_EL2_NPMSNEVFR_EL1_SHIFT = (62) };
enum { R_HDFGWTR_EL2_NPMSNEVFR_EL1_LENGTH = (1) };
enum { R_HDFGWTR_EL2_NPMSNEVFR_EL1_MASK = (((~0ULL) >> (64 - (1))) << (62)) };

enum { R_FGT_NXS_SHIFT = (13) };
enum { R_FGT_NXS_LENGTH = (1) };
enum { R_FGT_NXS_MASK = (((~0ULL) >> (64 - (1))) << (13)) };

enum { R_FGT_TYPE_SHIFT = (10) };
enum { R_FGT_TYPE_LENGTH = (3) };
enum { R_FGT_TYPE_MASK = (((~0ULL) >> (64 - (3))) << (10)) };
enum { R_FGT_REV_SHIFT = (9) };
enum { R_FGT_REV_LENGTH = (1) };
enum { R_FGT_REV_MASK = (((~0ULL) >> (64 - (1))) << (9)) };
enum { R_FGT_IDX_SHIFT = (6) };
enum { R_FGT_IDX_LENGTH = (3) };
enum { R_FGT_IDX_MASK = (((~0ULL) >> (64 - (3))) << (6)) };
enum { R_FGT_BITPOS_SHIFT = (0) };
enum { R_FGT_BITPOS_LENGTH = (6) };
enum { R_FGT_BITPOS_MASK = (((~0ULL) >> (64 - (6))) << (0)) };
# 665 "../../../target/arm/cpregs.h"
typedef enum FGTBit {
# 681 "../../../target/arm/cpregs.h"
  FGT_R = 1 << R_FGT_TYPE_SHIFT,
  FGT_W = 2 << R_FGT_TYPE_SHIFT,
  FGT_EXEC = 4 << R_FGT_TYPE_SHIFT,
  FGT_RW = FGT_R | FGT_W,

  FGT_REV = R_FGT_REV_MASK,
# 704 "../../../target/arm/cpregs.h"
  FGT_HFGRTR = FGT_RW | (0 << R_FGT_IDX_SHIFT),
  FGT_HFGWTR = FGT_W | (0 << R_FGT_IDX_SHIFT),
  FGT_HDFGRTR = FGT_RW | (1 << R_FGT_IDX_SHIFT),
  FGT_HDFGWTR = FGT_W | (1 << R_FGT_IDX_SHIFT),
  FGT_HFGITR = FGT_EXEC | (0 << R_FGT_IDX_SHIFT),

  FGT_AFSR0_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_AFSR0_EL1_SHIFT,
  FGT_AFSR1_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_AFSR1_EL1_SHIFT,
  FGT_AIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_AIDR_EL1_SHIFT,
  FGT_AMAIR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_AMAIR_EL1_SHIFT,
  FGT_APDAKEY = FGT_HFGRTR | R_HFGRTR_EL2_APDAKEY_SHIFT,
  FGT_APDBKEY = FGT_HFGRTR | R_HFGRTR_EL2_APDBKEY_SHIFT,
  FGT_APGAKEY = FGT_HFGRTR | R_HFGRTR_EL2_APGAKEY_SHIFT,
  FGT_APIAKEY = FGT_HFGRTR | R_HFGRTR_EL2_APIAKEY_SHIFT,
  FGT_APIBKEY = FGT_HFGRTR | R_HFGRTR_EL2_APIBKEY_SHIFT,
  FGT_CCSIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_CCSIDR_EL1_SHIFT,
  FGT_CLIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_CLIDR_EL1_SHIFT,
  FGT_CONTEXTIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_CONTEXTIDR_EL1_SHIFT,
  FGT_CPACR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_CPACR_EL1_SHIFT,
  FGT_CSSELR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_CSSELR_EL1_SHIFT,
  FGT_CTR_EL0 = FGT_HFGRTR | R_HFGRTR_EL2_CTR_EL0_SHIFT,
  FGT_DCZID_EL0 = FGT_HFGRTR | R_HFGRTR_EL2_DCZID_EL0_SHIFT,
  FGT_ESR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_ESR_EL1_SHIFT,
  FGT_FAR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_FAR_EL1_SHIFT,
  FGT_ISR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_ISR_EL1_SHIFT,
  FGT_LORC_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_LORC_EL1_SHIFT,
  FGT_LOREA_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_LOREA_EL1_SHIFT,
  FGT_LORID_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_LORID_EL1_SHIFT,
  FGT_LORN_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_LORN_EL1_SHIFT,
  FGT_LORSA_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_LORSA_EL1_SHIFT,
  FGT_MAIR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_MAIR_EL1_SHIFT,
  FGT_MIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_MIDR_EL1_SHIFT,
  FGT_MPIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_MPIDR_EL1_SHIFT,
  FGT_PAR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_PAR_EL1_SHIFT,
  FGT_REVIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_REVIDR_EL1_SHIFT,
  FGT_SCTLR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_SCTLR_EL1_SHIFT,
  FGT_SCXTNUM_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_SCXTNUM_EL1_SHIFT,
  FGT_SCXTNUM_EL0 = FGT_HFGRTR | R_HFGRTR_EL2_SCXTNUM_EL0_SHIFT,
  FGT_TCR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_TCR_EL1_SHIFT,
  FGT_TPIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_TPIDR_EL1_SHIFT,
  FGT_TPIDRRO_EL0 = FGT_HFGRTR | R_HFGRTR_EL2_TPIDRRO_EL0_SHIFT,
  FGT_TPIDR_EL0 = FGT_HFGRTR | R_HFGRTR_EL2_TPIDR_EL0_SHIFT,
  FGT_TTBR0_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_TTBR0_EL1_SHIFT,
  FGT_TTBR1_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_TTBR1_EL1_SHIFT,
  FGT_VBAR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_VBAR_EL1_SHIFT,
  FGT_ICC_IGRPENN_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_ICC_IGRPENN_EL1_SHIFT,
  FGT_ERRIDR_EL1 = FGT_HFGRTR | R_HFGRTR_EL2_ERRIDR_EL1_SHIFT,
  FGT_NSMPRI_EL1 = FGT_HFGRTR | FGT_REV | R_HFGRTR_EL2_NSMPRI_EL1_SHIFT,
  FGT_NTPIDR2_EL0 = FGT_HFGRTR | FGT_REV | R_HFGRTR_EL2_NTPIDR2_EL0_SHIFT,

  FGT_DBGBCRN_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_DBGBCRN_EL1_SHIFT,
  FGT_DBGBVRN_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_DBGBVRN_EL1_SHIFT,
  FGT_DBGWCRN_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_DBGWCRN_EL1_SHIFT,
  FGT_DBGWVRN_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_DBGWVRN_EL1_SHIFT,
  FGT_MDSCR_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_MDSCR_EL1_SHIFT,
  FGT_DBGCLAIM = FGT_HDFGRTR | R_HDFGRTR_EL2_DBGCLAIM_SHIFT,
  FGT_OSLAR_EL1 = FGT_HDFGWTR | R_HDFGWTR_EL2_OSLAR_EL1_SHIFT,
  FGT_OSLSR_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_OSLSR_EL1_SHIFT,
  FGT_OSECCR_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_OSECCR_EL1_SHIFT,
  FGT_OSDLR_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_OSDLR_EL1_SHIFT,
  FGT_PMEVCNTRN_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMEVCNTRN_EL0_SHIFT,
  FGT_PMEVTYPERN_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMEVTYPERN_EL0_SHIFT,
  FGT_PMCCFILTR_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMCCFILTR_EL0_SHIFT,
  FGT_PMCCNTR_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMCCNTR_EL0_SHIFT,
  FGT_PMCNTEN = FGT_HDFGRTR | R_HDFGRTR_EL2_PMCNTEN_SHIFT,
  FGT_PMINTEN = FGT_HDFGRTR | R_HDFGRTR_EL2_PMINTEN_SHIFT,
  FGT_PMOVS = FGT_HDFGRTR | R_HDFGRTR_EL2_PMOVS_SHIFT,
  FGT_PMSELR_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMSELR_EL0_SHIFT,
  FGT_PMSWINC_EL0 = FGT_HDFGWTR | R_HDFGWTR_EL2_PMSWINC_EL0_SHIFT,
  FGT_PMCR_EL0 = FGT_HDFGWTR | R_HDFGWTR_EL2_PMCR_EL0_SHIFT,
  FGT_PMMIR_EL1 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMMIR_EL1_SHIFT,
  FGT_PMCEIDN_EL0 = FGT_HDFGRTR | R_HDFGRTR_EL2_PMCEIDN_EL0_SHIFT,

  FGT_ICIALLUIS = FGT_HFGITR | R_HFGITR_EL2_ICIALLUIS_SHIFT,
  FGT_ICIALLU = FGT_HFGITR | R_HFGITR_EL2_ICIALLU_SHIFT,
  FGT_ICIVAU = FGT_HFGITR | R_HFGITR_EL2_ICIVAU_SHIFT,
  FGT_DCIVAC = FGT_HFGITR | R_HFGITR_EL2_DCIVAC_SHIFT,
  FGT_DCISW = FGT_HFGITR | R_HFGITR_EL2_DCISW_SHIFT,
  FGT_DCCSW = FGT_HFGITR | R_HFGITR_EL2_DCCSW_SHIFT,
  FGT_DCCISW = FGT_HFGITR | R_HFGITR_EL2_DCCISW_SHIFT,
  FGT_DCCVAU = FGT_HFGITR | R_HFGITR_EL2_DCCVAU_SHIFT,
  FGT_DCCVAP = FGT_HFGITR | R_HFGITR_EL2_DCCVAP_SHIFT,
  FGT_DCCVADP = FGT_HFGITR | R_HFGITR_EL2_DCCVADP_SHIFT,
  FGT_DCCIVAC = FGT_HFGITR | R_HFGITR_EL2_DCCIVAC_SHIFT,
  FGT_DCZVA = FGT_HFGITR | R_HFGITR_EL2_DCZVA_SHIFT,
  FGT_ATS1E1R = FGT_HFGITR | R_HFGITR_EL2_ATS1E1R_SHIFT,
  FGT_ATS1E1W = FGT_HFGITR | R_HFGITR_EL2_ATS1E1W_SHIFT,
  FGT_ATS1E0R = FGT_HFGITR | R_HFGITR_EL2_ATS1E0R_SHIFT,
  FGT_ATS1E0W = FGT_HFGITR | R_HFGITR_EL2_ATS1E0W_SHIFT,
  FGT_ATS1E1RP = FGT_HFGITR | R_HFGITR_EL2_ATS1E1RP_SHIFT,
  FGT_ATS1E1WP = FGT_HFGITR | R_HFGITR_EL2_ATS1E1WP_SHIFT,
  FGT_TLBIVMALLE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIVMALLE1OS_SHIFT,
  FGT_TLBIVMALLE1OSNXS = FGT_TLBIVMALLE1OS | R_FGT_NXS_MASK,
  FGT_TLBIVAE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAE1OS_SHIFT,
  FGT_TLBIVAE1OSNXS = FGT_TLBIVAE1OS | R_FGT_NXS_MASK,
  FGT_TLBIASIDE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIASIDE1OS_SHIFT,
  FGT_TLBIASIDE1OSNXS = FGT_TLBIASIDE1OS | R_FGT_NXS_MASK,
  FGT_TLBIVAAE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAAE1OS_SHIFT,
  FGT_TLBIVAAE1OSNXS = FGT_TLBIVAAE1OS | R_FGT_NXS_MASK,
  FGT_TLBIVALE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIVALE1OS_SHIFT,
  FGT_TLBIVALE1OSNXS = FGT_TLBIVALE1OS | R_FGT_NXS_MASK,
  FGT_TLBIVAALE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAALE1OS_SHIFT,
  FGT_TLBIVAALE1OSNXS = FGT_TLBIVAALE1OS | R_FGT_NXS_MASK,
  FGT_TLBIRVAE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAE1OS_SHIFT,
  FGT_TLBIRVAE1OSNXS = FGT_TLBIRVAE1OS | R_FGT_NXS_MASK,
  FGT_TLBIRVAAE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAAE1OS_SHIFT,
  FGT_TLBIRVAAE1OSNXS = FGT_TLBIRVAAE1OS | R_FGT_NXS_MASK,
  FGT_TLBIRVALE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVALE1OS_SHIFT,
  FGT_TLBIRVALE1OSNXS = FGT_TLBIRVALE1OS | R_FGT_NXS_MASK,
  FGT_TLBIRVAALE1OS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAALE1OS_SHIFT,
  FGT_TLBIRVAALE1OSNXS = FGT_TLBIRVAALE1OS | R_FGT_NXS_MASK,
  FGT_TLBIVMALLE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIVMALLE1IS_SHIFT,
  FGT_TLBIVMALLE1ISNXS = FGT_TLBIVMALLE1IS | R_FGT_NXS_MASK,
  FGT_TLBIVAE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAE1IS_SHIFT,
  FGT_TLBIVAE1ISNXS = FGT_TLBIVAE1IS | R_FGT_NXS_MASK,
  FGT_TLBIASIDE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIASIDE1IS_SHIFT,
  FGT_TLBIASIDE1ISNXS = FGT_TLBIASIDE1IS | R_FGT_NXS_MASK,
  FGT_TLBIVAAE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAAE1IS_SHIFT,
  FGT_TLBIVAAE1ISNXS = FGT_TLBIVAAE1IS | R_FGT_NXS_MASK,
  FGT_TLBIVALE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIVALE1IS_SHIFT,
  FGT_TLBIVALE1ISNXS = FGT_TLBIVALE1IS | R_FGT_NXS_MASK,
  FGT_TLBIVAALE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIVAALE1IS_SHIFT,
  FGT_TLBIVAALE1ISNXS = FGT_TLBIVAALE1IS | R_FGT_NXS_MASK,
  FGT_TLBIRVAE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAE1IS_SHIFT,
  FGT_TLBIRVAE1ISNXS = FGT_TLBIRVAE1IS | R_FGT_NXS_MASK,
  FGT_TLBIRVAAE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAAE1IS_SHIFT,
  FGT_TLBIRVAAE1ISNXS = FGT_TLBIRVAAE1IS | R_FGT_NXS_MASK,
  FGT_TLBIRVALE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVALE1IS_SHIFT,
  FGT_TLBIRVALE1ISNXS = FGT_TLBIRVALE1IS | R_FGT_NXS_MASK,
  FGT_TLBIRVAALE1IS = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAALE1IS_SHIFT,
  FGT_TLBIRVAALE1ISNXS = FGT_TLBIRVAALE1IS | R_FGT_NXS_MASK,
  FGT_TLBIRVAE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAE1_SHIFT,
  FGT_TLBIRVAE1NXS = FGT_TLBIRVAE1 | R_FGT_NXS_MASK,
  FGT_TLBIRVAAE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAAE1_SHIFT,
  FGT_TLBIRVAAE1NXS = FGT_TLBIRVAAE1 | R_FGT_NXS_MASK,
  FGT_TLBIRVALE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIRVALE1_SHIFT,
  FGT_TLBIRVALE1NXS = FGT_TLBIRVALE1 | R_FGT_NXS_MASK,
  FGT_TLBIRVAALE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIRVAALE1_SHIFT,
  FGT_TLBIRVAALE1NXS = FGT_TLBIRVAALE1 | R_FGT_NXS_MASK,
  FGT_TLBIVMALLE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIVMALLE1_SHIFT,
  FGT_TLBIVMALLE1NXS = FGT_TLBIVMALLE1 | R_FGT_NXS_MASK,
  FGT_TLBIVAE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIVAE1_SHIFT,
  FGT_TLBIVAE1NXS = FGT_TLBIVAE1 | R_FGT_NXS_MASK,
  FGT_TLBIASIDE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIASIDE1_SHIFT,
  FGT_TLBIASIDE1NXS = FGT_TLBIASIDE1 | R_FGT_NXS_MASK,
  FGT_TLBIVAAE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIVAAE1_SHIFT,
  FGT_TLBIVAAE1NXS = FGT_TLBIVAAE1 | R_FGT_NXS_MASK,
  FGT_TLBIVALE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIVALE1_SHIFT,
  FGT_TLBIVALE1NXS = FGT_TLBIVALE1 | R_FGT_NXS_MASK,
  FGT_TLBIVAALE1 = FGT_HFGITR | R_HFGITR_EL2_TLBIVAALE1_SHIFT,
  FGT_TLBIVAALE1NXS = FGT_TLBIVAALE1 | R_FGT_NXS_MASK,
  FGT_CFPRCTX = FGT_HFGITR | R_HFGITR_EL2_CFPRCTX_SHIFT,
  FGT_DVPRCTX = FGT_HFGITR | R_HFGITR_EL2_DVPRCTX_SHIFT,
  FGT_CPPRCTX = FGT_HFGITR | R_HFGITR_EL2_CPPRCTX_SHIFT,
  FGT_DCCVAC = FGT_HFGITR | R_HFGITR_EL2_DCCVAC_SHIFT,
} FGTBit;

typedef struct ARMCPRegInfo ARMCPRegInfo;

typedef uint64_t CPReadFn(CPUARMState *env, const ARMCPRegInfo *opaque);
typedef void CPWriteFn(CPUARMState *env, const ARMCPRegInfo *opaque,
                       uint64_t value);

typedef CPAccessResult CPAccessFn(CPUARMState *env, const ARMCPRegInfo *opaque,

# 849 "../../../target/arm/cpregs.h" 3 4
                                  _Bool
# 849 "../../../target/arm/cpregs.h"
                                      isread);

typedef void CPResetFn(CPUARMState *env, const ARMCPRegInfo *opaque);
# 861 "../../../target/arm/cpregs.h"
struct ARMCPRegInfo {

  const char *name;
# 882 "../../../target/arm/cpregs.h"
  uint8_t cp;
  uint8_t crn;
  uint8_t crm;
  uint8_t opc0;
  uint8_t opc1;
  uint8_t opc2;

  CPState state;

  int type;

  CPAccessRights access;

  CPSecureState secure;

  FGTBit fgt;

  uint32_t nv2_redirect_offset;

  void *opaque;

  uint64_t resetvalue;

  ptrdiff_t fieldoffset;
# 939 "../../../target/arm/cpregs.h"
  ptrdiff_t bank_fieldoffsets[2];

  CPAccessFn *accessfn;

  CPReadFn *readfn;

  CPWriteFn *writefn;

  CPReadFn *raw_readfn;

  CPWriteFn *raw_writefn;

  CPResetFn *resetfn;
# 992 "../../../target/arm/cpregs.h"
  CPReadFn *orig_readfn;
  CPWriteFn *orig_writefn;
  CPAccessFn *orig_accessfn;
};
# 1006 "../../../target/arm/cpregs.h"
void define_one_arm_cp_reg_with_opaque(ARMCPU *cpu, const ARMCPRegInfo *reg,
                                       void *opaque);

static inline void define_one_arm_cp_reg(ARMCPU *cpu,
                                         const ARMCPRegInfo *regs) {
  define_one_arm_cp_reg_with_opaque(cpu, regs,
# 1011 "../../../target/arm/cpregs.h" 3 4
                                    ((void *)0)
# 1011 "../../../target/arm/cpregs.h"
  );
}

void define_arm_cp_regs_with_opaque_len(ARMCPU *cpu, const ARMCPRegInfo *regs,
                                        void *opaque, size_t len);
# 1027 "../../../target/arm/cpregs.h"
const ARMCPRegInfo *get_arm_cp_reginfo(GHashTable *cpregs, uint32_t encoded_cp);

typedef struct ARMCPRegUserSpaceInfo {

  const char *name;

# 1040 "../../../target/arm/cpregs.h" 3 4
  _Bool
# 1040 "../../../target/arm/cpregs.h"
      is_glob;

  uint64_t exported_bits;

  uint64_t fixed_bits;
} ARMCPRegUserSpaceInfo;

void modify_arm_cp_regs_with_len(ARMCPRegInfo *regs, size_t regs_len,
                                 const ARMCPRegUserSpaceInfo *mods,
                                 size_t mods_len);
# 1062 "../../../target/arm/cpregs.h"
void arm_cp_write_ignore(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value);

uint64_t arm_cp_read_zero(CPUARMState *env, const ARMCPRegInfo *ri);

void raw_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value);

void arm_cp_reset_ignore(CPUARMState *env, const ARMCPRegInfo *opaque);

static inline
# 1080 "../../../target/arm/cpregs.h" 3 4
    _Bool
# 1080 "../../../target/arm/cpregs.h"
    cpreg_field_is_64bit(const ARMCPRegInfo *ri) {
  return (ri->state == ARM_CP_STATE_AA64) || (ri->type & ARM_CP_64BIT);
}

static inline
# 1085 "../../../target/arm/cpregs.h" 3 4
    _Bool
# 1085 "../../../target/arm/cpregs.h"
    cp_access_ok(int current_el, const ARMCPRegInfo *ri, int isread) {
  return (ri->access >> ((current_el * 2) + isread)) & 1;
}

uint64_t read_raw_cp_reg(CPUARMState *env, const ARMCPRegInfo *ri);

static inline
# 1099 "../../../target/arm/cpregs.h" 3 4
    _Bool
# 1099 "../../../target/arm/cpregs.h"
    arm_cpreg_encoding_in_idspace(uint8_t opc0, uint8_t opc1, uint8_t opc2,
                                  uint8_t crn, uint8_t crm) {
  return opc0 == 3 && (opc1 == 0 || opc1 == 1 || opc1 == 3) && crn == 0 &&
         crm < 8;
}

static inline
# 1111 "../../../target/arm/cpregs.h" 3 4
    _Bool
# 1111 "../../../target/arm/cpregs.h"
    arm_cpreg_in_idspace(const ARMCPRegInfo *ri) {
  return ri->state == ARM_CP_STATE_AA64 &&
         arm_cpreg_encoding_in_idspace(ri->opc0, ri->opc1, ri->opc2, ri->crn,
                                       ri->crm);
}

static inline void define_cortex_a72_a57_a53_cp_reginfo(ARMCPU *cpu) {}

CPAccessResult access_tvm_trvm(CPUARMState *, const ARMCPRegInfo *,
# 1124 "../../../target/arm/cpregs.h" 3 4
                               _Bool
# 1124 "../../../target/arm/cpregs.h"
);

static inline
# 1132 "../../../target/arm/cpregs.h" 3 4
    _Bool
# 1132 "../../../target/arm/cpregs.h"
    arm_cpreg_traps_in_nv(const ARMCPRegInfo *ri) {
# 1157 "../../../target/arm/cpregs.h"
  return ri->opc1 == 4 || ri->opc1 == 5;
}
# 34 "../../../target/arm/helper.c" 2

static void switch_mode(CPUARMState *env, int mode);

static uint64_t raw_read(CPUARMState *env, const ARMCPRegInfo *ri) {

# 42 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 42 "../../../target/arm/helper.c"
                    ri->fieldoffset
# 42 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 42 "../../../target/arm/helper.c"
         ri->fieldoffset
# 42 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 42 "../../../target/arm/helper.c"
           "ri->fieldoffset"
# 42 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 42,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 42 "../../../target/arm/helper.c"
      ;
  if (cpreg_field_is_64bit(ri)) {
    return (*(uint64_t *)((char *)(env) + (ri)->fieldoffset));
  } else {
    return (*(uint32_t *)((char *)(env) + (ri)->fieldoffset));
  }
}

void raw_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t value) {

# 52 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 52 "../../../target/arm/helper.c"
                    ri->fieldoffset
# 52 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 52 "../../../target/arm/helper.c"
         ri->fieldoffset
# 52 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 52 "../../../target/arm/helper.c"
           "ri->fieldoffset"
# 52 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 52,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 52 "../../../target/arm/helper.c"
      ;
  if (cpreg_field_is_64bit(ri)) {
    (*(uint64_t *)((char *)(env) + (ri)->fieldoffset)) = value;
  } else {
    (*(uint32_t *)((char *)(env) + (ri)->fieldoffset)) = value;
  }
}

static void *raw_ptr(CPUARMState *env, const ARMCPRegInfo *ri) {
  return (char *)env + ri->fieldoffset;
}

uint64_t read_raw_cp_reg(CPUARMState *env, const ARMCPRegInfo *ri) {

  if (ri->type & ARM_CP_CONST) {
    return ri->resetvalue;
  } else if (ri->raw_readfn) {
    return ri->raw_readfn(env, ri);
  } else if (ri->readfn) {
    return ri->readfn(env, ri);
  } else {
    return raw_read(env, ri);
  }
}

static void write_raw_cp_reg(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t v) {

  if (ri->type & ARM_CP_CONST) {
    return;
  } else if (ri->raw_writefn) {
    ri->raw_writefn(env, ri, v);
  } else if (ri->writefn) {
    ri->writefn(env, ri, v);
  } else {
    raw_write(env, ri, v);
  }
}

static
# 99 "../../../target/arm/helper.c" 3 4
    _Bool
# 99 "../../../target/arm/helper.c"
    raw_accessors_invalid(const ARMCPRegInfo *ri) {
# 113 "../../../target/arm/helper.c"
  if ((ri->type & ARM_CP_CONST) || ri->fieldoffset ||
      ((ri->raw_writefn || ri->writefn) && (ri->raw_readfn || ri->readfn))) {
    return
# 116 "../../../target/arm/helper.c" 3 4
        0
# 116 "../../../target/arm/helper.c"
        ;
  }
  return
# 118 "../../../target/arm/helper.c" 3 4
      1
# 118 "../../../target/arm/helper.c"
      ;
}

# 121 "../../../target/arm/helper.c" 3 4
_Bool
# 121 "../../../target/arm/helper.c"
    write_cpustate_to_list(ARMCPU *cpu,
# 121 "../../../target/arm/helper.c" 3 4
                                        _Bool
# 121 "../../../target/arm/helper.c"
                                             kvm_sync)
{

  int i;

# 125 "../../../target/arm/helper.c" 3 4
  _Bool
# 125 "../../../target/arm/helper.c"
      ok =
# 125 "../../../target/arm/helper.c" 3 4
          1
# 125 "../../../target/arm/helper.c"
      ;

  for (i = 0; i < cpu->cpreg_array_len; i++) {
    uint32_t regidx = kvm_to_cpreg_id(cpu->cpreg_indexes[i]);
    const ARMCPRegInfo *ri;
    uint64_t newval;

    ri = get_arm_cp_reginfo(cpu->cp_regs, regidx);
    if (!ri) {
      ok =
# 134 "../../../target/arm/helper.c" 3 4
          0
# 134 "../../../target/arm/helper.c"
          ;
      continue;
    }
    if (ri->type & ARM_CP_NO_RAW) {
      continue;
    }

    newval = read_raw_cp_reg(&cpu->env, ri);
    if (kvm_sync) {

      uint64_t oldval = cpu->cpreg_values[i];

      if (oldval == newval) {
        continue;
      }

      write_raw_cp_reg(&cpu->env, ri, oldval);
      if (read_raw_cp_reg(&cpu->env, ri) != oldval) {
        continue;
      }

      write_raw_cp_reg(&cpu->env, ri, newval);
    }
    cpu->cpreg_values[i] = newval;
  }
  return ok;
}

# 167 "../../../target/arm/helper.c" 3 4
_Bool
# 167 "../../../target/arm/helper.c"
    write_list_to_cpustate(ARMCPU *cpu)
{
  int i;

# 170 "../../../target/arm/helper.c" 3 4
  _Bool
# 170 "../../../target/arm/helper.c"
      ok =
# 170 "../../../target/arm/helper.c" 3 4
          1
# 170 "../../../target/arm/helper.c"
      ;

  for (i = 0; i < cpu->cpreg_array_len; i++) {
    uint32_t regidx = kvm_to_cpreg_id(cpu->cpreg_indexes[i]);
    uint64_t v = cpu->cpreg_values[i];
    const ARMCPRegInfo *ri;

    ri = get_arm_cp_reginfo(cpu->cp_regs, regidx);
    if (!ri) {
      ok =
# 179 "../../../target/arm/helper.c" 3 4
          0
# 179 "../../../target/arm/helper.c"
          ;
      continue;
    }
    if (ri->type & ARM_CP_NO_RAW) {
      continue;
    }

    write_raw_cp_reg(&cpu->env, ri, v);
    if (read_raw_cp_reg(&cpu->env, ri) != v) {
      ok =
# 192 "../../../target/arm/helper.c" 3 4
          0
# 192 "../../../target/arm/helper.c"
          ;
    }
  }
  return ok;
}

static void add_cpreg_to_list(gpointer key, gpointer opaque) {
  ARMCPU *cpu = opaque;
  uint32_t regidx = (uintptr_t)key;
  const ARMCPRegInfo *ri = get_arm_cp_reginfo(cpu->cp_regs, regidx);

  if (!(ri->type & (ARM_CP_NO_RAW | ARM_CP_ALIAS))) {
    cpu->cpreg_indexes[cpu->cpreg_array_len] = cpreg_to_kvm_id(regidx);

    cpu->cpreg_array_len++;
  }
}

static void count_cpreg(gpointer key, gpointer opaque) {
  ARMCPU *cpu = opaque;
  const ARMCPRegInfo *ri;

  ri = g_hash_table_lookup(cpu->cp_regs, key);

  if (!(ri->type & (ARM_CP_NO_RAW | ARM_CP_ALIAS))) {
    cpu->cpreg_array_len++;
  }
}

static gint cpreg_key_compare(gconstpointer a, gconstpointer b) {
  uint64_t aidx = cpreg_to_kvm_id((uintptr_t)a);
  uint64_t bidx = cpreg_to_kvm_id((uintptr_t)b);

  if (aidx > bidx) {
    return 1;
  }
  if (aidx < bidx) {
    return -1;
  }
  return 0;
}

void init_cpreg_list(ARMCPU *cpu) {

  GList *keys;
  int arraylen;

  keys = g_hash_table_get_keys(cpu->cp_regs);
  keys = g_list_sort(keys, cpreg_key_compare);

  cpu->cpreg_array_len = 0;

  g_list_foreach(keys, count_cpreg, cpu);

  arraylen = cpu->cpreg_array_len;
  cpu->cpreg_indexes = ((uint64_t *)g_malloc_n((arraylen), sizeof(uint64_t)));
  cpu->cpreg_values = ((uint64_t *)g_malloc_n((arraylen), sizeof(uint64_t)));
  cpu->cpreg_vmstate_indexes =
      ((uint64_t *)g_malloc_n((arraylen), sizeof(uint64_t)));
  cpu->cpreg_vmstate_values =
      ((uint64_t *)g_malloc_n((arraylen), sizeof(uint64_t)));
  cpu->cpreg_vmstate_array_len = cpu->cpreg_array_len;
  cpu->cpreg_array_len = 0;

  g_list_foreach(keys, add_cpreg_to_list, cpu);

# 263 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 263 "../../../target/arm/helper.c"
                    cpu->cpreg_array_len == arraylen
# 263 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 263 "../../../target/arm/helper.c"
         cpu->cpreg_array_len == arraylen
# 263 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 263 "../../../target/arm/helper.c"
           "cpu->cpreg_array_len == arraylen"
# 263 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 263,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 263 "../../../target/arm/helper.c"
      ;

  g_list_free(keys);
}

static
# 268 "../../../target/arm/helper.c" 3 4
    _Bool
# 268 "../../../target/arm/helper.c"
    arm_pan_enabled(CPUARMState *env) {
  if (is_a64(env)) {
    if ((arm_hcr_el2_eff(env) & ((1ULL << 42) | (1ULL << 43))) ==
        ((1ULL << 42) | (1ULL << 43))) {
      return
# 272 "../../../target/arm/helper.c" 3 4
          0
# 272 "../../../target/arm/helper.c"
          ;
    }
    return env->pstate & (1U << 22);
  } else {
    return env->uncached_cpsr & (1U << 22);
  }
}

static CPAccessResult access_el3_aa32ns(CPUARMState *env,
                                        const ARMCPRegInfo *ri,

# 285 "../../../target/arm/helper.c" 3 4
                                        _Bool
# 285 "../../../target/arm/helper.c"
                                            isread) {
  if (!is_a64(env) && arm_current_el(env) == 3 &&
      arm_is_secure_below_el3(env)) {
    return CP_ACCESS_UNDEFINED;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult access_trap_aa32s_el1(CPUARMState *env,
                                            const ARMCPRegInfo *ri,

# 302 "../../../target/arm/helper.c" 3 4
                                            _Bool
# 302 "../../../target/arm/helper.c"
                                                isread) {
  if (arm_current_el(env) == 3) {
    return CP_ACCESS_OK;
  }
  if (arm_is_secure_below_el3(env)) {
    if (env->cp15.scr_el3 & (1ULL << 18)) {
      return CP_ACCESS_TRAP_EL2;
    }
    return CP_ACCESS_TRAP_EL3;
  }

  return CP_ACCESS_UNDEFINED;
}

static CPAccessResult access_tpm(CPUARMState *env, const ARMCPRegInfo *ri,

# 322 "../../../target/arm/helper.c" 3 4
                                 _Bool
# 322 "../../../target/arm/helper.c"
                                     isread) {
  int el = arm_current_el(env);
  uint64_t mdcr_el2 = arm_mdcr_el2_eff(env);

  if (el < 2 && (mdcr_el2 & (1U << 6))) {
    return CP_ACCESS_TRAP_EL2;
  }
  if (el < 3 && (env->cp15.mdcr_el3 & (1U << 6))) {
    return CP_ACCESS_TRAP_EL3;
  }
  return CP_ACCESS_OK;
}

CPAccessResult access_tvm_trvm(CPUARMState *env, const ARMCPRegInfo *ri,

# 338 "../../../target/arm/helper.c" 3 4
                               _Bool
# 338 "../../../target/arm/helper.c"
                                   isread) {
  if (arm_current_el(env) == 1) {
    uint64_t trap = isread ? (1ULL << 30) : (1ULL << 26);
    if (arm_hcr_el2_eff(env) & trap) {
      return CP_ACCESS_TRAP_EL2;
    }
  }
  return CP_ACCESS_OK;
}

static CPAccessResult access_tsw(CPUARMState *env, const ARMCPRegInfo *ri,

# 351 "../../../target/arm/helper.c" 3 4
                                 _Bool
# 351 "../../../target/arm/helper.c"
                                     isread) {
  if (arm_current_el(env) == 1 && (arm_hcr_el2_eff(env) & (1ULL << 22))) {
    return CP_ACCESS_TRAP_EL2;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult access_tacr(CPUARMState *env, const ARMCPRegInfo *ri,

# 361 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 361 "../../../target/arm/helper.c"
                                      isread) {
  if (arm_current_el(env) == 1 && (arm_hcr_el2_eff(env) & (1ULL << 21))) {
    return CP_ACCESS_TRAP_EL2;
  }
  return CP_ACCESS_OK;
}

static void dacr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  raw_write(env, ri, value);
  tlb_flush(((CPUState *)(cpu)));
}

static void fcse_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (raw_read(env, ri) != value) {

    tlb_flush(((CPUState *)(cpu)));
    raw_write(env, ri, value);
  }
}

static void contextidr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (raw_read(env, ri) != value && !arm_feature(env, ARM_FEATURE_PMSA) &&
      !extended_addresses_enabled(env)) {

    tlb_flush(((CPUState *)(cpu)));
  }
  raw_write(env, ri, value);
}

int alle1_tlbmask(CPUARMState *env) {
# 418 "../../../target/arm/helper.c"
  return (ARMMMUIdxBit_E10_1 | ARMMMUIdxBit_E10_1_PAN | ARMMMUIdxBit_E10_0 |
          ARMMMUIdxBit_Stage2 | ARMMMUIdxBit_Stage2_S);
}

static const ARMCPRegInfo cp_reginfo[] = {

    {
        .name = "FCSEIDR",
        .cp = 15,
        .opc1 = 0,
        .crn = 13,
        .crm = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .secure = ARM_CP_SECSTATE_NS,
        .fieldoffset =
# 435 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 435 "../../../target/arm/helper.c"
                CPUARMState
# 435 "../../../target/arm/helper.c" 3 4
                ,
# 435 "../../../target/arm/helper.c"
                cp15.fcseidr_ns
# 435 "../../../target/arm/helper.c" 3 4
                )
# 435 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
        .writefn = fcse_write,
        .raw_writefn = raw_write,
    },
    {
        .name = "FCSEIDR_S",
        .cp = 15,
        .opc1 = 0,
        .crn = 13,
        .crm = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .secure = ARM_CP_SECSTATE_S,
        .fieldoffset =
# 440 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 440 "../../../target/arm/helper.c"
                CPUARMState
# 440 "../../../target/arm/helper.c" 3 4
                ,
# 440 "../../../target/arm/helper.c"
                cp15.fcseidr_s
# 440 "../../../target/arm/helper.c" 3 4
                )
# 440 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
        .writefn = fcse_write,
        .raw_writefn = raw_write,
    },

    {
        .name = "CONTEXTIDR_EL1",
        .state = ARM_CP_STATE_BOTH,
        .opc0 = 3,
        .opc1 = 0,
        .crn = 13,
        .crm = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .fgt = FGT_CONTEXTIDR_EL1,
        .nv2_redirect_offset = 0x108 | 0x4000,
        .secure = ARM_CP_SECSTATE_NS,
        .fieldoffset =
# 455 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 455 "../../../target/arm/helper.c"
                CPUARMState
# 455 "../../../target/arm/helper.c" 3 4
                ,
# 455 "../../../target/arm/helper.c"
                cp15.contextidr_el[1]
# 455 "../../../target/arm/helper.c" 3 4
                )
# 455 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
        .writefn = contextidr_write,
        .raw_writefn = raw_write,
    },
    {
        .name = "CONTEXTIDR_S",
        .state = ARM_CP_STATE_AA32,
        .cp = 15,
        .opc1 = 0,
        .crn = 13,
        .crm = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .secure = ARM_CP_SECSTATE_S,
        .fieldoffset =
# 461 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 461 "../../../target/arm/helper.c"
                CPUARMState
# 461 "../../../target/arm/helper.c" 3 4
                ,
# 461 "../../../target/arm/helper.c"
                cp15.contextidr_s
# 461 "../../../target/arm/helper.c" 3 4
                )
# 461 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
        .writefn = contextidr_write,
        .raw_writefn = raw_write,
    },
};

static const ARMCPRegInfo not_v8_cp_reginfo[] = {

    {.name = "DACR",
     .cp = 15,
     .opc1 = 0xff,
     .crn = 3,
     .crm = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .resetvalue = 0,
     .writefn = dacr_write,
     .raw_writefn = raw_write,
     .bank_fieldoffsets =
         {
# 475 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 475 "../../../target/arm/helper.c"
                 CPUARMState
# 475 "../../../target/arm/helper.c" 3 4
                 ,
# 475 "../../../target/arm/helper.c"
                 cp15.dacr_s
# 475 "../../../target/arm/helper.c" 3 4
                 )
# 475 "../../../target/arm/helper.c"
                 ,

# 476 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 476 "../../../target/arm/helper.c"
                 CPUARMState
# 476 "../../../target/arm/helper.c" 3 4
                 ,
# 476 "../../../target/arm/helper.c"
                 cp15.dacr_ns
# 476 "../../../target/arm/helper.c" 3 4
                 )
# 476 "../../../target/arm/helper.c"
         }},

    {.name = "TLB_LOCKDOWN",
     .cp = 15,
     .crn = 10,
     .crm = 0,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "TLB_LOCKDOWN",
     .cp = 15,
     .crn = 10,
     .crm = 1,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "TLB_LOCKDOWN",
     .cp = 15,
     .crn = 10,
     .crm = 4,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "TLB_LOCKDOWN",
     .cp = 15,
     .crn = 10,
     .crm = 8,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_NOP},

    {.name = "CACHEMAINT",
     .cp = 15,
     .crn = 7,
     .crm = 0xff,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_W,
     .type = ARM_CP_NOP | ARM_CP_OVERRIDE},
};

static const ARMCPRegInfo not_v6_cp_reginfo[] = {

    {.name = "WFI_v5",
     .cp = 15,
     .crn = 7,
     .crm = 8,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL1_W,
     .type = ARM_CP_WFI},
};

static const ARMCPRegInfo not_v7_cp_reginfo[] = {

    {.name = "WFI_v6",
     .cp = 15,
     .crn = 7,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL1_W,
     .type = ARM_CP_WFI},

    {.name = "DLOCKDOWN",
     .cp = 15,
     .crn = 9,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .fieldoffset =
# 517 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 517 "../../../target/arm/helper.c"
             CPUARMState
# 517 "../../../target/arm/helper.c" 3 4
             ,
# 517 "../../../target/arm/helper.c"
             cp15.c9_data
# 517 "../../../target/arm/helper.c" 3 4
             )
# 517 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "ILOCKDOWN",
     .cp = 15,
     .crn = 9,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .fieldoffset =
# 520 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 520 "../../../target/arm/helper.c"
             CPUARMState
# 520 "../../../target/arm/helper.c" 3 4
             ,
# 520 "../../../target/arm/helper.c"
             cp15.c9_insn
# 520 "../../../target/arm/helper.c" 3 4
             )
# 520 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},

    {.name = "DUMMY",
     .cp = 15,
     .crn = 0,
     .crm = 0,
     .opc1 = 1,
     .opc2 = 0xff,
     .access = PL1_R,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW,
     .resetvalue = 0},

    {.name = "DBGDIDR",
     .cp = 14,
     .crn = 0,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL0_R,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "PRRR",
     .cp = 15,
     .crn = 10,
     .crm = 2,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "NMRR",
     .cp = 15,
     .crn = 10,
     .crm = 2,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
};

static void cpacr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  uint32_t mask = 0;

  if (!arm_feature(env, ARM_FEATURE_V8)) {

    if (({
          ARMCPU *cpu_ = (env_archcpu(env));
          isar_feature_aa32_vfp_simd(&cpu_->isar);
        })) {

      mask |= R_CPACR_ASEDIS_MASK | R_CPACR_D32DIS_MASK | R_CPACR_CP11_MASK |
              R_CPACR_CP10_MASK;

      if (!arm_feature(env, ARM_FEATURE_NEON)) {

        value |= R_CPACR_ASEDIS_MASK;
      }

      if (!({
            ARMCPU *cpu_ = (env_archcpu(env));
            isar_feature_aa32_simd_r32(&cpu_->isar);
          })) {

        value |= R_CPACR_D32DIS_MASK;
      }
    }
    value &= mask;
  }

  if (arm_feature(env, ARM_FEATURE_EL3) && !arm_el_is_aa64(env, 3) &&
      !arm_is_secure(env) && !extract32(env->cp15.nsacr, 10, 1)) {
    mask = R_CPACR_CP11_MASK | R_CPACR_CP10_MASK;
    value = (value & ~mask) | (env->cp15.cpacr_el1 & mask);
  }

  env->cp15.cpacr_el1 = value;
}

static uint64_t cpacr_read(CPUARMState *env, const ARMCPRegInfo *ri) {

  uint64_t value = env->cp15.cpacr_el1;

  if (arm_feature(env, ARM_FEATURE_EL3) && !arm_el_is_aa64(env, 3) &&
      !arm_is_secure(env) && !extract32(env->cp15.nsacr, 10, 1)) {
    value = ~(R_CPACR_CP11_MASK | R_CPACR_CP10_MASK);
  }
  return value;
}

static void cpacr_reset(CPUARMState *env, const ARMCPRegInfo *ri) {

  cpacr_write(env, ri, 0);
}

static CPAccessResult cpacr_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 615 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 615 "../../../target/arm/helper.c"
                                       isread) {
  if (arm_feature(env, ARM_FEATURE_V8)) {

    if (arm_current_el(env) == 1 && arm_is_el2_enabled(env) &&
        extract64((env->cp15.cptr_el[2]), R_CPTR_EL2_TCPAC_SHIFT,
                  R_CPTR_EL2_TCPAC_LENGTH)) {
      return CP_ACCESS_TRAP_EL2;

    } else if (arm_current_el(env) < 3 &&
               extract64((env->cp15.cptr_el[3]), R_CPTR_EL3_TCPAC_SHIFT,
                         R_CPTR_EL3_TCPAC_LENGTH)) {
      return CP_ACCESS_TRAP_EL3;
    }
  }

  return CP_ACCESS_OK;
}

static CPAccessResult cptr_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 633 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 633 "../../../target/arm/helper.c"
                                      isread) {

  if (arm_current_el(env) == 2 &&
      extract64((env->cp15.cptr_el[3]), R_CPTR_EL3_TCPAC_SHIFT,
                R_CPTR_EL3_TCPAC_LENGTH)) {
    return CP_ACCESS_TRAP_EL3;
  }

  return CP_ACCESS_OK;
}

static const ARMCPRegInfo v6_cp_reginfo[] = {

    {.name = "MVA_prefetch",
     .cp = 15,
     .crn = 7,
     .crm = 13,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_W,
     .type = ARM_CP_NOP},

    {.name = "ISB",
     .cp = 15,
     .crn = 7,
     .crm = 5,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL0_W,
     .type = ARM_CP_NO_RAW,
     .writefn = arm_cp_write_ignore},
    {.name = "DSB",
     .cp = 15,
     .crn = 7,
     .crm = 10,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL0_W,
     .type = ARM_CP_NOP},
    {.name = "DMB",
     .cp = 15,
     .crn = 7,
     .crm = 10,
     .opc1 = 0,
     .opc2 = 5,
     .access = PL0_W,
     .type = ARM_CP_NOP},
    {
        .name = "IFAR",
        .cp = 15,
        .crn = 6,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 2,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .bank_fieldoffsets =
            {
# 662 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 662 "../../../target/arm/helper.c"
                    CPUARMState
# 662 "../../../target/arm/helper.c" 3 4
                    ,
# 662 "../../../target/arm/helper.c"
                    cp15.ifar_s
# 662 "../../../target/arm/helper.c" 3 4
                    )
# 662 "../../../target/arm/helper.c"
                    ,

# 663 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 663 "../../../target/arm/helper.c"
                    CPUARMState
# 663 "../../../target/arm/helper.c" 3 4
                    ,
# 663 "../../../target/arm/helper.c"
                    cp15.ifar_ns
# 663 "../../../target/arm/helper.c" 3 4
                    )
# 663 "../../../target/arm/helper.c"
            },
        .resetvalue = 0,
    },

    {
        .name = "WFAR",
        .cp = 15,
        .crn = 6,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .type = ARM_CP_CONST,
        .resetvalue = 0,
    },
    {.name = "CPACR",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .crn = 1,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 2,
     .accessfn = cpacr_access,
     .fgt = FGT_CPACR_EL1,
     .nv2_redirect_offset = 0x100 | 0x4000,
     .access = PL1_RW,
     .fieldoffset =
# 675 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 675 "../../../target/arm/helper.c"
             CPUARMState
# 675 "../../../target/arm/helper.c" 3 4
             ,
# 675 "../../../target/arm/helper.c"
             cp15.cpacr_el1
# 675 "../../../target/arm/helper.c" 3 4
             )
# 675 "../../../target/arm/helper.c"
         ,
     .resetfn = cpacr_reset,
     .writefn = cpacr_write,
     .readfn = cpacr_read},
};

typedef struct pm_event {
  uint16_t number;

# 682 "../../../target/arm/helper.c" 3 4
  _Bool
# 682 "../../../target/arm/helper.c"
      (*supported)(CPUARMState *);

  uint64_t (*get_count)(CPUARMState *);

  int64_t (*ns_per_count)(uint64_t);
} pm_event;

static
# 697 "../../../target/arm/helper.c" 3 4
    _Bool
# 697 "../../../target/arm/helper.c"
    event_always_supported(CPUARMState *env) {
  return
# 699 "../../../target/arm/helper.c" 3 4
      1
# 699 "../../../target/arm/helper.c"
      ;
}

static uint64_t swinc_get_count(CPUARMState *env) { return 0; }

static int64_t swinc_ns_per(uint64_t ignored) { return -1; }

static uint64_t cycles_get_count(CPUARMState *env) {

  return cpu_get_host_ticks();
}
# 755 "../../../target/arm/helper.c"
static
# 755 "../../../target/arm/helper.c" 3 4
    _Bool
# 755 "../../../target/arm/helper.c"
    pmuv3p1_events_supported(CPUARMState *env) {

  return ({
    ARMCPU *cpu_ = (env_archcpu(env));
    isar_feature_any_pmuv3p1(&cpu_->isar);
  });
}

static
# 761 "../../../target/arm/helper.c" 3 4
    _Bool
# 761 "../../../target/arm/helper.c"
    pmuv3p4_events_supported(CPUARMState *env) {

  return ({
    ARMCPU *cpu_ = (env_archcpu(env));
    isar_feature_any_pmuv3p4(&cpu_->isar);
  });
}

static uint64_t zero_event_get_count(CPUARMState *env) { return 0; }

static int64_t zero_event_ns_per(uint64_t cycles) { return -1; }

static const pm_event pm_events[] = {
    {
        .number = 0x000,
        .supported = event_always_supported,
        .get_count = swinc_get_count,
        .ns_per_count = swinc_ns_per,
    },
# 797 "../../../target/arm/helper.c"
    {
        .number = 0x023,
        .supported = pmuv3p1_events_supported,
        .get_count = zero_event_get_count,
        .ns_per_count = zero_event_ns_per,
    },
    {
        .number = 0x024,
        .supported = pmuv3p1_events_supported,
        .get_count = zero_event_get_count,
        .ns_per_count = zero_event_ns_per,
    },
    {
        .number = 0x03c,
        .supported = pmuv3p4_events_supported,
        .get_count = zero_event_get_count,
        .ns_per_count = zero_event_ns_per,
    },
};
# 822 "../../../target/arm/helper.c"
static uint16_t supported_event_map[0x3c + 1];

void pmu_init(ARMCPU *cpu) {
  unsigned int i;

  for (i = 0;
       i < ((sizeof(supported_event_map) / sizeof((supported_event_map)[0])) +
            (sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(supported_event_map),
                             typeof(&(supported_event_map)[0]))))
                         ? -1
                         : 1;
                 }) -
             sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(supported_event_map),
                             typeof(&(supported_event_map)[0]))))
                         ? -1
                         : 1;
                 })));
       i++) {
    supported_event_map[i] =
# 839 "../../../target/arm/helper.c" 3 4
        (65535)
# 839 "../../../target/arm/helper.c"
        ;
  }
  cpu->pmceid0 = 0;
  cpu->pmceid1 = 0;

  for (i = 0;
       i < ((sizeof(pm_events) / sizeof((pm_events)[0])) +
            (sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(pm_events), typeof(&(pm_events)[0]))))
                         ? -1
                         : 1;
                 }) -
             sizeof(
                 struct {
                   int : (!(!__builtin_types_compatible_p(
                             typeof(pm_events), typeof(&(pm_events)[0]))))
                         ? -1
                         : 1;
                 })));
       i++) {
    const pm_event *cnt = &pm_events[i];

# 846 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 846 "../../../target/arm/helper.c"
                      cnt->number <= 0x3c
# 846 "../../../target/arm/helper.c" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 846 "../../../target/arm/helper.c"
           cnt->number <= 0x3c
# 846 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 846 "../../../target/arm/helper.c"
             "cnt->number <= MAX_EVENT_ID"
# 846 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 846,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 846 "../../../target/arm/helper.c"
        ;

# 848 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 848 "../../../target/arm/helper.c"
                      cnt->number <= 0x3f
# 848 "../../../target/arm/helper.c" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 848 "../../../target/arm/helper.c"
           cnt->number <= 0x3f
# 848 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 848 "../../../target/arm/helper.c"
             "cnt->number <= 0x3f"
# 848 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 848,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 848 "../../../target/arm/helper.c"
        ;

    if (cnt->supported(&cpu->env)) {
      supported_event_map[cnt->number] = i;
      uint64_t event_mask = 1ULL << (cnt->number & 0x1f);
      if (cnt->number & 0x20) {
        cpu->pmceid1 |= event_mask;
      } else {
        cpu->pmceid0 |= event_mask;
      }
    }
  }
}

static
# 865 "../../../target/arm/helper.c" 3 4
    _Bool
# 865 "../../../target/arm/helper.c"
    event_supported(uint16_t number) {
  if (number > 0x3c) {
    return
# 868 "../../../target/arm/helper.c" 3 4
        0
# 868 "../../../target/arm/helper.c"
        ;
  }
  return supported_event_map[number] !=
# 870 "../../../target/arm/helper.c" 3 4
         (65535)
# 870 "../../../target/arm/helper.c"
      ;
}

static CPAccessResult pmreg_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 874 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 874 "../../../target/arm/helper.c"
                                       isread) {

  int el = arm_current_el(env);
  uint64_t mdcr_el2 = arm_mdcr_el2_eff(env);

  if (el == 0 && !(env->cp15.c9_pmuserenr & 1)) {
    return CP_ACCESS_TRAP_EL1;
  }
  if (el < 2 && (mdcr_el2 & (1U << 6))) {
    return CP_ACCESS_TRAP_EL2;
  }
  if (el < 3 && (env->cp15.mdcr_el3 & (1U << 6))) {
    return CP_ACCESS_TRAP_EL3;
  }

  return CP_ACCESS_OK;
}

static CPAccessResult pmreg_access_xevcntr(CPUARMState *env,
                                           const ARMCPRegInfo *ri,

# 899 "../../../target/arm/helper.c" 3 4
                                           _Bool
# 899 "../../../target/arm/helper.c"
                                               isread) {

  if (arm_feature(env, ARM_FEATURE_V8) && arm_current_el(env) == 0 &&
      (env->cp15.c9_pmuserenr & (1 << 3)) != 0 && isread) {
    return CP_ACCESS_OK;
  }

  return pmreg_access(env, ri, isread);
}

static CPAccessResult pmreg_access_swinc(CPUARMState *env,
                                         const ARMCPRegInfo *ri,

# 914 "../../../target/arm/helper.c" 3 4
                                         _Bool
# 914 "../../../target/arm/helper.c"
                                             isread) {

  if (arm_feature(env, ARM_FEATURE_V8) && arm_current_el(env) == 0 &&
      (env->cp15.c9_pmuserenr & (1 << 1)) != 0 && !isread) {
    return CP_ACCESS_OK;
  }

  return pmreg_access(env, ri, isread);
}

static CPAccessResult pmreg_access_selr(CPUARMState *env,
                                        const ARMCPRegInfo *ri,

# 929 "../../../target/arm/helper.c" 3 4
                                        _Bool
# 929 "../../../target/arm/helper.c"
                                            isread) {

  if (arm_feature(env, ARM_FEATURE_V8) && arm_current_el(env) == 0 &&
      (env->cp15.c9_pmuserenr & (1 << 3)) != 0) {
    return CP_ACCESS_OK;
  }

  return pmreg_access(env, ri, isread);
}

static CPAccessResult pmreg_access_ccntr(CPUARMState *env,
                                         const ARMCPRegInfo *ri,

# 943 "../../../target/arm/helper.c" 3 4
                                         _Bool
# 943 "../../../target/arm/helper.c"
                                             isread) {

  if (arm_feature(env, ARM_FEATURE_V8) && arm_current_el(env) == 0 &&
      (env->cp15.c9_pmuserenr & (1 << 2)) != 0 && isread) {
    return CP_ACCESS_OK;
  }

  return pmreg_access(env, ri, isread);
}
# 969 "../../../target/arm/helper.c"
static
# 969 "../../../target/arm/helper.c" 3 4
    _Bool
# 969 "../../../target/arm/helper.c"
    pmu_counter_enabled(CPUARMState *env, uint8_t counter) {
  uint64_t filter;

# 972 "../../../target/arm/helper.c" 3 4
  _Bool
# 972 "../../../target/arm/helper.c"
      e,
      p, u, nsk, nsu, nsh, m;

# 973 "../../../target/arm/helper.c" 3 4
  _Bool
# 973 "../../../target/arm/helper.c"
      enabled,
      prohibited =
# 973 "../../../target/arm/helper.c" 3 4
          0
# 973 "../../../target/arm/helper.c"
      ,
      filtered;

# 974 "../../../target/arm/helper.c" 3 4
  _Bool
# 974 "../../../target/arm/helper.c"
      secure = arm_is_secure(env);
  int el = arm_current_el(env);
  uint64_t mdcr_el2;
  uint8_t hpmn;

  if (!arm_feature(env, ARM_FEATURE_PMU)) {
    return
# 985 "../../../target/arm/helper.c" 3 4
        0
# 985 "../../../target/arm/helper.c"
        ;
  }

  mdcr_el2 = arm_mdcr_el2_eff(env);
  hpmn = mdcr_el2 & (0x1fU);

  if (!arm_feature(env, ARM_FEATURE_EL2) || (counter < hpmn || counter == 31)) {
    e = env->cp15.c9_pmcr & 0x1;
  } else {
    e = mdcr_el2 & (1U << 7);
  }
  enabled = e && (env->cp15.c9_pmcnten & (1 << counter));

  if (el == 2 && (counter < hpmn || counter == 31)) {
    prohibited = mdcr_el2 & (1U << 17);
  }
  if (secure) {
    prohibited = prohibited || !(env->cp15.mdcr_el3 & (1U << 17));
  }

  if (counter == 31) {

    prohibited = prohibited && env->cp15.c9_pmcr & 0x20;
    if (({
          ARMCPU *cpu_ = (env_archcpu(env));
          isar_feature_any_pmuv3p5(&cpu_->isar);
        })) {
      if (secure) {
        prohibited = prohibited || (env->cp15.mdcr_el3 & (1U << 23));
      }
      if (el == 2) {
        prohibited = prohibited || (mdcr_el2 & (1U << 23));
      }
    }
  }

  if (counter == 31) {
    filter = env->cp15.pmccfiltr_el0;
  } else {
    filter = env->cp15.c14_pmevtyper[counter];
  }

  p = filter & 0x80000000;
  u = filter & 0x40000000;
  nsk = arm_feature(env, ARM_FEATURE_EL3) && (filter & 0x20000000);
  nsu = arm_feature(env, ARM_FEATURE_EL3) && (filter & 0x10000000);
  nsh = arm_feature(env, ARM_FEATURE_EL2) && (filter & 0x08000000);
  m = arm_el_is_aa64(env, 1) && arm_feature(env, ARM_FEATURE_EL3) &&
      (filter & 0x04000000);

  if (el == 0) {
    filtered = secure ? u : u != nsu;
  } else if (el == 1) {
    filtered = secure ? p : p != nsk;
  } else if (el == 2) {
    filtered = !nsh;
  } else {
    filtered = m != p;
  }

  if (counter != 31) {

    uint16_t event = filter & 0x0000ffff;
    if (!event_supported(event)) {
      return
# 1055 "../../../target/arm/helper.c" 3 4
          0
# 1055 "../../../target/arm/helper.c"
          ;
    }
  }

  return enabled && !prohibited && !filtered;
}

static void pmu_update_irq(CPUARMState *env) {
  ARMCPU *cpu = env_archcpu(env);
  qemu_set_irq(cpu->pmu_interrupt,
               (env->cp15.c9_pmcr & 0x1) &&
                   (env->cp15.c9_pminten & env->cp15.c9_pmovsr));
}

static
# 1069 "../../../target/arm/helper.c" 3 4
    _Bool
# 1069 "../../../target/arm/helper.c"
    pmccntr_clockdiv_enabled(CPUARMState *env) {

  return (env->cp15.c9_pmcr & (0x8 | 0x40)) == 0x8;
}

static
# 1080 "../../../target/arm/helper.c" 3 4
    _Bool
# 1080 "../../../target/arm/helper.c"
    pmevcntr_is_64_bit(CPUARMState *env, int counter) {

# 1085 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 1085 "../../../target/arm/helper.c"
                    counter < 31
# 1085 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1085 "../../../target/arm/helper.c"
         counter < 31
# 1085 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 1085 "../../../target/arm/helper.c"
           "counter < 31"
# 1085 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 1085,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1085 "../../../target/arm/helper.c"
      ;

  if (!({
        ARMCPU *cpu_ = (env_archcpu(env));
        isar_feature_any_pmuv3p5(&cpu_->isar);
      })) {
    return
# 1088 "../../../target/arm/helper.c" 3 4
        0
# 1088 "../../../target/arm/helper.c"
        ;
  }

  if (arm_feature(env, ARM_FEATURE_EL2)) {

# 1096 "../../../target/arm/helper.c" 3 4
    _Bool
# 1096 "../../../target/arm/helper.c"
        hlp = env->cp15.mdcr_el2 & (1U << 26);
    int hpmn = env->cp15.mdcr_el2 & (0x1fU);

    if (counter >= hpmn) {
      return hlp;
    }
  }
  return env->cp15.c9_pmcr & 0x80;
}

static void pmccntr_op_start(CPUARMState *env) {
  uint64_t cycles = cycles_get_count(env);

  if (pmu_counter_enabled(env, 31)) {
    uint64_t eff_cycles = cycles;
    if (pmccntr_clockdiv_enabled(env)) {
      eff_cycles /= 64;
    }

    uint64_t new_pmccntr = eff_cycles - env->cp15.c15_ccnt_delta;

    uint64_t overflow_mask = env->cp15.c9_pmcr & 0x40 ? 1ull << 63 : 1ull << 31;
    if (env->cp15.c15_ccnt & ~new_pmccntr & overflow_mask) {
      env->cp15.c9_pmovsr |= (1ULL << 31);
      pmu_update_irq(env);
    }

    env->cp15.c15_ccnt = new_pmccntr;
  }
  env->cp15.c15_ccnt_delta = cycles;
}

static void pmccntr_op_finish(CPUARMState *env) {
  if (pmu_counter_enabled(env, 31)) {
# 1163 "../../../target/arm/helper.c"
    uint64_t prev_cycles = env->cp15.c15_ccnt_delta;
    if (pmccntr_clockdiv_enabled(env)) {
      prev_cycles /= 64;
    }
    env->cp15.c15_ccnt_delta = prev_cycles - env->cp15.c15_ccnt;
  }
}

static void pmevcntr_op_start(CPUARMState *env, uint8_t counter) {

  uint16_t event = env->cp15.c14_pmevtyper[counter] & 0x0000ffff;
  uint64_t count = 0;
  if (event_supported(event)) {
    uint16_t event_idx = supported_event_map[event];
    count = pm_events[event_idx].get_count(env);
  }

  if (pmu_counter_enabled(env, counter)) {
    uint64_t new_pmevcntr = count - env->cp15.c14_pmevcntr_delta[counter];
    uint64_t overflow_mask =
        pmevcntr_is_64_bit(env, counter) ? 1ULL << 63 : 1ULL << 31;

    if (env->cp15.c14_pmevcntr[counter] & ~new_pmevcntr & overflow_mask) {
      env->cp15.c9_pmovsr |= (1 << counter);
      pmu_update_irq(env);
    }
    env->cp15.c14_pmevcntr[counter] = new_pmevcntr;
  }
  env->cp15.c14_pmevcntr_delta[counter] = count;
}

static void pmevcntr_op_finish(CPUARMState *env, uint8_t counter) {
  if (pmu_counter_enabled(env, counter)) {
# 1220 "../../../target/arm/helper.c"
    env->cp15.c14_pmevcntr_delta[counter] -= env->cp15.c14_pmevcntr[counter];
  }
}

void pmu_op_start(CPUARMState *env) {
  unsigned int i;
  pmccntr_op_start(env);
  for (i = 0; i < pmu_num_counters(env); i++) {
    pmevcntr_op_start(env, i);
  }
}

void pmu_op_finish(CPUARMState *env) {
  unsigned int i;
  pmccntr_op_finish(env);
  for (i = 0; i < pmu_num_counters(env); i++) {
    pmevcntr_op_finish(env, i);
  }
}

void pmu_pre_el_change(ARMCPU *cpu, void *ignored) { pmu_op_start(&cpu->env); }

void pmu_post_el_change(ARMCPU *cpu, void *ignored) {
  pmu_op_finish(&cpu->env);
}

void arm_pmu_timer_cb(void *opaque) {
  ARMCPU *cpu = opaque;

  pmu_op_start(&cpu->env);
  pmu_op_finish(&cpu->env);
}

static void pmcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {
  pmu_op_start(env);

  if (value & 0x4) {

    env->cp15.c15_ccnt = 0;
  }

  if (value & 0x2) {
    unsigned int i;
    for (i = 0; i < pmu_num_counters(env); i++) {
      env->cp15.c14_pmevcntr[i] = 0;
    }
  }

  env->cp15.c9_pmcr &= ~(0x80 | 0x40 | 0x20 | 0x10 | 0x8 | 0x1);
  env->cp15.c9_pmcr |= (value & (0x80 | 0x40 | 0x20 | 0x10 | 0x8 | 0x1));

  pmu_op_finish(env);
}

static uint64_t pmcr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint64_t pmcr = env->cp15.c9_pmcr;

  if (arm_current_el(env) <= 1 && arm_is_el2_enabled(env)) {
    pmcr &= ~0xf800;
    pmcr |= (env->cp15.mdcr_el2 & (0x1fU)) << 11;
  }

  return pmcr;
}

static void pmswinc_write(CPUARMState *env, const ARMCPRegInfo *ri,
                          uint64_t value) {
  unsigned int i;
  uint64_t overflow_mask, new_pmswinc;

  for (i = 0; i < pmu_num_counters(env); i++) {

    if ((value & (1 << i)) &&

        pmu_counter_enabled(env, i) &&

        (env->cp15.c14_pmevtyper[i] & 0x0000ffff) == 0x0) {
      pmevcntr_op_start(env, i);

      new_pmswinc = env->cp15.c14_pmevcntr[i] + 1;

      overflow_mask = pmevcntr_is_64_bit(env, i) ? 1ULL << 63 : 1ULL << 31;

      if (env->cp15.c14_pmevcntr[i] & ~new_pmswinc & overflow_mask) {
        env->cp15.c9_pmovsr |= (1 << i);
        pmu_update_irq(env);
      }

      env->cp15.c14_pmevcntr[i] = new_pmswinc;

      pmevcntr_op_finish(env, i);
    }
  }
}

static uint64_t pmccntr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint64_t ret;
  pmccntr_op_start(env);
  ret = env->cp15.c15_ccnt;
  pmccntr_op_finish(env);
  return ret;
}

static void pmselr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {

  env->cp15.c9_pmselr = value & 0x1f;
}

static void pmccntr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                          uint64_t value) {
  pmccntr_op_start(env);
  env->cp15.c15_ccnt = value;
  pmccntr_op_finish(env);
}

static void pmccntr_write32(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  uint64_t cur_val = pmccntr_read(env,
# 1374 "../../../target/arm/helper.c" 3 4
                                  ((void *)0)
# 1374 "../../../target/arm/helper.c"
  );

  pmccntr_write(env, ri, deposit64(cur_val, 0, 32, value));
}

static void pmccfiltr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  pmccntr_op_start(env);
  env->cp15.pmccfiltr_el0 = value & (0xf8000000 | 0x04000000);
  pmccntr_op_finish(env);
}

static void pmccfiltr_write_a32(CPUARMState *env, const ARMCPRegInfo *ri,
                                uint64_t value) {
  pmccntr_op_start(env);

  env->cp15.pmccfiltr_el0 =
      (env->cp15.pmccfiltr_el0 & 0x04000000) | (value & 0xf8000000);
  pmccntr_op_finish(env);
}

static uint64_t pmccfiltr_read_a32(CPUARMState *env, const ARMCPRegInfo *ri) {

  return env->cp15.pmccfiltr_el0 & 0xf8000000;
}

static void pmcntenset_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  pmu_op_start(env);
  value &= pmu_counter_mask(env);
  env->cp15.c9_pmcnten |= value;
  pmu_op_finish(env);
}

static void pmcntenclr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  pmu_op_start(env);
  value &= pmu_counter_mask(env);
  env->cp15.c9_pmcnten &= ~value;
  pmu_op_finish(env);
}

static void pmovsr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  value &= pmu_counter_mask(env);
  env->cp15.c9_pmovsr &= ~value;
  pmu_update_irq(env);
}

static void pmovsset_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {
  value &= pmu_counter_mask(env);
  env->cp15.c9_pmovsr |= value;
  pmu_update_irq(env);
}

static void pmevtyper_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value, const uint8_t counter) {
  if (counter == 31) {
    pmccfiltr_write(env, ri, value);
  } else if (counter < pmu_num_counters(env)) {
    pmevcntr_op_start(env, counter);

    uint16_t old_event = env->cp15.c14_pmevtyper[counter] & 0x0000ffff;
    uint16_t new_event = value & 0x0000ffff;
    if (old_event != new_event) {
      uint64_t count = 0;
      if (event_supported(new_event)) {
        uint16_t event_idx = supported_event_map[new_event];
        count = pm_events[event_idx].get_count(env);
      }
      env->cp15.c14_pmevcntr_delta[counter] = count;
    }

    env->cp15.c14_pmevtyper[counter] =
        value & (0x80000000 | 0x40000000 | 0x20000000 | 0x10000000 |
                 0x08000000 | 0x04000000 | 0x02000000 | 0x0000ffff);
    pmevcntr_op_finish(env, counter);
  }
}

static uint64_t pmevtyper_read(CPUARMState *env, const ARMCPRegInfo *ri,
                               const uint8_t counter) {
  if (counter == 31) {
    return env->cp15.pmccfiltr_el0;
  } else if (counter < pmu_num_counters(env)) {
    return env->cp15.c14_pmevtyper[counter];
  } else {

    return 0;
  }
}

static void pmevtyper_writefn(CPUARMState *env, const ARMCPRegInfo *ri,
                              uint64_t value) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);
  pmevtyper_write(env, ri, value, counter);
}

static void pmevtyper_rawwrite(CPUARMState *env, const ARMCPRegInfo *ri,
                               uint64_t value) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);
  env->cp15.c14_pmevtyper[counter] = value;
# 1511 "../../../target/arm/helper.c"
  uint16_t event = value & 0x0000ffff;
  if (event_supported(event)) {
    uint16_t event_idx = supported_event_map[event];
    env->cp15.c14_pmevcntr_delta[counter] = pm_events[event_idx].get_count(env);
  }
}

static uint64_t pmevtyper_readfn(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);
  return pmevtyper_read(env, ri, counter);
}

static void pmxevtyper_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  pmevtyper_write(env, ri, value, env->cp15.c9_pmselr & 31);
}

static uint64_t pmxevtyper_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return pmevtyper_read(env, ri, env->cp15.c9_pmselr & 31);
}

static void pmevcntr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value, uint8_t counter) {
  if (!({
        ARMCPU *cpu_ = (env_archcpu(env));
        isar_feature_any_pmuv3p5(&cpu_->isar);
      })) {

    value &= (((~0ULL) >> (64 - (32))) << (0));
  }
  if (counter < pmu_num_counters(env)) {
    pmevcntr_op_start(env, counter);
    env->cp15.c14_pmevcntr[counter] = value;
    pmevcntr_op_finish(env, counter);
  }
}

static uint64_t pmevcntr_read(CPUARMState *env, const ARMCPRegInfo *ri,
                              uint8_t counter) {
  if (counter < pmu_num_counters(env)) {
    uint64_t ret;
    pmevcntr_op_start(env, counter);
    ret = env->cp15.c14_pmevcntr[counter];
    pmevcntr_op_finish(env, counter);
    if (!({
          ARMCPU *cpu_ = (env_archcpu(env));
          isar_feature_any_pmuv3p5(&cpu_->isar);
        })) {

      ret &= (((~0ULL) >> (64 - (32))) << (0));
    }
    return ret;
  } else {

    return 0;
  }
}

static void pmevcntr_writefn(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);
  pmevcntr_write(env, ri, value, counter);
}

static uint64_t pmevcntr_readfn(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);
  return pmevcntr_read(env, ri, counter);
}

static void pmevcntr_rawwrite(CPUARMState *env, const ARMCPRegInfo *ri,
                              uint64_t value) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);

# 1593 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 1593 "../../../target/arm/helper.c"
                    counter < pmu_num_counters(env)
# 1593 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1593 "../../../target/arm/helper.c"
         counter < pmu_num_counters(env)
# 1593 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 1593 "../../../target/arm/helper.c"
           "counter < pmu_num_counters(env)"
# 1593 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 1593,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1593 "../../../target/arm/helper.c"
      ;
  env->cp15.c14_pmevcntr[counter] = value;
  pmevcntr_write(env, ri, value, counter);
}

static uint64_t pmevcntr_rawread(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint8_t counter = ((ri->crm & 3) << 3) | (ri->opc2 & 7);

# 1601 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 1601 "../../../target/arm/helper.c"
                    counter < pmu_num_counters(env)
# 1601 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 1601 "../../../target/arm/helper.c"
         counter < pmu_num_counters(env)
# 1601 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 1601 "../../../target/arm/helper.c"
           "counter < pmu_num_counters(env)"
# 1601 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 1601,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 1601 "../../../target/arm/helper.c"
      ;
  return env->cp15.c14_pmevcntr[counter];
}

static void pmxevcntr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  pmevcntr_write(env, ri, value, env->cp15.c9_pmselr & 31);
}

static uint64_t pmxevcntr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return pmevcntr_read(env, ri, env->cp15.c9_pmselr & 31);
}

static void pmuserenr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  if (arm_feature(env, ARM_FEATURE_V8)) {
    env->cp15.c9_pmuserenr = value & 0xf;
  } else {
    env->cp15.c9_pmuserenr = value & 1;
  }
}

static void pmintenset_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {

  value &= pmu_counter_mask(env);
  env->cp15.c9_pminten |= value;
  pmu_update_irq(env);
}

static void pmintenclr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  value &= pmu_counter_mask(env);
  env->cp15.c9_pminten &= ~value;
  pmu_update_irq(env);
}

static void vbar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {

  raw_write(env, ri, value & ~0x1FULL);
}

static void scr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                      uint64_t value) {

  uint64_t valid_mask = 0x3fff;
  ARMCPU *cpu = env_archcpu(env);
  uint64_t changed;

  if (arm_el_is_aa64(env, 3)) {
    value |= (1ULL << 4) | (1ULL << 5);
    valid_mask &= ~(1ULL << 6);

    if (!({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_aa32_el1(&cpu_->isar);
        }) &&
        !({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_aa32_el2(&cpu_->isar);
        })) {
      value |= (1ULL << 10);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_ras(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 15);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_lor(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 14);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_pauth(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 17) | (1ULL << 16);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_sel2(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 18);
    } else if (({
                 ARMCPU *cpu_ = (cpu);
                 isar_feature_aa64_rme(&cpu_->isar);
               })) {

      value |= (1ULL << 0);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_mte(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 26);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_scxtnum(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 25);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_doublefault(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 19) | (1ULL << 20);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_sme(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 41);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_hcx(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 38);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_fgt(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 27);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_rme(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 62) | (1ULL << 48);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_ecv(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 28);
    }
  } else {
    valid_mask &= ~((1ULL << 10) | (1ULL << 11));
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa32_ras(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 15);
    }
  }

  if (!arm_feature(env, ARM_FEATURE_EL2)) {
    valid_mask &= ~(1ULL << 8);
# 1732 "../../../target/arm/helper.c"
    if (arm_feature(env, ARM_FEATURE_V7) && !arm_feature(env, ARM_FEATURE_V8)) {
      valid_mask &= ~(1ULL << 7);
    }
  }

  value &= valid_mask;
  changed = env->cp15.scr_el3 ^ value;
  env->cp15.scr_el3 = value;

  if (changed & ((1ULL << 0) | (1ULL << 62))) {
    tlb_flush_by_mmuidx(env_cpu(env),
                        (ARMMMUIdxBit_E10_0 | ARMMMUIdxBit_E20_0 |
                         ARMMMUIdxBit_E10_1 | ARMMMUIdxBit_E20_2 |
                         ARMMMUIdxBit_E10_1_PAN | ARMMMUIdxBit_E20_2_PAN |
                         ARMMMUIdxBit_E2));
  }
}

static void scr_reset(CPUARMState *env, const ARMCPRegInfo *ri) {

  scr_write(env, ri, 0);
}

static CPAccessResult access_tid4(CPUARMState *env, const ARMCPRegInfo *ri,

# 1769 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 1769 "../../../target/arm/helper.c"
                                      isread) {
  if (arm_current_el(env) == 1 &&
      (arm_hcr_el2_eff(env) & ((1ULL << 17) | (1ULL << 49)))) {
    return CP_ACCESS_TRAP_EL2;
  }

  return CP_ACCESS_OK;
}

static uint64_t ccsidr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  ARMCPU *cpu = env_archcpu(env);

  uint32_t index = ((ri->secure & ARM_CP_SECSTATE_S) ? (env)->cp15.csselr_s
                                                     : (env)->cp15.csselr_ns);

  return cpu->ccsidr[index];
}

static void csselr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  raw_write(env, ri, value & 0xf);
}

static uint64_t isr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  CPUState *cs = env_cpu(env);

# 1802 "../../../target/arm/helper.c" 3 4
  _Bool
# 1802 "../../../target/arm/helper.c"
      el1 = arm_current_el(env) == 1;
  uint64_t hcr_el2 = el1 ? arm_hcr_el2_eff(env) : 0;
  uint64_t ret = 0;

  if (hcr_el2 & (1ULL << 4)) {
    if (cs->interrupt_request & 0x0040) {
      ret |= (1U << 7);
    }
    if (cs->interrupt_request & 0x0008) {
      ret |= (1U << 10);
      ret |= (1U << 7);
    }
  } else {
    if (cs->interrupt_request & 0x0002) {
      ret |= (1U << 7);
    }

    if (cs->interrupt_request & 0x1000) {
      ret |= (1U << 10);
      ret |= (1U << 7);
    }
  }

  if (hcr_el2 & (1ULL << 3)) {
    if (cs->interrupt_request & 0x0200) {
      ret |= (1U << 6);
    }
    if (cs->interrupt_request & 0x0800) {
      ret |= (1U << 9);
      ret |= (1U << 6);
    }
  } else {
    if (cs->interrupt_request & 0x0010) {
      ret |= (1U << 6);
    }
  }

  if (hcr_el2 & (1ULL << 5)) {
    if (cs->interrupt_request & 0x0100) {
      ret |= (1U << 8);
    }
  }

  return ret;
}

static CPAccessResult access_aa64_tid1(CPUARMState *env, const ARMCPRegInfo *ri,

# 1849 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 1849 "../../../target/arm/helper.c"
                                           isread) {
  if (arm_current_el(env) == 1 && (arm_hcr_el2_eff(env) & (1ULL << 16))) {
    return CP_ACCESS_TRAP_EL2;
  }

  return CP_ACCESS_OK;
}

static CPAccessResult access_aa32_tid1(CPUARMState *env, const ARMCPRegInfo *ri,

# 1859 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 1859 "../../../target/arm/helper.c"
                                           isread) {
  if (arm_feature(env, ARM_FEATURE_V8)) {
    return access_aa64_tid1(env, ri, isread);
  }

  return CP_ACCESS_OK;
}

static const ARMCPRegInfo v7_cp_reginfo[] = {

    {.name = "NOP",
     .cp = 15,
     .crn = 7,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL1_W,
     .type = ARM_CP_NOP},
# 1884 "../../../target/arm/helper.c"
    {.name = "PMCNTENSET",
     .cp = 15,
     .crn = 9,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL0_RW,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 1886 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1886 "../../../target/arm/helper.c"
             CPUARMState
# 1886 "../../../target/arm/helper.c" 3 4
             ,
# 1886 "../../../target/arm/helper.c"
             cp15.c9_pmcnten
# 1886 "../../../target/arm/helper.c" 3 4
             )
# 1886 "../../../target/arm/helper.c"
         ,
     .writefn = pmcntenset_write,
     .accessfn = pmreg_access,
     .fgt = FGT_PMCNTEN,
     .raw_writefn = raw_write},
    {.name = "PMCNTENSET_EL0",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_IO,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 12,
     .opc2 = 1,
     .access = PL0_RW,
     .accessfn = pmreg_access,
     .fgt = FGT_PMCNTEN,
     .fieldoffset =
# 1895 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1895 "../../../target/arm/helper.c"
             CPUARMState
# 1895 "../../../target/arm/helper.c" 3 4
             ,
# 1895 "../../../target/arm/helper.c"
             cp15.c9_pmcnten
# 1895 "../../../target/arm/helper.c" 3 4
             )
# 1895 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = pmcntenset_write,
     .raw_writefn = raw_write},
    {.name = "PMCNTENCLR",
     .cp = 15,
     .crn = 9,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL0_RW,
     .fieldoffset =
# 1899 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1899 "../../../target/arm/helper.c"
             CPUARMState
# 1899 "../../../target/arm/helper.c" 3 4
             ,
# 1899 "../../../target/arm/helper.c"
             cp15.c9_pmcnten
# 1899 "../../../target/arm/helper.c" 3 4
             )
# 1899 "../../../target/arm/helper.c"
         ,
     .accessfn = pmreg_access,
     .fgt = FGT_PMCNTEN,
     .writefn = pmcntenclr_write,
     .type = ARM_CP_ALIAS | ARM_CP_IO},
    {.name = "PMCNTENCLR_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 12,
     .opc2 = 2,
     .access = PL0_RW,
     .accessfn = pmreg_access,
     .fgt = FGT_PMCNTEN,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 1909 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1909 "../../../target/arm/helper.c"
             CPUARMState
# 1909 "../../../target/arm/helper.c" 3 4
             ,
# 1909 "../../../target/arm/helper.c"
             cp15.c9_pmcnten
# 1909 "../../../target/arm/helper.c" 3 4
             )
# 1909 "../../../target/arm/helper.c"
         ,
     .writefn = pmcntenclr_write},
    {.name = "PMOVSR",
     .cp = 15,
     .crn = 9,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 3,
     .access = PL0_RW,
     .type = ARM_CP_IO,
     .fieldoffset =
# 1913 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1913 "../../../target/arm/helper.c"
             CPUARMState
# 1913 "../../../target/arm/helper.c" 3 4
             ,
# 1913 "../../../target/arm/helper.c"
             cp15.c9_pmovsr
# 1913 "../../../target/arm/helper.c" 3 4
             )
# 1913 "../../../target/arm/helper.c"
         ,
     .accessfn = pmreg_access,
     .fgt = FGT_PMOVS,
     .writefn = pmovsr_write,
     .raw_writefn = raw_write},
    {.name = "PMOVSCLR_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 12,
     .opc2 = 3,
     .access = PL0_RW,
     .accessfn = pmreg_access,
     .fgt = FGT_PMOVS,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 1923 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1923 "../../../target/arm/helper.c"
             CPUARMState
# 1923 "../../../target/arm/helper.c" 3 4
             ,
# 1923 "../../../target/arm/helper.c"
             cp15.c9_pmovsr
# 1923 "../../../target/arm/helper.c" 3 4
             )
# 1923 "../../../target/arm/helper.c"
         ,
     .writefn = pmovsr_write,
     .raw_writefn = raw_write},
    {.name = "PMSWINC",
     .cp = 15,
     .crn = 9,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL0_W,
     .accessfn = pmreg_access_swinc,
     .fgt = FGT_PMSWINC_EL0,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .writefn = pmswinc_write},
    {.name = "PMSWINC_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 12,
     .opc2 = 4,
     .access = PL0_W,
     .accessfn = pmreg_access_swinc,
     .fgt = FGT_PMSWINC_EL0,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .writefn = pmswinc_write},
    {.name = "PMSELR",
     .cp = 15,
     .crn = 9,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 5,
     .access = PL0_RW,
     .type = ARM_CP_ALIAS,
     .fgt = FGT_PMSELR_EL0,
     .fieldoffset =
# 1940 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 1940 "../../../target/arm/helper.c"
             CPUARMState
# 1940 "../../../target/arm/helper.c" 3 4
             ,
# 1940 "../../../target/arm/helper.c"
             cp15.c9_pmselr
# 1940 "../../../target/arm/helper.c" 3 4
             )
# 1940 "../../../target/arm/helper.c"
         ,
     .accessfn = pmreg_access_selr,
     .writefn = pmselr_write,
     .raw_writefn = raw_write},
    {
        .name = "PMSELR_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 9,
        .crm = 12,
        .opc2 = 5,
        .access = PL0_RW,
        .accessfn = pmreg_access_selr,
        .fgt = FGT_PMSELR_EL0,
        .fieldoffset =
# 1947 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 1947 "../../../target/arm/helper.c"
                CPUARMState
# 1947 "../../../target/arm/helper.c" 3 4
                ,
# 1947 "../../../target/arm/helper.c"
                cp15.c9_pmselr
# 1947 "../../../target/arm/helper.c" 3 4
                )
# 1947 "../../../target/arm/helper.c"
            ,
        .writefn = pmselr_write,
        .raw_writefn = raw_write,
    },
    {.name = "PMCCNTR",
     .cp = 15,
     .crn = 9,
     .crm = 13,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL0_RW,
     .resetvalue = 0,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fgt = FGT_PMCCNTR_EL0,
     .readfn = pmccntr_read,
     .writefn = pmccntr_write32,
     .accessfn = pmreg_access_ccntr},
    {
        .name = "PMCCNTR_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 9,
        .crm = 13,
        .opc2 = 0,
        .access = PL0_RW,
        .accessfn = pmreg_access_ccntr,
        .fgt = FGT_PMCCNTR_EL0,
        .type = ARM_CP_IO,
        .fieldoffset =
# 1959 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 1959 "../../../target/arm/helper.c"
                CPUARMState
# 1959 "../../../target/arm/helper.c" 3 4
                ,
# 1959 "../../../target/arm/helper.c"
                cp15.c15_ccnt
# 1959 "../../../target/arm/helper.c" 3 4
                )
# 1959 "../../../target/arm/helper.c"
            ,
        .readfn = pmccntr_read,
        .writefn = pmccntr_write,
        .raw_readfn = raw_read,
        .raw_writefn = raw_write,
    },
    {
        .name = "PMCCFILTR",
        .cp = 15,
        .opc1 = 0,
        .crn = 14,
        .crm = 15,
        .opc2 = 7,
        .writefn = pmccfiltr_write_a32,
        .readfn = pmccfiltr_read_a32,
        .access = PL0_RW,
        .accessfn = pmreg_access,
        .fgt = FGT_PMCCFILTR_EL0,
        .type = ARM_CP_ALIAS | ARM_CP_IO,
        .resetvalue = 0,
    },
    {
        .name = "PMCCFILTR_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 14,
        .crm = 15,
        .opc2 = 7,
        .writefn = pmccfiltr_write,
        .raw_writefn = raw_write,
        .access = PL0_RW,
        .accessfn = pmreg_access,
        .fgt = FGT_PMCCFILTR_EL0,
        .type = ARM_CP_IO,
        .fieldoffset =
# 1974 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 1974 "../../../target/arm/helper.c"
                CPUARMState
# 1974 "../../../target/arm/helper.c" 3 4
                ,
# 1974 "../../../target/arm/helper.c"
                cp15.pmccfiltr_el0
# 1974 "../../../target/arm/helper.c" 3 4
                )
# 1974 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {.name = "PMXEVTYPER",
     .cp = 15,
     .crn = 9,
     .crm = 13,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL0_RW,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .accessfn = pmreg_access,
     .fgt = FGT_PMEVTYPERN_EL0,
     .writefn = pmxevtyper_write,
     .readfn = pmxevtyper_read},
    {.name = "PMXEVTYPER_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 13,
     .opc2 = 1,
     .access = PL0_RW,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .accessfn = pmreg_access,
     .fgt = FGT_PMEVTYPERN_EL0,
     .writefn = pmxevtyper_write,
     .readfn = pmxevtyper_read},
    {.name = "PMXEVCNTR",
     .cp = 15,
     .crn = 9,
     .crm = 13,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL0_RW,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .accessfn = pmreg_access_xevcntr,
     .fgt = FGT_PMEVCNTRN_EL0,
     .writefn = pmxevcntr_write,
     .readfn = pmxevcntr_read},
    {.name = "PMXEVCNTR_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 13,
     .opc2 = 2,
     .access = PL0_RW,
     .type = ARM_CP_NO_RAW | ARM_CP_IO,
     .accessfn = pmreg_access_xevcntr,
     .fgt = FGT_PMEVCNTRN_EL0,
     .writefn = pmxevcntr_write,
     .readfn = pmxevcntr_read},
    {.name = "PMUSERENR",
     .cp = 15,
     .crn = 9,
     .crm = 14,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL0_R | PL1_RW,
     .accessfn = access_tpm,
     .fieldoffset =
# 2000 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2000 "../../../target/arm/helper.c"
             CPUARMState
# 2000 "../../../target/arm/helper.c" 3 4
             ,
# 2000 "../../../target/arm/helper.c"
             cp15.c9_pmuserenr
# 2000 "../../../target/arm/helper.c" 3 4
             )
# 2000 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = pmuserenr_write,
     .raw_writefn = raw_write},
    {.name = "PMUSERENR_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 14,
     .opc2 = 0,
     .access = PL0_R | PL1_RW,
     .accessfn = access_tpm,
     .type = ARM_CP_ALIAS,
     .fieldoffset =
# 2006 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2006 "../../../target/arm/helper.c"
             CPUARMState
# 2006 "../../../target/arm/helper.c" 3 4
             ,
# 2006 "../../../target/arm/helper.c"
             cp15.c9_pmuserenr
# 2006 "../../../target/arm/helper.c" 3 4
             )
# 2006 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = pmuserenr_write,
     .raw_writefn = raw_write},
    {.name = "PMINTENSET",
     .cp = 15,
     .crn = 9,
     .crm = 14,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tpm,
     .fgt = FGT_PMINTEN,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 2013 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2013 "../../../target/arm/helper.c"
             CPUARMState
# 2013 "../../../target/arm/helper.c" 3 4
             ,
# 2013 "../../../target/arm/helper.c"
             cp15.c9_pminten
# 2013 "../../../target/arm/helper.c" 3 4
             )
# 2013 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = pmintenset_write,
     .raw_writefn = raw_write},
    {.name = "PMINTENSET_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 9,
     .crm = 14,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tpm,
     .fgt = FGT_PMINTEN,
     .type = ARM_CP_IO,
     .fieldoffset =
# 2021 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2021 "../../../target/arm/helper.c"
             CPUARMState
# 2021 "../../../target/arm/helper.c" 3 4
             ,
# 2021 "../../../target/arm/helper.c"
             cp15.c9_pminten
# 2021 "../../../target/arm/helper.c" 3 4
             )
# 2021 "../../../target/arm/helper.c"
         ,
     .writefn = pmintenset_write,
     .raw_writefn = raw_write,
     .resetvalue = 0x0},
    {
        .name = "PMINTENCLR",
        .cp = 15,
        .crn = 9,
        .crm = 14,
        .opc1 = 0,
        .opc2 = 2,
        .access = PL1_RW,
        .accessfn = access_tpm,
        .fgt = FGT_PMINTEN,
        .type = ARM_CP_ALIAS | ARM_CP_IO | ARM_CP_NO_RAW,
        .fieldoffset =
# 2028 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 2028 "../../../target/arm/helper.c"
                CPUARMState
# 2028 "../../../target/arm/helper.c" 3 4
                ,
# 2028 "../../../target/arm/helper.c"
                cp15.c9_pminten
# 2028 "../../../target/arm/helper.c" 3 4
                )
# 2028 "../../../target/arm/helper.c"
            ,
        .writefn = pmintenclr_write,
    },
    {.name = "PMINTENCLR_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 9,
     .crm = 14,
     .opc2 = 2,
     .access = PL1_RW,
     .accessfn = access_tpm,
     .fgt = FGT_PMINTEN,
     .type = ARM_CP_ALIAS | ARM_CP_IO | ARM_CP_NO_RAW,
     .fieldoffset =
# 2035 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2035 "../../../target/arm/helper.c"
             CPUARMState
# 2035 "../../../target/arm/helper.c" 3 4
             ,
# 2035 "../../../target/arm/helper.c"
             cp15.c9_pminten
# 2035 "../../../target/arm/helper.c" 3 4
             )
# 2035 "../../../target/arm/helper.c"
         ,
     .writefn = pmintenclr_write},
    {.name = "CCSIDR",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .crn = 0,
     .crm = 0,
     .opc1 = 1,
     .opc2 = 0,
     .access = PL1_R,
     .accessfn = access_tid4,
     .fgt = FGT_CCSIDR_EL1,
     .readfn = ccsidr_read,
     .type = ARM_CP_NO_RAW},
    {.name = "CSSELR",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .crn = 0,
     .crm = 0,
     .opc1 = 2,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tid4,
     .fgt = FGT_CSSELR_EL1,
     .writefn = csselr_write,
     .resetvalue = 0,
     .bank_fieldoffsets =
         {
# 2049 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2049 "../../../target/arm/helper.c"
                 CPUARMState
# 2049 "../../../target/arm/helper.c" 3 4
                 ,
# 2049 "../../../target/arm/helper.c"
                 cp15.csselr_s
# 2049 "../../../target/arm/helper.c" 3 4
                 )
# 2049 "../../../target/arm/helper.c"
                 ,

# 2050 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2050 "../../../target/arm/helper.c"
                 CPUARMState
# 2050 "../../../target/arm/helper.c" 3 4
                 ,
# 2050 "../../../target/arm/helper.c"
                 cp15.csselr_ns
# 2050 "../../../target/arm/helper.c" 3 4
                 )
# 2050 "../../../target/arm/helper.c"
         }},

    {.name = "AIDR",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 1,
     .crn = 0,
     .crm = 0,
     .opc2 = 7,
     .access = PL1_R,
     .type = ARM_CP_CONST,
     .accessfn = access_aa64_tid1,
     .fgt = FGT_AIDR_EL1,
     .resetvalue = 0},

    {.name = "AFSR0_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 5,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_AFSR0_EL1,
     .nv2_redirect_offset = 0x128 | 0x4000,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "AFSR1_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 5,
     .crm = 1,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_AFSR1_EL1,
     .nv2_redirect_offset = 0x130 | 0x4000,
     .type = ARM_CP_CONST,
     .resetvalue = 0},

    {.name = "MAIR_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 2,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_MAIR_EL1,
     .nv2_redirect_offset = 0x140 | 0x4000,
     .fieldoffset =
# 2086 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2086 "../../../target/arm/helper.c"
             CPUARMState
# 2086 "../../../target/arm/helper.c" 3 4
             ,
# 2086 "../../../target/arm/helper.c"
             cp15.mair_el[1]
# 2086 "../../../target/arm/helper.c" 3 4
             )
# 2086 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "MAIR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 10,
     .crm = 2,
     .opc2 = 0,
     .access = PL3_RW,
     .fieldoffset =
# 2090 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2090 "../../../target/arm/helper.c"
             CPUARMState
# 2090 "../../../target/arm/helper.c" 3 4
             ,
# 2090 "../../../target/arm/helper.c"
             cp15.mair_el[3]
# 2090 "../../../target/arm/helper.c" 3 4
             )
# 2090 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
# 2101 "../../../target/arm/helper.c"
    {.name = "MAIR0",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 10,
     .crm = 2,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .bank_fieldoffsets =
         {
# 2104 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2104 "../../../target/arm/helper.c"
                 CPUARMState
# 2104 "../../../target/arm/helper.c" 3 4
                 ,
# 2104 "../../../target/arm/helper.c"
                 cp15.mair0_s
# 2104 "../../../target/arm/helper.c" 3 4
                 )
# 2104 "../../../target/arm/helper.c"
                 ,

# 2105 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2105 "../../../target/arm/helper.c"
                 CPUARMState
# 2105 "../../../target/arm/helper.c" 3 4
                 ,
# 2105 "../../../target/arm/helper.c"
                 cp15.mair0_ns
# 2105 "../../../target/arm/helper.c" 3 4
                 )
# 2105 "../../../target/arm/helper.c"
         },
     .resetfn = arm_cp_reset_ignore},
    {.name = "MAIR1",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 10,
     .crm = 2,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .bank_fieldoffsets =
         {
# 2110 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2110 "../../../target/arm/helper.c"
                 CPUARMState
# 2110 "../../../target/arm/helper.c" 3 4
                 ,
# 2110 "../../../target/arm/helper.c"
                 cp15.mair1_s
# 2110 "../../../target/arm/helper.c" 3 4
                 )
# 2110 "../../../target/arm/helper.c"
                 ,

# 2111 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2111 "../../../target/arm/helper.c"
                 CPUARMState
# 2111 "../../../target/arm/helper.c" 3 4
                 ,
# 2111 "../../../target/arm/helper.c"
                 cp15.mair1_ns
# 2111 "../../../target/arm/helper.c" 3 4
                 )
# 2111 "../../../target/arm/helper.c"
         },
     .resetfn = arm_cp_reset_ignore},
    {.name = "ISR_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 12,
     .crm = 1,
     .opc2 = 0,
     .fgt = FGT_ISR_EL1,
     .type = ARM_CP_NO_RAW,
     .access = PL1_R,
     .readfn = isr_read},
};

static const ARMCPRegInfo pmovsset_cp_reginfo[] = {

    {.name = "PMOVSSET",
     .cp = 15,
     .opc1 = 0,
     .crn = 9,
     .crm = 14,
     .opc2 = 3,
     .access = PL0_RW,
     .accessfn = pmreg_access,
     .fgt = FGT_PMOVS,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 2125 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2125 "../../../target/arm/helper.c"
             CPUARMState
# 2125 "../../../target/arm/helper.c" 3 4
             ,
# 2125 "../../../target/arm/helper.c"
             cp15.c9_pmovsr
# 2125 "../../../target/arm/helper.c" 3 4
             )
# 2125 "../../../target/arm/helper.c"
         ,
     .writefn = pmovsset_write,
     .raw_writefn = raw_write},
    {.name = "PMOVSSET_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .crn = 9,
     .crm = 14,
     .opc2 = 3,
     .access = PL0_RW,
     .accessfn = pmreg_access,
     .fgt = FGT_PMOVS,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .fieldoffset =
# 2133 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2133 "../../../target/arm/helper.c"
             CPUARMState
# 2133 "../../../target/arm/helper.c" 3 4
             ,
# 2133 "../../../target/arm/helper.c"
             cp15.c9_pmovsr
# 2133 "../../../target/arm/helper.c" 3 4
             )
# 2133 "../../../target/arm/helper.c"
         ,
     .writefn = pmovsset_write,
     .raw_writefn = raw_write},
};

static void teecr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  value &= 1;
  env->teecr = value;
}

static CPAccessResult teecr_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 2146 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 2146 "../../../target/arm/helper.c"
                                       isread) {

  if (arm_current_el(env) < 2 && !arm_is_secure_below_el3(env) &&
      (env->cp15.hstr_el2 & (1 << 16))) {
    return CP_ACCESS_TRAP_EL2;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult teehbr_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 2160 "../../../target/arm/helper.c" 3 4
                                    _Bool
# 2160 "../../../target/arm/helper.c"
                                        isread) {
  if (arm_current_el(env) == 0 && (env->teecr & 1)) {
    return CP_ACCESS_TRAP_EL1;
  }
  return teecr_access(env, ri, isread);
}

static const ARMCPRegInfo t2ee_cp_reginfo[] = {
    {.name = "TEECR",
     .cp = 14,
     .crn = 0,
     .crm = 0,
     .opc1 = 6,
     .opc2 = 0,
     .access = PL1_RW,
     .fieldoffset =
# 2170 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2170 "../../../target/arm/helper.c"
             CPUARMState
# 2170 "../../../target/arm/helper.c" 3 4
             ,
# 2170 "../../../target/arm/helper.c"
             teecr
# 2170 "../../../target/arm/helper.c" 3 4
             )
# 2170 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = teecr_write,
     .accessfn = teecr_access},
    {.name = "TEEHBR",
     .cp = 14,
     .crn = 1,
     .crm = 0,
     .opc1 = 6,
     .opc2 = 0,
     .access = PL0_RW,
     .fieldoffset =
# 2174 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2174 "../../../target/arm/helper.c"
             CPUARMState
# 2174 "../../../target/arm/helper.c" 3 4
             ,
# 2174 "../../../target/arm/helper.c"
             teehbr
# 2174 "../../../target/arm/helper.c" 3 4
             )
# 2174 "../../../target/arm/helper.c"
         ,
     .accessfn = teehbr_access,
     .resetvalue = 0},
};

static const ARMCPRegInfo v6k_cp_reginfo[] = {
    {.name = "TPIDR_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 2,
     .crn = 13,
     .crm = 0,
     .access = PL0_RW,
     .fgt = FGT_TPIDR_EL0,
     .fieldoffset =
# 2183 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2183 "../../../target/arm/helper.c"
             CPUARMState
# 2183 "../../../target/arm/helper.c" 3 4
             ,
# 2183 "../../../target/arm/helper.c"
             cp15.tpidr_el[0]
# 2183 "../../../target/arm/helper.c" 3 4
             )
# 2183 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "TPIDRURW",
     .cp = 15,
     .crn = 13,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL0_RW,
     .fgt = FGT_TPIDR_EL0,
     .bank_fieldoffsets =
         {
# 2187 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2187 "../../../target/arm/helper.c"
                 CPUARMState
# 2187 "../../../target/arm/helper.c" 3 4
                 ,
# 2187 "../../../target/arm/helper.c"
                 cp15.tpidrurw_s
# 2187 "../../../target/arm/helper.c" 3 4
                 )
# 2187 "../../../target/arm/helper.c"
                 ,

# 2188 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2188 "../../../target/arm/helper.c"
                 CPUARMState
# 2188 "../../../target/arm/helper.c" 3 4
                 ,
# 2188 "../../../target/arm/helper.c"
                 cp15.tpidrurw_ns
# 2188 "../../../target/arm/helper.c" 3 4
                 )
# 2188 "../../../target/arm/helper.c"
         },
     .resetfn = arm_cp_reset_ignore},
    {.name = "TPIDRRO_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 3,
     .crn = 13,
     .crm = 0,
     .access = PL0_R | PL1_W,
     .fgt = FGT_TPIDRRO_EL0,
     .fieldoffset =
# 2194 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2194 "../../../target/arm/helper.c"
             CPUARMState
# 2194 "../../../target/arm/helper.c" 3 4
             ,
# 2194 "../../../target/arm/helper.c"
             cp15.tpidrro_el[0]
# 2194 "../../../target/arm/helper.c" 3 4
             )
# 2194 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "TPIDRURO",
     .cp = 15,
     .crn = 13,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 3,
     .access = PL0_R | PL1_W,
     .fgt = FGT_TPIDRRO_EL0,
     .bank_fieldoffsets =
         {
# 2199 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2199 "../../../target/arm/helper.c"
                 CPUARMState
# 2199 "../../../target/arm/helper.c" 3 4
                 ,
# 2199 "../../../target/arm/helper.c"
                 cp15.tpidruro_s
# 2199 "../../../target/arm/helper.c" 3 4
                 )
# 2199 "../../../target/arm/helper.c"
                 ,

# 2200 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2200 "../../../target/arm/helper.c"
                 CPUARMState
# 2200 "../../../target/arm/helper.c" 3 4
                 ,
# 2200 "../../../target/arm/helper.c"
                 cp15.tpidruro_ns
# 2200 "../../../target/arm/helper.c" 3 4
                 )
# 2200 "../../../target/arm/helper.c"
         },
     .resetfn = arm_cp_reset_ignore},
    {.name = "TPIDR_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .opc2 = 4,
     .crn = 13,
     .crm = 0,
     .access = PL1_RW,
     .fgt = FGT_TPIDR_EL1,
     .fieldoffset =
# 2206 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 2206 "../../../target/arm/helper.c"
             CPUARMState
# 2206 "../../../target/arm/helper.c" 3 4
             ,
# 2206 "../../../target/arm/helper.c"
             cp15.tpidr_el[1]
# 2206 "../../../target/arm/helper.c" 3 4
             )
# 2206 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "TPIDRPRW",
     .opc1 = 0,
     .cp = 15,
     .crn = 13,
     .crm = 0,
     .opc2 = 4,
     .access = PL1_RW,
     .bank_fieldoffsets =
         {
# 2209 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2209 "../../../target/arm/helper.c"
                 CPUARMState
# 2209 "../../../target/arm/helper.c" 3 4
                 ,
# 2209 "../../../target/arm/helper.c"
                 cp15.tpidrprw_s
# 2209 "../../../target/arm/helper.c" 3 4
                 )
# 2209 "../../../target/arm/helper.c"
                 ,

# 2210 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 2210 "../../../target/arm/helper.c"
                 CPUARMState
# 2210 "../../../target/arm/helper.c" 3 4
                 ,
# 2210 "../../../target/arm/helper.c"
                 cp15.tpidrprw_ns
# 2210 "../../../target/arm/helper.c" 3 4
                 )
# 2210 "../../../target/arm/helper.c"
         },
     .resetvalue = 0},
};

static void arm_gt_cntfrq_reset(CPUARMState *env, const ARMCPRegInfo *opaque) {
  ARMCPU *cpu = env_archcpu(env);

  cpu->env.cp15.c14_cntfrq = cpu->gt_cntfrq_hz;
}
# 3395 "../../../target/arm/helper.c"
static uint64_t gt_virt_cnt_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  ARMCPU *cpu = env_archcpu(env);

  return cpu_get_clock() / gt_cntfrq_period_ns(cpu);
}

static const ARMCPRegInfo generic_timer_cp_reginfo[] = {
    {
        .name = "CNTFRQ_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 14,
        .crm = 0,
        .opc2 = 0,
        .type = ARM_CP_CONST,
        .access = PL0_R,
        .fieldoffset =
# 3411 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 3411 "../../../target/arm/helper.c"
                CPUARMState
# 3411 "../../../target/arm/helper.c" 3 4
                ,
# 3411 "../../../target/arm/helper.c"
                cp15.c14_cntfrq
# 3411 "../../../target/arm/helper.c" 3 4
                )
# 3411 "../../../target/arm/helper.c"
            ,
        .resetfn = arm_gt_cntfrq_reset,
    },
    {
        .name = "CNTVCT_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 14,
        .crm = 0,
        .opc2 = 2,
        .access = PL0_R,
        .type = ARM_CP_NO_RAW | ARM_CP_IO,
        .readfn = gt_virt_cnt_read,
    },
};

static const ARMCPRegInfo gen_timer_ecv_cp_reginfo[] = {
    {
        .name = "CNTVCTSS_EL0",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .opc1 = 3,
        .crn = 14,
        .crm = 0,
        .opc2 = 6,
        .access = PL0_R,
        .type = ARM_CP_NO_RAW | ARM_CP_IO,
        .readfn = gt_virt_cnt_read,
    },
};

static void par_write(CPUARMState *env, const ARMCPRegInfo *ri,
                      uint64_t value) {
  if (arm_feature(env, ARM_FEATURE_LPAE)) {
    raw_write(env, ri, value);
  } else if (arm_feature(env, ARM_FEATURE_V7)) {
    raw_write(env, ri, value & 0xfffff6ff);
  } else {
    raw_write(env, ri, value & 0xfffff1ff);
  }
}
# 3843 "../../../target/arm/helper.c"
static uint32_t simple_mpu_ap_bits(uint32_t val) {
  uint32_t ret;
  uint32_t mask;
  int i;
  ret = 0;
  mask = 3;
  for (i = 0; i < 16; i += 2) {
    ret |= (val >> i) & mask;
    mask <<= 2;
  }
  return ret;
}

static uint32_t extended_mpu_ap_bits(uint32_t val) {
  uint32_t ret;
  uint32_t mask;
  int i;
  ret = 0;
  mask = 3;
  for (i = 0; i < 16; i += 2) {
    ret |= (val & mask) << i;
    mask <<= 2;
  }
  return ret;
}

static void pmsav5_data_ap_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                 uint64_t value) {
  env->cp15.pmsav5_data_ap = extended_mpu_ap_bits(value);
}

static uint64_t pmsav5_data_ap_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return simple_mpu_ap_bits(env->cp15.pmsav5_data_ap);
}

static void pmsav5_insn_ap_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                 uint64_t value) {
  env->cp15.pmsav5_insn_ap = extended_mpu_ap_bits(value);
}

static uint64_t pmsav5_insn_ap_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return simple_mpu_ap_bits(env->cp15.pmsav5_insn_ap);
}

static uint64_t pmsav7_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint32_t *u32p = *(uint32_t **)raw_ptr(env, ri);

  if (!u32p) {
    return 0;
  }

  u32p += env->pmsav7.rnr[M_REG_NS];
  return *u32p;
}

static void pmsav7_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);
  uint32_t *u32p = *(uint32_t **)raw_ptr(env, ri);

  if (!u32p) {
    return;
  }

  u32p += env->pmsav7.rnr[M_REG_NS];
  tlb_flush(((CPUState *)(cpu)));
  *u32p = value;
}

static void pmsav7_rgnr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                              uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);
  uint32_t nrgs = cpu->pmsav7_dregion;

  if (value >= nrgs) {
    do {
      if (__builtin_expect(!!(qemu_loglevel_mask((1 << 11))), 0)) {
        qemu_log("PMSAv7 RGNR write >= # supported regions, %"
# 3928 "../../../target/arm/helper.c" 3 4
                 "u"
# 3928 "../../../target/arm/helper.c"
                 " > %"
# 3928 "../../../target/arm/helper.c" 3 4
                 "u"
# 3928 "../../../target/arm/helper.c"
                 "\n",
                 (uint32_t)value, nrgs);
      }
    } while (0)

        ;
    return;
  }

  raw_write(env, ri, value);
}

static void prbar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  tlb_flush(((CPUState *)(cpu)));
  env->pmsav8.rbar[M_REG_NS][env->pmsav7.rnr[M_REG_NS]] = value;
}

static uint64_t prbar_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pmsav8.rbar[M_REG_NS][env->pmsav7.rnr[M_REG_NS]];
}

static void prlar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  tlb_flush(((CPUState *)(cpu)));
  env->pmsav8.rlar[M_REG_NS][env->pmsav7.rnr[M_REG_NS]] = value;
}

static uint64_t prlar_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pmsav8.rlar[M_REG_NS][env->pmsav7.rnr[M_REG_NS]];
}

static void prselr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (value >= cpu->pmsav7_dregion) {
    return;
  }

  env->pmsav7.rnr[M_REG_NS] = value;
}

static void hprbar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  tlb_flush(((CPUState *)(cpu)));
  env->pmsav8.hprbar[env->pmsav8.hprselr] = value;
}

static uint64_t hprbar_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pmsav8.hprbar[env->pmsav8.hprselr];
}

static void hprlar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  tlb_flush(((CPUState *)(cpu)));
  env->pmsav8.hprlar[env->pmsav8.hprselr] = value;
}

static uint64_t hprlar_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pmsav8.hprlar[env->pmsav8.hprselr];
}

static void hprenr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {
  uint32_t n;
  uint32_t bit;
  ARMCPU *cpu = env_archcpu(env);

  int rmax = ({
    typeof(1 ? ((cpu->pmsav8r_hdregion))
             : ((32))) _a0 = ((cpu->pmsav8r_hdregion)),
                       _b1 = ((32));
    _a0 < _b1 ? _a0 : _b1;
  });
  value &= (((~0ULL) >> (64 - (rmax))) << (0));

  tlb_flush(((CPUState *)(cpu)));

  for (n = 0; n < rmax; ++n) {
    bit = extract32(value, n, 1);
    env->pmsav8.hprlar[n] = deposit32(env->pmsav8.hprlar[n], 0, 1, bit);
  }
}

static uint64_t hprenr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  uint32_t n;
  uint32_t result = 0x0;
  ARMCPU *cpu = env_archcpu(env);

  for (n = 0; n < ({ typeof(1 ? ((cpu->pmsav8r_hdregion)) : ((32))) _a2 = ((cpu->pmsav8r_hdregion)), _b3 = ((32)); _a2 < _b3 ? _a2 : _b3; }); ++n) {
    if (env->pmsav8.hprlar[n] & 0x1) {
      result |= (0x1 << n);
    }
  }
  return result;
}

static void hprselr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                          uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (value >= cpu->pmsav8r_hdregion) {
    return;
  }

  env->pmsav8.hprselr = value;
}

static void pmsav8r_regn_write(CPUARMState *env, const ARMCPRegInfo *ri,
                               uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);
  uint8_t index = (extract32(ri->opc0, 0, 1) << 4) |
                  (extract32(ri->crm, 0, 3) << 1) | extract32(ri->opc2, 2, 1);

  tlb_flush(((CPUState *)(cpu)));

  if (ri->opc1 & 4) {
    if (index >= cpu->pmsav8r_hdregion) {
      return;
    }
    if (ri->opc2 & 0x1) {
      env->pmsav8.hprlar[index] = value;
    } else {
      env->pmsav8.hprbar[index] = value;
    }
  } else {
    if (index >= cpu->pmsav7_dregion) {
      return;
    }
    if (ri->opc2 & 0x1) {
      env->pmsav8.rlar[M_REG_NS][index] = value;
    } else {
      env->pmsav8.rbar[M_REG_NS][index] = value;
    }
  }
}

static uint64_t pmsav8r_regn_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  ARMCPU *cpu = env_archcpu(env);
  uint8_t index = (extract32(ri->opc0, 0, 1) << 4) |
                  (extract32(ri->crm, 0, 3) << 1) | extract32(ri->opc2, 2, 1);

  if (ri->opc1 & 4) {
    if (index >= cpu->pmsav8r_hdregion) {
      return 0x0;
    }
    if (ri->opc2 & 0x1) {
      return env->pmsav8.hprlar[index];
    } else {
      return env->pmsav8.hprbar[index];
    }
  } else {
    if (index >= cpu->pmsav7_dregion) {
      return 0x0;
    }
    if (ri->opc2 & 0x1) {
      return env->pmsav8.rlar[M_REG_NS][index];
    } else {
      return env->pmsav8.rbar[M_REG_NS][index];
    }
  }
}

static const ARMCPRegInfo pmsav8r_cp_reginfo[] = {
    {.name = "PRBAR",
     .cp = 15,
     .opc1 = 0,
     .crn = 6,
     .crm = 3,
     .opc2 = 0,
     .access = PL1_RW,
     .type = ARM_CP_NO_RAW,
     .accessfn = access_tvm_trvm,
     .readfn = prbar_read,
     .writefn = prbar_write},
    {.name = "PRLAR",
     .cp = 15,
     .opc1 = 0,
     .crn = 6,
     .crm = 3,
     .opc2 = 1,
     .access = PL1_RW,
     .type = ARM_CP_NO_RAW,
     .accessfn = access_tvm_trvm,
     .readfn = prlar_read,
     .writefn = prlar_write},
    {.name = "PRSELR",
     .resetvalue = 0,
     .cp = 15,
     .opc1 = 0,
     .crn = 6,
     .crm = 2,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .writefn = prselr_write,
     .fieldoffset =
# 4133 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4133 "../../../target/arm/helper.c"
             CPUARMState
# 4133 "../../../target/arm/helper.c" 3 4
             ,
# 4133 "../../../target/arm/helper.c"
             pmsav7.rnr[M_REG_NS]
# 4133 "../../../target/arm/helper.c" 3 4
             )
# 4133 "../../../target/arm/helper.c"
    },
    {.name = "HPRBAR",
     .resetvalue = 0,
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 3,
     .opc2 = 0,
     .access = PL2_RW,
     .type = ARM_CP_NO_RAW,
     .readfn = hprbar_read,
     .writefn = hprbar_write},
    {.name = "HPRLAR",
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 3,
     .opc2 = 1,
     .access = PL2_RW,
     .type = ARM_CP_NO_RAW,
     .readfn = hprlar_read,
     .writefn = hprlar_write},
    {.name = "HPRSELR",
     .resetvalue = 0,
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 2,
     .opc2 = 1,
     .access = PL2_RW,
     .writefn = hprselr_write,
     .fieldoffset =
# 4146 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4146 "../../../target/arm/helper.c"
             CPUARMState
# 4146 "../../../target/arm/helper.c" 3 4
             ,
# 4146 "../../../target/arm/helper.c"
             pmsav8.hprselr
# 4146 "../../../target/arm/helper.c" 3 4
             )
# 4146 "../../../target/arm/helper.c"
    },
    {.name = "HPRENR",
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 1,
     .opc2 = 1,
     .access = PL2_RW,
     .type = ARM_CP_NO_RAW,
     .readfn = hprenr_read,
     .writefn = hprenr_write},
};

static const ARMCPRegInfo pmsav7_cp_reginfo[] = {

    {.name = "DRBAR",
     .cp = 15,
     .crn = 6,
     .opc1 = 0,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_RW,
     .type = ARM_CP_NO_RAW,
     .fieldoffset =
# 4161 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4161 "../../../target/arm/helper.c"
             CPUARMState
# 4161 "../../../target/arm/helper.c" 3 4
             ,
# 4161 "../../../target/arm/helper.c"
             pmsav7.drbar
# 4161 "../../../target/arm/helper.c" 3 4
             )
# 4161 "../../../target/arm/helper.c"
         ,
     .readfn = pmsav7_read,
     .writefn = pmsav7_write,
     .resetfn = arm_cp_reset_ignore},
    {.name = "DRSR",
     .cp = 15,
     .crn = 6,
     .opc1 = 0,
     .crm = 1,
     .opc2 = 2,
     .access = PL1_RW,
     .type = ARM_CP_NO_RAW,
     .fieldoffset =
# 4166 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4166 "../../../target/arm/helper.c"
             CPUARMState
# 4166 "../../../target/arm/helper.c" 3 4
             ,
# 4166 "../../../target/arm/helper.c"
             pmsav7.drsr
# 4166 "../../../target/arm/helper.c" 3 4
             )
# 4166 "../../../target/arm/helper.c"
         ,
     .readfn = pmsav7_read,
     .writefn = pmsav7_write,
     .resetfn = arm_cp_reset_ignore},
    {.name = "DRACR",
     .cp = 15,
     .crn = 6,
     .opc1 = 0,
     .crm = 1,
     .opc2 = 4,
     .access = PL1_RW,
     .type = ARM_CP_NO_RAW,
     .fieldoffset =
# 4171 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4171 "../../../target/arm/helper.c"
             CPUARMState
# 4171 "../../../target/arm/helper.c" 3 4
             ,
# 4171 "../../../target/arm/helper.c"
             pmsav7.dracr
# 4171 "../../../target/arm/helper.c" 3 4
             )
# 4171 "../../../target/arm/helper.c"
         ,
     .readfn = pmsav7_read,
     .writefn = pmsav7_write,
     .resetfn = arm_cp_reset_ignore},
    {.name = "RGNR",
     .cp = 15,
     .crn = 6,
     .opc1 = 0,
     .crm = 2,
     .opc2 = 0,
     .access = PL1_RW,
     .fieldoffset =
# 4176 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4176 "../../../target/arm/helper.c"
             CPUARMState
# 4176 "../../../target/arm/helper.c" 3 4
             ,
# 4176 "../../../target/arm/helper.c"
             pmsav7.rnr[M_REG_NS]
# 4176 "../../../target/arm/helper.c" 3 4
             )
# 4176 "../../../target/arm/helper.c"
         ,
     .writefn = pmsav7_rgnr_write,
     .resetfn = arm_cp_reset_ignore},
};

static const ARMCPRegInfo pmsav5_cp_reginfo[] = {
    {
        .name = "DATA_AP",
        .cp = 15,
        .crn = 5,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .type = ARM_CP_ALIAS,
        .fieldoffset =
# 4184 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4184 "../../../target/arm/helper.c"
                CPUARMState
# 4184 "../../../target/arm/helper.c" 3 4
                ,
# 4184 "../../../target/arm/helper.c"
                cp15.pmsav5_data_ap
# 4184 "../../../target/arm/helper.c" 3 4
                )
# 4184 "../../../target/arm/helper.c"
            ,
        .readfn = pmsav5_data_ap_read,
        .writefn = pmsav5_data_ap_write,
    },
    {
        .name = "INSN_AP",
        .cp = 15,
        .crn = 5,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .type = ARM_CP_ALIAS,
        .fieldoffset =
# 4188 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4188 "../../../target/arm/helper.c"
                CPUARMState
# 4188 "../../../target/arm/helper.c" 3 4
                ,
# 4188 "../../../target/arm/helper.c"
                cp15.pmsav5_insn_ap
# 4188 "../../../target/arm/helper.c" 3 4
                )
# 4188 "../../../target/arm/helper.c"
            ,
        .readfn = pmsav5_insn_ap_read,
        .writefn = pmsav5_insn_ap_write,
    },
    {
        .name = "DATA_EXT_AP",
        .cp = 15,
        .crn = 5,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 2,
        .access = PL1_RW,
        .fieldoffset =
# 4192 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4192 "../../../target/arm/helper.c"
                CPUARMState
# 4192 "../../../target/arm/helper.c" 3 4
                ,
# 4192 "../../../target/arm/helper.c"
                cp15.pmsav5_data_ap
# 4192 "../../../target/arm/helper.c" 3 4
                )
# 4192 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {
        .name = "INSN_EXT_AP",
        .cp = 15,
        .crn = 5,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 3,
        .access = PL1_RW,
        .fieldoffset =
# 4196 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4196 "../../../target/arm/helper.c"
                CPUARMState
# 4196 "../../../target/arm/helper.c" 3 4
                ,
# 4196 "../../../target/arm/helper.c"
                cp15.pmsav5_insn_ap
# 4196 "../../../target/arm/helper.c" 3 4
                )
# 4196 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {
        .name = "DCACHE_CFG",
        .cp = 15,
        .crn = 2,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .fieldoffset =
# 4200 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4200 "../../../target/arm/helper.c"
                CPUARMState
# 4200 "../../../target/arm/helper.c" 3 4
                ,
# 4200 "../../../target/arm/helper.c"
                cp15.c2_data
# 4200 "../../../target/arm/helper.c" 3 4
                )
# 4200 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {
        .name = "ICACHE_CFG",
        .cp = 15,
        .crn = 2,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .fieldoffset =
# 4203 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4203 "../../../target/arm/helper.c"
                CPUARMState
# 4203 "../../../target/arm/helper.c" 3 4
                ,
# 4203 "../../../target/arm/helper.c"
                cp15.c2_insn
# 4203 "../../../target/arm/helper.c" 3 4
                )
# 4203 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },

    {.name = "946_PRBS0",
     .cp = 15,
     .crn = 6,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4207 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4207 "../../../target/arm/helper.c"
             CPUARMState
# 4207 "../../../target/arm/helper.c" 3 4
             ,
# 4207 "../../../target/arm/helper.c"
             cp15.c6_region[0]
# 4207 "../../../target/arm/helper.c" 3 4
             )
# 4207 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS1",
     .cp = 15,
     .crn = 6,
     .crm = 1,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4210 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4210 "../../../target/arm/helper.c"
             CPUARMState
# 4210 "../../../target/arm/helper.c" 3 4
             ,
# 4210 "../../../target/arm/helper.c"
             cp15.c6_region[1]
# 4210 "../../../target/arm/helper.c" 3 4
             )
# 4210 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS2",
     .cp = 15,
     .crn = 6,
     .crm = 2,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4213 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4213 "../../../target/arm/helper.c"
             CPUARMState
# 4213 "../../../target/arm/helper.c" 3 4
             ,
# 4213 "../../../target/arm/helper.c"
             cp15.c6_region[2]
# 4213 "../../../target/arm/helper.c" 3 4
             )
# 4213 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS3",
     .cp = 15,
     .crn = 6,
     .crm = 3,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4216 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4216 "../../../target/arm/helper.c"
             CPUARMState
# 4216 "../../../target/arm/helper.c" 3 4
             ,
# 4216 "../../../target/arm/helper.c"
             cp15.c6_region[3]
# 4216 "../../../target/arm/helper.c" 3 4
             )
# 4216 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS4",
     .cp = 15,
     .crn = 6,
     .crm = 4,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4219 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4219 "../../../target/arm/helper.c"
             CPUARMState
# 4219 "../../../target/arm/helper.c" 3 4
             ,
# 4219 "../../../target/arm/helper.c"
             cp15.c6_region[4]
# 4219 "../../../target/arm/helper.c" 3 4
             )
# 4219 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS5",
     .cp = 15,
     .crn = 6,
     .crm = 5,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4222 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4222 "../../../target/arm/helper.c"
             CPUARMState
# 4222 "../../../target/arm/helper.c" 3 4
             ,
# 4222 "../../../target/arm/helper.c"
             cp15.c6_region[5]
# 4222 "../../../target/arm/helper.c" 3 4
             )
# 4222 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS6",
     .cp = 15,
     .crn = 6,
     .crm = 6,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4225 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4225 "../../../target/arm/helper.c"
             CPUARMState
# 4225 "../../../target/arm/helper.c" 3 4
             ,
# 4225 "../../../target/arm/helper.c"
             cp15.c6_region[6]
# 4225 "../../../target/arm/helper.c" 3 4
             )
# 4225 "../../../target/arm/helper.c"
    },
    {.name = "946_PRBS7",
     .cp = 15,
     .crn = 6,
     .crm = 7,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .fieldoffset =
# 4228 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4228 "../../../target/arm/helper.c"
             CPUARMState
# 4228 "../../../target/arm/helper.c" 3 4
             ,
# 4228 "../../../target/arm/helper.c"
             cp15.c6_region[7]
# 4228 "../../../target/arm/helper.c" 3 4
             )
# 4228 "../../../target/arm/helper.c"
    },
};

static void vmsa_ttbcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                             uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (!arm_feature(env, ARM_FEATURE_V8)) {
    if (arm_feature(env, ARM_FEATURE_LPAE) && (value & (1U << 31))) {

      value &= ~((7 << 19) | (3 << 14) | (0xf << 3));
    } else if (arm_feature(env, ARM_FEATURE_EL3)) {

      value &= (1U << 5) | (1U << 4) | (7U << 0);
    } else {
      value &= (7U << 0);
    }
  }

  if (arm_feature(env, ARM_FEATURE_LPAE)) {

    tlb_flush(((CPUState *)(cpu)));
  }
  raw_write(env, ri, value);
}

static void vmsa_tcr_el12_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  tlb_flush(((CPUState *)(cpu)));
  raw_write(env, ri, value);
}

static void vmsa_ttbr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {

  if (cpreg_field_is_64bit(ri) &&
      extract64(raw_read(env, ri) ^ value, 48, 16) != 0) {
    ARMCPU *cpu = env_archcpu(env);
    tlb_flush(((CPUState *)(cpu)));
  }
  raw_write(env, ri, value);
}

static void vmsa_tcr_ttbr_el2_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                    uint64_t value) {

  if (extract64(raw_read(env, ri) ^ value, 48, 16) &&
      (arm_hcr_el2_eff(env) & (1ULL << 34))) {
    uint16_t mask =
        ARMMMUIdxBit_E20_2 | ARMMMUIdxBit_E20_2_PAN | ARMMMUIdxBit_E20_0;
    tlb_flush_by_mmuidx(env_cpu(env), mask);
  }
  raw_write(env, ri, value);
}

static void vttbr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);
  CPUState *cs = ((CPUState *)(cpu));

  if (extract64(raw_read(env, ri) ^ value, 48, 16) != 0) {
    tlb_flush_by_mmuidx(cs, alle1_tlbmask(env));
  }
  raw_write(env, ri, value);
}

static const ARMCPRegInfo vmsa_pmsa_cp_reginfo[] = {
    {
        .name = "DFSR",
        .cp = 15,
        .crn = 5,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .type = ARM_CP_ALIAS,
        .bank_fieldoffsets =
            {
# 4325 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 4325 "../../../target/arm/helper.c"
                    CPUARMState
# 4325 "../../../target/arm/helper.c" 3 4
                    ,
# 4325 "../../../target/arm/helper.c"
                    cp15.dfsr_s
# 4325 "../../../target/arm/helper.c" 3 4
                    )
# 4325 "../../../target/arm/helper.c"
                    ,

# 4326 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 4326 "../../../target/arm/helper.c"
                    CPUARMState
# 4326 "../../../target/arm/helper.c" 3 4
                    ,
# 4326 "../../../target/arm/helper.c"
                    cp15.dfsr_ns
# 4326 "../../../target/arm/helper.c" 3 4
                    )
# 4326 "../../../target/arm/helper.c"
            },
    },
    {.name = "IFSR",
     .cp = 15,
     .crn = 5,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .resetvalue = 0,
     .bank_fieldoffsets =
         {
# 4329 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4329 "../../../target/arm/helper.c"
                 CPUARMState
# 4329 "../../../target/arm/helper.c" 3 4
                 ,
# 4329 "../../../target/arm/helper.c"
                 cp15.ifsr_s
# 4329 "../../../target/arm/helper.c" 3 4
                 )
# 4329 "../../../target/arm/helper.c"
                 ,

# 4330 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4330 "../../../target/arm/helper.c"
                 CPUARMState
# 4330 "../../../target/arm/helper.c" 3 4
                 ,
# 4330 "../../../target/arm/helper.c"
                 cp15.ifsr_ns
# 4330 "../../../target/arm/helper.c" 3 4
                 )
# 4330 "../../../target/arm/helper.c"
         }},
    {.name = "DFAR",
     .cp = 15,
     .opc1 = 0,
     .crn = 6,
     .crm = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .resetvalue = 0,
     .bank_fieldoffsets =
         {
# 4333 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4333 "../../../target/arm/helper.c"
                 CPUARMState
# 4333 "../../../target/arm/helper.c" 3 4
                 ,
# 4333 "../../../target/arm/helper.c"
                 cp15.dfar_s
# 4333 "../../../target/arm/helper.c" 3 4
                 )
# 4333 "../../../target/arm/helper.c"
                 ,

# 4334 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4334 "../../../target/arm/helper.c"
                 CPUARMState
# 4334 "../../../target/arm/helper.c" 3 4
                 ,
# 4334 "../../../target/arm/helper.c"
                 cp15.dfar_ns
# 4334 "../../../target/arm/helper.c" 3 4
                 )
# 4334 "../../../target/arm/helper.c"
         }},
    {
        .name = "FAR_EL1",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .crn = 6,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .fgt = FGT_FAR_EL1,
        .nv2_redirect_offset = 0x220 | 0x4000,
        .fieldoffset =
# 4340 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4340 "../../../target/arm/helper.c"
                CPUARMState
# 4340 "../../../target/arm/helper.c" 3 4
                ,
# 4340 "../../../target/arm/helper.c"
                cp15.far_el[1]
# 4340 "../../../target/arm/helper.c" 3 4
                )
# 4340 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
};

static const ARMCPRegInfo vmsa_cp_reginfo[] = {
    {
        .name = "ESR_EL1",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 3,
        .crn = 5,
        .crm = 2,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .fgt = FGT_ESR_EL1,
        .nv2_redirect_offset = 0x138 | 0x4000,
        .fieldoffset =
# 4350 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4350 "../../../target/arm/helper.c"
                CPUARMState
# 4350 "../../../target/arm/helper.c" 3 4
                ,
# 4350 "../../../target/arm/helper.c"
                cp15.esr_el[1]
# 4350 "../../../target/arm/helper.c" 3 4
                )
# 4350 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {.name = "TTBR0_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 2,
     .crm = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_TTBR0_EL1,
     .nv2_redirect_offset = 0x200 | 0x4000,
     .writefn = vmsa_ttbr_write,
     .resetvalue = 0,
     .raw_writefn = raw_write,
     .bank_fieldoffsets =
         {
# 4357 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4357 "../../../target/arm/helper.c"
                 CPUARMState
# 4357 "../../../target/arm/helper.c" 3 4
                 ,
# 4357 "../../../target/arm/helper.c"
                 cp15.ttbr0_s
# 4357 "../../../target/arm/helper.c" 3 4
                 )
# 4357 "../../../target/arm/helper.c"
                 ,

# 4358 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4358 "../../../target/arm/helper.c"
                 CPUARMState
# 4358 "../../../target/arm/helper.c" 3 4
                 ,
# 4358 "../../../target/arm/helper.c"
                 cp15.ttbr0_ns
# 4358 "../../../target/arm/helper.c" 3 4
                 )
# 4358 "../../../target/arm/helper.c"
         }},
    {.name = "TTBR1_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 2,
     .crm = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_TTBR1_EL1,
     .nv2_redirect_offset = 0x210 | 0x4000,
     .writefn = vmsa_ttbr_write,
     .resetvalue = 0,
     .raw_writefn = raw_write,
     .bank_fieldoffsets =
         {
# 4365 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4365 "../../../target/arm/helper.c"
                 CPUARMState
# 4365 "../../../target/arm/helper.c" 3 4
                 ,
# 4365 "../../../target/arm/helper.c"
                 cp15.ttbr1_s
# 4365 "../../../target/arm/helper.c" 3 4
                 )
# 4365 "../../../target/arm/helper.c"
                 ,

# 4366 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4366 "../../../target/arm/helper.c"
                 CPUARMState
# 4366 "../../../target/arm/helper.c" 3 4
                 ,
# 4366 "../../../target/arm/helper.c"
                 cp15.ttbr1_ns
# 4366 "../../../target/arm/helper.c" 3 4
                 )
# 4366 "../../../target/arm/helper.c"
         }},
    {.name = "TCR_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .crn = 2,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_TCR_EL1,
     .nv2_redirect_offset = 0x120 | 0x4000,
     .writefn = vmsa_tcr_el12_write,
     .raw_writefn = raw_write,
     .resetvalue = 0,
     .fieldoffset =
# 4375 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4375 "../../../target/arm/helper.c"
             CPUARMState
# 4375 "../../../target/arm/helper.c" 3 4
             ,
# 4375 "../../../target/arm/helper.c"
             cp15.tcr_el[1]
# 4375 "../../../target/arm/helper.c" 3 4
             )
# 4375 "../../../target/arm/helper.c"
    },
    {.name = "TTBCR",
     .cp = 15,
     .crn = 2,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 2,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .type = ARM_CP_ALIAS,
     .writefn = vmsa_ttbcr_write,
     .raw_writefn = raw_write,
     .bank_fieldoffsets =
         {
# 4380 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4380 "../../../target/arm/helper.c"
                 CPUARMState
# 4380 "../../../target/arm/helper.c" 3 4
                 ,
# 4380 "../../../target/arm/helper.c"
                 cp15.tcr_el[3]
# 4380 "../../../target/arm/helper.c" 3 4
                 )
# 4380 "../../../target/arm/helper.c"
                 ,

# 4381 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4381 "../../../target/arm/helper.c"
                 CPUARMState
# 4381 "../../../target/arm/helper.c" 3 4
                 ,
# 4381 "../../../target/arm/helper.c"
                 cp15.tcr_el[1]
# 4381 "../../../target/arm/helper.c" 3 4
                 )
# 4381 "../../../target/arm/helper.c"
         }},
};

static const ARMCPRegInfo ttbcr2_reginfo = {
    .name = "TTBCR2",
    .cp = 15,
    .opc1 = 0,
    .crn = 2,
    .crm = 0,
    .opc2 = 3,
    .access = PL1_RW,
    .accessfn = access_tvm_trvm,
    .type = ARM_CP_ALIAS,
    .bank_fieldoffsets =
        {
            (
# 4393 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 4393 "../../../target/arm/helper.c"
                    CPUARMState
# 4393 "../../../target/arm/helper.c" 3 4
                    ,
# 4393 "../../../target/arm/helper.c"
                    cp15.tcr_el[3]
# 4393 "../../../target/arm/helper.c" 3 4
                    )
# 4393 "../../../target/arm/helper.c"
                + sizeof(uint32_t)),
            (
# 4394 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 4394 "../../../target/arm/helper.c"
                    CPUARMState
# 4394 "../../../target/arm/helper.c" 3 4
                    ,
# 4394 "../../../target/arm/helper.c"
                    cp15.tcr_el[1]
# 4394 "../../../target/arm/helper.c" 3 4
                    )
# 4394 "../../../target/arm/helper.c"
                + sizeof(uint32_t)),
        },
};

static void omap_ticonfig_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                uint64_t value) {
  env->cp15.c15_ticonfig = value & 0xe7;

  env->cp15.c0_cpuid = (value & (1 << 5)) ? 0x54029152 : 0x54029252;
}

static void omap_threadid_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                uint64_t value) {
  env->cp15.c15_threadid = value & 0xffff;
}

static void omap_wfi_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {

  cpu_interrupt(env_cpu(env), 0x0020);
}

static void omap_cachemaint_write(CPUARMState *env, const ARMCPRegInfo *ri,
                                  uint64_t value) {

  env->cp15.c15_i_max = 0x000;
  env->cp15.c15_i_min = 0xff0;
}

static const ARMCPRegInfo omap_cp_reginfo[] = {
    {
        .name = "DFSR",
        .cp = 15,
        .crn = 5,
        .crm = 0xff,
        .opc1 = 0xff,
        .opc2 = 0xff,
        .access = PL1_RW,
        .type = ARM_CP_OVERRIDE,
        .fieldoffset =
# 4434 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4434 "../../../target/arm/helper.c"
                CPUARMState
# 4434 "../../../target/arm/helper.c" 3 4
                ,
# 4434 "../../../target/arm/helper.c"
                cp15.esr_el[1]
# 4434 "../../../target/arm/helper.c" 3 4
                )
# 4434 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {.name = "",
     .cp = 15,
     .crn = 15,
     .crm = 0,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "TICONFIG",
     .cp = 15,
     .crn = 15,
     .crm = 1,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .fieldoffset =
# 4440 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4440 "../../../target/arm/helper.c"
             CPUARMState
# 4440 "../../../target/arm/helper.c" 3 4
             ,
# 4440 "../../../target/arm/helper.c"
             cp15.c15_ticonfig
# 4440 "../../../target/arm/helper.c" 3 4
             )
# 4440 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = omap_ticonfig_write},
    {
        .name = "IMAX",
        .cp = 15,
        .crn = 15,
        .crm = 2,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .fieldoffset =
# 4444 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4444 "../../../target/arm/helper.c"
                CPUARMState
# 4444 "../../../target/arm/helper.c" 3 4
                ,
# 4444 "../../../target/arm/helper.c"
                cp15.c15_i_max
# 4444 "../../../target/arm/helper.c" 3 4
                )
# 4444 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },
    {.name = "IMIN",
     .cp = 15,
     .crn = 15,
     .crm = 3,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .resetvalue = 0xff0,
     .fieldoffset =
# 4447 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4447 "../../../target/arm/helper.c"
             CPUARMState
# 4447 "../../../target/arm/helper.c" 3 4
             ,
# 4447 "../../../target/arm/helper.c"
             cp15.c15_i_min
# 4447 "../../../target/arm/helper.c" 3 4
             )
# 4447 "../../../target/arm/helper.c"
    },
    {.name = "THREADID",
     .cp = 15,
     .crn = 15,
     .crm = 4,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .fieldoffset =
# 4450 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 4450 "../../../target/arm/helper.c"
             CPUARMState
# 4450 "../../../target/arm/helper.c" 3 4
             ,
# 4450 "../../../target/arm/helper.c"
             cp15.c15_threadid
# 4450 "../../../target/arm/helper.c" 3 4
             )
# 4450 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0,
     .writefn = omap_threadid_write},
    {
        .name = "TI925T_STATUS",
        .cp = 15,
        .crn = 15,
        .crm = 8,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .type = ARM_CP_NO_RAW,
        .readfn = arm_cp_read_zero,
        .writefn = omap_wfi_write,
    },

    {.name = "OMAP_CACHEMAINT",
     .cp = 15,
     .crn = 7,
     .crm = 0xff,
     .opc1 = 0,
     .opc2 = 0xff,
     .access = PL1_W,
     .type = ARM_CP_OVERRIDE | ARM_CP_NO_RAW,
     .writefn = omap_cachemaint_write},
    {.name = "C9",
     .cp = 15,
     .crn = 9,
     .crm = 0xff,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_CONST | ARM_CP_OVERRIDE,
     .resetvalue = 0},
};

static void xscale_cpar_write(CPUARMState *env, const ARMCPRegInfo *ri,
                              uint64_t value) {
  env->cp15.c15_cpar = value & 0x3fff;
}

static const ARMCPRegInfo xscale_cp_reginfo[] = {
    {
        .name = "XSCALE_CPAR",
        .cp = 15,
        .crn = 15,
        .crm = 1,
        .opc1 = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .fieldoffset =
# 4480 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4480 "../../../target/arm/helper.c"
                CPUARMState
# 4480 "../../../target/arm/helper.c" 3 4
                ,
# 4480 "../../../target/arm/helper.c"
                cp15.c15_cpar
# 4480 "../../../target/arm/helper.c" 3 4
                )
# 4480 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
        .writefn = xscale_cpar_write,
    },
    {
        .name = "XSCALE_AUXCR",
        .cp = 15,
        .crn = 1,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 1,
        .access = PL1_RW,
        .fieldoffset =
# 4484 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 4484 "../../../target/arm/helper.c"
                CPUARMState
# 4484 "../../../target/arm/helper.c" 3 4
                ,
# 4484 "../../../target/arm/helper.c"
                cp15.c1_xscaleauxcr
# 4484 "../../../target/arm/helper.c" 3 4
                )
# 4484 "../../../target/arm/helper.c"
            ,
        .resetvalue = 0,
    },

    {.name = "XSCALE_LOCK_ICACHE_LINE",
     .cp = 15,
     .opc1 = 0,
     .crn = 9,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP},
    {.name = "XSCALE_UNLOCK_ICACHE",
     .cp = 15,
     .opc1 = 0,
     .crn = 9,
     .crm = 1,
     .opc2 = 1,
     .access = PL1_W,
     .type = ARM_CP_NOP},
    {.name = "XSCALE_DCACHE_LOCK",
     .cp = 15,
     .opc1 = 0,
     .crn = 9,
     .crm = 2,
     .opc2 = 0,
     .access = PL1_RW,
     .type = ARM_CP_NOP},
    {.name = "XSCALE_UNLOCK_DCACHE",
     .cp = 15,
     .opc1 = 0,
     .crn = 9,
     .crm = 2,
     .opc2 = 1,
     .access = PL1_W,
     .type = ARM_CP_NOP},
};

static const ARMCPRegInfo dummy_c15_cp_reginfo[] = {

    {.name = "C15_IMPDEF",
     .cp = 15,
     .crn = 15,
     .crm = 0xff,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW | ARM_CP_OVERRIDE,
     .resetvalue = 0},
};

static const ARMCPRegInfo cache_dirty_status_cp_reginfo[] = {

    {.name = "CDSR",
     .cp = 15,
     .crn = 7,
     .crm = 10,
     .opc1 = 0,
     .opc2 = 6,
     .access = PL1_R,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW,
     .resetvalue = 0},
};

static const ARMCPRegInfo cache_block_ops_cp_reginfo[] = {

    {.name = "BXSR",
     .cp = 15,
     .crn = 7,
     .crm = 12,
     .opc1 = 0,
     .opc2 = 4,
     .access = PL0_R,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW,
     .resetvalue = 0},

    {.name = "IICR",
     .cp = 15,
     .crm = 5,
     .opc1 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
    {.name = "IDCR",
     .cp = 15,
     .crm = 6,
     .opc1 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
    {.name = "CDCR",
     .cp = 15,
     .crm = 12,
     .opc1 = 0,
     .access = PL0_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
    {.name = "PIR",
     .cp = 15,
     .crm = 12,
     .opc1 = 1,
     .access = PL0_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
    {.name = "PDR",
     .cp = 15,
     .crm = 12,
     .opc1 = 2,
     .access = PL0_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
    {.name = "CIDCR",
     .cp = 15,
     .crm = 14,
     .opc1 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP | ARM_CP_64BIT},
};

static const ARMCPRegInfo cache_test_clean_cp_reginfo[] = {

    {.name = "TC_DCACHE",
     .cp = 15,
     .crn = 7,
     .crm = 10,
     .opc1 = 0,
     .opc2 = 3,
     .access = PL0_R,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW,
     .resetvalue = (1 << 30)},
    {.name = "TCI_DCACHE",
     .cp = 15,
     .crn = 7,
     .crm = 14,
     .opc1 = 0,
     .opc2 = 3,
     .access = PL0_R,
     .type = ARM_CP_CONST | ARM_CP_NO_RAW,
     .resetvalue = (1 << 30)},
};

static const ARMCPRegInfo strongarm_cp_reginfo[] = {

    {.name = "C9_READBUFFER",
     .cp = 15,
     .crn = 9,
     .crm = 0xff,
     .opc1 = 0xff,
     .opc2 = 0xff,
     .access = PL1_RW,
     .resetvalue = 0,
     .type = ARM_CP_CONST | ARM_CP_OVERRIDE | ARM_CP_NO_RAW},
};

static uint64_t midr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  unsigned int cur_el = arm_current_el(env);

  if (arm_is_el2_enabled(env) && cur_el == 1) {
    return env->cp15.vpidr_el2;
  }
  return raw_read(env, ri);
}

static uint64_t mpidr_read_val(CPUARMState *env) {
  ARMCPU *cpu = env_archcpu(env);
  uint64_t mpidr = cpu->mp_affinity;

  if (arm_feature(env, ARM_FEATURE_V7MP)) {
    mpidr |= (1U << 31);

    if (cpu->mp_is_up) {
      mpidr |= (1u << 30);
    }
  }
  return mpidr;
}

static uint64_t mpidr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  unsigned int cur_el = arm_current_el(env);

  if (arm_is_el2_enabled(env) && cur_el == 1) {
    return env->cp15.vmpidr_el2;
  }
  return mpidr_read_val(env);
}

static const ARMCPRegInfo lpae_cp_reginfo[] = {

    {.name = "AMAIR0",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .crn = 10,
     .crm = 3,
     .opc1 = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .fgt = FGT_AMAIR_EL1,
     .nv2_redirect_offset = 0x148 | 0x4000,
     .type = ARM_CP_CONST,
     .resetvalue = 0},

    {.name = "AMAIR1",
     .cp = 15,
     .crn = 10,
     .crm = 3,
     .opc1 = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "PAR",
     .cp = 15,
     .crm = 7,
     .opc1 = 0,
     .access = PL1_RW,
     .type = ARM_CP_64BIT,
     .resetvalue = 0,
     .bank_fieldoffsets =
         {
# 4619 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4619 "../../../target/arm/helper.c"
                 CPUARMState
# 4619 "../../../target/arm/helper.c" 3 4
                 ,
# 4619 "../../../target/arm/helper.c"
                 cp15.par_s
# 4619 "../../../target/arm/helper.c" 3 4
                 )
# 4619 "../../../target/arm/helper.c"
                 ,

# 4620 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4620 "../../../target/arm/helper.c"
                 CPUARMState
# 4620 "../../../target/arm/helper.c" 3 4
                 ,
# 4620 "../../../target/arm/helper.c"
                 cp15.par_ns
# 4620 "../../../target/arm/helper.c" 3 4
                 )
# 4620 "../../../target/arm/helper.c"
         }},
    {.name = "TTBR0",
     .cp = 15,
     .crm = 2,
     .opc1 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .type = ARM_CP_64BIT | ARM_CP_ALIAS,
     .bank_fieldoffsets =
         {
# 4624 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4624 "../../../target/arm/helper.c"
                 CPUARMState
# 4624 "../../../target/arm/helper.c" 3 4
                 ,
# 4624 "../../../target/arm/helper.c"
                 cp15.ttbr0_s
# 4624 "../../../target/arm/helper.c" 3 4
                 )
# 4624 "../../../target/arm/helper.c"
                 ,

# 4625 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4625 "../../../target/arm/helper.c"
                 CPUARMState
# 4625 "../../../target/arm/helper.c" 3 4
                 ,
# 4625 "../../../target/arm/helper.c"
                 cp15.ttbr0_ns
# 4625 "../../../target/arm/helper.c" 3 4
                 )
# 4625 "../../../target/arm/helper.c"
         },
     .writefn = vmsa_ttbr_write,
     .raw_writefn = raw_write},
    {.name = "TTBR1",
     .cp = 15,
     .crm = 2,
     .opc1 = 1,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .type = ARM_CP_64BIT | ARM_CP_ALIAS,
     .bank_fieldoffsets =
         {
# 4630 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4630 "../../../target/arm/helper.c"
                 CPUARMState
# 4630 "../../../target/arm/helper.c" 3 4
                 ,
# 4630 "../../../target/arm/helper.c"
                 cp15.ttbr1_s
# 4630 "../../../target/arm/helper.c" 3 4
                 )
# 4630 "../../../target/arm/helper.c"
                 ,

# 4631 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 4631 "../../../target/arm/helper.c"
                 CPUARMState
# 4631 "../../../target/arm/helper.c" 3 4
                 ,
# 4631 "../../../target/arm/helper.c"
                 cp15.ttbr1_ns
# 4631 "../../../target/arm/helper.c" 3 4
                 )
# 4631 "../../../target/arm/helper.c"
         },
     .writefn = vmsa_ttbr_write,
     .raw_writefn = raw_write},
};

static uint64_t aa64_fpcr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return vfp_get_fpcr(env);
}

static void aa64_fpcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  vfp_set_fpcr(env, value);
}

static uint64_t aa64_fpsr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return vfp_get_fpsr(env);
}

static void aa64_fpsr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  vfp_set_fpsr(env, value);
}

static CPAccessResult aa64_daif_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 4658 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 4658 "../../../target/arm/helper.c"
                                           isread) {
  if (arm_current_el(env) == 0 && !(arm_sctlr(env, 0) & (1U << 9))) {
    return CP_ACCESS_TRAP_EL1;
  }
  return CP_ACCESS_OK;
}

static void aa64_daif_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  env->daif = value & ((1U << 9) | (1U << 8) | (1U << 7) | (1U << 6));
}

static uint64_t aa64_pan_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pstate & (1U << 22);
}

static void aa64_pan_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {
  env->pstate = (env->pstate & ~(1U << 22)) | (value & (1U << 22));
}

static const ARMCPRegInfo pan_reginfo = {.name = "PAN",
                                         .state = ARM_CP_STATE_AA64,
                                         .opc0 = 3,
                                         .opc1 = 0,
                                         .crn = 4,
                                         .crm = 2,
                                         .opc2 = 3,
                                         .type = ARM_CP_NO_RAW,
                                         .access = PL1_RW,
                                         .readfn = aa64_pan_read,
                                         .writefn = aa64_pan_write};

static uint64_t aa64_uao_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pstate & (1U << 23);
}

static void aa64_uao_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {
  env->pstate = (env->pstate & ~(1U << 23)) | (value & (1U << 23));
}

static const ARMCPRegInfo uao_reginfo = {.name = "UAO",
                                         .state = ARM_CP_STATE_AA64,
                                         .opc0 = 3,
                                         .opc1 = 0,
                                         .crn = 4,
                                         .crm = 2,
                                         .opc2 = 4,
                                         .type = ARM_CP_NO_RAW,
                                         .access = PL1_RW,
                                         .readfn = aa64_uao_read,
                                         .writefn = aa64_uao_write};

static uint64_t aa64_dit_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pstate & (1U << 24);
}

static void aa64_dit_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {
  env->pstate = (env->pstate & ~(1U << 24)) | (value & (1U << 24));
}

static const ARMCPRegInfo dit_reginfo = {.name = "DIT",
                                         .state = ARM_CP_STATE_AA64,
                                         .opc0 = 3,
                                         .opc1 = 3,
                                         .crn = 4,
                                         .crm = 2,
                                         .opc2 = 5,
                                         .type = ARM_CP_NO_RAW,
                                         .access = PL0_RW,
                                         .readfn = aa64_dit_read,
                                         .writefn = aa64_dit_write};

static uint64_t aa64_ssbs_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pstate & (1U << 12);
}

static void aa64_ssbs_write(CPUARMState *env, const ARMCPRegInfo *ri,
                            uint64_t value) {
  env->pstate = (env->pstate & ~(1U << 12)) | (value & (1U << 12));
}

static const ARMCPRegInfo ssbs_reginfo = {.name = "SSBS",
                                          .state = ARM_CP_STATE_AA64,
                                          .opc0 = 3,
                                          .opc1 = 3,
                                          .crn = 4,
                                          .crm = 2,
                                          .opc2 = 6,
                                          .type = ARM_CP_NO_RAW,
                                          .access = PL0_RW,
                                          .readfn = aa64_ssbs_read,
                                          .writefn = aa64_ssbs_write};

static CPAccessResult aa64_cacheop_poc_access(CPUARMState *env,
                                              const ARMCPRegInfo *ri,

# 4746 "../../../target/arm/helper.c" 3 4
                                              _Bool
# 4746 "../../../target/arm/helper.c"
                                                  isread) {

  switch (arm_current_el(env)) {
  case 0:

    if (!(arm_sctlr(env, 0) & (1U << 26))) {
      return CP_ACCESS_TRAP_EL1;
    }

  case 1:

    if (arm_hcr_el2_eff(env) & (1ULL << 23)) {
      return CP_ACCESS_TRAP_EL2;
    }
    break;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult do_cacheop_pou_access(CPUARMState *env,
                                            uint64_t hcrflags) {

  switch (arm_current_el(env)) {
  case 0:

    if (!(arm_sctlr(env, 0) & (1U << 26))) {
      return CP_ACCESS_TRAP_EL1;
    }

  case 1:

    if (arm_hcr_el2_eff(env) & hcrflags) {
      return CP_ACCESS_TRAP_EL2;
    }
    break;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult access_ticab(CPUARMState *env, const ARMCPRegInfo *ri,

# 4787 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 4787 "../../../target/arm/helper.c"
                                       isread) {
  return do_cacheop_pou_access(env, (1ULL << 50) | (1ULL << 24));
}

static CPAccessResult access_tocu(CPUARMState *env, const ARMCPRegInfo *ri,

# 4793 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 4793 "../../../target/arm/helper.c"
                                      isread) {
  return do_cacheop_pou_access(env, (1ULL << 52) | (1ULL << 24));
}

static CPAccessResult aa64_zva_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 4799 "../../../target/arm/helper.c" 3 4
                                      _Bool
# 4799 "../../../target/arm/helper.c"
                                          isread) {
  int cur_el = arm_current_el(env);

  if (cur_el < 2) {
    uint64_t hcr = arm_hcr_el2_eff(env);

    if (cur_el == 0) {
      if ((hcr & ((1ULL << 34) | (1ULL << 27))) ==
          ((1ULL << 34) | (1ULL << 27))) {
        if (!(env->cp15.sctlr_el[2] & (1U << 14))) {
          return CP_ACCESS_TRAP_EL2;
        }
      } else {
        if (!(env->cp15.sctlr_el[1] & (1U << 14))) {
          return CP_ACCESS_TRAP_EL1;
        }
        if (hcr & (1ULL << 28)) {
          return CP_ACCESS_TRAP_EL2;
        }
      }
    } else if (hcr & (1ULL << 28)) {
      return CP_ACCESS_TRAP_EL2;
    }
  }
  return CP_ACCESS_OK;
}

static uint64_t aa64_dczid_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  ARMCPU *cpu = env_archcpu(env);
  int dzp_bit = 1 << 4;

  if (aa64_zva_access(env,
# 4832 "../../../target/arm/helper.c" 3 4
                      ((void *)0)
# 4832 "../../../target/arm/helper.c"
                          ,
# 4832 "../../../target/arm/helper.c" 3 4
                      0
# 4832 "../../../target/arm/helper.c"
                      ) == CP_ACCESS_OK) {
    dzp_bit = 0;
  }
  return cpu->dcz_blocksize | dzp_bit;
}

static CPAccessResult sp_el0_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 4839 "../../../target/arm/helper.c" 3 4
                                    _Bool
# 4839 "../../../target/arm/helper.c"
                                        isread) {
  if (!(env->pstate & (1U))) {

    return CP_ACCESS_UNDEFINED;
  }
  return CP_ACCESS_OK;
}

static uint64_t spsel_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  return env->pstate & (1U);
}

static void spsel_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t val) {
  update_spsel(env, val);
}

static void sctlr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                        uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);

  if (arm_feature(env, ARM_FEATURE_PMSA) && !cpu->has_mpu) {

    value &= ~(1U << 0);
  }

  if (ri->state == ARM_CP_STATE_AA64 && !({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_mte(&cpu_->isar);
      })) {
    if (ri->opc1 == 6) {
      value &= ~((1ULL << 37) | (3ULL << 40) | (1ULL << 43));
    } else {
      value &= ~((1ULL << 37) | (3ULL << 38) | (3ULL << 40) | (1ULL << 42) |
                 (1ULL << 43));
    }
  }

  if (raw_read(env, ri) == value) {

    return;
  }

  raw_write(env, ri, value);

  tlb_flush(((CPUState *)(cpu)));

  if ((tcg_allowed) && ri->type & ARM_CP_SUPPRESS_TB_END) {

    arm_rebuild_hflags(env);
  }
}

static void mdcr_el3_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {

# 4914 "../../../target/arm/helper.c" 3 4
  _Bool
# 4914 "../../../target/arm/helper.c"
      pmu_op = (env->cp15.mdcr_el3 ^ value) & ((1U << 17) | (1U << 23));

  if (pmu_op) {
    pmu_op_start(env);
  }
  env->cp15.mdcr_el3 = value;
  if (pmu_op) {
    pmu_op_finish(env);
  }
}

static void sdcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {

  mdcr_el3_write(env, ri,
                 value & ((1U << 28) | (1U << 27) | (1U << 23) | (1U << 21) |
                          (1U << 20) | (1U << 19) | (1U << 18) | (1U << 17) |
                          (3U << 14)));
}

static void mdcr_el2_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {

# 4940 "../../../target/arm/helper.c" 3 4
  _Bool
# 4940 "../../../target/arm/helper.c"
      pmu_op = (env->cp15.mdcr_el2 ^ value) &
               ((1U << 7) | (1U << 17) | (0x1fU) | (1U << 23) | (1U << 26));

  if (pmu_op) {
    pmu_op_start(env);
  }
  env->cp15.mdcr_el2 = value;
  if (pmu_op) {
    pmu_op_finish(env);
  }
}

static CPAccessResult access_nv1(CPUARMState *env, const ARMCPRegInfo *ri,

# 4952 "../../../target/arm/helper.c" 3 4
                                 _Bool
# 4952 "../../../target/arm/helper.c"
                                     isread) {
  if (arm_current_el(env) == 1) {
    uint64_t hcr_nv =
        arm_hcr_el2_eff(env) & ((1ULL << 42) | (1ULL << 43) | (1ULL << 45));

    if (hcr_nv == ((1ULL << 42) | (1ULL << 43))) {
      return CP_ACCESS_TRAP_EL2;
    }
  }
  return CP_ACCESS_OK;
}
# 4974 "../../../target/arm/helper.c"
static void ic_ivau_write(CPUARMState *env, const ARMCPRegInfo *ri,
                          uint64_t value) {
  uint64_t icache_line_mask, start_address, end_address;
  const ARMCPU *cpu;

  cpu = env_archcpu(env);

  icache_line_mask = (4 << extract32(cpu->ctr, 0, 4)) - 1;
  start_address = value & ~icache_line_mask;
  end_address = value | icache_line_mask;

  mmap_lock();

  tb_invalidate_phys_range(start_address, end_address);

  mmap_unlock();
}

static const ARMCPRegInfo v8_cp_reginfo[] = {

    {.name = "NZCV",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 0,
     .crn = 4,
     .crm = 2,
     .access = PL0_RW,
     .type = ARM_CP_NZCV},
    {.name = "DAIF",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 1,
     .crn = 4,
     .crm = 2,
     .type = ARM_CP_NO_RAW,
     .access = PL0_RW,
     .accessfn = aa64_daif_access,
     .fieldoffset =
# 5006 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5006 "../../../target/arm/helper.c"
             CPUARMState
# 5006 "../../../target/arm/helper.c" 3 4
             ,
# 5006 "../../../target/arm/helper.c"
             daif
# 5006 "../../../target/arm/helper.c" 3 4
             )
# 5006 "../../../target/arm/helper.c"
         ,
     .writefn = aa64_daif_write,
     .resetfn = arm_cp_reset_ignore},
    {.name = "FPCR",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 0,
     .crn = 4,
     .crm = 4,
     .access = PL0_RW,
     .type = ARM_CP_FPU,
     .readfn = aa64_fpcr_read,
     .writefn = aa64_fpcr_write},
    {.name = "FPSR",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 1,
     .crn = 4,
     .crm = 4,
     .access = PL0_RW,
     .type = ARM_CP_FPU | ARM_CP_SUPPRESS_TB_END,
     .readfn = aa64_fpsr_read,
     .writefn = aa64_fpsr_write},
    {.name = "DCZID_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 3,
     .opc2 = 7,
     .crn = 0,
     .crm = 0,
     .access = PL0_R,
     .type = ARM_CP_NO_RAW,
     .fgt = FGT_DCZID_EL0,
     .readfn = aa64_dczid_read},
    {
        .name = "DC_ZVA",
        .state = ARM_CP_STATE_AA64,
        .opc0 = 1,
        .opc1 = 3,
        .crn = 7,
        .crm = 4,
        .opc2 = 1,
        .access = PL0_W,
        .type = ARM_CP_DC_ZVA,

    },
    {.name = "CURRENTEL",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .opc2 = 2,
     .crn = 4,
     .crm = 2,
     .access = PL1_R,
     .type = ARM_CP_CURRENTEL},

    {.name = "IC_IALLUIS",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP,
     .fgt = FGT_ICIALLUIS,
     .accessfn = access_ticab},
    {.name = "IC_IALLU",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 5,
     .opc2 = 0,
     .access = PL1_W,
     .type = ARM_CP_NOP,
     .fgt = FGT_ICIALLU,
     .accessfn = access_tocu},
    {.name = "IC_IVAU",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 5,
     .opc2 = 1,
     .access = PL0_W,
     .fgt = FGT_ICIVAU,
     .accessfn = access_tocu,

     .type = ARM_CP_NO_RAW,
     .writefn = ic_ivau_write

    },

    {.name = "DC_IVAC",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 6,
     .opc2 = 1,
     .access = PL1_W,
     .accessfn = aa64_cacheop_poc_access,
     .fgt = FGT_DCIVAC,
     .type = ARM_CP_NOP},
    {.name = "DC_ISW",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 6,
     .opc2 = 2,
     .fgt = FGT_DCISW,
     .access = PL1_W,
     .accessfn = access_tsw,
     .type = ARM_CP_NOP},
    {.name = "DC_CVAC",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 10,
     .opc2 = 1,
     .access = PL0_W,
     .type = ARM_CP_NOP,
     .fgt = FGT_DCCVAC,
     .accessfn = aa64_cacheop_poc_access},
    {.name = "DC_CSW",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 10,
     .opc2 = 2,
     .fgt = FGT_DCCSW,
     .access = PL1_W,
     .accessfn = access_tsw,
     .type = ARM_CP_NOP},
    {.name = "DC_CVAU",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 11,
     .opc2 = 1,
     .access = PL0_W,
     .type = ARM_CP_NOP,
     .fgt = FGT_DCCVAU,
     .accessfn = access_tocu},
    {.name = "DC_CIVAC",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 14,
     .opc2 = 1,
     .access = PL0_W,
     .type = ARM_CP_NOP,
     .fgt = FGT_DCCIVAC,
     .accessfn = aa64_cacheop_poc_access},
    {.name = "DC_CISW",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 0,
     .crn = 7,
     .crm = 14,
     .opc2 = 2,
     .fgt = FGT_DCCISW,
     .access = PL1_W,
     .accessfn = access_tsw,
     .type = ARM_CP_NOP},
# 5148 "../../../target/arm/helper.c"
    {.name = "ICIALLUIS",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 1,
     .opc2 = 0,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_ticab},
    {.name = "BPIALLUIS",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 1,
     .opc2 = 6,
     .type = ARM_CP_NOP,
     .access = PL1_W},
    {.name = "ICIALLU",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 5,
     .opc2 = 0,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tocu},
    {.name = "ICIMVAU",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 5,
     .opc2 = 1,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tocu},
    {.name = "BPIALL",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 5,
     .opc2 = 6,
     .type = ARM_CP_NOP,
     .access = PL1_W},
    {.name = "BPIMVA",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 5,
     .opc2 = 7,
     .type = ARM_CP_NOP,
     .access = PL1_W},
    {.name = "DCIMVAC",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 6,
     .opc2 = 1,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = aa64_cacheop_poc_access},
    {.name = "DCISW",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 6,
     .opc2 = 2,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tsw},
    {.name = "DCCMVAC",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 10,
     .opc2 = 1,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = aa64_cacheop_poc_access},
    {.name = "DCCSW",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 10,
     .opc2 = 2,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tsw},
    {.name = "DCCMVAU",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 11,
     .opc2 = 1,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tocu},
    {.name = "DCCIMVAC",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 14,
     .opc2 = 1,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = aa64_cacheop_poc_access},
    {.name = "DCCISW",
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 14,
     .opc2 = 2,
     .type = ARM_CP_NOP,
     .access = PL1_W,
     .accessfn = access_tsw},

    {.name = "DACR",
     .cp = 15,
     .opc1 = 0,
     .crn = 3,
     .crm = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_tvm_trvm,
     .resetvalue = 0,
     .writefn = dacr_write,
     .raw_writefn = raw_write,
     .bank_fieldoffsets =
         {
# 5178 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 5178 "../../../target/arm/helper.c"
                 CPUARMState
# 5178 "../../../target/arm/helper.c" 3 4
                 ,
# 5178 "../../../target/arm/helper.c"
                 cp15.dacr_s
# 5178 "../../../target/arm/helper.c" 3 4
                 )
# 5178 "../../../target/arm/helper.c"
                 ,

# 5179 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 5179 "../../../target/arm/helper.c"
                 CPUARMState
# 5179 "../../../target/arm/helper.c" 3 4
                 ,
# 5179 "../../../target/arm/helper.c"
                 cp15.dacr_ns
# 5179 "../../../target/arm/helper.c" 3 4
                 )
# 5179 "../../../target/arm/helper.c"
         }},
    {.name = "ELR_EL1",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 4,
     .crm = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_nv1,
     .nv2_redirect_offset = 0x230 | 0x4000,
     .fieldoffset =
# 5185 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5185 "../../../target/arm/helper.c"
             CPUARMState
# 5185 "../../../target/arm/helper.c" 3 4
             ,
# 5185 "../../../target/arm/helper.c"
             elr_el[1]
# 5185 "../../../target/arm/helper.c" 3 4
             )
# 5185 "../../../target/arm/helper.c"
    },
    {.name = "SPSR_EL1",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 4,
     .crm = 0,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_nv1,
     .nv2_redirect_offset = 0x160 | 0x4000,
     .fieldoffset =
# 5191 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5191 "../../../target/arm/helper.c"
             CPUARMState
# 5191 "../../../target/arm/helper.c" 3 4
             ,
# 5191 "../../../target/arm/helper.c"
             banked_spsr[1]
# 5191 "../../../target/arm/helper.c" 3 4
             )
# 5191 "../../../target/arm/helper.c"
    },

    {.name = "SP_EL0",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 4,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = sp_el0_access,
     .type = ARM_CP_ALIAS,
     .fieldoffset =
# 5201 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5201 "../../../target/arm/helper.c"
             CPUARMState
# 5201 "../../../target/arm/helper.c" 3 4
             ,
# 5201 "../../../target/arm/helper.c"
             sp_el[0]
# 5201 "../../../target/arm/helper.c" 3 4
             )
# 5201 "../../../target/arm/helper.c"
    },
    {.name = "SP_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 1,
     .opc2 = 0,
     .nv2_redirect_offset = 0x240,
     .access = PL2_RW,
     .type = ARM_CP_ALIAS | ARM_CP_EL3_NO_EL2_KEEP,
     .fieldoffset =
# 5206 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5206 "../../../target/arm/helper.c"
             CPUARMState
# 5206 "../../../target/arm/helper.c" 3 4
             ,
# 5206 "../../../target/arm/helper.c"
             sp_el[1]
# 5206 "../../../target/arm/helper.c" 3 4
             )
# 5206 "../../../target/arm/helper.c"
    },
    {.name = "SPSel",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 4,
     .crm = 2,
     .opc2 = 0,
     .type = ARM_CP_NO_RAW,
     .access = PL1_RW,
     .readfn = spsel_read,
     .writefn = spsel_write},
    {.name = "SPSR_IRQ",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 3,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5215 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5215 "../../../target/arm/helper.c"
             CPUARMState
# 5215 "../../../target/arm/helper.c" 3 4
             ,
# 5215 "../../../target/arm/helper.c"
             banked_spsr[4]
# 5215 "../../../target/arm/helper.c" 3 4
             )
# 5215 "../../../target/arm/helper.c"
    },
    {.name = "SPSR_ABT",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 3,
     .opc2 = 1,
     .access = PL2_RW,
     .fieldoffset =
# 5220 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5220 "../../../target/arm/helper.c"
             CPUARMState
# 5220 "../../../target/arm/helper.c" 3 4
             ,
# 5220 "../../../target/arm/helper.c"
             banked_spsr[2]
# 5220 "../../../target/arm/helper.c" 3 4
             )
# 5220 "../../../target/arm/helper.c"
    },
    {.name = "SPSR_UND",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 3,
     .opc2 = 2,
     .access = PL2_RW,
     .fieldoffset =
# 5225 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5225 "../../../target/arm/helper.c"
             CPUARMState
# 5225 "../../../target/arm/helper.c" 3 4
             ,
# 5225 "../../../target/arm/helper.c"
             banked_spsr[3]
# 5225 "../../../target/arm/helper.c" 3 4
             )
# 5225 "../../../target/arm/helper.c"
    },
    {.name = "SPSR_FIQ",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 3,
     .opc2 = 3,
     .access = PL2_RW,
     .fieldoffset =
# 5230 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5230 "../../../target/arm/helper.c"
             CPUARMState
# 5230 "../../../target/arm/helper.c" 3 4
             ,
# 5230 "../../../target/arm/helper.c"
             banked_spsr[5]
# 5230 "../../../target/arm/helper.c" 3 4
             )
# 5230 "../../../target/arm/helper.c"
    },
    {.name = "MDCR_EL3",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_IO,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 1,
     .crm = 3,
     .opc2 = 1,
     .resetvalue = 0,
     .access = PL3_RW,
     .writefn = mdcr_el3_write,
     .fieldoffset =
# 5237 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5237 "../../../target/arm/helper.c"
             CPUARMState
# 5237 "../../../target/arm/helper.c" 3 4
             ,
# 5237 "../../../target/arm/helper.c"
             cp15.mdcr_el3
# 5237 "../../../target/arm/helper.c" 3 4
             )
# 5237 "../../../target/arm/helper.c"
    },
    {.name = "SDCR",
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .cp = 15,
     .opc1 = 0,
     .crn = 1,
     .crm = 3,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_trap_aa32s_el1,
     .writefn = sdcr_write,
     .fieldoffset =
# 5242 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5242 "../../../target/arm/helper.c"
             CPUARMState
# 5242 "../../../target/arm/helper.c" 3 4
             ,
# 5242 "../../../target/arm/helper.c"
             cp15.mdcr_el3
# 5242 "../../../target/arm/helper.c" 3 4
             )
# 5242 "../../../target/arm/helper.c"
    },
};

static const ARMCPRegInfo v8_aa32_el1_reginfo[] = {
    {.name = "FPEXC32_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 3,
     .opc2 = 0,
     .access = PL2_RW,
     .type = ARM_CP_ALIAS | ARM_CP_FPU | ARM_CP_EL3_NO_EL2_KEEP,
     .fieldoffset =
# 5251 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5251 "../../../target/arm/helper.c"
             CPUARMState
# 5251 "../../../target/arm/helper.c" 3 4
             ,
# 5251 "../../../target/arm/helper.c"
             vfp.xregs[8]
# 5251 "../../../target/arm/helper.c" 3 4
             )
# 5251 "../../../target/arm/helper.c"
    },
    {.name = "DACR32_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 3,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .resetvalue = 0,
     .type = ARM_CP_EL3_NO_EL2_KEEP,
     .writefn = dacr_write,
     .raw_writefn = raw_write,
     .fieldoffset =
# 5256 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5256 "../../../target/arm/helper.c"
             CPUARMState
# 5256 "../../../target/arm/helper.c" 3 4
             ,
# 5256 "../../../target/arm/helper.c"
             cp15.dacr32_el2
# 5256 "../../../target/arm/helper.c" 3 4
             )
# 5256 "../../../target/arm/helper.c"
    },
    {.name = "IFSR32_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 0,
     .opc2 = 1,
     .access = PL2_RW,
     .resetvalue = 0,
     .type = ARM_CP_EL3_NO_EL2_KEEP,
     .fieldoffset =
# 5260 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5260 "../../../target/arm/helper.c"
             CPUARMState
# 5260 "../../../target/arm/helper.c" 3 4
             ,
# 5260 "../../../target/arm/helper.c"
             cp15.ifsr32_el2
# 5260 "../../../target/arm/helper.c" 3 4
             )
# 5260 "../../../target/arm/helper.c"
    },
};

static void do_hcr_write(CPUARMState *env, uint64_t value,
                         uint64_t valid_mask) {
  ARMCPU *cpu = env_archcpu(env);

  if (arm_feature(env, ARM_FEATURE_V8)) {
    valid_mask |= (((~0ULL) >> (64 - (34))) << (0));
  } else {
    valid_mask |= (((~0ULL) >> (64 - (28))) << (0));
  }

  if (arm_feature(env, ARM_FEATURE_EL3)) {
    valid_mask &= ~(1ULL << 29);
  } else if (cpu->psci_conduit != QEMU_PSCI_CONDUIT_SMC) {
# 5284 "../../../target/arm/helper.c"
    valid_mask &= ~(1ULL << 19);
  }

  if (arm_feature(env, ARM_FEATURE_AARCH64)) {
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_vh(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 34);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_ras(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 36) | (1ULL << 37);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_lor(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 35);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_pauth(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 41) | (1ULL << 40);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_mte(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 56) | (1ULL << 57) | (1ULL << 58);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_scxtnum(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 53);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_fwb(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 46);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_rme(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 48);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_nv(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 42) | (1ULL << 43) | (1ULL << 44);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_nv2(&cpu_->isar);
        })) {
      valid_mask |= (1ULL << 45);
    }
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_any_evt(&cpu_->isar);
      })) {
    valid_mask |= (1ULL << 54) | (1ULL << 55) | (1ULL << 50) | (1ULL << 52) |
                  (1ULL << 49);
  } else if (({
               ARMCPU *cpu_ = (cpu);
               isar_feature_any_half_evt(&cpu_->isar);
             })) {
    valid_mask |= (1ULL << 50) | (1ULL << 52) | (1ULL << 49);
  }

  value &= valid_mask;

  if (!({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_aa32_el1(&cpu_->isar);
      })) {
    value |= (1ULL << 31);
  }
# 5343 "../../../target/arm/helper.c"
  if ((env->cp15.hcr_el2 ^ value) &
      ((1ULL << 0) | (1ULL << 2) | (1ULL << 12) | (1ULL << 57) | (1ULL << 46) |
       (1ULL << 42) | (1ULL << 43))) {
    tlb_flush(((CPUState *)(cpu)));
  }
  env->cp15.hcr_el2 = value;
# 5360 "../../../target/arm/helper.c"
  do {
    if (bql_locked())
      ;
    else
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                               5360, ((const char *)(__func__)),
                               "bql_locked()");
  } while (0);
  arm_cpu_update_virq(cpu);
  arm_cpu_update_vfiq(cpu);
  arm_cpu_update_vserr(cpu);
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_nmi(&cpu_->isar);
      })) {
    arm_cpu_update_vinmi(cpu);
    arm_cpu_update_vfnmi(cpu);
  }
}

static void hcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                      uint64_t value) {
  do_hcr_write(env, value, 0);
}

static void hcr_writehigh(CPUARMState *env, const ARMCPRegInfo *ri,
                          uint64_t value) {

  value = deposit64(env->cp15.hcr_el2, 32, 32, value);
  do_hcr_write(env, value, (((~0ULL) >> (64 - (32))) << (0)));
}

static void hcr_writelow(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {

  value = deposit64(env->cp15.hcr_el2, 0, 32, value);
  do_hcr_write(env, value, (((~0ULL) >> (64 - (32))) << (32)));
}

static void hcr_reset(CPUARMState *env, const ARMCPRegInfo *ri) {

  hcr_write(env, ri, 0);
}

uint64_t arm_hcr_el2_eff_secstate(CPUARMState *env, ARMSecuritySpace space) {
  uint64_t ret = env->cp15.hcr_el2;

# 5406 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 5406 "../../../target/arm/helper.c"
                    space != ARMSS_Root
# 5406 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 5406 "../../../target/arm/helper.c"
         space != ARMSS_Root
# 5406 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 5406 "../../../target/arm/helper.c"
           "space != ARMSS_Root"
# 5406 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 5406,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 5406 "../../../target/arm/helper.c"
      ;

  if (!arm_is_el2_enabled_secstate(env, space)) {
# 5424 "../../../target/arm/helper.c"
    return 0;
  }

  if (!arm_el_is_aa64(env, 2)) {
    uint64_t aa32_valid;

    aa32_valid =
        (((~0ULL) >> (64 - (32))) << (0)) & ~((1ULL << 31) | (1ULL << 28));
    aa32_valid |= ((1ULL << 32) | (1ULL << 33) | (1ULL << 36) | (1ULL << 37) |
                   (1ULL << 38) | (1ULL << 49) | (1ULL << 50) | (1ULL << 52) |
                   (1ULL << 54));
    ret &= aa32_valid;
  }

  if (ret & (1ULL << 27)) {

    if (ret & (1ULL << 34)) {
      ret &= ~((1ULL << 0) | (1ULL << 3) | (1ULL << 4) | (1ULL << 5) |
               (3ULL << 10) | (1ULL << 12) | (1ULL << 13) | (1ULL << 14) |
               (1ULL << 15) | (1ULL << 17) | (1ULL << 23) | (1ULL << 24) |
               (1ULL << 28) | (1ULL << 32) | (1ULL << 33) | (1ULL << 38) |
               (1ULL << 49) | (1ULL << 50) | (1ULL << 52) | (1ULL << 53) |
               (1ULL << 54) | (1ULL << 55) | (1ULL << 58));
    } else {
      ret |= (1ULL << 3) | (1ULL << 4) | (1ULL << 5);
    }
    ret &= ~((1ULL << 1) | (1ULL << 2) | (1ULL << 6) | (1ULL << 7) |
             (1ULL << 8) | (1ULL << 9) | (1ULL << 16) | (1ULL << 18) |
             (1ULL << 19) | (1ULL << 21) | (1ULL << 22) | (1ULL << 25) |
             (1ULL << 26) | (1ULL << 29) | (1ULL << 30) | (1ULL << 35));
  }

  return ret;
}

uint64_t arm_hcr_el2_eff(CPUARMState *env) {
  if (arm_feature(env, ARM_FEATURE_M)) {
    return 0;
  }
  return arm_hcr_el2_eff_secstate(env, arm_security_space_below_el3(env));
}

# 5478 "../../../target/arm/helper.c" 3 4
_Bool
# 5478 "../../../target/arm/helper.c"
    el_is_in_host(CPUARMState *env, int el)
{
  uint64_t mask;

  if (el & 1) {
    return
# 5487 "../../../target/arm/helper.c" 3 4
        0
# 5487 "../../../target/arm/helper.c"
        ;
  }

  mask = el ? (1ULL << 34) : (1ULL << 34) | (1ULL << 27);
  if ((env->cp15.hcr_el2 & mask) != mask) {
    return
# 5496 "../../../target/arm/helper.c" 3 4
        0
# 5496 "../../../target/arm/helper.c"
        ;
  }

  return arm_is_el2_enabled(env) && arm_el_is_aa64(env, 2);
}

static void hcrx_write(CPUARMState *env, const ARMCPRegInfo *ri,
                       uint64_t value) {
  ARMCPU *cpu = env_archcpu(env);
  uint64_t valid_mask = 0;

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_mops(&cpu_->isar);
      })) {
    valid_mask |= (1ULL << 11) | (1ULL << 10);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_nmi(&cpu_->isar);
      })) {
    valid_mask |= (1ULL << 6) | (1ULL << 7) | (1ULL << 8);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_cmow(&cpu_->isar);
      })) {
    valid_mask |= (1ULL << 9);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_xs(&cpu_->isar);
      })) {
    valid_mask |= (1ULL << 4) | (1ULL << 3);
  }

  env->cp15.hcrx_el2 = value & valid_mask;
# 5541 "../../../target/arm/helper.c"
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_nmi(&cpu_->isar);
      })) {
    do {
      if (bql_locked())
        ;
      else
        g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                                 5542, ((const char *)(__func__)),
                                 "bql_locked()");
    } while (0);
    arm_cpu_update_vinmi(cpu);
    arm_cpu_update_vfnmi(cpu);
  }
}

static CPAccessResult access_hxen(CPUARMState *env, const ARMCPRegInfo *ri,

# 5549 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 5549 "../../../target/arm/helper.c"
                                      isread) {
  if (arm_current_el(env) == 2 && arm_feature(env, ARM_FEATURE_EL3) &&
      !(env->cp15.scr_el3 & (1ULL << 38))) {
    return CP_ACCESS_TRAP_EL3;
  }
  return CP_ACCESS_OK;
}

static const ARMCPRegInfo hcrx_el2_reginfo = {
    .name = "HCRX_EL2",
    .state = ARM_CP_STATE_AA64,
    .type = ARM_CP_IO,
    .opc0 = 3,
    .opc1 = 4,
    .crn = 1,
    .crm = 2,
    .opc2 = 2,
    .access = PL2_RW,
    .writefn = hcrx_write,
    .accessfn = access_hxen,
    .nv2_redirect_offset = 0xa0,
    .fieldoffset =
# 5565 "../../../target/arm/helper.c" 3 4
        __builtin_offsetof(
# 5565 "../../../target/arm/helper.c"
            CPUARMState
# 5565 "../../../target/arm/helper.c" 3 4
            ,
# 5565 "../../../target/arm/helper.c"
            cp15.hcrx_el2
# 5565 "../../../target/arm/helper.c" 3 4
            )
# 5565 "../../../target/arm/helper.c"
        ,
};

uint64_t arm_hcrx_el2_eff(CPUARMState *env) {
# 5582 "../../../target/arm/helper.c"
  if (!arm_is_el2_enabled(env)) {
    uint64_t hcrx = 0;
    if (({
          ARMCPU *cpu_ = (env_archcpu(env));
          isar_feature_aa64_mops(&cpu_->isar);
        })) {

      hcrx |= (1ULL << 11);
    }
    return hcrx;
  }
  if (arm_feature(env, ARM_FEATURE_EL3) &&
      !(env->cp15.scr_el3 & (1ULL << 38))) {
    return 0;
  }
  return env->cp15.hcrx_el2;
}

static void cptr_el2_write(CPUARMState *env, const ARMCPRegInfo *ri,
                           uint64_t value) {

  if (arm_feature(env, ARM_FEATURE_EL3) && !arm_el_is_aa64(env, 3) &&
      !arm_is_secure(env) && !extract32(env->cp15.nsacr, 10, 1)) {
    uint64_t mask = R_HCPTR_TCP11_MASK | R_HCPTR_TCP10_MASK;
    value = (value & ~mask) | (env->cp15.cptr_el[2] & mask);
  }
  env->cp15.cptr_el[2] = value;
}

static uint64_t cptr_el2_read(CPUARMState *env, const ARMCPRegInfo *ri) {

  uint64_t value = env->cp15.cptr_el[2];

  if (arm_feature(env, ARM_FEATURE_EL3) && !arm_el_is_aa64(env, 3) &&
      !arm_is_secure(env) && !extract32(env->cp15.nsacr, 10, 1)) {
    value |= R_HCPTR_TCP11_MASK | R_HCPTR_TCP10_MASK;
  }
  return value;
}

static const ARMCPRegInfo el2_cp_reginfo[] = {
    {.name = "HCR_EL2",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_IO,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5630 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5630 "../../../target/arm/helper.c"
             CPUARMState
# 5630 "../../../target/arm/helper.c" 3 4
             ,
# 5630 "../../../target/arm/helper.c"
             cp15.hcr_el2
# 5630 "../../../target/arm/helper.c" 3 4
             )
# 5630 "../../../target/arm/helper.c"
         ,
     .nv2_redirect_offset = 0x78,
     .resetfn = hcr_reset,
     .writefn = hcr_write,
     .raw_writefn = raw_write},
    {.name = "HCR",
     .state = ARM_CP_STATE_AA32,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .cp = 15,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5637 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5637 "../../../target/arm/helper.c"
             CPUARMState
# 5637 "../../../target/arm/helper.c" 3 4
             ,
# 5637 "../../../target/arm/helper.c"
             cp15.hcr_el2
# 5637 "../../../target/arm/helper.c" 3 4
             )
# 5637 "../../../target/arm/helper.c"
         ,
     .writefn = hcr_writelow},
    {.name = "HACR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 7,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "ELR_EL2",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS | ARM_CP_NV2_REDIRECT,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 0,
     .opc2 = 1,
     .access = PL2_RW,
     .fieldoffset =
# 5646 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5646 "../../../target/arm/helper.c"
             CPUARMState
# 5646 "../../../target/arm/helper.c" 3 4
             ,
# 5646 "../../../target/arm/helper.c"
             elr_el[2]
# 5646 "../../../target/arm/helper.c" 3 4
             )
# 5646 "../../../target/arm/helper.c"
    },
    {.name = "ESR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .type = ARM_CP_NV2_REDIRECT,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 2,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5650 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5650 "../../../target/arm/helper.c"
             CPUARMState
# 5650 "../../../target/arm/helper.c" 3 4
             ,
# 5650 "../../../target/arm/helper.c"
             cp15.esr_el[2]
# 5650 "../../../target/arm/helper.c" 3 4
             )
# 5650 "../../../target/arm/helper.c"
    },
    {.name = "FAR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .type = ARM_CP_NV2_REDIRECT,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 6,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5654 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5654 "../../../target/arm/helper.c"
             CPUARMState
# 5654 "../../../target/arm/helper.c" 3 4
             ,
# 5654 "../../../target/arm/helper.c"
             cp15.far_el[2]
# 5654 "../../../target/arm/helper.c" 3 4
             )
# 5654 "../../../target/arm/helper.c"
    },
    {.name = "HIFAR",
     .state = ARM_CP_STATE_AA32,
     .type = ARM_CP_ALIAS,
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 0,
     .opc2 = 2,
     .access = PL2_RW,
     .fieldoffset = (
# 5659 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5659 "../../../target/arm/helper.c"
             CPUARMState
# 5659 "../../../target/arm/helper.c" 3 4
             ,
# 5659 "../../../target/arm/helper.c"
             cp15.far_el[2]
# 5659 "../../../target/arm/helper.c" 3 4
             )
# 5659 "../../../target/arm/helper.c"
         + sizeof(uint32_t))},
    {.name = "SPSR_EL2",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS | ARM_CP_NV2_REDIRECT,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 4,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5664 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5664 "../../../target/arm/helper.c"
             CPUARMState
# 5664 "../../../target/arm/helper.c" 3 4
             ,
# 5664 "../../../target/arm/helper.c"
             banked_spsr[6]
# 5664 "../../../target/arm/helper.c" 3 4
             )
# 5664 "../../../target/arm/helper.c"
    },
    {.name = "VBAR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 12,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .writefn = vbar_write,
     .fieldoffset =
# 5668 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5668 "../../../target/arm/helper.c"
             CPUARMState
# 5668 "../../../target/arm/helper.c" 3 4
             ,
# 5668 "../../../target/arm/helper.c"
             cp15.vbar_el[2]
# 5668 "../../../target/arm/helper.c" 3 4
             )
# 5668 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "SP_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 4,
     .crm = 1,
     .opc2 = 0,
     .access = PL3_RW,
     .type = ARM_CP_ALIAS,
     .fieldoffset =
# 5673 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5673 "../../../target/arm/helper.c"
             CPUARMState
# 5673 "../../../target/arm/helper.c" 3 4
             ,
# 5673 "../../../target/arm/helper.c"
             sp_el[2]
# 5673 "../../../target/arm/helper.c" 3 4
             )
# 5673 "../../../target/arm/helper.c"
    },
    {.name = "CPTR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 2,
     .access = PL2_RW,
     .accessfn = cptr_access,
     .resetvalue = 0,
     .fieldoffset =
# 5677 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5677 "../../../target/arm/helper.c"
             CPUARMState
# 5677 "../../../target/arm/helper.c" 3 4
             ,
# 5677 "../../../target/arm/helper.c"
             cp15.cptr_el[2]
# 5677 "../../../target/arm/helper.c" 3 4
             )
# 5677 "../../../target/arm/helper.c"
         ,
     .readfn = cptr_el2_read,
     .writefn = cptr_el2_write},
    {.name = "MAIR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 10,
     .crm = 2,
     .opc2 = 0,
     .access = PL2_RW,
     .fieldoffset =
# 5681 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5681 "../../../target/arm/helper.c"
             CPUARMState
# 5681 "../../../target/arm/helper.c" 3 4
             ,
# 5681 "../../../target/arm/helper.c"
             cp15.mair_el[2]
# 5681 "../../../target/arm/helper.c" 3 4
             )
# 5681 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "HMAIR1",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 4,
     .crn = 10,
     .crm = 2,
     .opc2 = 1,
     .access = PL2_RW,
     .type = ARM_CP_ALIAS,
     .fieldoffset = (
# 5686 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5686 "../../../target/arm/helper.c"
             CPUARMState
# 5686 "../../../target/arm/helper.c" 3 4
             ,
# 5686 "../../../target/arm/helper.c"
             cp15.mair_el[2]
# 5686 "../../../target/arm/helper.c" 3 4
             )
# 5686 "../../../target/arm/helper.c"
         + sizeof(uint32_t))},
    {.name = "AMAIR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 10,
     .crm = 3,
     .opc2 = 0,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},

    {.name = "HAMAIR1",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 4,
     .crn = 10,
     .crm = 3,
     .opc2 = 1,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "AFSR0_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 1,
     .opc2 = 0,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "AFSR1_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 1,
     .opc2 = 1,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "TCR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 0,
     .opc2 = 2,
     .access = PL2_RW,
     .writefn = vmsa_tcr_el12_write,
     .raw_writefn = raw_write,
     .fieldoffset =
# 5708 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5708 "../../../target/arm/helper.c"
             CPUARMState
# 5708 "../../../target/arm/helper.c" 3 4
             ,
# 5708 "../../../target/arm/helper.c"
             cp15.tcr_el[2]
# 5708 "../../../target/arm/helper.c" 3 4
             )
# 5708 "../../../target/arm/helper.c"
    },
    {.name = "VTCR",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 4,
     .crn = 2,
     .crm = 1,
     .opc2 = 2,
     .type = ARM_CP_ALIAS,
     .access = PL2_RW,
     .accessfn = access_el3_aa32ns,
     .fieldoffset =
# 5713 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5713 "../../../target/arm/helper.c"
             CPUARMState
# 5713 "../../../target/arm/helper.c" 3 4
             ,
# 5713 "../../../target/arm/helper.c"
             cp15.vtcr_el2
# 5713 "../../../target/arm/helper.c" 3 4
             )
# 5713 "../../../target/arm/helper.c"
    },
    {.name = "VTCR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 1,
     .opc2 = 2,
     .access = PL2_RW,
     .nv2_redirect_offset = 0x40,

     .fieldoffset =
# 5719 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5719 "../../../target/arm/helper.c"
             CPUARMState
# 5719 "../../../target/arm/helper.c" 3 4
             ,
# 5719 "../../../target/arm/helper.c"
             cp15.vtcr_el2
# 5719 "../../../target/arm/helper.c" 3 4
             )
# 5719 "../../../target/arm/helper.c"
    },
    {.name = "VTTBR",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 6,
     .crm = 2,
     .type = ARM_CP_64BIT | ARM_CP_ALIAS,
     .access = PL2_RW,
     .accessfn = access_el3_aa32ns,
     .fieldoffset =
# 5724 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5724 "../../../target/arm/helper.c"
             CPUARMState
# 5724 "../../../target/arm/helper.c" 3 4
             ,
# 5724 "../../../target/arm/helper.c"
             cp15.vttbr_el2
# 5724 "../../../target/arm/helper.c" 3 4
             )
# 5724 "../../../target/arm/helper.c"
         ,
     .writefn = vttbr_write,
     .raw_writefn = raw_write},
    {.name = "VTTBR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 1,
     .opc2 = 0,
     .access = PL2_RW,
     .writefn = vttbr_write,
     .raw_writefn = raw_write,
     .nv2_redirect_offset = 0x20,
     .fieldoffset =
# 5730 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5730 "../../../target/arm/helper.c"
             CPUARMState
# 5730 "../../../target/arm/helper.c" 3 4
             ,
# 5730 "../../../target/arm/helper.c"
             cp15.vttbr_el2
# 5730 "../../../target/arm/helper.c" 3 4
             )
# 5730 "../../../target/arm/helper.c"
    },
    {.name = "SCTLR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .raw_writefn = raw_write,
     .writefn = sctlr_write,
     .fieldoffset =
# 5734 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5734 "../../../target/arm/helper.c"
             CPUARMState
# 5734 "../../../target/arm/helper.c" 3 4
             ,
# 5734 "../../../target/arm/helper.c"
             cp15.sctlr_el[2]
# 5734 "../../../target/arm/helper.c" 3 4
             )
# 5734 "../../../target/arm/helper.c"
    },
    {.name = "TPIDR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 13,
     .crm = 0,
     .opc2 = 2,
     .access = PL2_RW,
     .resetvalue = 0,
     .nv2_redirect_offset = 0x90,
     .fieldoffset =
# 5739 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5739 "../../../target/arm/helper.c"
             CPUARMState
# 5739 "../../../target/arm/helper.c" 3 4
             ,
# 5739 "../../../target/arm/helper.c"
             cp15.tpidr_el[2]
# 5739 "../../../target/arm/helper.c" 3 4
             )
# 5739 "../../../target/arm/helper.c"
    },
    {.name = "TTBR0_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 0,
     .opc2 = 0,
     .access = PL2_RW,
     .resetvalue = 0,
     .writefn = vmsa_tcr_ttbr_el2_write,
     .raw_writefn = raw_write,
     .fieldoffset =
# 5744 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5744 "../../../target/arm/helper.c"
             CPUARMState
# 5744 "../../../target/arm/helper.c" 3 4
             ,
# 5744 "../../../target/arm/helper.c"
             cp15.ttbr0_el[2]
# 5744 "../../../target/arm/helper.c" 3 4
             )
# 5744 "../../../target/arm/helper.c"
    },
    {.name = "HTTBR",
     .cp = 15,
     .opc1 = 4,
     .crm = 2,
     .access = PL2_RW,
     .type = ARM_CP_64BIT | ARM_CP_ALIAS,
     .fieldoffset =
# 5747 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5747 "../../../target/arm/helper.c"
             CPUARMState
# 5747 "../../../target/arm/helper.c" 3 4
             ,
# 5747 "../../../target/arm/helper.c"
             cp15.ttbr0_el[2]
# 5747 "../../../target/arm/helper.c" 3 4
             )
# 5747 "../../../target/arm/helper.c"
    },
# 5818 "../../../target/arm/helper.c"
    {.name = "HPFAR",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 4,
     .crn = 6,
     .crm = 0,
     .opc2 = 4,
     .access = PL2_RW,
     .accessfn = access_el3_aa32ns,
     .fieldoffset =
# 5821 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5821 "../../../target/arm/helper.c"
             CPUARMState
# 5821 "../../../target/arm/helper.c" 3 4
             ,
# 5821 "../../../target/arm/helper.c"
             cp15.hpfar_el2
# 5821 "../../../target/arm/helper.c" 3 4
             )
# 5821 "../../../target/arm/helper.c"
    },
    {.name = "HPFAR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 6,
     .crm = 0,
     .opc2 = 4,
     .access = PL2_RW,
     .fieldoffset =
# 5825 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5825 "../../../target/arm/helper.c"
             CPUARMState
# 5825 "../../../target/arm/helper.c" 3 4
             ,
# 5825 "../../../target/arm/helper.c"
             cp15.hpfar_el2
# 5825 "../../../target/arm/helper.c" 3 4
             )
# 5825 "../../../target/arm/helper.c"
    },
    {.name = "HSTR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .cp = 15,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 3,
     .access = PL2_RW,
     .nv2_redirect_offset = 0x80,
     .fieldoffset =
# 5830 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5830 "../../../target/arm/helper.c"
             CPUARMState
# 5830 "../../../target/arm/helper.c" 3 4
             ,
# 5830 "../../../target/arm/helper.c"
             cp15.hstr_el2
# 5830 "../../../target/arm/helper.c" 3 4
             )
# 5830 "../../../target/arm/helper.c"
    },
};

static const ARMCPRegInfo el2_v8_cp_reginfo[] = {
    {.name = "HCR2",
     .state = ARM_CP_STATE_AA32,
     .type = ARM_CP_ALIAS | ARM_CP_IO,
     .cp = 15,
     .opc1 = 4,
     .crn = 1,
     .crm = 1,
     .opc2 = 4,
     .access = PL2_RW,
     .fieldoffset = (
# 5838 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5838 "../../../target/arm/helper.c"
             CPUARMState
# 5838 "../../../target/arm/helper.c" 3 4
             ,
# 5838 "../../../target/arm/helper.c"
             cp15.hcr_el2
# 5838 "../../../target/arm/helper.c" 3 4
             )
# 5838 "../../../target/arm/helper.c"
         + sizeof(uint32_t)),
     .writefn = hcr_writehigh},
};

static CPAccessResult sel2_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 5843 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 5843 "../../../target/arm/helper.c"
                                      isread) {
  if (arm_current_el(env) == 3 || arm_is_secure_below_el3(env)) {
    return CP_ACCESS_OK;
  }
  return CP_ACCESS_UNDEFINED;
}

static const ARMCPRegInfo el2_sec_cp_reginfo[] = {
    {.name = "VSTTBR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 6,
     .opc2 = 0,
     .access = PL2_RW,
     .accessfn = sel2_access,
     .nv2_redirect_offset = 0x30,
     .fieldoffset =
# 5856 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5856 "../../../target/arm/helper.c"
             CPUARMState
# 5856 "../../../target/arm/helper.c" 3 4
             ,
# 5856 "../../../target/arm/helper.c"
             cp15.vsttbr_el2
# 5856 "../../../target/arm/helper.c" 3 4
             )
# 5856 "../../../target/arm/helper.c"
    },
    {.name = "VSTCR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 6,
     .opc2 = 2,
     .access = PL2_RW,
     .accessfn = sel2_access,
     .nv2_redirect_offset = 0x48,
     .fieldoffset =
# 5861 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5861 "../../../target/arm/helper.c"
             CPUARMState
# 5861 "../../../target/arm/helper.c" 3 4
             ,
# 5861 "../../../target/arm/helper.c"
             cp15.vstcr_el2
# 5861 "../../../target/arm/helper.c" 3 4
             )
# 5861 "../../../target/arm/helper.c"
    },
# 5912 "../../../target/arm/helper.c"
};

static CPAccessResult nsacr_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 5915 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 5915 "../../../target/arm/helper.c"
                                       isread) {

  if (arm_current_el(env) == 3) {
    return CP_ACCESS_OK;
  }
  if (arm_is_secure_below_el3(env)) {
    if (env->cp15.scr_el3 & (1ULL << 18)) {
      return CP_ACCESS_TRAP_EL2;
    }
    return CP_ACCESS_TRAP_EL3;
  }

  if (isread) {
    return CP_ACCESS_OK;
  }
  return CP_ACCESS_UNDEFINED;
}

static const ARMCPRegInfo el3_cp_reginfo[] = {
    {.name = "SCR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 1,
     .crm = 1,
     .opc2 = 0,
     .access = PL3_RW,
     .fieldoffset =
# 5940 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5940 "../../../target/arm/helper.c"
             CPUARMState
# 5940 "../../../target/arm/helper.c" 3 4
             ,
# 5940 "../../../target/arm/helper.c"
             cp15.scr_el3
# 5940 "../../../target/arm/helper.c" 3 4
             )
# 5940 "../../../target/arm/helper.c"
         ,
     .resetfn = scr_reset,
     .writefn = scr_write,
     .raw_writefn = raw_write},
    {.name = "SCR",
     .type = ARM_CP_ALIAS | ARM_CP_NEWEL,
     .cp = 15,
     .opc1 = 0,
     .crn = 1,
     .crm = 1,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_trap_aa32s_el1,
     .fieldoffset =
# 5945 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5945 "../../../target/arm/helper.c"
             CPUARMState
# 5945 "../../../target/arm/helper.c" 3 4
             ,
# 5945 "../../../target/arm/helper.c"
             cp15.scr_el3
# 5945 "../../../target/arm/helper.c" 3 4
             )
# 5945 "../../../target/arm/helper.c"
         ,
     .writefn = scr_write,
     .raw_writefn = raw_write},
    {.name = "SDER32_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 1,
     .crm = 1,
     .opc2 = 1,
     .access = PL3_RW,
     .resetvalue = 0,
     .fieldoffset =
# 5950 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5950 "../../../target/arm/helper.c"
             CPUARMState
# 5950 "../../../target/arm/helper.c" 3 4
             ,
# 5950 "../../../target/arm/helper.c"
             cp15.sder
# 5950 "../../../target/arm/helper.c" 3 4
             )
# 5950 "../../../target/arm/helper.c"
    },
    {.name = "SDER",
     .cp = 15,
     .opc1 = 0,
     .crn = 1,
     .crm = 1,
     .opc2 = 1,
     .access = PL3_RW,
     .resetvalue = 0,
     .fieldoffset =
# 5954 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5954 "../../../target/arm/helper.c"
             CPUARMState
# 5954 "../../../target/arm/helper.c" 3 4
             ,
# 5954 "../../../target/arm/helper.c"
             cp15.sder
# 5954 "../../../target/arm/helper.c" 3 4
             )
# 5954 "../../../target/arm/helper.c"
    },
    {.name = "MVBAR",
     .cp = 15,
     .opc1 = 0,
     .crn = 12,
     .crm = 0,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_trap_aa32s_el1,
     .writefn = vbar_write,
     .resetvalue = 0,
     .fieldoffset =
# 5958 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5958 "../../../target/arm/helper.c"
             CPUARMState
# 5958 "../../../target/arm/helper.c" 3 4
             ,
# 5958 "../../../target/arm/helper.c"
             cp15.mvbar
# 5958 "../../../target/arm/helper.c" 3 4
             )
# 5958 "../../../target/arm/helper.c"
    },
    {.name = "TTBR0_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 2,
     .crm = 0,
     .opc2 = 0,
     .access = PL3_RW,
     .resetvalue = 0,
     .fieldoffset =
# 5962 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5962 "../../../target/arm/helper.c"
             CPUARMState
# 5962 "../../../target/arm/helper.c" 3 4
             ,
# 5962 "../../../target/arm/helper.c"
             cp15.ttbr0_el[3]
# 5962 "../../../target/arm/helper.c" 3 4
             )
# 5962 "../../../target/arm/helper.c"
    },
    {.name = "TCR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 2,
     .crm = 0,
     .opc2 = 2,
     .access = PL3_RW,

     .resetvalue = 0,
     .fieldoffset =
# 5968 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5968 "../../../target/arm/helper.c"
             CPUARMState
# 5968 "../../../target/arm/helper.c" 3 4
             ,
# 5968 "../../../target/arm/helper.c"
             cp15.tcr_el[3]
# 5968 "../../../target/arm/helper.c" 3 4
             )
# 5968 "../../../target/arm/helper.c"
    },
    {.name = "ELR_EL3",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 4,
     .crm = 0,
     .opc2 = 1,
     .access = PL3_RW,
     .fieldoffset =
# 5973 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5973 "../../../target/arm/helper.c"
             CPUARMState
# 5973 "../../../target/arm/helper.c" 3 4
             ,
# 5973 "../../../target/arm/helper.c"
             elr_el[3]
# 5973 "../../../target/arm/helper.c" 3 4
             )
# 5973 "../../../target/arm/helper.c"
    },
    {.name = "ESR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 5,
     .crm = 2,
     .opc2 = 0,
     .access = PL3_RW,
     .fieldoffset =
# 5976 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5976 "../../../target/arm/helper.c"
             CPUARMState
# 5976 "../../../target/arm/helper.c" 3 4
             ,
# 5976 "../../../target/arm/helper.c"
             cp15.esr_el[3]
# 5976 "../../../target/arm/helper.c" 3 4
             )
# 5976 "../../../target/arm/helper.c"
    },
    {.name = "FAR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 6,
     .crm = 0,
     .opc2 = 0,
     .access = PL3_RW,
     .fieldoffset =
# 5979 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5979 "../../../target/arm/helper.c"
             CPUARMState
# 5979 "../../../target/arm/helper.c" 3 4
             ,
# 5979 "../../../target/arm/helper.c"
             cp15.far_el[3]
# 5979 "../../../target/arm/helper.c" 3 4
             )
# 5979 "../../../target/arm/helper.c"
    },
    {.name = "SPSR_EL3",
     .state = ARM_CP_STATE_AA64,
     .type = ARM_CP_ALIAS,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 4,
     .crm = 0,
     .opc2 = 0,
     .access = PL3_RW,
     .fieldoffset =
# 5984 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5984 "../../../target/arm/helper.c"
             CPUARMState
# 5984 "../../../target/arm/helper.c" 3 4
             ,
# 5984 "../../../target/arm/helper.c"
             banked_spsr[7]
# 5984 "../../../target/arm/helper.c" 3 4
             )
# 5984 "../../../target/arm/helper.c"
    },
    {.name = "VBAR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 12,
     .crm = 0,
     .opc2 = 0,
     .access = PL3_RW,
     .writefn = vbar_write,
     .fieldoffset =
# 5988 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5988 "../../../target/arm/helper.c"
             CPUARMState
# 5988 "../../../target/arm/helper.c" 3 4
             ,
# 5988 "../../../target/arm/helper.c"
             cp15.vbar_el[3]
# 5988 "../../../target/arm/helper.c" 3 4
             )
# 5988 "../../../target/arm/helper.c"
         ,
     .resetvalue = 0},
    {.name = "CPTR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 1,
     .crm = 1,
     .opc2 = 2,
     .access = PL3_RW,
     .accessfn = cptr_access,
     .resetvalue = 0,
     .fieldoffset =
# 5993 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5993 "../../../target/arm/helper.c"
             CPUARMState
# 5993 "../../../target/arm/helper.c" 3 4
             ,
# 5993 "../../../target/arm/helper.c"
             cp15.cptr_el[3]
# 5993 "../../../target/arm/helper.c" 3 4
             )
# 5993 "../../../target/arm/helper.c"
    },
    {.name = "TPIDR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 13,
     .crm = 0,
     .opc2 = 2,
     .access = PL3_RW,
     .resetvalue = 0,
     .fieldoffset =
# 5997 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 5997 "../../../target/arm/helper.c"
             CPUARMState
# 5997 "../../../target/arm/helper.c" 3 4
             ,
# 5997 "../../../target/arm/helper.c"
             cp15.tpidr_el[3]
# 5997 "../../../target/arm/helper.c" 3 4
             )
# 5997 "../../../target/arm/helper.c"
    },
    {.name = "AMAIR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 10,
     .crm = 3,
     .opc2 = 0,
     .access = PL3_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "AFSR0_EL3",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 5,
     .crm = 1,
     .opc2 = 0,
     .access = PL3_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "AFSR1_EL3",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 5,
     .crm = 1,
     .opc2 = 1,
     .access = PL3_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
};
# 6282 "../../../target/arm/helper.c"
static CPAccessResult ctr_el0_access(CPUARMState *env, const ARMCPRegInfo *ri,

# 6283 "../../../target/arm/helper.c" 3 4
                                     _Bool
# 6283 "../../../target/arm/helper.c"
                                         isread) {
  int cur_el = arm_current_el(env);

  if (cur_el < 2) {
    uint64_t hcr = arm_hcr_el2_eff(env);

    if (cur_el == 0) {
      if ((hcr & ((1ULL << 34) | (1ULL << 27))) ==
          ((1ULL << 34) | (1ULL << 27))) {
        if (!(env->cp15.sctlr_el[2] & (1U << 15))) {
          return CP_ACCESS_TRAP_EL2;
        }
      } else {
        if (!(env->cp15.sctlr_el[1] & (1U << 15))) {
          return CP_ACCESS_TRAP_EL1;
        }
        if (hcr & (1ULL << 17)) {
          return CP_ACCESS_TRAP_EL2;
        }
      }
    } else if (hcr & (1ULL << 17)) {
      return CP_ACCESS_TRAP_EL2;
    }
  }

  if (arm_current_el(env) < 2 && arm_hcr_el2_eff(env) & (1ULL << 17)) {
    return CP_ACCESS_TRAP_EL2;
  }

  return CP_ACCESS_OK;
}

static CPAccessResult access_terr(CPUARMState *env, const ARMCPRegInfo *ri,

# 6320 "../../../target/arm/helper.c" 3 4
                                  _Bool
# 6320 "../../../target/arm/helper.c"
                                      isread) {
  int el = arm_current_el(env);

  if (el < 2 && (arm_hcr_el2_eff(env) & (1ULL << 36))) {
    return CP_ACCESS_TRAP_EL2;
  }
  if (!arm_is_el3_or_mon(env) && (env->cp15.scr_el3 & (1ULL << 15))) {
    return CP_ACCESS_TRAP_EL3;
  }
  return CP_ACCESS_OK;
}

static uint64_t disr_read(CPUARMState *env, const ARMCPRegInfo *ri) {
  int el = arm_current_el(env);

  if (el < 2 && (arm_hcr_el2_eff(env) & (1ULL << 5))) {
    return env->cp15.vdisr_el2;
  }
  if (el < 3 && (env->cp15.scr_el3 & (1ULL << 3))) {
    return 0;
  }
  return env->cp15.disr_el1;
}

static void disr_write(CPUARMState *env, const ARMCPRegInfo *ri, uint64_t val) {
  int el = arm_current_el(env);

  if (el < 2 && (arm_hcr_el2_eff(env) & (1ULL << 5))) {
    env->cp15.vdisr_el2 = val;
    return;
  }
  if (el < 3 && (env->cp15.scr_el3 & (1ULL << 3))) {
    return;
  }
  env->cp15.disr_el1 = val;
}
# 6383 "../../../target/arm/helper.c"
static const ARMCPRegInfo minimal_ras_reginfo[] = {
    {.name = "DISR_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 12,
     .crm = 1,
     .opc2 = 1,
     .access = PL1_RW,
     .fieldoffset =
# 6386 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6386 "../../../target/arm/helper.c"
             CPUARMState
# 6386 "../../../target/arm/helper.c" 3 4
             ,
# 6386 "../../../target/arm/helper.c"
             cp15.disr_el1
# 6386 "../../../target/arm/helper.c" 3 4
             )
# 6386 "../../../target/arm/helper.c"
         ,
     .readfn = disr_read,
     .writefn = disr_write,
     .raw_writefn = raw_write},
    {.name = "ERRIDR_EL1",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 5,
     .crm = 3,
     .opc2 = 0,
     .access = PL1_R,
     .accessfn = access_terr,
     .fgt = FGT_ERRIDR_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "VDISR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 12,
     .crm = 1,
     .opc2 = 1,
     .nv2_redirect_offset = 0x500,
     .access = PL2_RW,
     .fieldoffset =
# 6396 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6396 "../../../target/arm/helper.c"
             CPUARMState
# 6396 "../../../target/arm/helper.c" 3 4
             ,
# 6396 "../../../target/arm/helper.c"
             cp15.vdisr_el2
# 6396 "../../../target/arm/helper.c" 3 4
             )
# 6396 "../../../target/arm/helper.c"
    },
    {.name = "VSESR_EL2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 5,
     .crm = 2,
     .opc2 = 3,
     .nv2_redirect_offset = 0x508,
     .access = PL2_RW,
     .fieldoffset =
# 6400 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6400 "../../../target/arm/helper.c"
             CPUARMState
# 6400 "../../../target/arm/helper.c" 3 4
             ,
# 6400 "../../../target/arm/helper.c"
             cp15.vsesr_el2
# 6400 "../../../target/arm/helper.c" 3 4
             )
# 6400 "../../../target/arm/helper.c"
    },
};
# 6413 "../../../target/arm/helper.c"
int sve_exception_el(CPUARMState *env, int el) {
# 6455 "../../../target/arm/helper.c"
  return 0;
}

int sme_exception_el(CPUARMState *env, int el) {
# 6504 "../../../target/arm/helper.c"
  return 0;
}

uint32_t sve_vqm1_for_el_sm(CPUARMState *env, int el,
# 6510 "../../../target/arm/helper.c" 3 4
                            _Bool
# 6510 "../../../target/arm/helper.c"
                                sm) {
  ARMCPU *cpu = env_archcpu(env);
  uint64_t *cr = env->vfp.zcr_el;
  uint32_t map = cpu->sve_vq.map;
  uint32_t len = 1 - 1;

  if (sm) {
    cr = env->vfp.smcr_el;
    map = cpu->sme_vq.map;
  }

  if (el <= 1 && !el_is_in_host(env, el)) {
    len = ({
      typeof(1 ? ((len))
               : ((0xf & (uint32_t)cr[1]))) _a4 = ((len)),
                                            _b5 = ((0xf & (uint32_t)cr[1]));
      _a4 < _b5 ? _a4 : _b5;
    });
  }
  if (el <= 2 && arm_is_el2_enabled(env)) {
    len = ({
      typeof(1 ? ((len))
               : ((0xf & (uint32_t)cr[2]))) _a6 = ((len)),
                                            _b7 = ((0xf & (uint32_t)cr[2]));
      _a6 < _b7 ? _a6 : _b7;
    });
  }
  if (arm_feature(env, ARM_FEATURE_EL3)) {
    len = ({
      typeof(1 ? ((len))
               : ((0xf & (uint32_t)cr[3]))) _a8 = ((len)),
                                            _b9 = ((0xf & (uint32_t)cr[3]));
      _a8 < _b9 ? _a8 : _b9;
    });
  }

  map &= (((~0ULL) >> (64 - (len + 1))) << (0));
  if (map != 0) {
    return 31 - clz32(map);
  }

# 6538 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 6538 "../../../target/arm/helper.c"
                    sm
# 6538 "../../../target/arm/helper.c" 3 4
                    )
                    ? 1
                    : 0),
   __extension__({
     if (
# 6538 "../../../target/arm/helper.c"
         sm
# 6538 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 6538 "../../../target/arm/helper.c"
           "sm"
# 6538 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 6538,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 6538 "../../../target/arm/helper.c"
      ;
  return ctz32(cpu->sme_vq.map);
}

uint32_t sve_vqm1_for_el(CPUARMState *env, int el) {
  return sve_vqm1_for_el_sm(
      env, el, extract64((env->svcr), R_SVCR_SM_SHIFT, R_SVCR_SM_LENGTH));
}

static void zcr_write(CPUARMState *env, const ARMCPRegInfo *ri,
                      uint64_t value) {
  int cur_el = arm_current_el(env);
  int old_len = sve_vqm1_for_el(env, cur_el);
  int new_len;

  _Static_assert(!(1 > 16), "not expecting: "
                            "ARM_MAX_VQ > 16");
  raw_write(env, ri, value & 0xf);

  new_len = sve_vqm1_for_el(env, cur_el);
  if (new_len < old_len) {
    aarch64_sve_narrow_vq(env, new_len + 1);
  }
}

static const ARMCPRegInfo zcr_reginfo[] = {
    {.name = "ZCR_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 1,
     .crm = 2,
     .opc2 = 0,
     .nv2_redirect_offset = 0x1e0 | 0x4000,
     .access = PL1_RW,
     .type = ARM_CP_SVE,
     .fieldoffset =
# 6573 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6573 "../../../target/arm/helper.c"
             CPUARMState
# 6573 "../../../target/arm/helper.c" 3 4
             ,
# 6573 "../../../target/arm/helper.c"
             vfp.zcr_el[1]
# 6573 "../../../target/arm/helper.c" 3 4
             )
# 6573 "../../../target/arm/helper.c"
         ,
     .writefn = zcr_write,
     .raw_writefn = raw_write},
    {.name = "ZCR_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 1,
     .crm = 2,
     .opc2 = 0,
     .access = PL2_RW,
     .type = ARM_CP_SVE,
     .fieldoffset =
# 6578 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6578 "../../../target/arm/helper.c"
             CPUARMState
# 6578 "../../../target/arm/helper.c" 3 4
             ,
# 6578 "../../../target/arm/helper.c"
             vfp.zcr_el[2]
# 6578 "../../../target/arm/helper.c" 3 4
             )
# 6578 "../../../target/arm/helper.c"
         ,
     .writefn = zcr_write,
     .raw_writefn = raw_write},
    {.name = "ZCR_EL3",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 6,
     .crn = 1,
     .crm = 2,
     .opc2 = 0,
     .access = PL3_RW,
     .type = ARM_CP_SVE,
     .fieldoffset =
# 6583 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 6583 "../../../target/arm/helper.c"
             CPUARMState
# 6583 "../../../target/arm/helper.c" 3 4
             ,
# 6583 "../../../target/arm/helper.c"
             vfp.zcr_el[3]
# 6583 "../../../target/arm/helper.c" 3 4
             )
# 6583 "../../../target/arm/helper.c"
         ,
     .writefn = zcr_write,
     .raw_writefn = raw_write},
};
# 6823 "../../../target/arm/helper.c"
static void define_pmu_regs(ARMCPU *cpu) {

  unsigned int i, pmcrn = pmu_num_counters(&cpu->env);
  ARMCPRegInfo pmcr = {
      .name = "PMCR",
      .cp = 15,
      .crn = 9,
      .crm = 12,
      .opc1 = 0,
      .opc2 = 0,
      .access = PL0_RW,
      .fgt = FGT_PMCR_EL0,
      .type = ARM_CP_IO | ARM_CP_ALIAS,
      .fieldoffset =
# 6836 "../../../target/arm/helper.c" 3 4
          __builtin_offsetof(
# 6836 "../../../target/arm/helper.c"
              CPUARMState
# 6836 "../../../target/arm/helper.c" 3 4
              ,
# 6836 "../../../target/arm/helper.c"
              cp15.c9_pmcr
# 6836 "../../../target/arm/helper.c" 3 4
              )
# 6836 "../../../target/arm/helper.c"
          ,
      .accessfn = pmreg_access,
      .readfn = pmcr_read,
      .raw_readfn = raw_read,
      .writefn = pmcr_write,
      .raw_writefn = raw_write,
  };
  ARMCPRegInfo pmcr64 = {
      .name = "PMCR_EL0",
      .state = ARM_CP_STATE_AA64,
      .opc0 = 3,
      .opc1 = 3,
      .crn = 9,
      .crm = 12,
      .opc2 = 0,
      .access = PL0_RW,
      .accessfn = pmreg_access,
      .fgt = FGT_PMCR_EL0,
      .type = ARM_CP_IO,
      .fieldoffset =
# 6847 "../../../target/arm/helper.c" 3 4
          __builtin_offsetof(
# 6847 "../../../target/arm/helper.c"
              CPUARMState
# 6847 "../../../target/arm/helper.c" 3 4
              ,
# 6847 "../../../target/arm/helper.c"
              cp15.c9_pmcr
# 6847 "../../../target/arm/helper.c" 3 4
              )
# 6847 "../../../target/arm/helper.c"
          ,
      .resetvalue = cpu->isar.reset_pmcr_el0,
      .readfn = pmcr_read,
      .raw_readfn = raw_read,
      .writefn = pmcr_write,
      .raw_writefn = raw_write,
  };

  define_one_arm_cp_reg(cpu, &pmcr);
  define_one_arm_cp_reg(cpu, &pmcr64);
  for (i = 0; i < pmcrn; i++) {
    char *pmevcntr_name = g_strdup_printf("PMEVCNTR%d", i);
    char *pmevcntr_el0_name = g_strdup_printf("PMEVCNTR%d_EL0", i);
    char *pmevtyper_name = g_strdup_printf("PMEVTYPER%d", i);
    char *pmevtyper_el0_name = g_strdup_printf("PMEVTYPER%d_EL0", i);
    ARMCPRegInfo pmev_regs[] = {
        {.name = pmevcntr_name,
         .cp = 15,
         .crn = 14,
         .crm = 8 | (3 & (i >> 3)),
         .opc1 = 0,
         .opc2 = i & 7,
         .access = PL0_RW,
         .type = ARM_CP_IO | ARM_CP_ALIAS,
         .fgt = FGT_PMEVCNTRN_EL0,
         .readfn = pmevcntr_readfn,
         .writefn = pmevcntr_writefn,
         .accessfn = pmreg_access_xevcntr},
        {.name = pmevcntr_el0_name,
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 3,
         .crn = 14,
         .crm = 8 | (3 & (i >> 3)),
         .opc2 = i & 7,
         .access = PL0_RW,
         .accessfn = pmreg_access_xevcntr,
         .type = ARM_CP_IO,
         .fgt = FGT_PMEVCNTRN_EL0,
         .readfn = pmevcntr_readfn,
         .writefn = pmevcntr_writefn,
         .raw_readfn = pmevcntr_rawread,
         .raw_writefn = pmevcntr_rawwrite},
        {.name = pmevtyper_name,
         .cp = 15,
         .crn = 14,
         .crm = 12 | (3 & (i >> 3)),
         .opc1 = 0,
         .opc2 = i & 7,
         .access = PL0_RW,
         .type = ARM_CP_IO | ARM_CP_ALIAS,
         .fgt = FGT_PMEVTYPERN_EL0,
         .readfn = pmevtyper_readfn,
         .writefn = pmevtyper_writefn,
         .accessfn = pmreg_access},
        {.name = pmevtyper_el0_name,
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 3,
         .crn = 14,
         .crm = 12 | (3 & (i >> 3)),
         .opc2 = i & 7,
         .access = PL0_RW,
         .accessfn = pmreg_access,
         .fgt = FGT_PMEVTYPERN_EL0,
         .type = ARM_CP_IO,
         .readfn = pmevtyper_readfn,
         .writefn = pmevtyper_writefn,
         .raw_writefn = pmevtyper_rawwrite},
    };
    do {
      _Static_assert(
          !(((sizeof(pmev_regs) / sizeof((pmev_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmev_regs), typeof(&(pmev_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmev_regs), typeof(&(pmev_regs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(pmev_regs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, pmev_regs,
# 6889 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 6889 "../../../target/arm/helper.c"
              ,
          ((sizeof(pmev_regs) / sizeof((pmev_regs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(pmev_regs),
                                                     typeof(&(pmev_regs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(pmev_regs),
                                                     typeof(&(pmev_regs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    g_free(pmevcntr_name);
    g_free(pmevcntr_el0_name);
    g_free(pmevtyper_name);
    g_free(pmevtyper_el0_name);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa32_pmuv3p1(&cpu_->isar);
      })) {
    ARMCPRegInfo v81_pmu_regs[] = {
        {.name = "PMCEID2",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 9,
         .crm = 14,
         .opc2 = 4,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = extract64(cpu->pmceid0, 32, 32)},
        {.name = "PMCEID3",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 9,
         .crm = 14,
         .opc2 = 5,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = extract64(cpu->pmceid1, 32, 32)},
    };
    do {
      _Static_assert(
          !(((sizeof(v81_pmu_regs) / sizeof((v81_pmu_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v81_pmu_regs), typeof(&(v81_pmu_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v81_pmu_regs), typeof(&(v81_pmu_regs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v81_pmu_regs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v81_pmu_regs,
# 6908 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 6908 "../../../target/arm/helper.c"
              ,
          ((sizeof(v81_pmu_regs) / sizeof((v81_pmu_regs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v81_pmu_regs), typeof(&(v81_pmu_regs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v81_pmu_regs), typeof(&(v81_pmu_regs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_any_pmuv3p4(&cpu_->isar);
      })) {
    static const ARMCPRegInfo v84_pmmir = {.name = "PMMIR_EL1",
                                           .state = ARM_CP_STATE_BOTH,
                                           .opc0 = 3,
                                           .opc1 = 0,
                                           .crn = 9,
                                           .crm = 14,
                                           .opc2 = 6,
                                           .access = PL1_R,
                                           .accessfn = pmreg_access,
                                           .type = ARM_CP_CONST,
                                           .fgt = FGT_PMMIR_EL1,
                                           .resetvalue = 0};
    define_one_arm_cp_reg(cpu, &v84_pmmir);
  }
}
# 6956 "../../../target/arm/helper.c"
static CPAccessResult access_lor_ns(CPUARMState *env, const ARMCPRegInfo *ri,
# 6957 "../../../target/arm/helper.c" 3 4
                                    _Bool
# 6957 "../../../target/arm/helper.c"
                                        isread) {
  int el = arm_current_el(env);

  if (el < 2 && (arm_hcr_el2_eff(env) & (1ULL << 35))) {
    return CP_ACCESS_TRAP_EL2;
  }
  if (el < 3 && (env->cp15.scr_el3 & (1ULL << 14))) {
    return CP_ACCESS_TRAP_EL3;
  }
  return CP_ACCESS_OK;
}

static CPAccessResult access_lor_other(CPUARMState *env, const ARMCPRegInfo *ri,
# 6971 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 6971 "../../../target/arm/helper.c"
                                           isread) {
  if (arm_is_secure_below_el3(env)) {

    return CP_ACCESS_UNDEFINED;
  }
  return access_lor_ns(env, ri, isread);
}

static const ARMCPRegInfo lor_reginfo[] = {
    {.name = "LORSA_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 4,
     .opc2 = 0,
     .access = PL1_RW,
     .accessfn = access_lor_other,
     .fgt = FGT_LORSA_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "LOREA_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 4,
     .opc2 = 1,
     .access = PL1_RW,
     .accessfn = access_lor_other,
     .fgt = FGT_LOREA_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "LORN_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 4,
     .opc2 = 2,
     .access = PL1_RW,
     .accessfn = access_lor_other,
     .fgt = FGT_LORN_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "LORC_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 4,
     .opc2 = 3,
     .access = PL1_RW,
     .accessfn = access_lor_other,
     .fgt = FGT_LORC_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "LORID_EL1",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 0,
     .crn = 10,
     .crm = 4,
     .opc2 = 7,
     .access = PL1_R,
     .accessfn = access_lor_ns,
     .fgt = FGT_LORID_EL1,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
};
# 7508 "../../../target/arm/helper.c"
static CPAccessResult access_predinv(CPUARMState *env, const ARMCPRegInfo *ri,

# 7509 "../../../target/arm/helper.c" 3 4
                                     _Bool
# 7509 "../../../target/arm/helper.c"
                                         isread) {
  int el = arm_current_el(env);

  if (el == 0) {
    uint64_t sctlr = arm_sctlr(env, el);
    if (!(sctlr & (1U << 10))) {
      return CP_ACCESS_TRAP_EL1;
    }
  } else if (el == 1) {
    uint64_t hcr = arm_hcr_el2_eff(env);
    if (hcr & (1ULL << 42)) {
      return CP_ACCESS_TRAP_EL2;
    }
  }
  return CP_ACCESS_OK;
}

static const ARMCPRegInfo predinv_reginfo[] = {
    {.name = "CFP_RCTX",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 3,
     .opc2 = 4,
     .fgt = FGT_CFPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},
    {.name = "DVP_RCTX",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 3,
     .opc2 = 5,
     .fgt = FGT_DVPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},
    {.name = "CPP_RCTX",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 1,
     .opc1 = 3,
     .crn = 7,
     .crm = 3,
     .opc2 = 7,
     .fgt = FGT_CPPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},

    {.name = "CFPRCTX",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 3,
     .opc2 = 4,
     .fgt = FGT_CFPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},
    {.name = "DVPRCTX",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 3,
     .opc2 = 5,
     .fgt = FGT_DVPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},
    {.name = "CPPRCTX",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 7,
     .crm = 3,
     .opc2 = 7,
     .fgt = FGT_CPPRCTX,
     .type = ARM_CP_NOP,
     .access = PL0_W,
     .accessfn = access_predinv},
};

static uint64_t ccsidr2_read(CPUARMState *env, const ARMCPRegInfo *ri) {

  return extract64(ccsidr_read(env, ri), 32, 32);
}

static const ARMCPRegInfo ccsidr2_reginfo[] = {
    {.name = "CCSIDR2",
     .state = ARM_CP_STATE_BOTH,
     .opc0 = 3,
     .opc1 = 1,
     .crn = 0,
     .crm = 0,
     .opc2 = 2,
     .access = PL1_R,
     .accessfn = access_tid4,
     .readfn = ccsidr2_read,
     .type = ARM_CP_NO_RAW},
};

static CPAccessResult access_aa64_tid3(CPUARMState *env, const ARMCPRegInfo *ri,

# 7572 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 7572 "../../../target/arm/helper.c"
                                           isread) {
  if ((arm_current_el(env) < 2) && (arm_hcr_el2_eff(env) & (1ULL << 18))) {
    return CP_ACCESS_TRAP_EL2;
  }

  return CP_ACCESS_OK;
}

static CPAccessResult access_aa32_tid3(CPUARMState *env, const ARMCPRegInfo *ri,

# 7582 "../../../target/arm/helper.c" 3 4
                                       _Bool
# 7582 "../../../target/arm/helper.c"
                                           isread) {
  if (arm_feature(env, ARM_FEATURE_V8)) {
    return access_aa64_tid3(env, ri, isread);
  }

  return CP_ACCESS_OK;
}

static CPAccessResult access_jazelle(CPUARMState *env, const ARMCPRegInfo *ri,

# 7592 "../../../target/arm/helper.c" 3 4
                                     _Bool
# 7592 "../../../target/arm/helper.c"
                                         isread) {
  if (arm_current_el(env) == 1 && (arm_hcr_el2_eff(env) & (1ULL << 15))) {
    return CP_ACCESS_TRAP_EL2;
  }

  return CP_ACCESS_OK;
}

static CPAccessResult access_joscr_jmcr(CPUARMState *env,
                                        const ARMCPRegInfo *ri,
# 7602 "../../../target/arm/helper.c" 3 4
                                        _Bool
# 7602 "../../../target/arm/helper.c"
                                            isread) {

  if (!arm_feature(env, ARM_FEATURE_V8) && arm_current_el(env) < 2 &&
      !arm_is_secure_below_el3(env) && (env->cp15.hstr_el2 & (1 << 17))) {
    return CP_ACCESS_TRAP_EL2;
  }
  return CP_ACCESS_OK;
}

static const ARMCPRegInfo jazelle_regs[] = {
    {.name = "JIDR",
     .cp = 14,
     .crn = 0,
     .crm = 0,
     .opc1 = 7,
     .opc2 = 0,
     .access = PL1_R,
     .accessfn = access_jazelle,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "JOSCR",
     .cp = 14,
     .crn = 1,
     .crm = 0,
     .opc1 = 7,
     .opc2 = 0,
     .accessfn = access_joscr_jmcr,
     .access = PL1_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "JMCR",
     .cp = 14,
     .crn = 2,
     .crm = 0,
     .opc1 = 7,
     .opc2 = 0,
     .accessfn = access_joscr_jmcr,
     .access = PL1_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
};

static const ARMCPRegInfo contextidr_el2 = {.name = "CONTEXTIDR_EL2",
                                            .state = ARM_CP_STATE_AA64,
                                            .opc0 = 3,
                                            .opc1 = 4,
                                            .crn = 13,
                                            .crm = 0,
                                            .opc2 = 1,
                                            .access = PL2_RW,
                                            .fieldoffset =
# 7635 "../../../target/arm/helper.c" 3 4
                                                __builtin_offsetof(
# 7635 "../../../target/arm/helper.c"
                                                    CPUARMState
# 7635 "../../../target/arm/helper.c" 3 4
                                                    ,
# 7635 "../../../target/arm/helper.c"
                                                    cp15.contextidr_el[2]
# 7635 "../../../target/arm/helper.c" 3 4
                                                    )

# 7636 "../../../target/arm/helper.c"
};

static const ARMCPRegInfo vhe_reginfo[] = {
    {.name = "TTBR1_EL2",
     .state = ARM_CP_STATE_AA64,
     .opc0 = 3,
     .opc1 = 4,
     .crn = 2,
     .crm = 0,
     .opc2 = 1,
     .access = PL2_RW,
     .writefn = vmsa_tcr_ttbr_el2_write,
     .raw_writefn = raw_write,
     .fieldoffset =
# 7643 "../../../target/arm/helper.c" 3 4
         __builtin_offsetof(
# 7643 "../../../target/arm/helper.c"
             CPUARMState
# 7643 "../../../target/arm/helper.c" 3 4
             ,
# 7643 "../../../target/arm/helper.c"
             cp15.ttbr1_el[2]
# 7643 "../../../target/arm/helper.c" 3 4
             )
# 7643 "../../../target/arm/helper.c"
    },
# 7701 "../../../target/arm/helper.c"
};
# 7738 "../../../target/arm/helper.c"
static const ARMCPRegInfo actlr2_hactlr2_reginfo[] = {
    {.name = "ACTLR2",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 0,
     .crn = 1,
     .crm = 0,
     .opc2 = 3,
     .access = PL1_RW,
     .accessfn = access_tacr,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
    {.name = "HACTLR2",
     .state = ARM_CP_STATE_AA32,
     .cp = 15,
     .opc1 = 4,
     .crn = 1,
     .crm = 0,
     .opc2 = 3,
     .access = PL2_RW,
     .type = ARM_CP_CONST,
     .resetvalue = 0},
};

void register_cp_regs_for_features(ARMCPU *cpu) {

  CPUARMState *env = &cpu->env;
  if (arm_feature(env, ARM_FEATURE_M)) {

    return;
  }

  do {
    _Static_assert(
        !(((sizeof(cp_reginfo) / sizeof((cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(cp_reginfo),
                                                     typeof(&(cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(cp_reginfo),
                                                     typeof(&(cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))) == 0),
        "not expecting: "
        "ARRAY_SIZE(cp_reginfo) == 0");
    define_arm_cp_regs_with_opaque_len(
        cpu, cp_reginfo,
# 7758 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 7758 "../../../target/arm/helper.c"
            ,
        ((sizeof(cp_reginfo) / sizeof((cp_reginfo)[0])) +
         (sizeof(struct {
            int : (!(!__builtin_types_compatible_p(typeof(cp_reginfo),
                                                   typeof(&(cp_reginfo)[0]))))
                  ? -1
                  : 1;
          }) -
          sizeof(struct {
            int : (!(!__builtin_types_compatible_p(typeof(cp_reginfo),
                                                   typeof(&(cp_reginfo)[0]))))
                  ? -1
                  : 1;
          }))));
  } while (0);
  if (!arm_feature(env, ARM_FEATURE_V8)) {

    do {
      _Static_assert(
          !(((sizeof(not_v8_cp_reginfo) / sizeof((not_v8_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v8_cp_reginfo),
                          typeof(&(not_v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v8_cp_reginfo),
                          typeof(&(not_v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(not_v8_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, not_v8_cp_reginfo,
# 7764 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7764 "../../../target/arm/helper.c"
              ,
          ((sizeof(not_v8_cp_reginfo) / sizeof((not_v8_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v8_cp_reginfo),
                        typeof(&(not_v8_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v8_cp_reginfo),
                        typeof(&(not_v8_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  define_tlb_insn_regs(cpu);

  if (arm_feature(env, ARM_FEATURE_V6)) {

    ARMCPRegInfo v6_idregs[] = {
        {.name = "ID_PFR0",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_pfr0},

        {
            .name = "ID_PFR1",
            .state = ARM_CP_STATE_BOTH,
            .opc0 = 3,
            .opc1 = 0,
            .crn = 0,
            .crm = 1,
            .opc2 = 1,
            .access = PL1_R,
            .type = ARM_CP_NO_RAW,
            .accessfn = access_aa32_tid3,

            .type = ARM_CP_CONST,
            .resetvalue = cpu->isar.id_pfr1,

        },
        {.name = "ID_DFR0",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_dfr0},
        {.name = "ID_AFR0",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->id_afr0},
        {.name = "ID_MMFR0",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_mmfr0},
        {.name = "ID_MMFR1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_mmfr1},
        {.name = "ID_MMFR2",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_mmfr2},
        {.name = "ID_MMFR3",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 1,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_mmfr3},
        {.name = "ID_ISAR0",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar0},
        {.name = "ID_ISAR1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar1},
        {.name = "ID_ISAR2",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar2},
        {.name = "ID_ISAR3",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar3},
        {.name = "ID_ISAR4",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar4},
        {.name = "ID_ISAR5",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar5},
        {.name = "ID_MMFR4",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_mmfr4},
        {.name = "ID_ISAR6",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 2,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa32_tid3,
         .resetvalue = cpu->isar.id_isar6},
    };
    do {
      _Static_assert(
          !(((sizeof(v6_idregs) / sizeof((v6_idregs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v6_idregs), typeof(&(v6_idregs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v6_idregs), typeof(&(v6_idregs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v6_idregs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v6_idregs,
# 7866 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7866 "../../../target/arm/helper.c"
              ,
          ((sizeof(v6_idregs) / sizeof((v6_idregs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v6_idregs),
                                                     typeof(&(v6_idregs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v6_idregs),
                                                     typeof(&(v6_idregs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    do {
      _Static_assert(
          !(((sizeof(v6_cp_reginfo) / sizeof((v6_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v6_cp_reginfo), typeof(&(v6_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v6_cp_reginfo), typeof(&(v6_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v6_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v6_cp_reginfo,
# 7867 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7867 "../../../target/arm/helper.c"
              ,
          ((sizeof(v6_cp_reginfo) / sizeof((v6_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v6_cp_reginfo), typeof(&(v6_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v6_cp_reginfo), typeof(&(v6_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  } else {
    do {
      _Static_assert(
          !(((sizeof(not_v6_cp_reginfo) / sizeof((not_v6_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v6_cp_reginfo),
                          typeof(&(not_v6_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v6_cp_reginfo),
                          typeof(&(not_v6_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(not_v6_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, not_v6_cp_reginfo,
# 7869 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7869 "../../../target/arm/helper.c"
              ,
          ((sizeof(not_v6_cp_reginfo) / sizeof((not_v6_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v6_cp_reginfo),
                        typeof(&(not_v6_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v6_cp_reginfo),
                        typeof(&(not_v6_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_V6K)) {
    do {
      _Static_assert(!(((sizeof(v6k_cp_reginfo) / sizeof((v6k_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(v6k_cp_reginfo),
                                     typeof(&(v6k_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(v6k_cp_reginfo),
                                     typeof(&(v6k_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(v6k_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v6k_cp_reginfo,
# 7872 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7872 "../../../target/arm/helper.c"
              ,
          ((sizeof(v6k_cp_reginfo) / sizeof((v6k_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v6k_cp_reginfo), typeof(&(v6k_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v6k_cp_reginfo), typeof(&(v6k_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_V7VE)) {
    do {
      _Static_assert(
          !(((sizeof(pmovsset_cp_reginfo) / sizeof((pmovsset_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmovsset_cp_reginfo),
                          typeof(&(pmovsset_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmovsset_cp_reginfo),
                          typeof(&(pmovsset_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(pmovsset_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, pmovsset_cp_reginfo,
# 7875 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7875 "../../../target/arm/helper.c"
              ,
          ((sizeof(pmovsset_cp_reginfo) / sizeof((pmovsset_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(pmovsset_cp_reginfo),
                        typeof(&(pmovsset_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(pmovsset_cp_reginfo),
                        typeof(&(pmovsset_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_V7)) {
    ARMCPRegInfo clidr = {.name = "CLIDR",
                          .state = ARM_CP_STATE_BOTH,
                          .opc0 = 3,
                          .crn = 0,
                          .crm = 0,
                          .opc1 = 1,
                          .opc2 = 1,
                          .access = PL1_R,
                          .type = ARM_CP_CONST,
                          .accessfn = access_tid4,
                          .fgt = FGT_CLIDR_EL1,
                          .resetvalue = cpu->clidr};
    define_one_arm_cp_reg(cpu, &clidr);
    do {
      _Static_assert(
          !(((sizeof(v7_cp_reginfo) / sizeof((v7_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v7_cp_reginfo), typeof(&(v7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v7_cp_reginfo), typeof(&(v7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v7_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v7_cp_reginfo,
# 7887 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7887 "../../../target/arm/helper.c"
              ,
          ((sizeof(v7_cp_reginfo) / sizeof((v7_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v7_cp_reginfo), typeof(&(v7_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v7_cp_reginfo), typeof(&(v7_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    define_debug_regs(cpu);
    define_pmu_regs(cpu);
  } else {
    do {
      _Static_assert(
          !(((sizeof(not_v7_cp_reginfo) / sizeof((not_v7_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v7_cp_reginfo),
                          typeof(&(not_v7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(not_v7_cp_reginfo),
                          typeof(&(not_v7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(not_v7_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, not_v7_cp_reginfo,
# 7891 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 7891 "../../../target/arm/helper.c"
              ,
          ((sizeof(not_v7_cp_reginfo) / sizeof((not_v7_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v7_cp_reginfo),
                        typeof(&(not_v7_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(not_v7_cp_reginfo),
                        typeof(&(not_v7_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_V8)) {
# 7903 "../../../target/arm/helper.c"
    int i;
    ARMCPRegInfo v8_idregs[] = {

        {.name = "ID_AA64PFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 0,
         .access = PL1_R,

         .type = ARM_CP_CONST,
         .resetvalue = cpu->isar.id_aa64pfr0

        },
        {.name = "ID_AA64PFR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64pfr1},
        {.name = "ID_AA64PFR2_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64PFR3_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ZFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64zfr0},
        {.name = "ID_AA64SMFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64smfr0},
        {.name = "ID_AA64PFR6_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64PFR7_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 4,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64DFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64dfr0},
        {.name = "ID_AA64DFR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64dfr1},
        {.name = "ID_AA64DFR2_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64DFR3_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64AFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->id_aa64afr0},
        {.name = "ID_AA64AFR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->id_aa64afr1},
        {.name = "ID_AA64AFR2_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64AFR3_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 5,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ISAR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64isar0},
        {.name = "ID_AA64ISAR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64isar1},
        {.name = "ID_AA64ISAR2_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64isar2},
        {.name = "ID_AA64ISAR3_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ISAR4_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ISAR5_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ISAR6_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64ISAR7_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 6,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64MMFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64mmfr0},
        {.name = "ID_AA64MMFR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64mmfr1},
        {.name = "ID_AA64MMFR2_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64mmfr2},
        {.name = "ID_AA64MMFR3_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_aa64mmfr3},
        {.name = "ID_AA64MMFR4_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64MMFR5_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64MMFR6_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_AA64MMFR7_EL1_RESERVED",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 7,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "MVFR0_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.mvfr0},
        {.name = "MVFR1_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.mvfr1},
        {.name = "MVFR2_EL1",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.mvfr2},

        {.name = "RES_0_C0_C3_0",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "RES_0_C0_C3_1",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 1,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "RES_0_C0_C3_2",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 2,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},

        {.name = "RES_0_C0_C3_3",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 3,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "ID_PFR2",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 4,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_pfr2},
        {.name = "ID_DFR1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 5,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_dfr1},
        {.name = "ID_MMFR5",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 6,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = cpu->isar.id_mmfr5},
        {.name = "RES_0_C0_C3_7",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 3,
         .opc2 = 7,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .accessfn = access_aa64_tid3,
         .resetvalue = 0},
        {.name = "PMCEID0",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 9,
         .crm = 12,
         .opc2 = 6,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = extract64(cpu->pmceid0, 0, 32)},
        {.name = "PMCEID0_EL0",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 3,
         .crn = 9,
         .crm = 12,
         .opc2 = 6,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = cpu->pmceid0},
        {.name = "PMCEID1",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 9,
         .crm = 12,
         .opc2 = 7,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = extract64(cpu->pmceid1, 0, 32)},
        {.name = "PMCEID1_EL0",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 3,
         .crn = 9,
         .crm = 12,
         .opc2 = 7,
         .access = PL0_R,
         .accessfn = pmreg_access,
         .type = ARM_CP_CONST,
         .fgt = FGT_PMCEIDN_EL0,
         .resetvalue = cpu->pmceid1},
    };

    static const ARMCPRegUserSpaceInfo v8_user_idregs[] = {
        {.name = "ID_AA64PFR0_EL1",
         .exported_bits = R_ID_AA64PFR0_FP_MASK | R_ID_AA64PFR0_ADVSIMD_MASK |
                          R_ID_AA64PFR0_SVE_MASK | R_ID_AA64PFR0_DIT_MASK,
         .fixed_bits = (0x1u << R_ID_AA64PFR0_EL0_SHIFT) |
                       (0x1u << R_ID_AA64PFR0_EL1_SHIFT)},
        {.name = "ID_AA64PFR1_EL1",
         .exported_bits = R_ID_AA64PFR1_BT_MASK | R_ID_AA64PFR1_SSBS_MASK |
                          R_ID_AA64PFR1_MTE_MASK | R_ID_AA64PFR1_SME_MASK},
        {.name = "ID_AA64PFR*_EL1_RESERVED",
         .is_glob =
# 8181 "../../../target/arm/helper.c" 3 4
             1
# 8181 "../../../target/arm/helper.c"
        },
        {.name = "ID_AA64ZFR0_EL1",
         .exported_bits = R_ID_AA64ZFR0_SVEVER_MASK | R_ID_AA64ZFR0_AES_MASK |
                          R_ID_AA64ZFR0_BITPERM_MASK |
                          R_ID_AA64ZFR0_BFLOAT16_MASK |
                          R_ID_AA64ZFR0_B16B16_MASK | R_ID_AA64ZFR0_SHA3_MASK |
                          R_ID_AA64ZFR0_SM4_MASK | R_ID_AA64ZFR0_I8MM_MASK |
                          R_ID_AA64ZFR0_F32MM_MASK | R_ID_AA64ZFR0_F64MM_MASK},
        {.name = "ID_AA64SMFR0_EL1",
         .exported_bits =
             R_ID_AA64SMFR0_F32F32_MASK | R_ID_AA64SMFR0_BI32I32_MASK |
             R_ID_AA64SMFR0_B16F32_MASK | R_ID_AA64SMFR0_F16F32_MASK |
             R_ID_AA64SMFR0_I8I32_MASK | R_ID_AA64SMFR0_F16F16_MASK |
             R_ID_AA64SMFR0_B16B16_MASK | R_ID_AA64SMFR0_I16I32_MASK |
             R_ID_AA64SMFR0_F64F64_MASK | R_ID_AA64SMFR0_I16I64_MASK |
             R_ID_AA64SMFR0_SMEVER_MASK | R_ID_AA64SMFR0_FA64_MASK},
        {.name = "ID_AA64MMFR0_EL1",
         .exported_bits = R_ID_AA64MMFR0_ECV_MASK,
         .fixed_bits = (0xfu << R_ID_AA64MMFR0_TGRAN64_SHIFT) |
                       (0xfu << R_ID_AA64MMFR0_TGRAN4_SHIFT)},
        {.name = "ID_AA64MMFR1_EL1", .exported_bits = R_ID_AA64MMFR1_AFP_MASK},
        {.name = "ID_AA64MMFR2_EL1", .exported_bits = R_ID_AA64MMFR2_AT_MASK},
        {.name = "ID_AA64MMFR3_EL1", .exported_bits = 0},
        {.name = "ID_AA64MMFR*_EL1_RESERVED",
         .is_glob =
# 8217 "../../../target/arm/helper.c" 3 4
             1
# 8217 "../../../target/arm/helper.c"
        },
        {.name = "ID_AA64DFR0_EL1",
         .fixed_bits = (0x6u << R_ID_AA64DFR0_DEBUGVER_SHIFT)},
        {.name = "ID_AA64DFR1_EL1"},
        {.name = "ID_AA64DFR*_EL1_RESERVED",
         .is_glob =
# 8222 "../../../target/arm/helper.c" 3 4
             1
# 8222 "../../../target/arm/helper.c"
        },
        {.name = "ID_AA64AFR*",
         .is_glob =
# 8224 "../../../target/arm/helper.c" 3 4
             1
# 8224 "../../../target/arm/helper.c"
        },
        {.name = "ID_AA64ISAR0_EL1",
         .exported_bits = R_ID_AA64ISAR0_AES_MASK | R_ID_AA64ISAR0_SHA1_MASK |
                          R_ID_AA64ISAR0_SHA2_MASK | R_ID_AA64ISAR0_CRC32_MASK |
                          R_ID_AA64ISAR0_ATOMIC_MASK | R_ID_AA64ISAR0_RDM_MASK |
                          R_ID_AA64ISAR0_SHA3_MASK | R_ID_AA64ISAR0_SM3_MASK |
                          R_ID_AA64ISAR0_SM4_MASK | R_ID_AA64ISAR0_DP_MASK |
                          R_ID_AA64ISAR0_FHM_MASK | R_ID_AA64ISAR0_TS_MASK |
                          R_ID_AA64ISAR0_RNDR_MASK},
        {.name = "ID_AA64ISAR1_EL1",
         .exported_bits = R_ID_AA64ISAR1_DPB_MASK | R_ID_AA64ISAR1_APA_MASK |
                          R_ID_AA64ISAR1_API_MASK | R_ID_AA64ISAR1_JSCVT_MASK |
                          R_ID_AA64ISAR1_FCMA_MASK | R_ID_AA64ISAR1_LRCPC_MASK |
                          R_ID_AA64ISAR1_GPA_MASK | R_ID_AA64ISAR1_GPI_MASK |
                          R_ID_AA64ISAR1_FRINTTS_MASK | R_ID_AA64ISAR1_SB_MASK |
                          R_ID_AA64ISAR1_BF16_MASK | R_ID_AA64ISAR1_DGH_MASK |
                          R_ID_AA64ISAR1_I8MM_MASK},
        {.name = "ID_AA64ISAR2_EL1",
         .exported_bits = R_ID_AA64ISAR2_WFXT_MASK | R_ID_AA64ISAR2_RPRES_MASK |
                          R_ID_AA64ISAR2_GPA3_MASK | R_ID_AA64ISAR2_APA3_MASK |
                          R_ID_AA64ISAR2_MOPS_MASK | R_ID_AA64ISAR2_BC_MASK |
                          R_ID_AA64ISAR2_RPRFM_MASK | R_ID_AA64ISAR2_CSSC_MASK},
        {.name = "ID_AA64ISAR*_EL1_RESERVED",
         .is_glob =
# 8263 "../../../target/arm/helper.c" 3 4
             1
# 8263 "../../../target/arm/helper.c"
        },
    };
    do {
      _Static_assert(
          !(((sizeof(v8_idregs) / sizeof((v8_idregs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_idregs), typeof(&(v8_idregs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_idregs), typeof(&(v8_idregs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v8_idregs) == 0");
      _Static_assert(!(((sizeof(v8_user_idregs) / sizeof((v8_user_idregs)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(v8_user_idregs),
                                     typeof(&(v8_user_idregs)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(v8_user_idregs),
                                     typeof(&(v8_user_idregs)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(v8_user_idregs) == 0");
      modify_arm_cp_regs_with_len(
          v8_idregs,
          ((sizeof(v8_idregs) / sizeof((v8_idregs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v8_idregs),
                                                     typeof(&(v8_idregs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v8_idregs),
                                                     typeof(&(v8_idregs)[0]))))
                    ? -1
                    : 1;
            }))),
          v8_user_idregs,
          ((sizeof(v8_user_idregs) / sizeof((v8_user_idregs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v8_user_idregs), typeof(&(v8_user_idregs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v8_user_idregs), typeof(&(v8_user_idregs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);

    if (!arm_feature(env, ARM_FEATURE_EL3) &&
        !arm_feature(env, ARM_FEATURE_EL2)) {
      ARMCPRegInfo el1_reset_regs[] = {
          {.name = "RVBAR_EL1",
           .state = ARM_CP_STATE_BOTH,
           .opc0 = 3,
           .opc1 = 0,
           .crn = 12,
           .crm = 0,
           .opc2 = 1,
           .access = PL1_R,
           .fieldoffset =
# 8279 "../../../target/arm/helper.c" 3 4
               __builtin_offsetof(
# 8279 "../../../target/arm/helper.c"
                   CPUARMState
# 8279 "../../../target/arm/helper.c" 3 4
                   ,
# 8279 "../../../target/arm/helper.c"
                   cp15.rvbar
# 8279 "../../../target/arm/helper.c" 3 4
                   )
# 8279 "../../../target/arm/helper.c"
          },
          {.name = "RMR_EL1",
           .state = ARM_CP_STATE_BOTH,
           .opc0 = 3,
           .opc1 = 0,
           .crn = 12,
           .crm = 0,
           .opc2 = 2,
           .access = PL1_RW,
           .type = ARM_CP_CONST,
           .resetvalue = arm_feature(env, ARM_FEATURE_AARCH64)}};
      do {
        _Static_assert(
            !(((sizeof(el1_reset_regs) / sizeof((el1_reset_regs)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el1_reset_regs),
                            typeof(&(el1_reset_regs)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el1_reset_regs),
                            typeof(&(el1_reset_regs)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(el1_reset_regs) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, el1_reset_regs,
# 8285 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8285 "../../../target/arm/helper.c"
                ,
            ((sizeof(el1_reset_regs) / sizeof((el1_reset_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el1_reset_regs),
                          typeof(&(el1_reset_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el1_reset_regs),
                          typeof(&(el1_reset_regs)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
    do {
      _Static_assert(
          !(((sizeof(v8_idregs) / sizeof((v8_idregs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_idregs), typeof(&(v8_idregs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_idregs), typeof(&(v8_idregs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v8_idregs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v8_idregs,
# 8287 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8287 "../../../target/arm/helper.c"
              ,
          ((sizeof(v8_idregs) / sizeof((v8_idregs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v8_idregs),
                                                     typeof(&(v8_idregs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(v8_idregs),
                                                     typeof(&(v8_idregs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    do {
      _Static_assert(
          !(((sizeof(v8_cp_reginfo) / sizeof((v8_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_cp_reginfo), typeof(&(v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_cp_reginfo), typeof(&(v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(v8_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, v8_cp_reginfo,
# 8288 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8288 "../../../target/arm/helper.c"
              ,
          ((sizeof(v8_cp_reginfo) / sizeof((v8_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v8_cp_reginfo), typeof(&(v8_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(v8_cp_reginfo), typeof(&(v8_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_aa32_el1(&cpu_->isar);
        })) {
      do {
        _Static_assert(!(((sizeof(v8_aa32_el1_reginfo) /
                           sizeof((v8_aa32_el1_reginfo)[0])) +
                          (sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(v8_aa32_el1_reginfo),
                                       typeof(&(v8_aa32_el1_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }) -
                           sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(v8_aa32_el1_reginfo),
                                       typeof(&(v8_aa32_el1_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }))) == 0),
                       "not expecting: "
                       "ARRAY_SIZE(v8_aa32_el1_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, v8_aa32_el1_reginfo,
# 8290 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8290 "../../../target/arm/helper.c"
                ,
            ((sizeof(v8_aa32_el1_reginfo) / sizeof((v8_aa32_el1_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_aa32_el1_reginfo),
                          typeof(&(v8_aa32_el1_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(v8_aa32_el1_reginfo),
                          typeof(&(v8_aa32_el1_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }

    for (i = 4; i < 16; i++) {
# 8305 "../../../target/arm/helper.c"
      __attribute__((cleanup(g_autoptr_cleanup_generic_gfree))) char *name =
          g_strdup_printf("RES_0_C0_C%d_X", i);
      ARMCPRegInfo v8_aa32_raz_idregs = {.name = name,
                                         .state = ARM_CP_STATE_AA32,
                                         .cp = 15,
                                         .opc1 = 0,
                                         .crn = 0,
                                         .crm = i,
                                         .opc2 = 0xff,
                                         .access = PL1_R,
                                         .type = ARM_CP_CONST,
                                         .accessfn = access_aa64_tid3,
                                         .resetvalue = 0};
      define_one_arm_cp_reg(cpu, &v8_aa32_raz_idregs);
    }
  }
# 8324 "../../../target/arm/helper.c"
  if (arm_feature(env, ARM_FEATURE_EL2) ||
      (arm_feature(env, ARM_FEATURE_EL3) && arm_feature(env, ARM_FEATURE_V8))) {
    uint64_t vmpidr_def = mpidr_read_val(env);
    ARMCPRegInfo vpidr_regs[] = {
        {.name = "VPIDR",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 4,
         .crn = 0,
         .crm = 0,
         .opc2 = 0,
         .access = PL2_RW,
         .accessfn = access_el3_aa32ns,
         .resetvalue = cpu->midr,
         .type = ARM_CP_ALIAS | ARM_CP_EL3_NO_EL2_C_NZ,
         .fieldoffset =
# 8334 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8334 "../../../target/arm/helper.c"
                 CPUARMState
# 8334 "../../../target/arm/helper.c" 3 4
                 ,
# 8334 "../../../target/arm/helper.c"
                 cp15.vpidr_el2
# 8334 "../../../target/arm/helper.c" 3 4
                 )
# 8334 "../../../target/arm/helper.c"
        },
        {.name = "VPIDR_EL2",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 4,
         .crn = 0,
         .crm = 0,
         .opc2 = 0,
         .access = PL2_RW,
         .resetvalue = cpu->midr,
         .type = ARM_CP_EL3_NO_EL2_C_NZ,
         .nv2_redirect_offset = 0x88,
         .fieldoffset =
# 8340 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8340 "../../../target/arm/helper.c"
                 CPUARMState
# 8340 "../../../target/arm/helper.c" 3 4
                 ,
# 8340 "../../../target/arm/helper.c"
                 cp15.vpidr_el2
# 8340 "../../../target/arm/helper.c" 3 4
                 )
# 8340 "../../../target/arm/helper.c"
        },
        {.name = "VMPIDR",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 4,
         .crn = 0,
         .crm = 0,
         .opc2 = 5,
         .access = PL2_RW,
         .accessfn = access_el3_aa32ns,
         .resetvalue = vmpidr_def,
         .type = ARM_CP_ALIAS | ARM_CP_EL3_NO_EL2_C_NZ,
         .fieldoffset =
# 8346 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8346 "../../../target/arm/helper.c"
                 CPUARMState
# 8346 "../../../target/arm/helper.c" 3 4
                 ,
# 8346 "../../../target/arm/helper.c"
                 cp15.vmpidr_el2
# 8346 "../../../target/arm/helper.c" 3 4
                 )
# 8346 "../../../target/arm/helper.c"
        },
        {.name = "VMPIDR_EL2",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 4,
         .crn = 0,
         .crm = 0,
         .opc2 = 5,
         .access = PL2_RW,
         .resetvalue = vmpidr_def,
         .type = ARM_CP_EL3_NO_EL2_C_NZ,
         .nv2_redirect_offset = 0x50,
         .fieldoffset =
# 8352 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8352 "../../../target/arm/helper.c"
                 CPUARMState
# 8352 "../../../target/arm/helper.c" 3 4
                 ,
# 8352 "../../../target/arm/helper.c"
                 cp15.vmpidr_el2
# 8352 "../../../target/arm/helper.c" 3 4
                 )
# 8352 "../../../target/arm/helper.c"
        },
    };

    ARMCPRegInfo mdcr_el2 = {
        .name = "MDCR_EL2",
        .state = ARM_CP_STATE_BOTH,
        .type = ARM_CP_IO,
        .opc0 = 3,
        .opc1 = 4,
        .crn = 1,
        .crm = 1,
        .opc2 = 1,
        .writefn = mdcr_el2_write,
        .access = PL2_RW,
        .resetvalue = pmu_num_counters(env),
        .fieldoffset =
# 8363 "../../../target/arm/helper.c" 3 4
            __builtin_offsetof(
# 8363 "../../../target/arm/helper.c"
                CPUARMState
# 8363 "../../../target/arm/helper.c" 3 4
                ,
# 8363 "../../../target/arm/helper.c"
                cp15.mdcr_el2
# 8363 "../../../target/arm/helper.c" 3 4
                )
# 8363 "../../../target/arm/helper.c"
            ,
    };
    define_one_arm_cp_reg(cpu, &mdcr_el2);
    do {
      _Static_assert(
          !(((sizeof(vpidr_regs) / sizeof((vpidr_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vpidr_regs), typeof(&(vpidr_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vpidr_regs), typeof(&(vpidr_regs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(vpidr_regs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vpidr_regs,
# 8366 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8366 "../../../target/arm/helper.c"
              ,
          ((sizeof(vpidr_regs) / sizeof((vpidr_regs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(vpidr_regs),
                                                     typeof(&(vpidr_regs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(vpidr_regs),
                                                     typeof(&(vpidr_regs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    do {
      _Static_assert(!(((sizeof(el2_cp_reginfo) / sizeof((el2_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el2_cp_reginfo),
                                     typeof(&(el2_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el2_cp_reginfo),
                                     typeof(&(el2_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(el2_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, el2_cp_reginfo,
# 8367 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8367 "../../../target/arm/helper.c"
              ,
          ((sizeof(el2_cp_reginfo) / sizeof((el2_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(el2_cp_reginfo), typeof(&(el2_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(el2_cp_reginfo), typeof(&(el2_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    if (arm_feature(env, ARM_FEATURE_V8)) {
      do {
        _Static_assert(
            !(((sizeof(el2_v8_cp_reginfo) / sizeof((el2_v8_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_v8_cp_reginfo),
                            typeof(&(el2_v8_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_v8_cp_reginfo),
                            typeof(&(el2_v8_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(el2_v8_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, el2_v8_cp_reginfo,
# 8369 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8369 "../../../target/arm/helper.c"
                ,
            ((sizeof(el2_v8_cp_reginfo) / sizeof((el2_v8_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_v8_cp_reginfo),
                          typeof(&(el2_v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_v8_cp_reginfo),
                          typeof(&(el2_v8_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_sel2(&cpu_->isar);
        })) {
      do {
        _Static_assert(
            !(((sizeof(el2_sec_cp_reginfo) / sizeof((el2_sec_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_sec_cp_reginfo),
                            typeof(&(el2_sec_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_sec_cp_reginfo),
                            typeof(&(el2_sec_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(el2_sec_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, el2_sec_cp_reginfo,
# 8372 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8372 "../../../target/arm/helper.c"
                ,
            ((sizeof(el2_sec_cp_reginfo) / sizeof((el2_sec_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_sec_cp_reginfo),
                          typeof(&(el2_sec_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_sec_cp_reginfo),
                          typeof(&(el2_sec_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }

    if (!arm_feature(env, ARM_FEATURE_EL3)) {
      static const ARMCPRegInfo el2_reset_regs[] = {
          {.name = "RVBAR_EL2",
           .state = ARM_CP_STATE_AA64,
           .opc0 = 3,
           .opc1 = 4,
           .crn = 12,
           .crm = 0,
           .opc2 = 1,
           .access = PL2_R,
           .fieldoffset =
# 8383 "../../../target/arm/helper.c" 3 4
               __builtin_offsetof(
# 8383 "../../../target/arm/helper.c"
                   CPUARMState
# 8383 "../../../target/arm/helper.c" 3 4
                   ,
# 8383 "../../../target/arm/helper.c"
                   cp15.rvbar
# 8383 "../../../target/arm/helper.c" 3 4
                   )
# 8383 "../../../target/arm/helper.c"
          },
          {.name = "RVBAR",
           .type = ARM_CP_ALIAS,
           .cp = 15,
           .opc1 = 0,
           .crn = 12,
           .crm = 0,
           .opc2 = 1,
           .access = PL2_R,
           .fieldoffset =
# 8387 "../../../target/arm/helper.c" 3 4
               __builtin_offsetof(
# 8387 "../../../target/arm/helper.c"
                   CPUARMState
# 8387 "../../../target/arm/helper.c" 3 4
                   ,
# 8387 "../../../target/arm/helper.c"
                   cp15.rvbar
# 8387 "../../../target/arm/helper.c" 3 4
                   )
# 8387 "../../../target/arm/helper.c"
          },
          {.name = "RMR_EL2",
           .state = ARM_CP_STATE_AA64,
           .opc0 = 3,
           .opc1 = 4,
           .crn = 12,
           .crm = 0,
           .opc2 = 2,
           .access = PL2_RW,
           .type = ARM_CP_CONST,
           .resetvalue = 1},
      };
      do {
        _Static_assert(
            !(((sizeof(el2_reset_regs) / sizeof((el2_reset_regs)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_reset_regs),
                            typeof(&(el2_reset_regs)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(el2_reset_regs),
                            typeof(&(el2_reset_regs)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(el2_reset_regs) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, el2_reset_regs,
# 8392 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8392 "../../../target/arm/helper.c"
                ,
            ((sizeof(el2_reset_regs) / sizeof((el2_reset_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_reset_regs),
                          typeof(&(el2_reset_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(el2_reset_regs),
                          typeof(&(el2_reset_regs)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
  }

  if (arm_feature(env, ARM_FEATURE_EL3)) {
    do {
      _Static_assert(!(((sizeof(el3_cp_reginfo) / sizeof((el3_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el3_cp_reginfo),
                                     typeof(&(el3_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el3_cp_reginfo),
                                     typeof(&(el3_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(el3_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, el3_cp_reginfo,
# 8398 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8398 "../../../target/arm/helper.c"
              ,
          ((sizeof(el3_cp_reginfo) / sizeof((el3_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(el3_cp_reginfo), typeof(&(el3_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(el3_cp_reginfo), typeof(&(el3_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    ARMCPRegInfo el3_regs[] = {
        {
            .name = "RVBAR_EL3",
            .state = ARM_CP_STATE_AA64,
            .opc0 = 3,
            .opc1 = 6,
            .crn = 12,
            .crm = 0,
            .opc2 = 1,
            .access = PL3_R,
            .fieldoffset =
# 8403 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 8403 "../../../target/arm/helper.c"
                    CPUARMState
# 8403 "../../../target/arm/helper.c" 3 4
                    ,
# 8403 "../../../target/arm/helper.c"
                    cp15.rvbar
# 8403 "../../../target/arm/helper.c" 3 4
                    )
# 8403 "../../../target/arm/helper.c"
                ,
        },
        {.name = "RMR_EL3",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 6,
         .crn = 12,
         .crm = 0,
         .opc2 = 2,
         .access = PL3_RW,
         .type = ARM_CP_CONST,
         .resetvalue = 1},
        {.name = "RMR",
         .state = ARM_CP_STATE_AA32,
         .cp = 15,
         .opc1 = 0,
         .crn = 12,
         .crm = 0,
         .opc2 = 2,
         .access = PL3_RW,
         .type = ARM_CP_CONST,
         .resetvalue = arm_feature(env, ARM_FEATURE_AARCH64)},
        {.name = "SCTLR_EL3",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 6,
         .crn = 1,
         .crm = 0,
         .opc2 = 0,
         .access = PL3_RW,
         .raw_writefn = raw_write,
         .writefn = sctlr_write,
         .fieldoffset =
# 8415 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8415 "../../../target/arm/helper.c"
                 CPUARMState
# 8415 "../../../target/arm/helper.c" 3 4
                 ,
# 8415 "../../../target/arm/helper.c"
                 cp15.sctlr_el[3]
# 8415 "../../../target/arm/helper.c" 3 4
                 )
# 8415 "../../../target/arm/helper.c"
             ,
         .resetvalue = cpu->reset_sctlr},
    };

    do {
      _Static_assert(!(((sizeof(el3_regs) / sizeof((el3_regs)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el3_regs), typeof(&(el3_regs)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(el3_regs), typeof(&(el3_regs)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(el3_regs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, el3_regs,
# 8419 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8419 "../../../target/arm/helper.c"
              ,
          ((sizeof(el3_regs) / sizeof((el3_regs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(el3_regs),
                                                     typeof(&(el3_regs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(typeof(el3_regs),
                                                     typeof(&(el3_regs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
# 8430 "../../../target/arm/helper.c"
  if (arm_feature(env, ARM_FEATURE_EL3)) {
    if (arm_feature(env, ARM_FEATURE_AARCH64)) {
      static const ARMCPRegInfo nsacr = {.name = "NSACR",
                                         .type = ARM_CP_CONST,
                                         .cp = 15,
                                         .opc1 = 0,
                                         .crn = 1,
                                         .crm = 1,
                                         .opc2 = 2,
                                         .access = PL1_RW,
                                         .accessfn = nsacr_access,
                                         .resetvalue = 0xc00};
      define_one_arm_cp_reg(cpu, &nsacr);
    } else {
      static const ARMCPRegInfo nsacr = {.name = "NSACR",
                                         .cp = 15,
                                         .opc1 = 0,
                                         .crn = 1,
                                         .crm = 1,
                                         .opc2 = 2,
                                         .access = PL3_RW | PL1_R,
                                         .resetvalue = 0,
                                         .fieldoffset =
# 8445 "../../../target/arm/helper.c" 3 4
                                             __builtin_offsetof(
# 8445 "../../../target/arm/helper.c"
                                                 CPUARMState
# 8445 "../../../target/arm/helper.c" 3 4
                                                 ,
# 8445 "../../../target/arm/helper.c"
                                                 cp15.nsacr
# 8445 "../../../target/arm/helper.c" 3 4
                                                 )

# 8446 "../../../target/arm/helper.c"
      };
      define_one_arm_cp_reg(cpu, &nsacr);
    }
  } else {
    if (arm_feature(env, ARM_FEATURE_V8)) {
      static const ARMCPRegInfo nsacr = {.name = "NSACR",
                                         .type = ARM_CP_CONST,
                                         .cp = 15,
                                         .opc1 = 0,
                                         .crn = 1,
                                         .crm = 1,
                                         .opc2 = 2,
                                         .access = PL1_R,
                                         .resetvalue = 0xc00};
      define_one_arm_cp_reg(cpu, &nsacr);
    }
  }

  if (arm_feature(env, ARM_FEATURE_PMSA)) {
    if (arm_feature(env, ARM_FEATURE_V6)) {

# 8464 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 8464 "../../../target/arm/helper.c"
                        arm_feature(env, ARM_FEATURE_V7)
# 8464 "../../../target/arm/helper.c" 3 4
                            )
                        ? 1
                        : 0),
       __extension__({
         if (
# 8464 "../../../target/arm/helper.c"
             arm_feature(env, ARM_FEATURE_V7)
# 8464 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 8464 "../../../target/arm/helper.c"
               "arm_feature(env, ARM_FEATURE_V7)"
# 8464 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 8464,
               __extension__ __PRETTY_FUNCTION__);
       }))
# 8464 "../../../target/arm/helper.c"
          ;
      do {
        _Static_assert(!(((sizeof(vmsa_pmsa_cp_reginfo) /
                           sizeof((vmsa_pmsa_cp_reginfo)[0])) +
                          (sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(vmsa_pmsa_cp_reginfo),
                                       typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }) -
                           sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(vmsa_pmsa_cp_reginfo),
                                       typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }))) == 0),
                       "not expecting: "
                       "ARRAY_SIZE(vmsa_pmsa_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, vmsa_pmsa_cp_reginfo,
# 8465 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8465 "../../../target/arm/helper.c"
                ,
            ((sizeof(vmsa_pmsa_cp_reginfo) /
              sizeof((vmsa_pmsa_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vmsa_pmsa_cp_reginfo),
                          typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vmsa_pmsa_cp_reginfo),
                          typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
      do {
        _Static_assert(
            !(((sizeof(pmsav7_cp_reginfo) / sizeof((pmsav7_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav7_cp_reginfo),
                            typeof(&(pmsav7_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav7_cp_reginfo),
                            typeof(&(pmsav7_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(pmsav7_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, pmsav7_cp_reginfo,
# 8466 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8466 "../../../target/arm/helper.c"
                ,
            ((sizeof(pmsav7_cp_reginfo) / sizeof((pmsav7_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav7_cp_reginfo),
                          typeof(&(pmsav7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav7_cp_reginfo),
                          typeof(&(pmsav7_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    } else {
      do {
        _Static_assert(
            !(((sizeof(pmsav5_cp_reginfo) / sizeof((pmsav5_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav5_cp_reginfo),
                            typeof(&(pmsav5_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav5_cp_reginfo),
                            typeof(&(pmsav5_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(pmsav5_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, pmsav5_cp_reginfo,
# 8468 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8468 "../../../target/arm/helper.c"
                ,
            ((sizeof(pmsav5_cp_reginfo) / sizeof((pmsav5_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav5_cp_reginfo),
                          typeof(&(pmsav5_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav5_cp_reginfo),
                          typeof(&(pmsav5_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
  } else {
    do {
      _Static_assert(!(((sizeof(vmsa_pmsa_cp_reginfo) /
                         sizeof((vmsa_pmsa_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(vmsa_pmsa_cp_reginfo),
                                     typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(vmsa_pmsa_cp_reginfo),
                                     typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(vmsa_pmsa_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vmsa_pmsa_cp_reginfo,
# 8471 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8471 "../../../target/arm/helper.c"
              ,
          ((sizeof(vmsa_pmsa_cp_reginfo) / sizeof((vmsa_pmsa_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vmsa_pmsa_cp_reginfo),
                        typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vmsa_pmsa_cp_reginfo),
                        typeof(&(vmsa_pmsa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    do {
      _Static_assert(
          !(((sizeof(vmsa_cp_reginfo) / sizeof((vmsa_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vmsa_cp_reginfo),
                          typeof(&(vmsa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vmsa_cp_reginfo),
                          typeof(&(vmsa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(vmsa_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vmsa_cp_reginfo,
# 8472 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8472 "../../../target/arm/helper.c"
              ,
          ((sizeof(vmsa_cp_reginfo) / sizeof((vmsa_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vmsa_cp_reginfo),
                        typeof(&(vmsa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vmsa_cp_reginfo),
                        typeof(&(vmsa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);

    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa32_hpd(&cpu_->isar);
        })) {
      define_one_arm_cp_reg(cpu, &ttbcr2_reginfo);
    }
  }
  if (arm_feature(env, ARM_FEATURE_THUMB2EE)) {
    do {
      _Static_assert(
          !(((sizeof(t2ee_cp_reginfo) / sizeof((t2ee_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(t2ee_cp_reginfo),
                          typeof(&(t2ee_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(t2ee_cp_reginfo),
                          typeof(&(t2ee_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(t2ee_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, t2ee_cp_reginfo,
# 8479 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8479 "../../../target/arm/helper.c"
              ,
          ((sizeof(t2ee_cp_reginfo) / sizeof((t2ee_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(t2ee_cp_reginfo),
                        typeof(&(t2ee_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(t2ee_cp_reginfo),
                        typeof(&(t2ee_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_GENERIC_TIMER)) {
    do {
      _Static_assert(!(((sizeof(generic_timer_cp_reginfo) /
                         sizeof((generic_timer_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(generic_timer_cp_reginfo),
                                     typeof(&(generic_timer_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(generic_timer_cp_reginfo),
                                     typeof(&(generic_timer_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(generic_timer_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, generic_timer_cp_reginfo,
# 8482 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8482 "../../../target/arm/helper.c"
              ,
          ((sizeof(generic_timer_cp_reginfo) /
            sizeof((generic_timer_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(generic_timer_cp_reginfo),
                        typeof(&(generic_timer_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(generic_timer_cp_reginfo),
                        typeof(&(generic_timer_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_ecv_traps(&cpu_->isar);
      })) {
    do {
      _Static_assert(!(((sizeof(gen_timer_ecv_cp_reginfo) /
                         sizeof((gen_timer_ecv_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(gen_timer_ecv_cp_reginfo),
                                     typeof(&(gen_timer_ecv_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(gen_timer_ecv_cp_reginfo),
                                     typeof(&(gen_timer_ecv_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(gen_timer_ecv_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, gen_timer_ecv_cp_reginfo,
# 8485 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8485 "../../../target/arm/helper.c"
              ,
          ((sizeof(gen_timer_ecv_cp_reginfo) /
            sizeof((gen_timer_ecv_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(gen_timer_ecv_cp_reginfo),
                        typeof(&(gen_timer_ecv_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(gen_timer_ecv_cp_reginfo),
                        typeof(&(gen_timer_ecv_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (arm_feature(env, ARM_FEATURE_VAPA)) {
    ARMCPRegInfo vapa_cp_reginfo[] = {
        {.name = "PAR",
         .cp = 15,
         .crn = 7,
         .crm = 4,
         .opc1 = 0,
         .opc2 = 0,
         .access = PL1_RW,
         .resetvalue = 0,
         .bank_fieldoffsets =
             {
# 8496 "../../../target/arm/helper.c" 3 4
                 __builtin_offsetof(
# 8496 "../../../target/arm/helper.c"
                     CPUARMState
# 8496 "../../../target/arm/helper.c" 3 4
                     ,
# 8496 "../../../target/arm/helper.c"
                     cp15.par_s
# 8496 "../../../target/arm/helper.c" 3 4
                     )
# 8496 "../../../target/arm/helper.c"
                     ,

# 8497 "../../../target/arm/helper.c" 3 4
                 __builtin_offsetof(
# 8497 "../../../target/arm/helper.c"
                     CPUARMState
# 8497 "../../../target/arm/helper.c" 3 4
                     ,
# 8497 "../../../target/arm/helper.c"
                     cp15.par_ns
# 8497 "../../../target/arm/helper.c" 3 4
                     )
# 8497 "../../../target/arm/helper.c"
             },
         .writefn = par_write},

    };

    if (arm_feature(env, ARM_FEATURE_LPAE)) {
      vapa_cp_reginfo[0].type = ARM_CP_ALIAS | ARM_CP_NO_GDB;
    }
    do {
      _Static_assert(
          !(((sizeof(vapa_cp_reginfo) / sizeof((vapa_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vapa_cp_reginfo),
                          typeof(&(vapa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vapa_cp_reginfo),
                          typeof(&(vapa_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(vapa_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vapa_cp_reginfo,
# 8514 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8514 "../../../target/arm/helper.c"
              ,
          ((sizeof(vapa_cp_reginfo) / sizeof((vapa_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vapa_cp_reginfo),
                        typeof(&(vapa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vapa_cp_reginfo),
                        typeof(&(vapa_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_CACHE_TEST_CLEAN)) {
    do {
      _Static_assert(
          !(((sizeof(cache_test_clean_cp_reginfo) /
              sizeof((cache_test_clean_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cache_test_clean_cp_reginfo),
                          typeof(&(cache_test_clean_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cache_test_clean_cp_reginfo),
                          typeof(&(cache_test_clean_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(cache_test_clean_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, cache_test_clean_cp_reginfo,
# 8517 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8517 "../../../target/arm/helper.c"
              ,
          ((sizeof(cache_test_clean_cp_reginfo) /
            sizeof((cache_test_clean_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_test_clean_cp_reginfo),
                        typeof(&(cache_test_clean_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_test_clean_cp_reginfo),
                        typeof(&(cache_test_clean_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_CACHE_DIRTY_REG)) {
    do {
      _Static_assert(
          !(((sizeof(cache_dirty_status_cp_reginfo) /
              sizeof((cache_dirty_status_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cache_dirty_status_cp_reginfo),
                          typeof(&(cache_dirty_status_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cache_dirty_status_cp_reginfo),
                          typeof(&(cache_dirty_status_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(cache_dirty_status_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, cache_dirty_status_cp_reginfo,
# 8520 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8520 "../../../target/arm/helper.c"
              ,
          ((sizeof(cache_dirty_status_cp_reginfo) /
            sizeof((cache_dirty_status_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_dirty_status_cp_reginfo),
                        typeof(&(cache_dirty_status_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_dirty_status_cp_reginfo),
                        typeof(&(cache_dirty_status_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_CACHE_BLOCK_OPS)) {
    do {
      _Static_assert(!(((sizeof(cache_block_ops_cp_reginfo) /
                         sizeof((cache_block_ops_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(cache_block_ops_cp_reginfo),
                                     typeof(&(cache_block_ops_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(cache_block_ops_cp_reginfo),
                                     typeof(&(cache_block_ops_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(cache_block_ops_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, cache_block_ops_cp_reginfo,
# 8523 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8523 "../../../target/arm/helper.c"
              ,
          ((sizeof(cache_block_ops_cp_reginfo) /
            sizeof((cache_block_ops_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_block_ops_cp_reginfo),
                        typeof(&(cache_block_ops_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(cache_block_ops_cp_reginfo),
                        typeof(&(cache_block_ops_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_OMAPCP)) {
    do {
      _Static_assert(
          !(((sizeof(omap_cp_reginfo) / sizeof((omap_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(omap_cp_reginfo),
                          typeof(&(omap_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(omap_cp_reginfo),
                          typeof(&(omap_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(omap_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, omap_cp_reginfo,
# 8526 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8526 "../../../target/arm/helper.c"
              ,
          ((sizeof(omap_cp_reginfo) / sizeof((omap_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(omap_cp_reginfo),
                        typeof(&(omap_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(omap_cp_reginfo),
                        typeof(&(omap_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_STRONGARM)) {
    do {
      _Static_assert(!(((sizeof(strongarm_cp_reginfo) /
                         sizeof((strongarm_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(strongarm_cp_reginfo),
                                     typeof(&(strongarm_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(strongarm_cp_reginfo),
                                     typeof(&(strongarm_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(strongarm_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, strongarm_cp_reginfo,
# 8529 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8529 "../../../target/arm/helper.c"
              ,
          ((sizeof(strongarm_cp_reginfo) / sizeof((strongarm_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(strongarm_cp_reginfo),
                        typeof(&(strongarm_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(strongarm_cp_reginfo),
                        typeof(&(strongarm_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_XSCALE)) {
    do {
      _Static_assert(
          !(((sizeof(xscale_cp_reginfo) / sizeof((xscale_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(xscale_cp_reginfo),
                          typeof(&(xscale_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(xscale_cp_reginfo),
                          typeof(&(xscale_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(xscale_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, xscale_cp_reginfo,
# 8532 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8532 "../../../target/arm/helper.c"
              ,
          ((sizeof(xscale_cp_reginfo) / sizeof((xscale_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(xscale_cp_reginfo),
                        typeof(&(xscale_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(xscale_cp_reginfo),
                        typeof(&(xscale_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_DUMMY_C15_REGS)) {
    do {
      _Static_assert(!(((sizeof(dummy_c15_cp_reginfo) /
                         sizeof((dummy_c15_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(dummy_c15_cp_reginfo),
                                     typeof(&(dummy_c15_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(dummy_c15_cp_reginfo),
                                     typeof(&(dummy_c15_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(dummy_c15_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, dummy_c15_cp_reginfo,
# 8535 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8535 "../../../target/arm/helper.c"
              ,
          ((sizeof(dummy_c15_cp_reginfo) / sizeof((dummy_c15_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(dummy_c15_cp_reginfo),
                        typeof(&(dummy_c15_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(dummy_c15_cp_reginfo),
                        typeof(&(dummy_c15_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (arm_feature(env, ARM_FEATURE_LPAE)) {
    do {
      _Static_assert(
          !(((sizeof(lpae_cp_reginfo) / sizeof((lpae_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(lpae_cp_reginfo),
                          typeof(&(lpae_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(lpae_cp_reginfo),
                          typeof(&(lpae_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(lpae_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, lpae_cp_reginfo,
# 8538 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8538 "../../../target/arm/helper.c"
              ,
          ((sizeof(lpae_cp_reginfo) / sizeof((lpae_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(lpae_cp_reginfo),
                        typeof(&(lpae_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(lpae_cp_reginfo),
                        typeof(&(lpae_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa32_jazelle(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(jazelle_regs) / sizeof((jazelle_regs)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(jazelle_regs), typeof(&(jazelle_regs)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(jazelle_regs), typeof(&(jazelle_regs)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(jazelle_regs) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, jazelle_regs,
# 8541 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8541 "../../../target/arm/helper.c"
              ,
          ((sizeof(jazelle_regs) / sizeof((jazelle_regs)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(jazelle_regs), typeof(&(jazelle_regs)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(jazelle_regs), typeof(&(jazelle_regs)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  {
    ARMCPRegInfo id_pre_v8_midr_cp_reginfo[] = {
# 8560 "../../../target/arm/helper.c"
        {.name = "MIDR",
         .cp = 15,
         .crn = 0,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .resetvalue = cpu->midr,
         .writefn = arm_cp_write_ignore,
         .raw_writefn = raw_write,
         .readfn = midr_read,
         .fieldoffset =
# 8565 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8565 "../../../target/arm/helper.c"
                 CPUARMState
# 8565 "../../../target/arm/helper.c" 3 4
                 ,
# 8565 "../../../target/arm/helper.c"
                 cp15.c0_cpuid
# 8565 "../../../target/arm/helper.c" 3 4
                 )
# 8565 "../../../target/arm/helper.c"
             ,
         .type = ARM_CP_OVERRIDE},

        {.name = "DUMMY",
         .cp = 15,
         .crn = 0,
         .crm = 3,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
        {.name = "DUMMY",
         .cp = 15,
         .crn = 0,
         .crm = 4,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
        {.name = "DUMMY",
         .cp = 15,
         .crn = 0,
         .crm = 5,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
        {.name = "DUMMY",
         .cp = 15,
         .crn = 0,
         .crm = 6,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
        {.name = "DUMMY",
         .cp = 15,
         .crn = 0,
         .crm = 7,
         .opc1 = 0,
         .opc2 = 0xff,
         .access = PL1_R,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
    };
    ARMCPRegInfo id_v8_midr_cp_reginfo[] = {
        {.name = "MIDR_EL1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 0,
         .opc2 = 0,
         .access = PL1_R,
         .type = ARM_CP_NO_RAW,
         .resetvalue = cpu->midr,
         .fgt = FGT_MIDR_EL1,
         .fieldoffset =
# 8589 "../../../target/arm/helper.c" 3 4
             __builtin_offsetof(
# 8589 "../../../target/arm/helper.c"
                 CPUARMState
# 8589 "../../../target/arm/helper.c" 3 4
                 ,
# 8589 "../../../target/arm/helper.c"
                 cp15.c0_cpuid
# 8589 "../../../target/arm/helper.c" 3 4
                 )
# 8589 "../../../target/arm/helper.c"
             ,
         .readfn = midr_read},

        {.name = "MIDR",
         .type = ARM_CP_ALIAS | ARM_CP_CONST,
         .cp = 15,
         .crn = 0,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 7,
         .access = PL1_R,
         .resetvalue = cpu->midr},
        {.name = "REVIDR_EL1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 0,
         .crm = 0,
         .opc2 = 6,
         .access = PL1_R,
         .accessfn = access_aa64_tid1,
         .fgt = FGT_REVIDR_EL1,
         .type = ARM_CP_CONST,
         .resetvalue = cpu->revidr},
    };
    ARMCPRegInfo id_v8_midr_alias_cp_reginfo = {
        .name = "MIDR",
        .type = ARM_CP_ALIAS | ARM_CP_CONST | ARM_CP_NO_GDB,
        .cp = 15,
        .crn = 0,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 4,
        .access = PL1_R,
        .resetvalue = cpu->midr};
    ARMCPRegInfo id_cp_reginfo[] = {

        {.name = "CTR",
         .cp = 15,
         .crn = 0,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 1,
         .access = PL1_R,
         .accessfn = ctr_el0_access,
         .type = ARM_CP_CONST,
         .resetvalue = cpu->ctr},
        {.name = "CTR_EL0",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 3,
         .opc2 = 1,
         .crn = 0,
         .crm = 0,
         .access = PL0_R,
         .accessfn = ctr_el0_access,
         .fgt = FGT_CTR_EL0,
         .type = ARM_CP_CONST,
         .resetvalue = cpu->ctr},

        {.name = "TCMTR",
         .cp = 15,
         .crn = 0,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 2,
         .access = PL1_R,
         .accessfn = access_aa32_tid1,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
    };

    ARMCPRegInfo id_tlbtr_reginfo = {
        .name = "TLBTR",
        .cp = 15,
        .crn = 0,
        .crm = 0,
        .opc1 = 0,
        .opc2 = 3,
        .access = PL1_R,
        .accessfn = access_aa32_tid1,
        .type = ARM_CP_CONST,
        .resetvalue = 0,
    };

    ARMCPRegInfo id_mpuir_reginfo = {.name = "MPUIR",
                                     .cp = 15,
                                     .crn = 0,
                                     .crm = 0,
                                     .opc1 = 0,
                                     .opc2 = 4,
                                     .access = PL1_R,
                                     .type = ARM_CP_CONST,
                                     .resetvalue = cpu->pmsav7_dregion << 8};

    ARMCPRegInfo id_hmpuir_reginfo = {.name = "HMPUIR",
                                      .cp = 15,
                                      .opc1 = 4,
                                      .crn = 0,
                                      .crm = 0,
                                      .opc2 = 4,
                                      .access = PL2_R,
                                      .type = ARM_CP_CONST,
                                      .resetvalue = cpu->pmsav8r_hdregion};
    static const ARMCPRegInfo crn0_wi_reginfo = {.name = "CRN0_WI",
                                                 .cp = 15,
                                                 .crn = 0,
                                                 .crm = 0xff,
                                                 .opc1 = 0xff,
                                                 .opc2 = 0xff,
                                                 .access = PL1_W,
                                                 .type = ARM_CP_NOP |
                                                         ARM_CP_OVERRIDE};

    static const ARMCPRegUserSpaceInfo id_v8_user_midr_cp_reginfo[] = {
        {.name = "MIDR_EL1",
         .exported_bits = R_MIDR_EL1_REVISION_MASK | R_MIDR_EL1_PARTNUM_MASK |
                          R_MIDR_EL1_ARCHITECTURE_MASK |
                          R_MIDR_EL1_VARIANT_MASK |
                          R_MIDR_EL1_IMPLEMENTER_MASK},
        {.name = "REVIDR_EL1"},
    };
    do {
      _Static_assert(!(((sizeof(id_v8_midr_cp_reginfo) /
                         sizeof((id_v8_midr_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(id_v8_midr_cp_reginfo),
                                     typeof(&(id_v8_midr_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(id_v8_midr_cp_reginfo),
                                     typeof(&(id_v8_midr_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(id_v8_midr_cp_reginfo) == 0");
      _Static_assert(!(((sizeof(id_v8_user_midr_cp_reginfo) /
                         sizeof((id_v8_user_midr_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(id_v8_user_midr_cp_reginfo),
                                     typeof(&(id_v8_user_midr_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(id_v8_user_midr_cp_reginfo),
                                     typeof(&(id_v8_user_midr_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(id_v8_user_midr_cp_reginfo) == 0");
      modify_arm_cp_regs_with_len(
          id_v8_midr_cp_reginfo,
          ((sizeof(id_v8_midr_cp_reginfo) /
            sizeof((id_v8_midr_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_v8_midr_cp_reginfo),
                        typeof(&(id_v8_midr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_v8_midr_cp_reginfo),
                        typeof(&(id_v8_midr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))),
          id_v8_user_midr_cp_reginfo,
          ((sizeof(id_v8_user_midr_cp_reginfo) /
            sizeof((id_v8_user_midr_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_v8_user_midr_cp_reginfo),
                        typeof(&(id_v8_user_midr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_v8_user_midr_cp_reginfo),
                        typeof(&(id_v8_user_midr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);

    if (arm_feature(env, ARM_FEATURE_OMAPCP) ||
        arm_feature(env, ARM_FEATURE_STRONGARM)) {
      size_t i;

      define_one_arm_cp_reg(cpu, &crn0_wi_reginfo);
      for (i = 0;
           i < ((sizeof(id_pre_v8_midr_cp_reginfo) /
                 sizeof((id_pre_v8_midr_cp_reginfo)[0])) +
                (sizeof(
                     struct {
                       int : (!(!__builtin_types_compatible_p(
                                 typeof(id_pre_v8_midr_cp_reginfo),
                                 typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                             ? -1
                             : 1;
                     }) -
                 sizeof(
                     struct {
                       int : (!(!__builtin_types_compatible_p(
                                 typeof(id_pre_v8_midr_cp_reginfo),
                                 typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                             ? -1
                             : 1;
                     })));
           ++i) {
        id_pre_v8_midr_cp_reginfo[i].access = PL1_RW;
      }
      for (i = 0; i < ((sizeof(id_cp_reginfo) / sizeof((id_cp_reginfo)[0])) +
                       (sizeof(
                            struct {
                              int : (!(!__builtin_types_compatible_p(
                                        typeof(id_cp_reginfo),
                                        typeof(&(id_cp_reginfo)[0]))))
                                    ? -1
                                    : 1;
                            }) -
                        sizeof(
                            struct {
                              int : (!(!__builtin_types_compatible_p(
                                        typeof(id_cp_reginfo),
                                        typeof(&(id_cp_reginfo)[0]))))
                                    ? -1
                                    : 1;
                            })));
           ++i) {
        id_cp_reginfo[i].access = PL1_RW;
      }
      id_mpuir_reginfo.access = PL1_RW;
      id_tlbtr_reginfo.access = PL1_RW;
    }
    if (arm_feature(env, ARM_FEATURE_V8)) {
      do {
        _Static_assert(!(((sizeof(id_v8_midr_cp_reginfo) /
                           sizeof((id_v8_midr_cp_reginfo)[0])) +
                          (sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(id_v8_midr_cp_reginfo),
                                       typeof(&(id_v8_midr_cp_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }) -
                           sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(id_v8_midr_cp_reginfo),
                                       typeof(&(id_v8_midr_cp_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }))) == 0),
                       "not expecting: "
                       "ARRAY_SIZE(id_v8_midr_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, id_v8_midr_cp_reginfo,
# 8684 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8684 "../../../target/arm/helper.c"
                ,
            ((sizeof(id_v8_midr_cp_reginfo) /
              sizeof((id_v8_midr_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_v8_midr_cp_reginfo),
                          typeof(&(id_v8_midr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_v8_midr_cp_reginfo),
                          typeof(&(id_v8_midr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
      if (!arm_feature(env, ARM_FEATURE_PMSA)) {
        define_one_arm_cp_reg(cpu, &id_v8_midr_alias_cp_reginfo);
      }
    } else {
      do {
        _Static_assert(
            !(((sizeof(id_pre_v8_midr_cp_reginfo) /
                sizeof((id_pre_v8_midr_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(id_pre_v8_midr_cp_reginfo),
                            typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(id_pre_v8_midr_cp_reginfo),
                            typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(id_pre_v8_midr_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, id_pre_v8_midr_cp_reginfo,
# 8689 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8689 "../../../target/arm/helper.c"
                ,
            ((sizeof(id_pre_v8_midr_cp_reginfo) /
              sizeof((id_pre_v8_midr_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_pre_v8_midr_cp_reginfo),
                          typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_pre_v8_midr_cp_reginfo),
                          typeof(&(id_pre_v8_midr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
    do {
      _Static_assert(
          !(((sizeof(id_cp_reginfo) / sizeof((id_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_cp_reginfo), typeof(&(id_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(id_cp_reginfo), typeof(&(id_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(id_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, id_cp_reginfo,
# 8691 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8691 "../../../target/arm/helper.c"
              ,
          ((sizeof(id_cp_reginfo) / sizeof((id_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_cp_reginfo), typeof(&(id_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(id_cp_reginfo), typeof(&(id_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    if (!arm_feature(env, ARM_FEATURE_PMSA)) {
      define_one_arm_cp_reg(cpu, &id_tlbtr_reginfo);
    } else if (arm_feature(env, ARM_FEATURE_PMSA) &&
               arm_feature(env, ARM_FEATURE_V8)) {
      uint32_t i = 0;
      char *tmp_string;

      define_one_arm_cp_reg(cpu, &id_mpuir_reginfo);
      define_one_arm_cp_reg(cpu, &id_hmpuir_reginfo);
      do {
        _Static_assert(
            !(((sizeof(pmsav8r_cp_reginfo) / sizeof((pmsav8r_cp_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav8r_cp_reginfo),
                            typeof(&(pmsav8r_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(pmsav8r_cp_reginfo),
                            typeof(&(pmsav8r_cp_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(pmsav8r_cp_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, pmsav8r_cp_reginfo,
# 8701 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8701 "../../../target/arm/helper.c"
                ,
            ((sizeof(pmsav8r_cp_reginfo) / sizeof((pmsav8r_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav8r_cp_reginfo),
                          typeof(&(pmsav8r_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(pmsav8r_cp_reginfo),
                          typeof(&(pmsav8r_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);

      for (i = 0; i < ({ typeof(1 ? ((cpu->pmsav7_dregion)) : ((32))) _a10 = ((cpu->pmsav7_dregion)), _b11 = ((32)); _a10 < _b11 ? _a10 : _b11; }); ++i) {
        uint8_t crm = 0b1000 | extract32(i, 1, 3);
        uint8_t opc1 = extract32(i, 4, 1);
        uint8_t opc2 = extract32(i, 0, 1) << 2;

        tmp_string = g_strdup_printf("PRBAR%u", i);
        ARMCPRegInfo tmp_prbarn_reginfo = {.name = tmp_string,
                                           .type = ARM_CP_ALIAS | ARM_CP_NO_RAW,
                                           .cp = 15,
                                           .opc1 = opc1,
                                           .crn = 6,
                                           .crm = crm,
                                           .opc2 = opc2,
                                           .access = PL1_RW,
                                           .resetvalue = 0,
                                           .accessfn = access_tvm_trvm,
                                           .writefn = pmsav8r_regn_write,
                                           .readfn = pmsav8r_regn_read};
        define_one_arm_cp_reg(cpu, &tmp_prbarn_reginfo);
        g_free(tmp_string);

        opc2 = extract32(i, 0, 1) << 2 | 0x1;
        tmp_string = g_strdup_printf("PRLAR%u", i);
        ARMCPRegInfo tmp_prlarn_reginfo = {.name = tmp_string,
                                           .type = ARM_CP_ALIAS | ARM_CP_NO_RAW,
                                           .cp = 15,
                                           .opc1 = opc1,
                                           .crn = 6,
                                           .crm = crm,
                                           .opc2 = opc2,
                                           .access = PL1_RW,
                                           .resetvalue = 0,
                                           .accessfn = access_tvm_trvm,
                                           .writefn = pmsav8r_regn_write,
                                           .readfn = pmsav8r_regn_read};
        define_one_arm_cp_reg(cpu, &tmp_prlarn_reginfo);
        g_free(tmp_string);
      }

      for (i = 0; i < ({ typeof(1 ? ((cpu->pmsav8r_hdregion)) : ((32))) _a12 = ((cpu->pmsav8r_hdregion)), _b13 = ((32)); _a12 < _b13 ? _a12 : _b13; }); ++i) {
        uint8_t crm = 0b1000 | extract32(i, 1, 3);
        uint8_t opc1 = 0b100 | extract32(i, 4, 1);
        uint8_t opc2 = extract32(i, 0, 1) << 2;

        tmp_string = g_strdup_printf("HPRBAR%u", i);
        ARMCPRegInfo tmp_hprbarn_reginfo = {.name = tmp_string,
                                            .type = ARM_CP_NO_RAW,
                                            .cp = 15,
                                            .opc1 = opc1,
                                            .crn = 6,
                                            .crm = crm,
                                            .opc2 = opc2,
                                            .access = PL2_RW,
                                            .resetvalue = 0,
                                            .writefn = pmsav8r_regn_write,
                                            .readfn = pmsav8r_regn_read};
        define_one_arm_cp_reg(cpu, &tmp_hprbarn_reginfo);
        g_free(tmp_string);

        opc2 = extract32(i, 0, 1) << 2 | 0x1;
        tmp_string = g_strdup_printf("HPRLAR%u", i);
        ARMCPRegInfo tmp_hprlarn_reginfo = {.name = tmp_string,
                                            .type = ARM_CP_NO_RAW,
                                            .cp = 15,
                                            .opc1 = opc1,
                                            .crn = 6,
                                            .crm = crm,
                                            .opc2 = opc2,
                                            .access = PL2_RW,
                                            .resetvalue = 0,
                                            .writefn = pmsav8r_regn_write,
                                            .readfn = pmsav8r_regn_read};
        define_one_arm_cp_reg(cpu, &tmp_hprlarn_reginfo);
        g_free(tmp_string);
      }
    } else if (arm_feature(env, ARM_FEATURE_V7)) {
      define_one_arm_cp_reg(cpu, &id_mpuir_reginfo);
    }
  }

  if (arm_feature(env, ARM_FEATURE_MPIDR)) {
    ARMCPRegInfo mpidr_cp_reginfo[] = {
        {.name = "MPIDR_EL1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .crn = 0,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 5,
         .fgt = FGT_MPIDR_EL1,
         .access = PL1_R,
         .readfn = mpidr_read,
         .type = ARM_CP_NO_RAW},
    };

    static const ARMCPRegUserSpaceInfo mpidr_user_cp_reginfo[] = {
        {.name = "MPIDR_EL1", .fixed_bits = 0x0000000080000000},
    };
    do {
      _Static_assert(
          !(((sizeof(mpidr_cp_reginfo) / sizeof((mpidr_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(mpidr_cp_reginfo),
                          typeof(&(mpidr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(mpidr_cp_reginfo),
                          typeof(&(mpidr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(mpidr_cp_reginfo) == 0");
      _Static_assert(!(((sizeof(mpidr_user_cp_reginfo) /
                         sizeof((mpidr_user_cp_reginfo)[0])) +
                        (sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(mpidr_user_cp_reginfo),
                                     typeof(&(mpidr_user_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }) -
                         sizeof(struct {
                           int : (!(!__builtin_types_compatible_p(
                                     typeof(mpidr_user_cp_reginfo),
                                     typeof(&(mpidr_user_cp_reginfo)[0]))))
                                 ? -1
                                 : 1;
                         }))) == 0),
                     "not expecting: "
                     "ARRAY_SIZE(mpidr_user_cp_reginfo) == 0");
      modify_arm_cp_regs_with_len(
          mpidr_cp_reginfo,
          ((sizeof(mpidr_cp_reginfo) / sizeof((mpidr_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_cp_reginfo),
                        typeof(&(mpidr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_cp_reginfo),
                        typeof(&(mpidr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))),
          mpidr_user_cp_reginfo,
          ((sizeof(mpidr_user_cp_reginfo) /
            sizeof((mpidr_user_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_user_cp_reginfo),
                        typeof(&(mpidr_user_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_user_cp_reginfo),
                        typeof(&(mpidr_user_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);

    do {
      _Static_assert(
          !(((sizeof(mpidr_cp_reginfo) / sizeof((mpidr_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(mpidr_cp_reginfo),
                          typeof(&(mpidr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(mpidr_cp_reginfo),
                          typeof(&(mpidr_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(mpidr_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, mpidr_cp_reginfo,
# 8781 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8781 "../../../target/arm/helper.c"
              ,
          ((sizeof(mpidr_cp_reginfo) / sizeof((mpidr_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_cp_reginfo),
                        typeof(&(mpidr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(mpidr_cp_reginfo),
                        typeof(&(mpidr_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (arm_feature(env, ARM_FEATURE_AUXCR)) {
    ARMCPRegInfo auxcr_reginfo[] = {
        {.name = "ACTLR_EL1",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 0,
         .crn = 1,
         .crm = 0,
         .opc2 = 1,
         .access = PL1_RW,
         .accessfn = access_tacr,
         .nv2_redirect_offset = 0x118,
         .type = ARM_CP_CONST,
         .resetvalue = cpu->reset_auxcr},
        {.name = "ACTLR_EL2",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .opc1 = 4,
         .crn = 1,
         .crm = 0,
         .opc2 = 1,
         .access = PL2_RW,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
        {.name = "ACTLR_EL3",
         .state = ARM_CP_STATE_AA64,
         .opc0 = 3,
         .opc1 = 6,
         .crn = 1,
         .crm = 0,
         .opc2 = 1,
         .access = PL3_RW,
         .type = ARM_CP_CONST,
         .resetvalue = 0},
    };
    do {
      _Static_assert(
          !(((sizeof(auxcr_reginfo) / sizeof((auxcr_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(auxcr_reginfo), typeof(&(auxcr_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(auxcr_reginfo), typeof(&(auxcr_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(auxcr_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, auxcr_reginfo,
# 8800 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8800 "../../../target/arm/helper.c"
              ,
          ((sizeof(auxcr_reginfo) / sizeof((auxcr_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(auxcr_reginfo), typeof(&(auxcr_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(auxcr_reginfo), typeof(&(auxcr_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa32_ac2(&cpu_->isar);
        })) {
      do {
        _Static_assert(!(((sizeof(actlr2_hactlr2_reginfo) /
                           sizeof((actlr2_hactlr2_reginfo)[0])) +
                          (sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(actlr2_hactlr2_reginfo),
                                       typeof(&(actlr2_hactlr2_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }) -
                           sizeof(struct {
                             int : (!(!__builtin_types_compatible_p(
                                       typeof(actlr2_hactlr2_reginfo),
                                       typeof(&(actlr2_hactlr2_reginfo)[0]))))
                                   ? -1
                                   : 1;
                           }))) == 0),
                       "not expecting: "
                       "ARRAY_SIZE(actlr2_hactlr2_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, actlr2_hactlr2_reginfo,
# 8802 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8802 "../../../target/arm/helper.c"
                ,
            ((sizeof(actlr2_hactlr2_reginfo) /
              sizeof((actlr2_hactlr2_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(actlr2_hactlr2_reginfo),
                          typeof(&(actlr2_hactlr2_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(actlr2_hactlr2_reginfo),
                          typeof(&(actlr2_hactlr2_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    }
  }

  if (arm_feature(env, ARM_FEATURE_CBAR)) {
# 8820 "../../../target/arm/helper.c"
    if (arm_feature(env, ARM_FEATURE_V8)) {

      uint32_t cbar32 = (extract64(cpu->reset_cbar, 18, 14) << 18) |
                        extract64(cpu->reset_cbar, 32, 12);
      ARMCPRegInfo cbar_reginfo[] = {
          {.name = "CBAR",
           .type = ARM_CP_CONST,
           .cp = 15,
           .crn = 15,
           .crm = 3,
           .opc1 = 1,
           .opc2 = 0,
           .access = PL1_R,
           .resetvalue = cbar32},
          {.name = "CBAR_EL1",
           .state = ARM_CP_STATE_AA64,
           .type = ARM_CP_CONST,
           .opc0 = 3,
           .opc1 = 1,
           .crn = 15,
           .crm = 3,
           .opc2 = 0,
           .access = PL1_R,
           .resetvalue = cpu->reset_cbar},
      };

# 8835 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 8835 "../../../target/arm/helper.c"
                        arm_feature(env, ARM_FEATURE_CBAR_RO)
# 8835 "../../../target/arm/helper.c" 3 4
                            )
                        ? 1
                        : 0),
       __extension__({
         if (
# 8835 "../../../target/arm/helper.c"
             arm_feature(env, ARM_FEATURE_CBAR_RO)
# 8835 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 8835 "../../../target/arm/helper.c"
               "arm_feature(env, ARM_FEATURE_CBAR_RO)"
# 8835 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 8835,
               __extension__ __PRETTY_FUNCTION__);
       }))
# 8835 "../../../target/arm/helper.c"
          ;
      do {
        _Static_assert(
            !(((sizeof(cbar_reginfo) / sizeof((cbar_reginfo)[0])) +
               (sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(cbar_reginfo), typeof(&(cbar_reginfo)[0]))))
                        ? -1
                        : 1;
                }) -
                sizeof(struct {
                  int : (!(!__builtin_types_compatible_p(
                            typeof(cbar_reginfo), typeof(&(cbar_reginfo)[0]))))
                        ? -1
                        : 1;
                }))) == 0),
            "not expecting: "
            "ARRAY_SIZE(cbar_reginfo) == 0");
        define_arm_cp_regs_with_opaque_len(
            cpu, cbar_reginfo,
# 8836 "../../../target/arm/helper.c" 3 4
            ((void *)0)
# 8836 "../../../target/arm/helper.c"
                ,
            ((sizeof(cbar_reginfo) / sizeof((cbar_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cbar_reginfo), typeof(&(cbar_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(cbar_reginfo), typeof(&(cbar_reginfo)[0]))))
                      ? -1
                      : 1;
              }))));
      } while (0);
    } else {
      ARMCPRegInfo cbar = {.name = "CBAR",
                           .cp = 15,
                           .crn = 15,
                           .crm = 0,
                           .opc1 = 4,
                           .opc2 = 0,
                           .access = PL1_R | PL3_W,
                           .resetvalue = cpu->reset_cbar,
                           .fieldoffset =
# 8842 "../../../target/arm/helper.c" 3 4
                               __builtin_offsetof(
# 8842 "../../../target/arm/helper.c"
                                   CPUARMState
# 8842 "../../../target/arm/helper.c" 3 4
                                   ,
# 8842 "../../../target/arm/helper.c"
                                   cp15.c15_config_base_address
# 8842 "../../../target/arm/helper.c" 3 4
                                   )

# 8844 "../../../target/arm/helper.c"
      };
      if (arm_feature(env, ARM_FEATURE_CBAR_RO)) {
        cbar.access = PL1_R;
        cbar.fieldoffset = 0;
        cbar.type = ARM_CP_CONST;
      }
      define_one_arm_cp_reg(cpu, &cbar);
    }
  }

  if (arm_feature(env, ARM_FEATURE_VBAR)) {
    static const ARMCPRegInfo vbar_cp_reginfo[] = {
        {.name = "VBAR",
         .state = ARM_CP_STATE_BOTH,
         .opc0 = 3,
         .crn = 12,
         .crm = 0,
         .opc1 = 0,
         .opc2 = 0,
         .access = PL1_RW,
         .writefn = vbar_write,
         .accessfn = access_nv1,
         .fgt = FGT_VBAR_EL1,
         .nv2_redirect_offset = 0x250 | 0x4000,
         .bank_fieldoffsets =
             {
# 8862 "../../../target/arm/helper.c" 3 4
                 __builtin_offsetof(
# 8862 "../../../target/arm/helper.c"
                     CPUARMState
# 8862 "../../../target/arm/helper.c" 3 4
                     ,
# 8862 "../../../target/arm/helper.c"
                     cp15.vbar_s
# 8862 "../../../target/arm/helper.c" 3 4
                     )
# 8862 "../../../target/arm/helper.c"
                     ,

# 8863 "../../../target/arm/helper.c" 3 4
                 __builtin_offsetof(
# 8863 "../../../target/arm/helper.c"
                     CPUARMState
# 8863 "../../../target/arm/helper.c" 3 4
                     ,
# 8863 "../../../target/arm/helper.c"
                     cp15.vbar_ns
# 8863 "../../../target/arm/helper.c" 3 4
                     )
# 8863 "../../../target/arm/helper.c"
             },
         .resetvalue = 0},
    };
    do {
      _Static_assert(
          !(((sizeof(vbar_cp_reginfo) / sizeof((vbar_cp_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vbar_cp_reginfo),
                          typeof(&(vbar_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vbar_cp_reginfo),
                          typeof(&(vbar_cp_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(vbar_cp_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vbar_cp_reginfo,
# 8866 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8866 "../../../target/arm/helper.c"
              ,
          ((sizeof(vbar_cp_reginfo) / sizeof((vbar_cp_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vbar_cp_reginfo),
                        typeof(&(vbar_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vbar_cp_reginfo),
                        typeof(&(vbar_cp_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  {
    ARMCPRegInfo sctlr = {
        .name = "SCTLR",
        .state = ARM_CP_STATE_BOTH,
        .opc0 = 3,
        .opc1 = 0,
        .crn = 1,
        .crm = 0,
        .opc2 = 0,
        .access = PL1_RW,
        .accessfn = access_tvm_trvm,
        .fgt = FGT_SCTLR_EL1,
        .nv2_redirect_offset = 0x110 | 0x4000,
        .bank_fieldoffsets =
            {
# 8877 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 8877 "../../../target/arm/helper.c"
                    CPUARMState
# 8877 "../../../target/arm/helper.c" 3 4
                    ,
# 8877 "../../../target/arm/helper.c"
                    cp15.sctlr_s
# 8877 "../../../target/arm/helper.c" 3 4
                    )
# 8877 "../../../target/arm/helper.c"
                    ,

# 8878 "../../../target/arm/helper.c" 3 4
                __builtin_offsetof(
# 8878 "../../../target/arm/helper.c"
                    CPUARMState
# 8878 "../../../target/arm/helper.c" 3 4
                    ,
# 8878 "../../../target/arm/helper.c"
                    cp15.sctlr_ns
# 8878 "../../../target/arm/helper.c" 3 4
                    )
# 8878 "../../../target/arm/helper.c"
            },
        .writefn = sctlr_write,
        .resetvalue = cpu->reset_sctlr,
        .raw_writefn = raw_write,
    };
    if (arm_feature(env, ARM_FEATURE_XSCALE)) {

      sctlr.type |= ARM_CP_SUPPRESS_TB_END;
    }
    define_one_arm_cp_reg(cpu, &sctlr);

    if (arm_feature(env, ARM_FEATURE_PMSA) &&
        arm_feature(env, ARM_FEATURE_V8)) {
      ARMCPRegInfo vsctlr = {
          .name = "VSCTLR",
          .state = ARM_CP_STATE_AA32,
          .cp = 15,
          .opc1 = 4,
          .crn = 2,
          .crm = 0,
          .opc2 = 0,
          .access = PL2_RW,
          .resetvalue = 0x0,
          .fieldoffset =
# 8898 "../../../target/arm/helper.c" 3 4
              __builtin_offsetof(
# 8898 "../../../target/arm/helper.c"
                  CPUARMState
# 8898 "../../../target/arm/helper.c" 3 4
                  ,
# 8898 "../../../target/arm/helper.c"
                  cp15.vsctlr
# 8898 "../../../target/arm/helper.c" 3 4
                  )
# 8898 "../../../target/arm/helper.c"
              ,
      };
      define_one_arm_cp_reg(cpu, &vsctlr);
    }
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_lor(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(lor_reginfo) / sizeof((lor_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(lor_reginfo), typeof(&(lor_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(lor_reginfo), typeof(&(lor_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(lor_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, lor_reginfo,
# 8905 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8905 "../../../target/arm/helper.c"
              ,
          ((sizeof(lor_reginfo) / sizeof((lor_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(lor_reginfo), typeof(&(lor_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(lor_reginfo), typeof(&(lor_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_pan(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &pan_reginfo);
  }
# 8918 "../../../target/arm/helper.c"
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_uao(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &uao_reginfo);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_dit(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &dit_reginfo);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_ssbs(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &ssbs_reginfo);
  }
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_any_ras(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(minimal_ras_reginfo) / sizeof((minimal_ras_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(minimal_ras_reginfo),
                          typeof(&(minimal_ras_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(minimal_ras_reginfo),
                          typeof(&(minimal_ras_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(minimal_ras_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, minimal_ras_reginfo,
# 8929 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8929 "../../../target/arm/helper.c"
              ,
          ((sizeof(minimal_ras_reginfo) / sizeof((minimal_ras_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(minimal_ras_reginfo),
                        typeof(&(minimal_ras_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(minimal_ras_reginfo),
                        typeof(&(minimal_ras_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_vh(&cpu_->isar);
      }) ||
      ({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_debugv8p2(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &contextidr_el2);
  }
  if (arm_feature(env, ARM_FEATURE_EL2) && ({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_vh(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(vhe_reginfo) / sizeof((vhe_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vhe_reginfo), typeof(&(vhe_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(vhe_reginfo), typeof(&(vhe_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(vhe_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, vhe_reginfo,
# 8937 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8937 "../../../target/arm/helper.c"
              ,
          ((sizeof(vhe_reginfo) / sizeof((vhe_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vhe_reginfo), typeof(&(vhe_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(vhe_reginfo), typeof(&(vhe_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_sve(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(zcr_reginfo) / sizeof((zcr_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(zcr_reginfo), typeof(&(zcr_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(zcr_reginfo), typeof(&(zcr_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(zcr_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, zcr_reginfo,
# 8941 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 8941 "../../../target/arm/helper.c"
              ,
          ((sizeof(zcr_reginfo) / sizeof((zcr_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(zcr_reginfo), typeof(&(zcr_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(zcr_reginfo), typeof(&(zcr_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_hcx(&cpu_->isar);
      })) {
    define_one_arm_cp_reg(cpu, &hcrx_el2_reginfo);
  }
# 9011 "../../../target/arm/helper.c"
  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_any_predinv(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(predinv_reginfo) / sizeof((predinv_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(predinv_reginfo),
                          typeof(&(predinv_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(predinv_reginfo),
                          typeof(&(predinv_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(predinv_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, predinv_reginfo,
# 9012 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 9012 "../../../target/arm/helper.c"
              ,
          ((sizeof(predinv_reginfo) / sizeof((predinv_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(predinv_reginfo),
                        typeof(&(predinv_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(predinv_reginfo),
                        typeof(&(predinv_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_any_ccidx(&cpu_->isar);
      })) {
    do {
      _Static_assert(
          !(((sizeof(ccsidr2_reginfo) / sizeof((ccsidr2_reginfo)[0])) +
             (sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(ccsidr2_reginfo),
                          typeof(&(ccsidr2_reginfo)[0]))))
                      ? -1
                      : 1;
              }) -
              sizeof(struct {
                int : (!(!__builtin_types_compatible_p(
                          typeof(ccsidr2_reginfo),
                          typeof(&(ccsidr2_reginfo)[0]))))
                      ? -1
                      : 1;
              }))) == 0),
          "not expecting: "
          "ARRAY_SIZE(ccsidr2_reginfo) == 0");
      define_arm_cp_regs_with_opaque_len(
          cpu, ccsidr2_reginfo,
# 9016 "../../../target/arm/helper.c" 3 4
          ((void *)0)
# 9016 "../../../target/arm/helper.c"
              ,
          ((sizeof(ccsidr2_reginfo) / sizeof((ccsidr2_reginfo)[0])) +
           (sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(ccsidr2_reginfo),
                        typeof(&(ccsidr2_reginfo)[0]))))
                    ? -1
                    : 1;
            }) -
            sizeof(struct {
              int : (!(!__builtin_types_compatible_p(
                        typeof(ccsidr2_reginfo),
                        typeof(&(ccsidr2_reginfo)[0]))))
                    ? -1
                    : 1;
            }))));
    } while (0);
  }
# 9028 "../../../target/arm/helper.c"
}

static void add_cpreg_to_hashtable(ARMCPU *cpu, const ARMCPRegInfo *r,
                                   void *opaque, CPState state,
                                   CPSecureState secstate, int crm, int opc1,
                                   int opc2, const char *name) {
  CPUARMState *env = &cpu->env;
  uint32_t key;
  ARMCPRegInfo *r2;

# 9043 "../../../target/arm/helper.c" 3 4
  _Bool
# 9043 "../../../target/arm/helper.c"
      is64 = r->type & ARM_CP_64BIT;

# 9044 "../../../target/arm/helper.c" 3 4
  _Bool
# 9044 "../../../target/arm/helper.c"
      ns = secstate & ARM_CP_SECSTATE_NS;
  int cp = r->cp;
  size_t name_len;

# 9047 "../../../target/arm/helper.c" 3 4
  _Bool
# 9047 "../../../target/arm/helper.c"
      make_const;

  switch (state) {
  case ARM_CP_STATE_AA32:

    if (cp == 0 && r->state == ARM_CP_STATE_BOTH) {
      cp = 15;
    }
    key = ((ns) << 29 | ((cp) << 16) | ((is64) << 15) | ((r->crn) << 11) |
           ((crm) << 7) | ((opc1) << 3) | (opc2));
    break;
  case ARM_CP_STATE_AA64:

    if (cp == 0 || r->state == ARM_CP_STATE_BOTH) {
      cp = ((0x0013 << 16) >> 16);
    }
    key = ((1 << 28) | ((cp) << 16) | ((r->opc0) << 14) | ((opc1) << 11) |
           ((r->crn) << 7) | ((crm) << 3) | ((opc2) << 0));
    break;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                               9071, ((const char *)(__func__)),
# 9071 "../../../target/arm/helper.c" 3 4
                               ((void *)0)
# 9071 "../../../target/arm/helper.c"
      );
    } while (0);
  }

  if (!(r->type & ARM_CP_OVERRIDE)) {
    const ARMCPRegInfo *oldreg = get_arm_cp_reginfo(cpu->cp_regs, key);
    if (oldreg) {

# 9078 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 9078 "../../../target/arm/helper.c"
                        oldreg->type & ARM_CP_OVERRIDE
# 9078 "../../../target/arm/helper.c" 3 4
                        )
                        ? 1
                        : 0),
       __extension__({
         if (
# 9078 "../../../target/arm/helper.c"
             oldreg->type & ARM_CP_OVERRIDE
# 9078 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 9078 "../../../target/arm/helper.c"
               "oldreg->type & ARM_CP_OVERRIDE"
# 9078 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 9078,
               __extension__ __PRETTY_FUNCTION__);
       }))
# 9078 "../../../target/arm/helper.c"
          ;
    }
  }

  make_const =
# 9087 "../../../target/arm/helper.c" 3 4
      0
# 9087 "../../../target/arm/helper.c"
      ;
  if (arm_feature(env, ARM_FEATURE_EL3)) {

    int min_el = ctz32(r->access) / 2;
    if (min_el == 2 && !arm_feature(env, ARM_FEATURE_EL2)) {
      if (r->type & ARM_CP_EL3_NO_EL2_UNDEF) {
        return;
      }
      make_const = !(r->type & ARM_CP_EL3_NO_EL2_KEEP);
    }
  } else {
    CPAccessRights max_el =
        (arm_feature(env, ARM_FEATURE_EL2) ? PL2_RW : PL1_RW);
    if ((r->access & max_el) == 0) {
      return;
    }
  }

  name_len = strlen(name) + 1;
  r2 = g_malloc(sizeof(*r2) + name_len);
  *r2 = *r;
  r2->name = memcpy(r2 + 1, name, name_len);

  r2->cp = cp;
  r2->crm = crm;
  r2->opc1 = opc1;
  r2->opc2 = opc2;
  r2->state = state;
  r2->secure = secstate;
  if (opaque) {
    r2->opaque = opaque;
  }

  if (make_const) {

    int old_special = r2->type & ARM_CP_SPECIAL_MASK;

# 9131 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 9131 "../../../target/arm/helper.c"
                      old_special == 0 || old_special == ARM_CP_NOP
# 9131 "../../../target/arm/helper.c" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 9131 "../../../target/arm/helper.c"
           old_special == 0 || old_special == ARM_CP_NOP
# 9131 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 9131 "../../../target/arm/helper.c"
             "old_special == 0 || old_special == ARM_CP_NOP"
# 9131 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 9131,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 9131 "../../../target/arm/helper.c"
        ;

    r2->type = (r2->type & ~ARM_CP_SPECIAL_MASK) | ARM_CP_CONST;

    if (!(r->type & ARM_CP_EL3_NO_EL2_C_NZ)) {
      r2->resetvalue = 0;
    }

    r2->readfn =
# 9151 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9151 "../../../target/arm/helper.c"
        ;
    r2->writefn =
# 9152 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9152 "../../../target/arm/helper.c"
        ;
    r2->raw_readfn =
# 9153 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9153 "../../../target/arm/helper.c"
        ;
    r2->raw_writefn =
# 9154 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9154 "../../../target/arm/helper.c"
        ;
    r2->resetfn =
# 9155 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9155 "../../../target/arm/helper.c"
        ;
    r2->fieldoffset = 0;
    r2->bank_fieldoffsets[0] = 0;
    r2->bank_fieldoffsets[1] = 0;
  } else {

# 9160 "../../../target/arm/helper.c" 3 4
    _Bool
# 9160 "../../../target/arm/helper.c"
        isbanked = r->bank_fieldoffsets[0] && r->bank_fieldoffsets[1];

    if (isbanked) {

      r2->fieldoffset = r->bank_fieldoffsets[ns];
    }
    if (state == ARM_CP_STATE_AA32) {
      if (isbanked) {
# 9183 "../../../target/arm/helper.c"
        if ((r->state == ARM_CP_STATE_BOTH && ns) ||
            (arm_feature(env, ARM_FEATURE_V8) && !ns)) {
          r2->type |= ARM_CP_ALIAS;
        }
      } else if ((secstate != r->secure) && !ns) {

        r2->type |= ARM_CP_ALIAS;
      }

      if ((1234 == 4321) && r->state == ARM_CP_STATE_BOTH && r2->fieldoffset) {
        r2->fieldoffset += sizeof(uint32_t);
      }
    }
  }
# 9209 "../../../target/arm/helper.c"
  if (r2->type & ARM_CP_SPECIAL_MASK) {
    r2->type |= ARM_CP_NO_RAW;
  }
  if (((r->crm == 0xff) && crm != 0) || ((r->opc1 == 0xff) && opc1 != 0) ||
      ((r->opc2 == 0xff) && opc2 != 0)) {
    r2->type |= ARM_CP_ALIAS | ARM_CP_NO_GDB;
  }

  if (!(r2->type & ARM_CP_NO_RAW)) {

# 9224 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 9224 "../../../target/arm/helper.c"
                      !raw_accessors_invalid(r2)
# 9224 "../../../target/arm/helper.c" 3 4
                          )
                      ? 1
                      : 0),
     __extension__({
       if (
# 9224 "../../../target/arm/helper.c"
           !raw_accessors_invalid(r2)
# 9224 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 9224 "../../../target/arm/helper.c"
             "!raw_accessors_invalid(r2)"
# 9224 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 9224,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 9224 "../../../target/arm/helper.c"
        ;
  }

  g_hash_table_insert(cpu->cp_regs, (gpointer)(uintptr_t)key, r2);
}

void define_one_arm_cp_reg_with_opaque(ARMCPU *cpu, const ARMCPRegInfo *r,
                                       void *opaque) {
# 9258 "../../../target/arm/helper.c"
  int crm, opc1, opc2;
  int crmmin = (r->crm == 0xff) ? 0 : r->crm;
  int crmmax = (r->crm == 0xff) ? 15 : r->crm;
  int opc1min = (r->opc1 == 0xff) ? 0 : r->opc1;
  int opc1max = (r->opc1 == 0xff) ? 7 : r->opc1;
  int opc2min = (r->opc2 == 0xff) ? 0 : r->opc2;
  int opc2max = (r->opc2 == 0xff) ? 7 : r->opc2;
  CPState state;

# 9268 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 9268 "../../../target/arm/helper.c"
                    !((r->type & ARM_CP_64BIT) && (r->opc2 || r->crn))
# 9268 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 9268 "../../../target/arm/helper.c"
         !((r->type & ARM_CP_64BIT) && (r->opc2 || r->crn))
# 9268 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 9268 "../../../target/arm/helper.c"
           "!((r->type & ARM_CP_64BIT) && (r->opc2 || r->crn))"
# 9268 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 9268,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 9268 "../../../target/arm/helper.c"
      ;

# 9270 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 9270 "../../../target/arm/helper.c"
                    (r->state != ARM_CP_STATE_AA32) || (r->opc0 == 0)
# 9270 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 9270 "../../../target/arm/helper.c"
         (r->state != ARM_CP_STATE_AA32) || (r->opc0 == 0)
# 9270 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 9270 "../../../target/arm/helper.c"
           "(r->state != ARM_CP_STATE_AA32) || (r->opc0 == 0)"
# 9270 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 9270,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 9270 "../../../target/arm/helper.c"
      ;

# 9272 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 9272 "../../../target/arm/helper.c"
                    (r->state != ARM_CP_STATE_AA64) || !(r->type & ARM_CP_64BIT)
# 9272 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 9272 "../../../target/arm/helper.c"
         (r->state != ARM_CP_STATE_AA64) || !(r->type & ARM_CP_64BIT)
# 9272 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 9272 "../../../target/arm/helper.c"
           "(r->state != ARM_CP_STATE_AA64) || !(r->type & ARM_CP_64BIT)"
# 9272 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 9272,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 9272 "../../../target/arm/helper.c"
      ;
# 9281 "../../../target/arm/helper.c"
  switch (r->state) {
  case ARM_CP_STATE_BOTH:

    if (r->cp == 0) {
      break;
    }

  case ARM_CP_STATE_AA32:
    if (arm_feature(&cpu->env, ARM_FEATURE_V8) &&
        !arm_feature(&cpu->env, ARM_FEATURE_M)) {

# 9291 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 9291 "../../../target/arm/helper.c"
                        r->cp >= 14 && r->cp <= 15
# 9291 "../../../target/arm/helper.c" 3 4
                        )
                        ? 1
                        : 0),
       __extension__({
         if (
# 9291 "../../../target/arm/helper.c"
             r->cp >= 14 && r->cp <= 15
# 9291 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 9291 "../../../target/arm/helper.c"
               "r->cp >= 14 && r->cp <= 15"
# 9291 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 9291,
               __extension__ __PRETTY_FUNCTION__);
       }))
# 9291 "../../../target/arm/helper.c"
          ;
    } else {

# 9293 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 9293 "../../../target/arm/helper.c"
                        r->cp < 8 || (r->cp >= 14 && r->cp <= 15)
# 9293 "../../../target/arm/helper.c" 3 4
                            )
                        ? 1
                        : 0),
       __extension__({
         if (
# 9293 "../../../target/arm/helper.c"
             r->cp < 8 || (r->cp >= 14 && r->cp <= 15)
# 9293 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 9293 "../../../target/arm/helper.c"
               "r->cp < 8 || (r->cp >= 14 && r->cp <= 15)"
# 9293 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 9293,
               __extension__ __PRETTY_FUNCTION__);
       }))
# 9293 "../../../target/arm/helper.c"
          ;
    }
    break;
  case ARM_CP_STATE_AA64:

# 9297 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 9297 "../../../target/arm/helper.c"
                      r->cp == 0 || r->cp == ((0x0013 << 16) >> 16)
# 9297 "../../../target/arm/helper.c" 3 4
                          )
                      ? 1
                      : 0),
     __extension__({
       if (
# 9297 "../../../target/arm/helper.c"
           r->cp == 0 || r->cp == ((0x0013 << 16) >> 16)
# 9297 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 9297 "../../../target/arm/helper.c"
             "r->cp == 0 || r->cp == CP_REG_ARM64_SYSREG_CP"
# 9297 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 9297,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 9297 "../../../target/arm/helper.c"
        ;
    break;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                               9300, ((const char *)(__func__)),
# 9300 "../../../target/arm/helper.c" 3 4
                               ((void *)0)
# 9300 "../../../target/arm/helper.c"
      );
    } while (0);
  }

  if (r->state != ARM_CP_STATE_AA32) {
    CPAccessRights mask;
    switch (r->opc1) {
    case 0:

      mask = PL0U_R | PL1_RW;
      break;
    case 1:
    case 2:

      mask = PL1_RW;
      break;
    case 3:

      mask = PL0_RW;
      break;
    case 4:
    case 5:

      mask = PL2_RW;
      break;
    case 6:

      mask = PL3_RW;
      break;
    case 7:

      mask = PL1_RW;
      break;
    default:

      do {
        g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                                 9339, ((const char *)(__func__)),
# 9339 "../../../target/arm/helper.c" 3 4
                                 ((void *)0)
# 9339 "../../../target/arm/helper.c"
        );
      } while (0);
    }

# 9342 "../../../target/arm/helper.c" 3 4
    ((void)sizeof((
# 9342 "../../../target/arm/helper.c"
                      (r->access & ~mask) == 0
# 9342 "../../../target/arm/helper.c" 3 4
                      )
                      ? 1
                      : 0),
     __extension__({
       if (
# 9342 "../../../target/arm/helper.c"
           (r->access & ~mask) == 0
# 9342 "../../../target/arm/helper.c" 3 4
       )
         ;
       else
         __assert_fail(
# 9342 "../../../target/arm/helper.c"
             "(r->access & ~mask) == 0"
# 9342 "../../../target/arm/helper.c" 3 4
             ,
             "../../../target/arm/helper.c", 9342,
             __extension__ __PRETTY_FUNCTION__);
     }))
# 9342 "../../../target/arm/helper.c"
        ;
  }

  if (!(r->type & (ARM_CP_SPECIAL_MASK | ARM_CP_CONST))) {
    if (r->access & PL3_R) {

# 9351 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 9351 "../../../target/arm/helper.c"
                        (r->fieldoffset || (r->bank_fieldoffsets[0] &&
                                            r->bank_fieldoffsets[1])) ||
                        r->readfn
# 9351 "../../../target/arm/helper.c" 3 4
                        )
                        ? 1
                        : 0),
       __extension__({
         if (
# 9351 "../../../target/arm/helper.c"
             (r->fieldoffset ||
              (r->bank_fieldoffsets[0] && r->bank_fieldoffsets[1])) ||
             r->readfn
# 9351 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 9351 "../../../target/arm/helper.c"
               "(r->fieldoffset || (r->bank_fieldoffsets[0] && "
               "r->bank_fieldoffsets[1])) || r->readfn"
# 9351 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 9351,
               __extension__ __PRETTY_FUNCTION__);
       }))

# 9353 "../../../target/arm/helper.c"
          ;
    }
    if (r->access & PL3_W) {

# 9356 "../../../target/arm/helper.c" 3 4
      ((void)sizeof((
# 9356 "../../../target/arm/helper.c"
                        (r->fieldoffset || (r->bank_fieldoffsets[0] &&
                                            r->bank_fieldoffsets[1])) ||
                        r->writefn
# 9356 "../../../target/arm/helper.c" 3 4
                        )
                        ? 1
                        : 0),
       __extension__({
         if (
# 9356 "../../../target/arm/helper.c"
             (r->fieldoffset ||
              (r->bank_fieldoffsets[0] && r->bank_fieldoffsets[1])) ||
             r->writefn
# 9356 "../../../target/arm/helper.c" 3 4
         )
           ;
         else
           __assert_fail(
# 9356 "../../../target/arm/helper.c"
               "(r->fieldoffset || (r->bank_fieldoffsets[0] && "
               "r->bank_fieldoffsets[1])) || r->writefn"
# 9356 "../../../target/arm/helper.c" 3 4
               ,
               "../../../target/arm/helper.c", 9356,
               __extension__ __PRETTY_FUNCTION__);
       }))

# 9358 "../../../target/arm/helper.c"
          ;
    }
  }

  for (crm = crmmin; crm <= crmmax; crm++) {
    for (opc1 = opc1min; opc1 <= opc1max; opc1++) {
      for (opc2 = opc2min; opc2 <= opc2max; opc2++) {
        for (state = ARM_CP_STATE_AA32; state <= ARM_CP_STATE_AA64; state++) {
          if (r->state != state && r->state != ARM_CP_STATE_BOTH) {
            continue;
          }
          if ((r->type & ARM_CP_ADD_TLBI_NXS) && ({
                ARMCPU *cpu_ = (cpu);
                isar_feature_aa64_xs(&cpu_->isar);
              })) {
# 9382 "../../../target/arm/helper.c"
            ARMCPRegInfo nxs_ri = *r;
            __attribute__((
                cleanup(g_autoptr_cleanup_generic_gfree))) char *name =
                g_strdup_printf("%sNXS", r->name);

# 9385 "../../../target/arm/helper.c" 3 4
            ((void)sizeof((
# 9385 "../../../target/arm/helper.c"
                              state == ARM_CP_STATE_AA64
# 9385 "../../../target/arm/helper.c" 3 4
                              )
                              ? 1
                              : 0),
             __extension__({
               if (
# 9385 "../../../target/arm/helper.c"
                   state == ARM_CP_STATE_AA64
# 9385 "../../../target/arm/helper.c" 3 4
               )
                 ;
               else
                 __assert_fail(
# 9385 "../../../target/arm/helper.c"
                     "state == ARM_CP_STATE_AA64"
# 9385 "../../../target/arm/helper.c" 3 4
                     ,
                     "../../../target/arm/helper.c", 9385,
                     __extension__ __PRETTY_FUNCTION__);
             }))
# 9385 "../../../target/arm/helper.c"
                ;

# 9386 "../../../target/arm/helper.c" 3 4
            ((void)sizeof((
# 9386 "../../../target/arm/helper.c"
                              nxs_ri.crn < 0xf
# 9386 "../../../target/arm/helper.c" 3 4
                              )
                              ? 1
                              : 0),
             __extension__({
               if (
# 9386 "../../../target/arm/helper.c"
                   nxs_ri.crn < 0xf
# 9386 "../../../target/arm/helper.c" 3 4
               )
                 ;
               else
                 __assert_fail(
# 9386 "../../../target/arm/helper.c"
                     "nxs_ri.crn < 0xf"
# 9386 "../../../target/arm/helper.c" 3 4
                     ,
                     "../../../target/arm/helper.c", 9386,
                     __extension__ __PRETTY_FUNCTION__);
             }))
# 9386 "../../../target/arm/helper.c"
                ;
            nxs_ri.crn++;
            if (nxs_ri.fgt) {
              nxs_ri.fgt |= R_FGT_NXS_MASK;
            }
            add_cpreg_to_hashtable(cpu, &nxs_ri, opaque, state,
                                   ARM_CP_SECSTATE_NS, crm, opc1, opc2, name);
          }
          if (state == ARM_CP_STATE_AA32) {

            char *name;

            switch (r->secure) {
            case ARM_CP_SECSTATE_S:
            case ARM_CP_SECSTATE_NS:
              add_cpreg_to_hashtable(cpu, r, opaque, state, r->secure, crm,
                                     opc1, opc2, r->name);
              break;
            case ARM_CP_SECSTATE_BOTH:
              name = g_strdup_printf("%s_S", r->name);
              add_cpreg_to_hashtable(cpu, r, opaque, state, ARM_CP_SECSTATE_S,
                                     crm, opc1, opc2, name);
              g_free(name);
              add_cpreg_to_hashtable(cpu, r, opaque, state, ARM_CP_SECSTATE_NS,
                                     crm, opc1, opc2, r->name);
              break;
            default:
              do {
                g_assertion_message_expr(((gchar *)0),
                                         "../../../target/arm/helper.c", 9420,
                                         ((const char *)(__func__)),
# 9420 "../../../target/arm/helper.c" 3 4
                                         ((void *)0)
# 9420 "../../../target/arm/helper.c"
                );
              } while (0);
            }
          } else {

            add_cpreg_to_hashtable(cpu, r, opaque, state, ARM_CP_SECSTATE_NS,
                                   crm, opc1, opc2, r->name);
          }
        }
      }
    }
  }
}

void define_arm_cp_regs_with_opaque_len(ARMCPU *cpu, const ARMCPRegInfo *regs,
                                        void *opaque, size_t len) {
  size_t i;
  for (i = 0; i < len; ++i) {
    define_one_arm_cp_reg_with_opaque(cpu, regs + i, opaque);
  }
}
# 9455 "../../../target/arm/helper.c"
void modify_arm_cp_regs_with_len(ARMCPRegInfo *regs, size_t regs_len,
                                 const ARMCPRegUserSpaceInfo *mods,
                                 size_t mods_len) {
  for (size_t mi = 0; mi < mods_len; ++mi) {
    const ARMCPRegUserSpaceInfo *m = mods + mi;
    GPatternSpec *pat =
# 9461 "../../../target/arm/helper.c" 3 4
        ((void *)0)
# 9461 "../../../target/arm/helper.c"
        ;

    if (m->is_glob) {
      pat = g_pattern_spec_new(m->name);
    }
    for (size_t ri = 0; ri < regs_len; ++ri) {
      ARMCPRegInfo *r = regs + ri;

      if (pat && g_pattern_match_string(pat, r->name)) {
        r->type = ARM_CP_CONST;
        r->access = PL0U_R;
        r->resetvalue = 0;

      } else if (strcmp(r->name, m->name) == 0) {
        r->type = ARM_CP_CONST;
        r->access = PL0U_R;
        r->resetvalue &= m->exported_bits;
        r->resetvalue |= m->fixed_bits;
        break;
      }
    }
    if (pat) {
      g_pattern_spec_free(pat);
    }
  }
}

const ARMCPRegInfo *get_arm_cp_reginfo(GHashTable *cpregs,
                                       uint32_t encoded_cp) {
  return g_hash_table_lookup(cpregs, (gpointer)(uintptr_t)encoded_cp);
}

void arm_cp_write_ignore(CPUARMState *env, const ARMCPRegInfo *ri,
                         uint64_t value) {}

uint64_t arm_cp_read_zero(CPUARMState *env, const ARMCPRegInfo *ri) {

  return 0;
}

void arm_cp_reset_ignore(CPUARMState *env, const ARMCPRegInfo *opaque) {}

static int bad_mode_switch(CPUARMState *env, int mode,
                           CPSRWriteType write_type) {

  if (write_type == CPSRWriteByInstr &&
      ((env->uncached_cpsr & (0x1fU)) == ARM_CPU_MODE_HYP ||
       mode == ARM_CPU_MODE_HYP)) {
    return 1;
  }

  switch (mode) {
  case ARM_CPU_MODE_USR:
    return 0;
  case ARM_CPU_MODE_SYS:
  case ARM_CPU_MODE_SVC:
  case ARM_CPU_MODE_ABT:
  case ARM_CPU_MODE_UND:
  case ARM_CPU_MODE_IRQ:
  case ARM_CPU_MODE_FIQ:
# 9542 "../../../target/arm/helper.c"
    if (write_type == CPSRWriteByInstr &&
        (env->uncached_cpsr & (0x1fU)) == ARM_CPU_MODE_MON &&
        (arm_hcr_el2_eff(env) & (1ULL << 27))) {
      return 1;
    }
    return 0;
  case ARM_CPU_MODE_HYP:
    return !arm_is_el2_enabled(env) || arm_current_el(env) < 2;
  case ARM_CPU_MODE_MON:
    return arm_current_el(env) < 3;
  default:
    return 1;
  }
}

uint32_t cpsr_read(CPUARMState *env) {
  int ZF;
  ZF = (env->ZF == 0);
  return env->uncached_cpsr | (env->NF & 0x80000000) | (ZF << 30) |
         (env->CF << 29) | ((env->VF & 0x80000000) >> 3) | (env->QF << 27) |
         (env->thumb << 5) | ((env->condexec_bits & 3) << 25) |
         ((env->condexec_bits & 0xfc) << 8) | (env->GE << 16) |
         (env->daif & ((1U << 8) | (1U << 7) | (1U << 6)));
}

void cpsr_write(CPUARMState *env, uint32_t val, uint32_t mask,
                CPSRWriteType write_type) {
  uint32_t changed_daif;

# 9572 "../../../target/arm/helper.c" 3 4
  _Bool
# 9572 "../../../target/arm/helper.c"
      rebuild_hflags = (write_type != CPSRWriteRaw) &&
                       (mask & ((0x1fU) | (1U << 9) | (1U << 20)));

  if (mask & ((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28))) {
    env->ZF = (~val) & (1U << 30);
    env->NF = val;
    env->CF = (val >> 29) & 1;
    env->VF = (val << 3) & 0x80000000;
  }
  if (mask & (1U << 27)) {
    env->QF = ((val & (1U << 27)) != 0);
  }
  if (mask & (1U << 5)) {
    env->thumb = ((val & (1U << 5)) != 0);
  }
  if (mask & (3U << 25)) {
    env->condexec_bits &= ~3;
    env->condexec_bits |= (val >> 25) & 3;
  }
  if (mask & (0xfc00U)) {
    env->condexec_bits &= 3;
    env->condexec_bits |= (val >> 8) & 0xfc;
  }
  if (mask & (0xfU << 16)) {
    env->GE = (val >> 16) & 0xf;
  }
# 9608 "../../../target/arm/helper.c"
  if (write_type != CPSRWriteRaw && !arm_feature(env, ARM_FEATURE_V8) &&
      arm_feature(env, ARM_FEATURE_EL3) && !arm_feature(env, ARM_FEATURE_EL2) &&
      !arm_is_secure(env)) {

    changed_daif = (env->daif ^ val) & mask;

    if (changed_daif & (1U << 8)) {

      if (!(env->cp15.scr_el3 & (1ULL << 5))) {
        do {
          if (__builtin_expect(!!(qemu_loglevel_mask((1 << 11))), 0)) {
            qemu_log("Ignoring attempt to switch CPSR_A flag from "
                     "non-secure world with SCR.AW bit clear\n");
          }
        } while (0)

            ;
        mask &= ~(1U << 8);
      }
    }

    if (changed_daif & (1U << 6)) {

      if (!(env->cp15.scr_el3 & (1ULL << 4))) {
        do {
          if (__builtin_expect(!!(qemu_loglevel_mask((1 << 11))), 0)) {
            qemu_log("Ignoring attempt to switch CPSR_F flag from "
                     "non-secure world with SCR.FW bit clear\n");
          }
        } while (0)

            ;
        mask &= ~(1U << 6);
      }

      if (((((arm_is_secure(env) && !arm_el_is_aa64((env), 3)))
                ? ((env))->cp15.sctlr_s
                : ((env))->cp15.sctlr_ns) &
           (1U << 27)) &&
          (val & (1U << 6))) {
        do {
          if (__builtin_expect(!!(qemu_loglevel_mask((1 << 11))), 0)) {
            qemu_log("Ignoring attempt to enable CPSR_F flag "
                     "(non-maskable FIQ [NMFI] support enabled)\n");
          }
        } while (0)

            ;
        mask &= ~(1U << 6);
      }
    }
  }

  env->daif &= ~(((1U << 8) | (1U << 7) | (1U << 6)) & mask);
  env->daif |= val & ((1U << 8) | (1U << 7) | (1U << 6)) & mask;

  if (write_type != CPSRWriteRaw &&
      ((env->uncached_cpsr ^ val) & mask & (0x1fU))) {
    if ((env->uncached_cpsr & (0x1fU)) == ARM_CPU_MODE_USR) {

      mask &= ~(0x1fU);
    } else if (bad_mode_switch(env, val & (0x1fU), write_type)) {
# 9679 "../../../target/arm/helper.c"
      mask &= ~(0x1fU);
      if (write_type != CPSRWriteByGDBStub &&
          arm_feature(env, ARM_FEATURE_V8)) {
        mask |= (1U << 20);
        val |= (1U << 20);
      }
      do {
        if (__builtin_expect(!!(qemu_loglevel_mask((1 << 11))), 0)) {
          qemu_log("Illegal AArch32 mode switch attempt from %s to %s\n",
                   aarch32_mode_name(env->uncached_cpsr),
                   aarch32_mode_name(val));
        }
      } while (0)

          ;
    } else {
      do {
        if (__builtin_expect(!!(qemu_loglevel_mask((1 << 4))), 0)) {
          qemu_log("%s %s to %s PC 0x%"
# 9690 "../../../target/arm/helper.c" 3 4
                   "x"
# 9690 "../../../target/arm/helper.c"
                   "\n",
                   write_type == CPSRWriteExceptionReturn
                       ? "Exception return from AArch32"
                       : "AArch32 mode switch from",
                   aarch32_mode_name(env->uncached_cpsr),
                   aarch32_mode_name(val), env->regs[15]);
        }
      } while (0)

          ;
      switch_mode(env, val & (0x1fU));
    }
  }
  mask &= ~((1U << 5) | ((1U << 8) | (1U << 7) | (1U << 6)) | (0xfU << 16) |
            ((3U << 25) | (0xfc00U)) | (1U << 27) |
            ((1U << 31) | (1U << 30) | (1U << 29) | (1U << 28)));
  env->uncached_cpsr = (env->uncached_cpsr & ~mask) | (val & mask);
  if ((tcg_allowed) && rebuild_hflags) {
    arm_rebuild_hflags(env);
  }
}

static void switch_mode(CPUARMState *env, int mode) {
  ARMCPU *cpu = env_archcpu(env);

  if (mode != ARM_CPU_MODE_USR) {
    cpu_abort(((CPUState *)(cpu)), "Tried to switch out of user mode\n");
  }
}

uint32_t arm_phys_excp_target_el(CPUState *cs, uint32_t excp_idx,
                                 uint32_t cur_el,
# 9718 "../../../target/arm/helper.c" 3 4
                                 _Bool
# 9718 "../../../target/arm/helper.c"
                                     secure) {
  return 1;
}

void aarch64_sync_64_to_32(CPUARMState *env) {
  do {
    g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c", 9725,
                             ((const char *)(__func__)),
# 9725 "../../../target/arm/helper.c" 3 4
                             ((void *)0)
# 9725 "../../../target/arm/helper.c"
    );
  } while (0);
}
# 10938 "../../../target/arm/helper.c"
uint64_t arm_sctlr(CPUARMState *env, int el) {

  if (el == 0) {
    ARMMMUIdx mmu_idx = arm_mmu_idx_el(env, 0);
    switch (mmu_idx) {
    case ARMMMUIdx_E20_0:
      el = 2;
      break;
    case ARMMMUIdx_E30_0:
      el = 3;
      break;
    default:
      el = 1;
      break;
    }
  }
  return env->cp15.sctlr_el[el];
}

int aa64_va_parameter_tbi(uint64_t tcr, ARMMMUIdx mmu_idx) {
  if (regime_has_2_ranges(mmu_idx)) {
    return extract64(tcr, 37, 2);
  } else if (regime_is_stage2(mmu_idx)) {
    return 0;
  } else {

    return extract32(tcr, 20, 1) * 3;
  }
}

int aa64_va_parameter_tbid(uint64_t tcr, ARMMMUIdx mmu_idx) {
  if (regime_has_2_ranges(mmu_idx)) {
    return extract64(tcr, 51, 2);
  } else if (regime_is_stage2(mmu_idx)) {
    return 0;
  } else {

    return extract32(tcr, 29, 1) * 3;
  }
}

int aa64_va_parameter_tcma(uint64_t tcr, ARMMMUIdx mmu_idx) {
  if (regime_has_2_ranges(mmu_idx)) {
    return extract64(tcr, 57, 2);
  } else {

    return extract32(tcr, 30, 1) * 3;
  }
}

static ARMGranuleSize tg0_to_gran_size(int tg) {
  switch (tg) {
  case 0:
    return Gran4K;
  case 1:
    return Gran64K;
  case 2:
    return Gran16K;
  default:
    return GranInvalid;
  }
}

static ARMGranuleSize tg1_to_gran_size(int tg) {
  switch (tg) {
  case 1:
    return Gran16K;
  case 2:
    return Gran4K;
  case 3:
    return Gran64K;
  default:
    return GranInvalid;
  }
}

static inline
# 11020 "../../../target/arm/helper.c" 3 4
    _Bool
# 11020 "../../../target/arm/helper.c"
    have4k(ARMCPU *cpu,
# 11020 "../../../target/arm/helper.c" 3 4
           _Bool
# 11020 "../../../target/arm/helper.c"
               stage2) {
  return stage2 ? ({
    ARMCPU *cpu_ = (cpu);
    isar_feature_aa64_tgran4_2(&cpu_->isar);
  })
                : ({
                    ARMCPU *cpu_ = (cpu);
                    isar_feature_aa64_tgran4(&cpu_->isar);
                  });
}

static inline
# 11026 "../../../target/arm/helper.c" 3 4
    _Bool
# 11026 "../../../target/arm/helper.c"
    have16k(ARMCPU *cpu,
# 11026 "../../../target/arm/helper.c" 3 4
            _Bool
# 11026 "../../../target/arm/helper.c"
                stage2) {
  return stage2 ? ({
    ARMCPU *cpu_ = (cpu);
    isar_feature_aa64_tgran16_2(&cpu_->isar);
  })
                : ({
                    ARMCPU *cpu_ = (cpu);
                    isar_feature_aa64_tgran16(&cpu_->isar);
                  });
}

static inline
# 11032 "../../../target/arm/helper.c" 3 4
    _Bool
# 11032 "../../../target/arm/helper.c"
    have64k(ARMCPU *cpu,
# 11032 "../../../target/arm/helper.c" 3 4
            _Bool
# 11032 "../../../target/arm/helper.c"
                stage2) {
  return stage2 ? ({
    ARMCPU *cpu_ = (cpu);
    isar_feature_aa64_tgran64_2(&cpu_->isar);
  })
                : ({
                    ARMCPU *cpu_ = (cpu);
                    isar_feature_aa64_tgran64(&cpu_->isar);
                  });
}

static ARMGranuleSize sanitize_gran_size(ARMCPU *cpu, ARMGranuleSize gran,

# 11039 "../../../target/arm/helper.c" 3 4
                                         _Bool
# 11039 "../../../target/arm/helper.c"
                                             stage2) {
  switch (gran) {
  case Gran4K:
    if (have4k(cpu, stage2)) {
      return gran;
    }
    break;
  case Gran16K:
    if (have16k(cpu, stage2)) {
      return gran;
    }
    break;
  case Gran64K:
    if (have64k(cpu, stage2)) {
      return gran;
    }
    break;
  case GranInvalid:
    break;
  }

  if (have4k(cpu, stage2)) {
    return Gran4K;
  }
  if (have16k(cpu, stage2)) {
    return Gran16K;
  }

# 11072 "../../../target/arm/helper.c" 3 4
  ((void)sizeof((
# 11072 "../../../target/arm/helper.c"
                    have64k(cpu, stage2)
# 11072 "../../../target/arm/helper.c" 3 4
                        )
                    ? 1
                    : 0),
   __extension__({
     if (
# 11072 "../../../target/arm/helper.c"
         have64k(cpu, stage2)
# 11072 "../../../target/arm/helper.c" 3 4
     )
       ;
     else
       __assert_fail(
# 11072 "../../../target/arm/helper.c"
           "have64k(cpu, stage2)"
# 11072 "../../../target/arm/helper.c" 3 4
           ,
           "../../../target/arm/helper.c", 11072,
           __extension__ __PRETTY_FUNCTION__);
   }))
# 11072 "../../../target/arm/helper.c"
      ;
  return Gran64K;
}

ARMVAParameters aa64_va_parameters(CPUARMState *env, uint64_t va,
                                   ARMMMUIdx mmu_idx,
# 11077 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 11077 "../../../target/arm/helper.c"
                                       data,

# 11078 "../../../target/arm/helper.c" 3 4
                                   _Bool
# 11078 "../../../target/arm/helper.c"
                                       el1_is_aa32) {
  uint64_t tcr = regime_tcr(env, mmu_idx);

# 11081 "../../../target/arm/helper.c" 3 4
  _Bool
# 11081 "../../../target/arm/helper.c"
      epd,
      hpd, tsz_oob, ds, ha, hd;
  int select, tsz, tbi, max_tsz, min_tsz, ps, sh;
  ARMGranuleSize gran;
  ARMCPU *cpu = env_archcpu(env);

# 11085 "../../../target/arm/helper.c" 3 4
  _Bool
# 11085 "../../../target/arm/helper.c"
      stage2 = regime_is_stage2(mmu_idx);

  if (!regime_has_2_ranges(mmu_idx)) {
    select = 0;
    tsz = extract32(tcr, 0, 6);
    gran = tg0_to_gran_size(extract32(tcr, 14, 2));
    if (stage2) {

      hpd =
# 11093 "../../../target/arm/helper.c" 3 4
          0
# 11093 "../../../target/arm/helper.c"
          ;
    } else {
      hpd = extract32(tcr, 24, 1);
    }
    epd =
# 11097 "../../../target/arm/helper.c" 3 4
        0
# 11097 "../../../target/arm/helper.c"
        ;
    sh = extract32(tcr, 12, 2);
    ps = extract32(tcr, 16, 3);
    ha = extract32(tcr, 21, 1) && ({
           ARMCPU *cpu_ = (cpu);
           isar_feature_aa64_hafs(&cpu_->isar);
         });
    hd = extract32(tcr, 22, 1) && ({
           ARMCPU *cpu_ = (cpu);
           isar_feature_aa64_hdbs(&cpu_->isar);
         });
    ds = extract64(tcr, 32, 1);
  } else {

# 11104 "../../../target/arm/helper.c" 3 4
    _Bool
# 11104 "../../../target/arm/helper.c"
        e0pd;

    select = extract64(va, 55, 1);
    if (!select) {
      tsz = extract32(tcr, 0, 6);
      gran = tg0_to_gran_size(extract32(tcr, 14, 2));
      epd = extract32(tcr, 7, 1);
      sh = extract32(tcr, 12, 2);
      hpd = extract64(tcr, 41, 1);
      e0pd = extract64(tcr, 55, 1);
    } else {
      tsz = extract32(tcr, 16, 6);
      gran = tg1_to_gran_size(extract32(tcr, 30, 2));
      epd = extract32(tcr, 23, 1);
      sh = extract32(tcr, 28, 2);
      hpd = extract64(tcr, 42, 1);
      e0pd = extract64(tcr, 56, 1);
    }
    ps = extract64(tcr, 32, 3);
    ha = extract64(tcr, 39, 1) && ({
           ARMCPU *cpu_ = (cpu);
           isar_feature_aa64_hafs(&cpu_->isar);
         });
    hd = extract64(tcr, 40, 1) && ({
           ARMCPU *cpu_ = (cpu);
           isar_feature_aa64_hdbs(&cpu_->isar);
         });
    ds = extract64(tcr, 59, 1);

    if (e0pd && ({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_e0pd(&cpu_->isar);
        }) &&
        regime_is_user(env, mmu_idx)) {
      epd =
# 11133 "../../../target/arm/helper.c" 3 4
          1
# 11133 "../../../target/arm/helper.c"
          ;
    }
  }

  gran = sanitize_gran_size(cpu, gran, stage2);

  if (({
        ARMCPU *cpu_ = (cpu);
        isar_feature_aa64_st(&cpu_->isar);
      })) {
    max_tsz = 48 - (gran == Gran64K);
  } else {
    max_tsz = 39;
  }

  min_tsz = 16;
  if (gran == Gran64K) {
    if (({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_lva(&cpu_->isar);
        })) {
      min_tsz = 12;
    }
    ds =
# 11154 "../../../target/arm/helper.c" 3 4
        0
# 11154 "../../../target/arm/helper.c"
        ;
  } else if (ds) {
    if (regime_is_stage2(mmu_idx)) {
      if (gran == Gran16K) {
        ds = ({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_tgran16_2_lpa2(&cpu_->isar);
        });
      } else {
        ds = ({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_tgran4_2_lpa2(&cpu_->isar);
        });
      }
    } else {
      if (gran == Gran16K) {
        ds = ({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_tgran16_lpa2(&cpu_->isar);
        });
      } else {
        ds = ({
          ARMCPU *cpu_ = (cpu);
          isar_feature_aa64_tgran4_lpa2(&cpu_->isar);
        });
      }
    }
    if (ds) {
      min_tsz = 12;
    }
  }

  if (stage2 && el1_is_aa32) {

    min_tsz = ({
      typeof(1 ? ((min_tsz)) : ((24))) _a14 = ((min_tsz)), _b15 = ((24));
      _a14 < _b15 ? _a14 : _b15;
    });
  }

  if (tsz > max_tsz) {
    tsz = max_tsz;
    tsz_oob =
# 11186 "../../../target/arm/helper.c" 3 4
        1
# 11186 "../../../target/arm/helper.c"
        ;
  } else if (tsz < min_tsz) {
    tsz = min_tsz;
    tsz_oob =
# 11189 "../../../target/arm/helper.c" 3 4
        1
# 11189 "../../../target/arm/helper.c"
        ;
  } else {
    tsz_oob =
# 11191 "../../../target/arm/helper.c" 3 4
        0
# 11191 "../../../target/arm/helper.c"
        ;
  }

  tbi = aa64_va_parameter_tbi(tcr, mmu_idx);
  if (!data) {
    tbi &= ~aa64_va_parameter_tbid(tcr, mmu_idx);
  }
  tbi = (tbi >> select) & 1;

  return (ARMVAParameters){
      .tsz = tsz,
      .ps = ps,
      .sh = sh,
      .select = select,
      .tbi = tbi,
      .epd = epd,
      .hpd = hpd,
      .tsz_oob = tsz_oob,
      .ds = ds,
      .ha = ha,
      .hd = ha && hd,
      .gran = gran,
  };
}

int fp_exception_el(CPUARMState *env, int cur_el) {
# 11325 "../../../target/arm/helper.c"
  return 0;
}

int arm_mmu_idx_to_el(ARMMMUIdx mmu_idx) {
  if (mmu_idx & 0x40) {
    return mmu_idx & 0x1;
  }

  switch (mmu_idx) {
  case ARMMMUIdx_E10_0:
  case ARMMMUIdx_E20_0:
  case ARMMMUIdx_E30_0:
    return 0;
  case ARMMMUIdx_E10_1:
  case ARMMMUIdx_E10_1_PAN:
    return 1;
  case ARMMMUIdx_E2:
  case ARMMMUIdx_E20_2:
  case ARMMMUIdx_E20_2_PAN:
    return 2;
  case ARMMMUIdx_E3:
  case ARMMMUIdx_E30_3_PAN:
    return 3;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                               11351, ((const char *)(__func__)),
# 11351 "../../../target/arm/helper.c" 3 4
                               ((void *)0)
# 11351 "../../../target/arm/helper.c"
      );
    } while (0);
  }
}
# 11362 "../../../target/arm/helper.c"
ARMMMUIdx arm_mmu_idx_el(CPUARMState *env, int el) {
  ARMMMUIdx idx;
  uint64_t hcr;

  if (arm_feature(env, ARM_FEATURE_M)) {
    return arm_v7m_mmu_idx_for_secstate(env, env->v7m.secure);
  }

  switch (el) {
  case 0:
    hcr = arm_hcr_el2_eff(env);
    if ((hcr & ((1ULL << 34) | (1ULL << 27))) ==
        ((1ULL << 34) | (1ULL << 27))) {
      idx = ARMMMUIdx_E20_0;
    } else if (arm_is_secure_below_el3(env) && !arm_el_is_aa64(env, 3)) {
      idx = ARMMMUIdx_E30_0;
    } else {
      idx = ARMMMUIdx_E10_0;
    }
    break;
  case 1:
    if (arm_pan_enabled(env)) {
      idx = ARMMMUIdx_E10_1_PAN;
    } else {
      idx = ARMMMUIdx_E10_1;
    }
    break;
  case 2:

    if (arm_hcr_el2_eff(env) & (1ULL << 34)) {
      if (arm_pan_enabled(env)) {
        idx = ARMMMUIdx_E20_2_PAN;
      } else {
        idx = ARMMMUIdx_E20_2;
      }
    } else {
      idx = ARMMMUIdx_E2;
    }
    break;
  case 3:
    if (!arm_el_is_aa64(env, 3) && arm_pan_enabled(env)) {
      return ARMMMUIdx_E30_3_PAN;
    }
    return ARMMMUIdx_E3;
  default:
    do {
      g_assertion_message_expr(((gchar *)0), "../../../target/arm/helper.c",
                               11409, ((const char *)(__func__)),
# 11409 "../../../target/arm/helper.c" 3 4
                               ((void *)0)
# 11409 "../../../target/arm/helper.c"
      );
    } while (0);
  }

  return idx;
}

ARMMMUIdx arm_mmu_idx(CPUARMState *env) {
  return arm_mmu_idx_el(env, arm_current_el(env));
}

static
# 11420 "../../../target/arm/helper.c" 3 4
    _Bool
# 11420 "../../../target/arm/helper.c"
    mve_no_pred(CPUARMState *env) {
# 11437 "../../../target/arm/helper.c"
  if (({
        ARMCPU *cpu_ = (env_archcpu(env));
        isar_feature_aa32_mve(&cpu_->isar);
      })) {
    return
# 11438 "../../../target/arm/helper.c" 3 4
        0
# 11438 "../../../target/arm/helper.c"
        ;
  }
  if (env->v7m.vpr) {
    return
# 11441 "../../../target/arm/helper.c" 3 4
        0
# 11441 "../../../target/arm/helper.c"
        ;
  }
  if (env->v7m.ltpsize < 4) {
    return
# 11444 "../../../target/arm/helper.c" 3 4
        0
# 11444 "../../../target/arm/helper.c"
        ;
  }
  return
# 11446 "../../../target/arm/helper.c" 3 4
      1
# 11446 "../../../target/arm/helper.c"
      ;
}

void cpu_get_tb_cpu_state(CPUARMState *env, vaddr *pc, uint64_t *cs_base,
                          uint32_t *pflags) {
  CPUARMTBFlags flags;

  assert_hflags_rebuild_correctly(env);
  flags = env->hflags;

  if (extract32((flags.flags), R_TBFLAG_ANY_AARCH64_STATE_SHIFT,
                R_TBFLAG_ANY_AARCH64_STATE_LENGTH)) {
    *pc = env->pc;
    if (({
          ARMCPU *cpu_ = (env_archcpu(env));
          isar_feature_aa64_bti(&cpu_->isar);
        })) {
      (flags.flags2 = ({
         struct {
           uint64_t v : R_TBFLAG_A64_BTYPE_LENGTH;
         } _v = {.v = env->btype};
         uint64_t _d;
         _d = deposit64((flags.flags2), R_TBFLAG_A64_BTYPE_SHIFT,
                        R_TBFLAG_A64_BTYPE_LENGTH, _v.v);
         _d;
       }));
    }
  } else {
    *pc = env->regs[15];

    if (arm_feature(env, ARM_FEATURE_M)) {
      if (arm_feature(env, ARM_FEATURE_M_SECURITY) &&
          extract32((env->v7m.fpccr[M_REG_S]), R_V7M_FPCCR_S_SHIFT,
                    R_V7M_FPCCR_S_LENGTH) != env->v7m.secure) {
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_M32_FPCCR_S_WRONG_LENGTH;
           } _v = {.v = 1};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_M32_FPCCR_S_WRONG_SHIFT,
                          R_TBFLAG_M32_FPCCR_S_WRONG_LENGTH, _v.v);
           _d;
         }));
      }

      if ((env->v7m.fpccr[env->v7m.secure] & R_V7M_FPCCR_ASPEN_MASK) &&
          (!(env->v7m.control[M_REG_S] & R_V7M_CONTROL_FPCA_MASK) ||
           (env->v7m.secure &&
            !(env->v7m.control[M_REG_S] & R_V7M_CONTROL_SFPA_MASK)))) {

        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_LENGTH;
           } _v = {.v = 1};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_SHIFT,
                          R_TBFLAG_M32_NEW_FP_CTXT_NEEDED_LENGTH, _v.v);
           _d;
         }));
      }

# 11484 "../../../target/arm/helper.c" 3 4
      _Bool
# 11484 "../../../target/arm/helper.c"
          is_secure = env->v7m.fpccr[M_REG_S] & R_V7M_FPCCR_S_MASK;
      if (env->v7m.fpccr[is_secure] & R_V7M_FPCCR_LSPACT_MASK) {
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_M32_LSPACT_LENGTH;
           } _v = {.v = 1};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_M32_LSPACT_SHIFT,
                          R_TBFLAG_M32_LSPACT_LENGTH, _v.v);
           _d;
         }));
      }

      if (mve_no_pred(env)) {
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_M32_MVE_NO_PRED_LENGTH;
           } _v = {.v = 1};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_M32_MVE_NO_PRED_SHIFT,
                          R_TBFLAG_M32_MVE_NO_PRED_LENGTH, _v.v);
           _d;
         }));
      }
    } else {

      if (arm_feature(env, ARM_FEATURE_XSCALE)) {
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_A32_XSCALE_CPAR_LENGTH;
           } _v = {.v = env->cp15.c15_cpar};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_A32_XSCALE_CPAR_SHIFT,
                          R_TBFLAG_A32_XSCALE_CPAR_LENGTH, _v.v);
           _d;
         }));
      } else {
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_A32_VECLEN_LENGTH;
           } _v = {.v = env->vfp.vec_len};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_A32_VECLEN_SHIFT,
                          R_TBFLAG_A32_VECLEN_LENGTH, _v.v);
           _d;
         }));
        (flags.flags2 = ({
           struct {
             unsigned int v : R_TBFLAG_A32_VECSTRIDE_LENGTH;
           } _v = {.v = env->vfp.vec_stride};
           uint32_t _d;
           _d = deposit32((flags.flags2), R_TBFLAG_A32_VECSTRIDE_SHIFT,
                          R_TBFLAG_A32_VECSTRIDE_LENGTH, _v.v);
           _d;
         }));
      }
      if (env->vfp.xregs[8] & (1 << 30)) {
        flags.flags2 = {
          struct {
            unsigned int v : R_TBFLAG_A32_VFPEN_LENGTH;
          } _v = {.v = 1};
          uint32_t _d;
          _d = deposit32((flags.flags2), R_TBFLAG_A32_VFPEN_SHIFT,
                         R_TBFLAG_A32_VFPEN_LENGTH, _v.v);
          _d;
        };
      }
    }

    (flags.flags2 = ({
       struct {
         unsigned int v : R_TBFLAG_AM32_THUMB_LENGTH;
       } _v = {.v = env->thumb};
       uint32_t _d;
       _d = deposit32((flags.flags2), R_TBFLAG_AM32_THUMB_SHIFT,
                      R_TBFLAG_AM32_THUMB_LENGTH, _v.v);
       _d;
     }));
    (flags.flags2 = ({
       struct {
         unsigned int v : R_TBFLAG_AM32_CONDEXEC_LENGTH;
       } _v = {.v = env->condexec_bits};
       uint32_t _d;
       _d = deposit32((flags.flags2), R_TBFLAG_AM32_CONDEXEC_SHIFT,
                      R_TBFLAG_AM32_CONDEXEC_LENGTH, _v.v);
       _d;
     }));
  }
# 11521 "../../../target/arm/helper.c"
  if (extract32((flags.flags), R_TBFLAG_ANY_SS_ACTIVE_SHIFT,
                R_TBFLAG_ANY_SS_ACTIVE_LENGTH) &&
      (env->pstate & (1U << 21))) {
    (flags.flags = ({
       struct {
         unsigned int v : R_TBFLAG_ANY_PSTATE__SS_LENGTH;
       } _v = {.v = 1};
       uint32_t _d;
       _d = deposit32((flags.flags), R_TBFLAG_ANY_PSTATE__SS_SHIFT,
                      R_TBFLAG_ANY_PSTATE__SS_LENGTH, _v.v);
       _d;
     }));
  }

  *pflags = flags.flags;
  *cs_base = flags.flags2;
}
